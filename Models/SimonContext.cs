using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Nupre_API.Models;

public partial class SimonContext : DbContext
{
 
    public SimonContext(DbContextOptions<SimonContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AccidentesColisionesTipoCatum> AccidentesColisionesTipoCata { get; set; }

    public virtual DbSet<AccidentesDiagnosticosCieCatum> AccidentesDiagnosticosCieCata { get; set; }

    public virtual DbSet<AccidentesOrigenesCatum> AccidentesOrigenesCata { get; set; }

    public virtual DbSet<AccidentesPosicionesLesionadosCatum> AccidentesPosicionesLesionadosCata { get; set; }

    public virtual DbSet<AccidentesTransitoArsRecargasTran> AccidentesTransitoArsRecargasTrans { get; set; }

    public virtual DbSet<AccidentesTransitoArsTemporalTran> AccidentesTransitoArsTemporalTrans { get; set; }

    public virtual DbSet<AccidentesTransitoArsTran> AccidentesTransitoArsTrans { get; set; }

    public virtual DbSet<AccidentesVehiculosTipoCatum> AccidentesVehiculosTipoCata { get; set; }

    public virtual DbSet<AcreditacionesAgenteTipoCatum> AcreditacionesAgenteTipoCata { get; set; }

    public virtual DbSet<AcreditacionesCategoriasCatum> AcreditacionesCategoriasCata { get; set; }

    public virtual DbSet<AcreditacionesCategoriasClasesCatum> AcreditacionesCategoriasClasesCata { get; set; }

    public virtual DbSet<AcreditacionesClaseCatum> AcreditacionesClaseCata { get; set; }

    public virtual DbSet<AcreditacionesEntidadesMaster> AcreditacionesEntidadesMasters { get; set; }

    public virtual DbSet<AcreditacionesEntidadesPersonasTran> AcreditacionesEntidadesPersonasTrans { get; set; }

    public virtual DbSet<AcreditacionesEntidadesRequerimientosTran> AcreditacionesEntidadesRequerimientosTrans { get; set; }

    public virtual DbSet<AcreditacionesEstadosCatum> AcreditacionesEstadosCata { get; set; }

    public virtual DbSet<AcreditacionesExamenesDetallesTran> AcreditacionesExamenesDetallesTrans { get; set; }

    public virtual DbSet<AcreditacionesExamenesLogsTran> AcreditacionesExamenesLogsTrans { get; set; }

    public virtual DbSet<AcreditacionesExamenesPeriodosTran> AcreditacionesExamenesPeriodosTrans { get; set; }

    public virtual DbSet<AcreditacionesExamenesRecibosTran> AcreditacionesExamenesRecibosTrans { get; set; }

    public virtual DbSet<AcreditacionesExamenesTran> AcreditacionesExamenesTrans { get; set; }

    public virtual DbSet<AcreditacionesPersonasMaster> AcreditacionesPersonasMasters { get; set; }

    public virtual DbSet<AcreditacionesPersonasMasterVistum> AcreditacionesPersonasMasterVista { get; set; }

    public virtual DbSet<AcreditacionesPersonasPalabrasTran> AcreditacionesPersonasPalabrasTrans { get; set; }

    public virtual DbSet<AcreditacionesPersonasPeriodosTran> AcreditacionesPersonasPeriodosTrans { get; set; }

    public virtual DbSet<AcreditacionesPersonasRequerimientosTran> AcreditacionesPersonasRequerimientosTrans { get; set; }

    public virtual DbSet<AcreditacionesPreguntasCatum> AcreditacionesPreguntasCata { get; set; }

    public virtual DbSet<AcreditacionesProcesoCatum> AcreditacionesProcesoCata { get; set; }

    public virtual DbSet<AcreditacionesPromotoresLotesTran> AcreditacionesPromotoresLotesTrans { get; set; }

    public virtual DbSet<AcreditacionesRequerimientosCatum> AcreditacionesRequerimientosCata { get; set; }

    public virtual DbSet<AcreditacionesSeguridadGruposCatum> AcreditacionesSeguridadGruposCata { get; set; }

    public virtual DbSet<AfiliadosAfiliacionesRespuestasCatum> AfiliadosAfiliacionesRespuestasCata { get; set; }

    public virtual DbSet<AfiliadosAfiliacionesTipoCatum> AfiliadosAfiliacionesTipoCata { get; set; }

    public virtual DbSet<AfiliadosArsVistum> AfiliadosArsVista { get; set; }

    public virtual DbSet<AfiliadosDependientesPlanesVoluntariosRecargasTran> AfiliadosDependientesPlanesVoluntariosRecargasTrans { get; set; }

    public virtual DbSet<AfiliadosDependientesPlanesVoluntariosTemporalTran> AfiliadosDependientesPlanesVoluntariosTemporalTrans { get; set; }

    public virtual DbSet<AfiliadosDependientesPlanesVoluntariosTran> AfiliadosDependientesPlanesVoluntariosTrans { get; set; }

    public virtual DbSet<AfiliadosDocumentosTipoCatum> AfiliadosDocumentosTipoCata { get; set; }

    public virtual DbSet<AfiliadosEstatusCatum> AfiliadosEstatusCata { get; set; }

    public virtual DbSet<AfiliadosModalidadPagoCatum> AfiliadosModalidadPagoCata { get; set; }

    public virtual DbSet<AfiliadosMotivosBajaCatum> AfiliadosMotivosBajaCata { get; set; }

    public virtual DbSet<AfiliadosParentescoCatum> AfiliadosParentescoCata { get; set; }

    public virtual DbSet<AfiliadosPlanesAlternativosVistum> AfiliadosPlanesAlternativosVista { get; set; }

    public virtual DbSet<AfiliadosPlanesComplementariosRecargasTran> AfiliadosPlanesComplementariosRecargasTrans { get; set; }

    public virtual DbSet<AfiliadosPlanesComplementariosTemporalTran> AfiliadosPlanesComplementariosTemporalTrans { get; set; }

    public virtual DbSet<AfiliadosPlanesComplementariosTran> AfiliadosPlanesComplementariosTrans { get; set; }

    public virtual DbSet<AfiliadosSfsMaster> AfiliadosSfsMasters { get; set; }

    public virtual DbSet<AfiliadosTipoCatum> AfiliadosTipoCata { get; set; }

    public virtual DbSet<AfiliadosTitularesPlanesVoluntariosRecargasTran> AfiliadosTitularesPlanesVoluntariosRecargasTrans { get; set; }

    public virtual DbSet<AfiliadosTitularesPlanesVoluntariosTemporalTran> AfiliadosTitularesPlanesVoluntariosTemporalTrans { get; set; }

    public virtual DbSet<AfiliadosTitularesPlanesVoluntariosTran> AfiliadosTitularesPlanesVoluntariosTrans { get; set; }

    public virtual DbSet<AfiliadosVoluntariosEspecialesRecargasTran> AfiliadosVoluntariosEspecialesRecargasTrans { get; set; }

    public virtual DbSet<AfiliadosVoluntariosEspecialesTemporalTran> AfiliadosVoluntariosEspecialesTemporalTrans { get; set; }

    public virtual DbSet<AfiliadosVoluntariosEspecialesTran> AfiliadosVoluntariosEspecialesTrans { get; set; }

    public virtual DbSet<ArlAccidentesEnfermedadesCalificadosRecargasTran> ArlAccidentesEnfermedadesCalificadosRecargasTrans { get; set; }

    public virtual DbSet<ArlAccidentesEnfermedadesCalificadosTemporalTran> ArlAccidentesEnfermedadesCalificadosTemporalTrans { get; set; }

    public virtual DbSet<ArlAccidentesEnfermedadesCalificadosTran> ArlAccidentesEnfermedadesCalificadosTrans { get; set; }

    public virtual DbSet<ArlAccidentesEnfermedadesRecargasTran> ArlAccidentesEnfermedadesRecargasTrans { get; set; }

    public virtual DbSet<ArlAccidentesEnfermedadesTemporalTran> ArlAccidentesEnfermedadesTemporalTrans { get; set; }

    public virtual DbSet<ArlAccidentesEnfermedadesTran> ArlAccidentesEnfermedadesTrans { get; set; }

    public virtual DbSet<ArlCalificacionesEstadosCatum> ArlCalificacionesEstadosCata { get; set; }

    public virtual DbSet<ArlContingenciasTipoCatum> ArlContingenciasTipoCata { get; set; }

    public virtual DbSet<ArlLesionesGradosCatum> ArlLesionesGradosCata { get; set; }

    public virtual DbSet<ArlNotificacionesTipoCatum> ArlNotificacionesTipoCata { get; set; }

    public virtual DbSet<ArlPagosDerivadosPrestacionesRecargasTran> ArlPagosDerivadosPrestacionesRecargasTrans { get; set; }

    public virtual DbSet<ArlPagosDerivadosPrestacionesTemporalTran> ArlPagosDerivadosPrestacionesTemporalTrans { get; set; }

    public virtual DbSet<ArlPagosDerivadosPrestacionesTran> ArlPagosDerivadosPrestacionesTrans { get; set; }

    public virtual DbSet<ArlPagosIndemnizacionesDiscapacidadesRecargasTran> ArlPagosIndemnizacionesDiscapacidadesRecargasTrans { get; set; }

    public virtual DbSet<ArlPagosIndemnizacionesDiscapacidadesTemporalTran> ArlPagosIndemnizacionesDiscapacidadesTemporalTrans { get; set; }

    public virtual DbSet<ArlPagosIndemnizacionesDiscapacidadesTran> ArlPagosIndemnizacionesDiscapacidadesTrans { get; set; }

    public virtual DbSet<ArlPagosPensionesSobrevivenciasRecargasTran> ArlPagosPensionesSobrevivenciasRecargasTrans { get; set; }

    public virtual DbSet<ArlPagosPensionesSobrevivenciasTemporalTran> ArlPagosPensionesSobrevivenciasTemporalTrans { get; set; }

    public virtual DbSet<ArlPagosPensionesSobrevivenciasTran> ArlPagosPensionesSobrevivenciasTrans { get; set; }

    public virtual DbSet<ArlPagosTipoCatum> ArlPagosTipoCata { get; set; }

    public virtual DbSet<ArlPrestacionesEconomicasTran> ArlPrestacionesEconomicasTrans { get; set; }

    public virtual DbSet<ArlPrestacionesTipoCatum> ArlPrestacionesTipoCata { get; set; }

    public virtual DbSet<ArlProcesosTipoCatum> ArlProcesosTipoCata { get; set; }

    public virtual DbSet<ArlReclamacionesNotificacionesTipoCatum> ArlReclamacionesNotificacionesTipoCata { get; set; }

    public virtual DbSet<ArlReclamacionesPrestacionesRecargasTran> ArlReclamacionesPrestacionesRecargasTrans { get; set; }

    public virtual DbSet<ArlReclamacionesPrestacionesTemporalTran> ArlReclamacionesPrestacionesTemporalTrans { get; set; }

    public virtual DbSet<ArlReclamacionesPrestacionesTran> ArlReclamacionesPrestacionesTrans { get; set; }

    public virtual DbSet<ArlReclamantesTipoCatum> ArlReclamantesTipoCata { get; set; }

    public virtual DbSet<ArlSeveridadLesionTipoCatum> ArlSeveridadLesionTipoCata { get; set; }

    public virtual DbSet<ArsAsociacionesCatum> ArsAsociacionesCata { get; set; }

    public virtual DbSet<ArsCategoriaCatum> ArsCategoriaCata { get; set; }

    public virtual DbSet<ArsMaster> ArsMasters { get; set; }

    public virtual DbSet<ArsReportesMaster> ArsReportesMasters { get; set; }

    public virtual DbSet<ArsReportesTemasCatum> ArsReportesTemasCata { get; set; }

    public virtual DbSet<ArsReportesTiposCatum> ArsReportesTiposCata { get; set; }

    public virtual DbSet<ArsReportesTran> ArsReportesTrans { get; set; }

    public virtual DbSet<ArsReportesVistum> ArsReportesVista { get; set; }

    public virtual DbSet<AtAutorizacionCalendarioTran> AtAutorizacionCalendarioTrans { get; set; }

    public virtual DbSet<AtCalendarioTran> AtCalendarioTrans { get; set; }

    public virtual DbSet<AtCargado> AtCargados { get; set; }

    public virtual DbSet<AtColisionTipoCatum> AtColisionTipoCata { get; set; }

    public virtual DbSet<AtDiagnosticosCieCatum> AtDiagnosticosCieCata { get; set; }

    public virtual DbSet<AtDiagnosticosGruposCieCatum> AtDiagnosticosGruposCieCata { get; set; }

    public virtual DbSet<AtEstadoReclamacionCatum> AtEstadoReclamacionCata { get; set; }

    public virtual DbSet<AtEventosTran> AtEventosTrans { get; set; }

    public virtual DbSet<AtHechosCieCatum> AtHechosCieCata { get; set; }

    public virtual DbSet<AtInformesSeguimientosTran> AtInformesSeguimientosTrans { get; set; }

    public virtual DbSet<AtMaster> AtMasters { get; set; }

    public virtual DbSet<AtNotificacionNoCargaTran> AtNotificacionNoCargaTrans { get; set; }

    public virtual DbSet<AtOrigenCatum> AtOrigenCata { get; set; }

    public virtual DbSet<AtPosicionLesionadoCatum> AtPosicionLesionadoCata { get; set; }

    public virtual DbSet<AtVehiculoTipoCatum> AtVehiculoTipoCata { get; set; }

    public virtual DbSet<AuditoresAgentesTiposCatum> AuditoresAgentesTiposCata { get; set; }

    public virtual DbSet<AuditoresAuditorasHistorico> AuditoresAuditorasHistoricos { get; set; }

    public virtual DbSet<AuditoresAuditorasMaster> AuditoresAuditorasMasters { get; set; }

    public virtual DbSet<AuditoresAuditorasRepresentantesTran> AuditoresAuditorasRepresentantesTrans { get; set; }

    public virtual DbSet<AuditoresAuditorasRequerimientosTran> AuditoresAuditorasRequerimientosTrans { get; set; }

    public virtual DbSet<AuditoresDisposicionesTiposCatum> AuditoresDisposicionesTiposCata { get; set; }

    public virtual DbSet<AuditoresDisposicionesTran> AuditoresDisposicionesTrans { get; set; }

    public virtual DbSet<AuditoresEstadosCatum> AuditoresEstadosCata { get; set; }

    public virtual DbSet<AuditoresExamenesDetallesTran> AuditoresExamenesDetallesTrans { get; set; }

    public virtual DbSet<AuditoresExamenesDetallesTransBk> AuditoresExamenesDetallesTransBks { get; set; }

    public virtual DbSet<AuditoresExamenesEstadosCatum> AuditoresExamenesEstadosCata { get; set; }

    public virtual DbSet<AuditoresExamenesHorariosCatum> AuditoresExamenesHorariosCata { get; set; }

    public virtual DbSet<AuditoresExamenesRequerimientosTran> AuditoresExamenesRequerimientosTrans { get; set; }

    public virtual DbSet<AuditoresExamenesTran> AuditoresExamenesTrans { get; set; }

    public virtual DbSet<AuditoresHistorico> AuditoresHistoricos { get; set; }

    public virtual DbSet<AuditoresMaster> AuditoresMasters { get; set; }

    public virtual DbSet<AuditoresParametrosHistorico> AuditoresParametrosHistoricos { get; set; }

    public virtual DbSet<AuditoresParametrosTran> AuditoresParametrosTrans { get; set; }

    public virtual DbSet<AuditoresPeriodosMaster> AuditoresPeriodosMasters { get; set; }

    public virtual DbSet<AuditoresPreguntasCatum> AuditoresPreguntasCata { get; set; }

    public virtual DbSet<AuditoresPreguntasHistorico> AuditoresPreguntasHistoricos { get; set; }

    public virtual DbSet<AuditoresPreguntasRespuestasCatum> AuditoresPreguntasRespuestasCata { get; set; }

    public virtual DbSet<AuditoresPreguntasRespuestasHistorico> AuditoresPreguntasRespuestasHistoricos { get; set; }

    public virtual DbSet<AuditoresPreguntasRespuestasLetrasCatum> AuditoresPreguntasRespuestasLetrasCata { get; set; }

    public virtual DbSet<AuditoresRequerimientosCataBk> AuditoresRequerimientosCataBks { get; set; }

    public virtual DbSet<AuditoresRequerimientosCatum> AuditoresRequerimientosCata { get; set; }

    public virtual DbSet<AuditoresRequerimientosEstadosCatum> AuditoresRequerimientosEstadosCata { get; set; }

    public virtual DbSet<AuditoresRequerimientosHistorico> AuditoresRequerimientosHistoricos { get; set; }

    public virtual DbSet<AuditoresRequerimientosTran> AuditoresRequerimientosTrans { get; set; }

    public virtual DbSet<AuditoresUsuariosBitacoraTran> AuditoresUsuariosBitacoraTrans { get; set; }

    public virtual DbSet<CambiosExcepcionesAltasTran> CambiosExcepcionesAltasTrans { get; set; }

    public virtual DbSet<CambiosExcepcionesBajasTran> CambiosExcepcionesBajasTrans { get; set; }

    public virtual DbSet<CambiosExcepcionesSolicitudesTran> CambiosExcepcionesSolicitudesTrans { get; set; }

    public virtual DbSet<CasosActividadesTipoCatum> CasosActividadesTipoCata { get; set; }

    public virtual DbSet<CasosActividadesTran> CasosActividadesTrans { get; set; }

    public virtual DbSet<CasosActividadesUsuariosTran> CasosActividadesUsuariosTrans { get; set; }

    public virtual DbSet<CasosCambiosExcepcionErroresCatum> CasosCambiosExcepcionErroresCata { get; set; }

    public virtual DbSet<CasosCambiosExcepcionMotivosCatum> CasosCambiosExcepcionMotivosCata { get; set; }

    public virtual DbSet<CasosCambiosExcepcionSolicitudesErroresTran> CasosCambiosExcepcionSolicitudesErroresTrans { get; set; }

    public virtual DbSet<CasosCambiosExcepcionSolicitudesEstadosCatum> CasosCambiosExcepcionSolicitudesEstadosCata { get; set; }

    public virtual DbSet<CasosCambiosExcepcionSolicitudesTran> CasosCambiosExcepcionSolicitudesTrans { get; set; }

    public virtual DbSet<CasosContactosMaster> CasosContactosMasters { get; set; }

    public virtual DbSet<CasosContactosTipoCatum> CasosContactosTipoCata { get; set; }

    public virtual DbSet<CasosCorreosPlantillasCatum> CasosCorreosPlantillasCata { get; set; }

    public virtual DbSet<CasosDireccionesMaster> CasosDireccionesMasters { get; set; }

    public virtual DbSet<CasosDireccionesViasTiemposTran> CasosDireccionesViasTiemposTrans { get; set; }

    public virtual DbSet<CasosDocumentosTran> CasosDocumentosTrans { get; set; }

    public virtual DbSet<CasosEstadosCatum> CasosEstadosCata { get; set; }

    public virtual DbSet<CasosMaster> CasosMasters { get; set; }

    public virtual DbSet<CasosMotivosCatum> CasosMotivosCata { get; set; }

    public virtual DbSet<CasosOrigenesCatum> CasosOrigenesCata { get; set; }

    public virtual DbSet<CasosProcesosTipoCatum> CasosProcesosTipoCata { get; set; }

    public virtual DbSet<CasosRelacionadosTipoCatum> CasosRelacionadosTipoCata { get; set; }

    public virtual DbSet<CasosRelacionadosTran> CasosRelacionadosTrans { get; set; }

    public virtual DbSet<CasosTemasCatum> CasosTemasCata { get; set; }

    public virtual DbSet<CasosTiposCatum> CasosTiposCata { get; set; }

    public virtual DbSet<CasosUsuariosMaster> CasosUsuariosMasters { get; set; }

    public virtual DbSet<CasosViasCatum> CasosViasCata { get; set; }

    public virtual DbSet<CasosViasTiemposUnidadesCatum> CasosViasTiemposUnidadesCata { get; set; }

    public virtual DbSet<CiudadanosExP> CiudadanosExPs { get; set; }

    public virtual DbSet<CiudadanosExportar> CiudadanosExportars { get; set; }

    public virtual DbSet<CiudadanosParaMaternidad> CiudadanosParaMaternidads { get; set; }

    public virtual DbSet<Ciudadanot> Ciudadanots { get; set; }

    public virtual DbSet<CoberturasMaster> CoberturasMasters { get; set; }

    public virtual DbSet<CoberturasMaster01022018> CoberturasMaster01022018s { get; set; }

    public virtual DbSet<CoberturasMaster08122017> CoberturasMaster08122017s { get; set; }

    public virtual DbSet<CoberturasPypNivelCatum> CoberturasPypNivelCata { get; set; }

    public virtual DbSet<CoberturasTecnicasTran> CoberturasTecnicasTrans { get; set; }

    public virtual DbSet<CoberturasTipoCata99> CoberturasTipoCata99s { get; set; }

    public virtual DbSet<CoberturasTipoCatum> CoberturasTipoCata { get; set; }

    public virtual DbSet<ComunesCie09Catum> ComunesCie09Cata { get; set; }

    public virtual DbSet<ComunesCie10Catum> ComunesCie10Cata { get; set; }

    public virtual DbSet<ComunesCie10DiagnosticosCatum> ComunesCie10DiagnosticosCata { get; set; }

    public virtual DbSet<ComunesCie10DiagnosticosGruposCatum> ComunesCie10DiagnosticosGruposCata { get; set; }

    public virtual DbSet<ComunesCiioCatum> ComunesCiioCata { get; set; }

    public virtual DbSet<ComunesCiiuClasesCatum> ComunesCiiuClasesCata { get; set; }

    public virtual DbSet<ComunesCiiuGruposCatum> ComunesCiiuGruposCata { get; set; }

    public virtual DbSet<ComunesCiudadesCatum> ComunesCiudadesCata { get; set; }

    public virtual DbSet<ComunesCupsCatum> ComunesCupsCata { get; set; }

    public virtual DbSet<ComunesCupsCie09Catum> ComunesCupsCie09Cata { get; set; }

    public virtual DbSet<ComunesDocumentosMaster> ComunesDocumentosMasters { get; set; }

    public virtual DbSet<ComunesEmpresasTipoCatum> ComunesEmpresasTipoCata { get; set; }

    public virtual DbSet<ComunesFechasMaster> ComunesFechasMasters { get; set; }

    public virtual DbSet<ComunesMesesCatum> ComunesMesesCata { get; set; }

    public virtual DbSet<ComunesMunicipiosCatum> ComunesMunicipiosCata { get; set; }

    public virtual DbSet<ComunesNivelesAcademicosCatum> ComunesNivelesAcademicosCata { get; set; }

    public virtual DbSet<ComunesPalabrasCatum> ComunesPalabrasCata { get; set; }

    public virtual DbSet<ComunesPalabrasDiccionarioCatum> ComunesPalabrasDiccionarioCata { get; set; }

    public virtual DbSet<ComunesPalabrasRechazadasCatum> ComunesPalabrasRechazadasCata { get; set; }

    public virtual DbSet<ComunesPalabrasTempo> ComunesPalabrasTempos { get; set; }

    public virtual DbSet<ComunesPeriodosMaster> ComunesPeriodosMasters { get; set; }

    public virtual DbSet<ComunesPeriodosMasterE> ComunesPeriodosMasterEs { get; set; }

    public virtual DbSet<ComunesProvinciasCatum> ComunesProvinciasCata { get; set; }

    public virtual DbSet<ComunesRegimenesCatum> ComunesRegimenesCata { get; set; }

    public virtual DbSet<ComunesRegionesGeograficasCatum> ComunesRegionesGeograficasCata { get; set; }

    public virtual DbSet<ComunesRegionesSaludCatum> ComunesRegionesSaludCata { get; set; }

    public virtual DbSet<ComunesSectoresParajesCatum> ComunesSectoresParajesCata { get; set; }

    public virtual DbSet<ComunesTrimestresCatum> ComunesTrimestresCata { get; set; }

    public virtual DbSet<ConsultasRecepcionCatum> ConsultasRecepcionCata { get; set; }

    public virtual DbSet<DocumentosJahironPrueba> DocumentosJahironPruebas { get; set; }

    public virtual DbSet<EpisodiosAtencionesPnaTipoCatum> EpisodiosAtencionesPnaTipoCata { get; set; }

    public virtual DbSet<EpisodiosAtencionesTipoCatum> EpisodiosAtencionesTipoCata { get; set; }

    public virtual DbSet<EpisodiosCausasReferenciasCatum> EpisodiosCausasReferenciasCata { get; set; }

    public virtual DbSet<EpisodiosDiagnosticosSubsidiadosRecargasTran> EpisodiosDiagnosticosSubsidiadosRecargasTrans { get; set; }

    public virtual DbSet<EpisodiosDiagnosticosSubsidiadosTemporalTran> EpisodiosDiagnosticosSubsidiadosTemporalTrans { get; set; }

    public virtual DbSet<EpisodiosDiagnosticosSubsidiadosTran> EpisodiosDiagnosticosSubsidiadosTrans { get; set; }

    public virtual DbSet<EpisodiosEgresosTipoCatum> EpisodiosEgresosTipoCata { get; set; }

    public virtual DbSet<EpisodiosFrecuenciaCatum> EpisodiosFrecuenciaCata { get; set; }

    public virtual DbSet<EpisodiosHistorico> EpisodiosHistoricos { get; set; }

    public virtual DbSet<EpisodiosIntervencionesCatum> EpisodiosIntervencionesCata { get; set; }

    public virtual DbSet<EpisodiosPersonalTipoCatum> EpisodiosPersonalTipoCata { get; set; }

    public virtual DbSet<EpisodiosPnaTran> EpisodiosPnaTrans { get; set; }

    public virtual DbSet<EpisodiosRecargasTran> EpisodiosRecargasTrans { get; set; }

    public virtual DbSet<EpisodiosRecurrenciaDiagnosticoCatum> EpisodiosRecurrenciaDiagnosticoCata { get; set; }

    public virtual DbSet<EpisodiosReferenciasTipoCatum> EpisodiosReferenciasTipoCata { get; set; }

    public virtual DbSet<EpisodiosSeguimientosZikaTran> EpisodiosSeguimientosZikaTrans { get; set; }

    public virtual DbSet<EpisodiosServiciosTipoCatum> EpisodiosServiciosTipoCata { get; set; }

    public virtual DbSet<EpisodiosSubsidiadosTran> EpisodiosSubsidiadosTrans { get; set; }

    public virtual DbSet<EpisodiosTemporalTran> EpisodiosTemporalTrans { get; set; }

    public virtual DbSet<EpisodiosTran> EpisodiosTrans { get; set; }

    public virtual DbSet<EpisodiosVacunasDosisCatum> EpisodiosVacunasDosisCata { get; set; }

    public virtual DbSet<EvaluadoresNuctTran> EvaluadoresNuctTrans { get; set; }

    public virtual DbSet<FinancierosBalanceComprobacionRecargasTran> FinancierosBalanceComprobacionRecargasTrans { get; set; }

    public virtual DbSet<FinancierosBalanceComprobacionTemporalTran> FinancierosBalanceComprobacionTemporalTrans { get; set; }

    public virtual DbSet<FinancierosBalanceComprobacionTran> FinancierosBalanceComprobacionTrans { get; set; }

    public virtual DbSet<FinancierosBalanceGeneralDetallado2009Tran> FinancierosBalanceGeneralDetallado2009Trans { get; set; }

    public virtual DbSet<FinancierosBalanceGeneralDetalladoVistaHistorico> FinancierosBalanceGeneralDetalladoVistaHistoricos { get; set; }

    public virtual DbSet<FinancierosBalanceGeneralDetalladoVistum> FinancierosBalanceGeneralDetalladoVista { get; set; }

    public virtual DbSet<FinancierosBalanceGeneralVistum> FinancierosBalanceGeneralVista { get; set; }

    public virtual DbSet<FinancierosCuentasCatum> FinancierosCuentasCata { get; set; }

    public virtual DbSet<FinancierosCuentasOrigenCatum> FinancierosCuentasOrigenCata { get; set; }

    public virtual DbSet<FinancierosCuentasProporcionesCatum> FinancierosCuentasProporcionesCata { get; set; }

    public virtual DbSet<FinancierosCuentasTipoCatum> FinancierosCuentasTipoCata { get; set; }

    public virtual DbSet<FinancierosDocumentosPagoTipoCatum> FinancierosDocumentosPagoTipoCata { get; set; }

    public virtual DbSet<FinancierosEstadosCatum> FinancierosEstadosCata { get; set; }

    public virtual DbSet<FinancierosEstadosCuentasCatum> FinancierosEstadosCuentasCata { get; set; }

    public virtual DbSet<FinancierosEstadosCuentasDetallesCatum> FinancierosEstadosCuentasDetallesCata { get; set; }

    public virtual DbSet<FinancierosEstadosCuentasReportesCatum> FinancierosEstadosCuentasReportesCata { get; set; }

    public virtual DbSet<FinancierosEstadosDetallesTipoCatum> FinancierosEstadosDetallesTipoCata { get; set; }

    public virtual DbSet<FinancierosEstadosTran> FinancierosEstadosTrans { get; set; }

    public virtual DbSet<FinancierosEstadosTransHistorico> FinancierosEstadosTransHistoricos { get; set; }

    public virtual DbSet<FinancierosPagosComisionesRecargasTran> FinancierosPagosComisionesRecargasTrans { get; set; }

    public virtual DbSet<FinancierosPagosComisionesTemporalTran> FinancierosPagosComisionesTemporalTrans { get; set; }

    public virtual DbSet<FinancierosPagosComisionesTran> FinancierosPagosComisionesTrans { get; set; }

    public virtual DbSet<FinancierosPlanesCatum> FinancierosPlanesCata { get; set; }

    public virtual DbSet<FinancierosPlanesCuentasAfiliadosCatum> FinancierosPlanesCuentasAfiliadosCata { get; set; }

    public virtual DbSet<FinancierosPlanesCuentasCatum> FinancierosPlanesCuentasCata { get; set; }

    public virtual DbSet<FinancierosPlanesGruposCatum> FinancierosPlanesGruposCata { get; set; }

    public virtual DbSet<FinancierosPromotoresDocumentosTipoCatum> FinancierosPromotoresDocumentosTipoCata { get; set; }

    public virtual DbSet<FinancierosPromotoresTipoCatum> FinancierosPromotoresTipoCata { get; set; }

    public virtual DbSet<FinancierosReclamacionesArsRecargasTran> FinancierosReclamacionesArsRecargasTrans { get; set; }

    public virtual DbSet<FinancierosReclamacionesArsTemporalTran> FinancierosReclamacionesArsTemporalTrans { get; set; }

    public virtual DbSet<FinancierosReclamacionesArsTran> FinancierosReclamacionesArsTrans { get; set; }

    public virtual DbSet<FinancierosReclamacionesEstadosCatum> FinancierosReclamacionesEstadosCata { get; set; }

    public virtual DbSet<FinancierosSegurosTipoCatum> FinancierosSegurosTipoCata { get; set; }

    public virtual DbSet<GruposExplicacion> GruposExplicacions { get; set; }

    public virtual DbSet<Hoja1> Hoja1s { get; set; }

    public virtual DbSet<IndicadoresPssSubTemasCatum> IndicadoresPssSubTemasCata { get; set; }

    public virtual DbSet<IndicadoresPssSubTemasPreguntasCatum> IndicadoresPssSubTemasPreguntasCata { get; set; }

    public virtual DbSet<IndicadoresPssTemasCatum> IndicadoresPssTemasCata { get; set; }

    public virtual DbSet<IndicadoresPssTipoCatum> IndicadoresPssTipoCata { get; set; }

    public virtual DbSet<IndicadoresPssTipoPreguntasCatum> IndicadoresPssTipoPreguntasCata { get; set; }

    public virtual DbSet<IndicadoresPssTipoVersionesCatum> IndicadoresPssTipoVersionesCata { get; set; }

    public virtual DbSet<IndicadoresPssTipoVersionesEstadoCatum> IndicadoresPssTipoVersionesEstadoCata { get; set; }

    public virtual DbSet<IndicadoresPssVisitasDetalleTran> IndicadoresPssVisitasDetalleTrans { get; set; }

    public virtual DbSet<IndicadoresPssVisitasEstadoCatum> IndicadoresPssVisitasEstadoCata { get; set; }

    public virtual DbSet<IndicadoresPssVisitasMaster> IndicadoresPssVisitasMasters { get; set; }

    public virtual DbSet<InstitucionesMaster> InstitucionesMasters { get; set; }

    public virtual DbSet<InstitucionesTipoCatum> InstitucionesTipoCata { get; set; }

    public virtual DbSet<MedicamentosCoberturasCata12062018> MedicamentosCoberturasCata12062018s { get; set; }

    public virtual DbSet<MedicamentosCoberturasCataBk12062018> MedicamentosCoberturasCataBk12062018s { get; set; }

    public virtual DbSet<MedicamentosCoberturasCatum> MedicamentosCoberturasCata { get; set; }

    public virtual DbSet<MedicamentosDiana> MedicamentosDianas { get; set; }

    public virtual DbSet<MedicamentosMaster> MedicamentosMasters { get; set; }

    public virtual DbSet<MedicamentosMaster11122017> MedicamentosMaster11122017s { get; set; }

    public virtual DbSet<MedicamentosMaster12062018> MedicamentosMaster12062018s { get; set; }

    public virtual DbSet<MedicamentosMasterBk07112017> MedicamentosMasterBk07112017s { get; set; }

    public virtual DbSet<MedicamentosMasterEsBk04012018> MedicamentosMasterEsBk04012018s { get; set; }

    public virtual DbSet<MedicamentosPalabrasNoCata12062018> MedicamentosPalabrasNoCata12062018s { get; set; }

    public virtual DbSet<MedicamentosPalabrasNoCatum> MedicamentosPalabrasNoCata { get; set; }

    public virtual DbSet<MedicamentosPalabrasSiCata12062018> MedicamentosPalabrasSiCata12062018s { get; set; }

    public virtual DbSet<MedicamentosPalabrasSiCatum> MedicamentosPalabrasSiCata { get; set; }

    public virtual DbSet<MedicamentosTabla> MedicamentosTablas { get; set; }

    public virtual DbSet<MedicamentosTabla12062018> MedicamentosTabla12062018s { get; set; }

    public virtual DbSet<MedicamentosTablaBak20180123> MedicamentosTablaBak20180123s { get; set; }

    public virtual DbSet<MedicamentosTablaBk01022018> MedicamentosTablaBk01022018s { get; set; }

    public virtual DbSet<MedicamentosTablaEsBk04012018> MedicamentosTablaEsBk04012018s { get; set; }

    public virtual DbSet<NotificacionesAfiliadosCambiosExcepcionesTran> NotificacionesAfiliadosCambiosExcepcionesTrans { get; set; }

    public virtual DbSet<ParametrosCatum> ParametrosCata { get; set; }

    public virtual DbSet<PlanesArsVistum> PlanesArsVista { get; set; }

    public virtual DbSet<PlanesCoberturasMaster> PlanesCoberturasMasters { get; set; }

    public virtual DbSet<PlanesCoberturasMasterHistorico> PlanesCoberturasMasterHistoricos { get; set; }

    public virtual DbSet<PlanesCoberturasPalabrasTran> PlanesCoberturasPalabrasTrans { get; set; }

    public virtual DbSet<PlanesCoberturasPdssCatum> PlanesCoberturasPdssCata { get; set; }

    public virtual DbSet<PlanesCoberturasRevisionesCatum> PlanesCoberturasRevisionesCata { get; set; }

    public virtual DbSet<PlanesCoberturasRevisionesTran> PlanesCoberturasRevisionesTrans { get; set; }

    public virtual DbSet<PlanesCoberturasVistaApp> PlanesCoberturasVistaApps { get; set; }

    public virtual DbSet<PlanesCoberturasVistaApp12122017> PlanesCoberturasVistaApp12122017s { get; set; }

    public virtual DbSet<PlanesCoberturasVistum> PlanesCoberturasVista { get; set; }

    public virtual DbSet<PlanesDocumentosArsVistum> PlanesDocumentosArsVista { get; set; }

    public virtual DbSet<PlanesDocumentosTran> PlanesDocumentosTrans { get; set; }

    public virtual DbSet<PlanesEscalaEdadesCatum> PlanesEscalaEdadesCata { get; set; }

    public virtual DbSet<PlanesEstadosCatum> PlanesEstadosCata { get; set; }

    public virtual DbSet<PlanesGruposMaster> PlanesGruposMasters { get; set; }

    public virtual DbSet<PlanesMaster> PlanesMasters { get; set; }

    public virtual DbSet<PlanesModalidadCatum> PlanesModalidadCata { get; set; }

    public virtual DbSet<PlanesPrimasEdadesCatum> PlanesPrimasEdadesCata { get; set; }

    public virtual DbSet<PlanesPrimasRangosCatum> PlanesPrimasRangosCata { get; set; }

    public virtual DbSet<PlanesPrimasTran> PlanesPrimasTrans { get; set; }

    public virtual DbSet<PlanesSubGruposCoberturasTipoCatum> PlanesSubGruposCoberturasTipoCata { get; set; }

    public virtual DbSet<PlanesSubGruposCuotasTipoCatum> PlanesSubGruposCuotasTipoCata { get; set; }

    public virtual DbSet<PlanesSubgruposMaster> PlanesSubgruposMasters { get; set; }

    public virtual DbSet<PlanesTipoCatum> PlanesTipoCata { get; set; }

    public virtual DbSet<PrestadorasCategoriaCatum> PrestadorasCategoriaCata { get; set; }

    public virtual DbSet<PrestadorasClaseCatum> PrestadorasClaseCata { get; set; }

    public virtual DbSet<PrestadorasEspecialidadesCatum> PrestadorasEspecialidadesCata { get; set; }

    public virtual DbSet<PrestadorasEspecialidadesServiciosCatum> PrestadorasEspecialidadesServiciosCata { get; set; }

    public virtual DbSet<PrestadorasInstitucionalesArsServiciosTran> PrestadorasInstitucionalesArsServiciosTrans { get; set; }

    public virtual DbSet<PrestadorasInstitucionalesArsTemporalTran> PrestadorasInstitucionalesArsTemporalTrans { get; set; }

    public virtual DbSet<PrestadorasInstitucionalesArsTran> PrestadorasInstitucionalesArsTrans { get; set; }

    public virtual DbSet<PrestadorasInstitucionalesArsVistum> PrestadorasInstitucionalesArsVista { get; set; }

    public virtual DbSet<PrestadorasInstitucionalesMaster> PrestadorasInstitucionalesMasters { get; set; }

    public virtual DbSet<PrestadorasInstitucionalesPalabrasTran> PrestadorasInstitucionalesPalabrasTrans { get; set; }

    public virtual DbSet<PrestadorasInstitucionalesServiciosTran> PrestadorasInstitucionalesServiciosTrans { get; set; }

    public virtual DbSet<PrestadorasInstitucionalesVistum> PrestadorasInstitucionalesVista { get; set; }

    public virtual DbSet<PrestadorasMaster> PrestadorasMasters { get; set; }

    public virtual DbSet<PrestadorasMedicosArsTemporalTran> PrestadorasMedicosArsTemporalTrans { get; set; }

    public virtual DbSet<PrestadorasMedicosArsTran> PrestadorasMedicosArsTrans { get; set; }

    public virtual DbSet<PrestadorasMedicosArsVistum> PrestadorasMedicosArsVista { get; set; }

    public virtual DbSet<PrestadorasMedicosEspecialidadesVistum> PrestadorasMedicosEspecialidadesVista { get; set; }

    public virtual DbSet<PrestadorasMedicosExequaturTran> PrestadorasMedicosExequaturTrans { get; set; }

    public virtual DbSet<PrestadorasMedicosMaster> PrestadorasMedicosMasters { get; set; }

    public virtual DbSet<PrestadorasMedicosPalabrasTran> PrestadorasMedicosPalabrasTrans { get; set; }

    public virtual DbSet<PrestadorasMedicosSolicitudesEstadosCatum> PrestadorasMedicosSolicitudesEstadosCata { get; set; }

    public virtual DbSet<PrestadorasMedicosSolicitudesHistorico> PrestadorasMedicosSolicitudesHistoricos { get; set; }

    public virtual DbSet<PrestadorasMedicosSolicitudesTran> PrestadorasMedicosSolicitudesTrans { get; set; }

    public virtual DbSet<PrestadorasMedicosVistum> PrestadorasMedicosVista { get; set; }

    public virtual DbSet<PrestadorasSedeCatum> PrestadorasSedeCata { get; set; }

    public virtual DbSet<PrestadorasServiciosCatum> PrestadorasServiciosCata { get; set; }

    public virtual DbSet<PrestadorasServiciosSaludArsPlanesTran> PrestadorasServiciosSaludArsPlanesTrans { get; set; }

    public virtual DbSet<PrestadorasServiciosSaludArsRecargasTran> PrestadorasServiciosSaludArsRecargasTrans { get; set; }

    public virtual DbSet<PrestadorasServiciosSaludArsTemporalTran> PrestadorasServiciosSaludArsTemporalTrans { get; set; }

    public virtual DbSet<PrestadorasServiciosSaludArsTran> PrestadorasServiciosSaludArsTrans { get; set; }

    public virtual DbSet<PrestadorasSolicitudDocumentosTran> PrestadorasSolicitudDocumentosTrans { get; set; }

    public virtual DbSet<PrestadorasSolicitudTran> PrestadorasSolicitudTrans { get; set; }

    public virtual DbSet<PrestadorasSolicitudesEstadoCatum> PrestadorasSolicitudesEstadoCata { get; set; }

    public virtual DbSet<PrestadorasSolicitudesServiciosTran> PrestadorasSolicitudesServiciosTrans { get; set; }

    public virtual DbSet<PrestadorasSolicitudesTipoCatum> PrestadorasSolicitudesTipoCata { get; set; }

    public virtual DbSet<PrestadorasTipoCatum> PrestadorasTipoCata { get; set; }

    public virtual DbSet<PrestadorasTipoServiciosCata99> PrestadorasTipoServiciosCata99s { get; set; }

    public virtual DbSet<PrestadorasTipoServiciosCatum> PrestadorasTipoServiciosCata { get; set; }

    public virtual DbSet<PrestadorasUsuariosEstadoClaveCatum> PrestadorasUsuariosEstadoClaveCata { get; set; }

    public virtual DbSet<PrestadorasUsuariosResultadosConsultasTran> PrestadorasUsuariosResultadosConsultasTrans { get; set; }

    public virtual DbSet<PrestadorasUsuariosTran> PrestadorasUsuariosTrans { get; set; }

    public virtual DbSet<PrestadorasUsuariosValidacionesTran> PrestadorasUsuariosValidacionesTrans { get; set; }

    public virtual DbSet<PrestadorasUsuariosWebservicesCatum> PrestadorasUsuariosWebservicesCata { get; set; }

    public virtual DbSet<ProfesionalesAplicablesCatum> ProfesionalesAplicablesCata { get; set; }

    public virtual DbSet<ProfesionalesAsociacionesAsociadosEstadosCatum> ProfesionalesAsociacionesAsociadosEstadosCata { get; set; }

    public virtual DbSet<ProfesionalesAsociacionesAsociadosHistorico> ProfesionalesAsociacionesAsociadosHistoricos { get; set; }

    public virtual DbSet<ProfesionalesAsociacionesAsociadosTran> ProfesionalesAsociacionesAsociadosTrans { get; set; }

    public virtual DbSet<ProfesionalesAsociacionesEstadosCatum> ProfesionalesAsociacionesEstadosCata { get; set; }

    public virtual DbSet<ProfesionalesAsociacionesEstadosHistorico> ProfesionalesAsociacionesEstadosHistoricos { get; set; }

    public virtual DbSet<ProfesionalesAsociacionesHistorico> ProfesionalesAsociacionesHistoricos { get; set; }

    public virtual DbSet<ProfesionalesAsociacionesMaster> ProfesionalesAsociacionesMasters { get; set; }

    public virtual DbSet<ProfesionalesAsociacionesRequerimientosTran> ProfesionalesAsociacionesRequerimientosTrans { get; set; }

    public virtual DbSet<ProfesionalesAsociacionesSolicitudesHistorico> ProfesionalesAsociacionesSolicitudesHistoricos { get; set; }

    public virtual DbSet<ProfesionalesAsociacionesSolicitudesRequerimientosHistorico> ProfesionalesAsociacionesSolicitudesRequerimientosHistoricos { get; set; }

    public virtual DbSet<ProfesionalesAsociacionesSolicitudesRequerimientosTran> ProfesionalesAsociacionesSolicitudesRequerimientosTrans { get; set; }

    public virtual DbSet<ProfesionalesAsociacionesSolicitudesTran> ProfesionalesAsociacionesSolicitudesTrans { get; set; }

    public virtual DbSet<ProfesionalesAuditorasEstadosCatum> ProfesionalesAuditorasEstadosCata { get; set; }

    public virtual DbSet<ProfesionalesAuditorasHistorico> ProfesionalesAuditorasHistoricos { get; set; }

    public virtual DbSet<ProfesionalesAuditorasMaster> ProfesionalesAuditorasMasters { get; set; }

    public virtual DbSet<ProfesionalesAuditorasRequerimientosTran> ProfesionalesAuditorasRequerimientosTrans { get; set; }

    public virtual DbSet<ProfesionalesAuditorasSolicitudesHistorico> ProfesionalesAuditorasSolicitudesHistoricos { get; set; }

    public virtual DbSet<ProfesionalesAuditorasSolicitudesRequerimientosHistorico> ProfesionalesAuditorasSolicitudesRequerimientosHistoricos { get; set; }

    public virtual DbSet<ProfesionalesAuditorasSolicitudesRequerimientosTran> ProfesionalesAuditorasSolicitudesRequerimientosTrans { get; set; }

    public virtual DbSet<ProfesionalesAuditorasSolicitudesTran> ProfesionalesAuditorasSolicitudesTrans { get; set; }

    public virtual DbSet<ProfesionalesAuditoresSolicitudesEmpresasTran> ProfesionalesAuditoresSolicitudesEmpresasTrans { get; set; }

    public virtual DbSet<ProfesionalesAuditoresSolicitudesExperienciasTran> ProfesionalesAuditoresSolicitudesExperienciasTrans { get; set; }

    public virtual DbSet<ProfesionalesAuditoresSolicitudesHistorico> ProfesionalesAuditoresSolicitudesHistoricos { get; set; }

    public virtual DbSet<ProfesionalesAuditoresSolicitudesRequerimientosHistorico> ProfesionalesAuditoresSolicitudesRequerimientosHistoricos { get; set; }

    public virtual DbSet<ProfesionalesAuditoresSolicitudesRequerimientosTran> ProfesionalesAuditoresSolicitudesRequerimientosTrans { get; set; }

    public virtual DbSet<ProfesionalesAuditoresSolicitudesTran> ProfesionalesAuditoresSolicitudesTrans { get; set; }

    public virtual DbSet<ProfesionalesDisposicionesHistorico> ProfesionalesDisposicionesHistoricos { get; set; }

    public virtual DbSet<ProfesionalesDisposicionesTiposCatum> ProfesionalesDisposicionesTiposCata { get; set; }

    public virtual DbSet<ProfesionalesDisposicionesTran> ProfesionalesDisposicionesTrans { get; set; }

    public virtual DbSet<ProfesionalesEmpresasTran> ProfesionalesEmpresasTrans { get; set; }

    public virtual DbSet<ProfesionalesEspecialidadesCatum> ProfesionalesEspecialidadesCata { get; set; }

    public virtual DbSet<ProfesionalesEspecialidadesEstadosCatum> ProfesionalesEspecialidadesEstadosCata { get; set; }

    public virtual DbSet<ProfesionalesEspecialidadesEstadosHistorico> ProfesionalesEspecialidadesEstadosHistoricos { get; set; }

    public virtual DbSet<ProfesionalesEspecialidadesHistorico> ProfesionalesEspecialidadesHistoricos { get; set; }

    public virtual DbSet<ProfesionalesEspecialidadesTiposCatum> ProfesionalesEspecialidadesTiposCata { get; set; }

    public virtual DbSet<ProfesionalesEspecialidadesTran> ProfesionalesEspecialidadesTrans { get; set; }

    public virtual DbSet<ProfesionalesEstadosCatum> ProfesionalesEstadosCata { get; set; }

    public virtual DbSet<ProfesionalesExamenesDetallesTran> ProfesionalesExamenesDetallesTrans { get; set; }

    public virtual DbSet<ProfesionalesExamenesEstadosCatum> ProfesionalesExamenesEstadosCata { get; set; }

    public virtual DbSet<ProfesionalesExamenesHistorico> ProfesionalesExamenesHistoricos { get; set; }

    public virtual DbSet<ProfesionalesExamenesHorariosCatum> ProfesionalesExamenesHorariosCata { get; set; }

    public virtual DbSet<ProfesionalesExamenesRequerimientosHistorico> ProfesionalesExamenesRequerimientosHistoricos { get; set; }

    public virtual DbSet<ProfesionalesExamenesRequerimientosTran> ProfesionalesExamenesRequerimientosTrans { get; set; }

    public virtual DbSet<ProfesionalesExamenesTran> ProfesionalesExamenesTrans { get; set; }

    public virtual DbSet<ProfesionalesExperienciasTiposTran> ProfesionalesExperienciasTiposTrans { get; set; }

    public virtual DbSet<ProfesionalesExperienciasTran> ProfesionalesExperienciasTrans { get; set; }

    public virtual DbSet<ProfesionalesHistorico> ProfesionalesHistoricos { get; set; }

    public virtual DbSet<ProfesionalesLocalidadesTran> ProfesionalesLocalidadesTrans { get; set; }

    public virtual DbSet<ProfesionalesLocalidadesTransBak20160824> ProfesionalesLocalidadesTransBak20160824s { get; set; }

    public virtual DbSet<ProfesionalesMaster> ProfesionalesMasters { get; set; }

    public virtual DbSet<ProfesionalesMotivosCatum> ProfesionalesMotivosCata { get; set; }

    public virtual DbSet<ProfesionalesPeriodosHistorico> ProfesionalesPeriodosHistoricos { get; set; }

    public virtual DbSet<ProfesionalesPeriodosMaster> ProfesionalesPeriodosMasters { get; set; }

    public virtual DbSet<ProfesionalesPreguntasCatum> ProfesionalesPreguntasCata { get; set; }

    public virtual DbSet<ProfesionalesPreguntasHistorico> ProfesionalesPreguntasHistoricos { get; set; }

    public virtual DbSet<ProfesionalesPreguntasRespuestasCatum> ProfesionalesPreguntasRespuestasCata { get; set; }

    public virtual DbSet<ProfesionalesPreguntasRespuestasHistorico> ProfesionalesPreguntasRespuestasHistoricos { get; set; }

    public virtual DbSet<ProfesionalesRequerimientosCataBk14102016> ProfesionalesRequerimientosCataBk14102016s { get; set; }

    public virtual DbSet<ProfesionalesRequerimientosCatum> ProfesionalesRequerimientosCata { get; set; }

    public virtual DbSet<ProfesionalesRequerimientosEstadosCatum> ProfesionalesRequerimientosEstadosCata { get; set; }

    public virtual DbSet<ProfesionalesRequerimientosHistorico> ProfesionalesRequerimientosHistoricos { get; set; }

    public virtual DbSet<ProfesionalesRequerimientosTran> ProfesionalesRequerimientosTrans { get; set; }

    public virtual DbSet<ProfesionalesSolicitudesAsociacionesHistorico> ProfesionalesSolicitudesAsociacionesHistoricos { get; set; }

    public virtual DbSet<ProfesionalesSolicitudesAsociacionesTran> ProfesionalesSolicitudesAsociacionesTrans { get; set; }

    public virtual DbSet<ProfesionalesSolicitudesEspecialidadesHistorico> ProfesionalesSolicitudesEspecialidadesHistoricos { get; set; }

    public virtual DbSet<ProfesionalesSolicitudesEspecialidadesTran> ProfesionalesSolicitudesEspecialidadesTrans { get; set; }

    public virtual DbSet<ProfesionalesSolicitudesEstadosCatum> ProfesionalesSolicitudesEstadosCata { get; set; }

    public virtual DbSet<ProfesionalesSolicitudesHistorico> ProfesionalesSolicitudesHistoricos { get; set; }

    public virtual DbSet<ProfesionalesSolicitudesLocalidadesTran> ProfesionalesSolicitudesLocalidadesTrans { get; set; }

    public virtual DbSet<ProfesionalesSolicitudesRequerimientosHistorico> ProfesionalesSolicitudesRequerimientosHistoricos { get; set; }

    public virtual DbSet<ProfesionalesSolicitudesRequerimientosTran> ProfesionalesSolicitudesRequerimientosTrans { get; set; }

    public virtual DbSet<ProfesionalesSolicitudesTran> ProfesionalesSolicitudesTrans { get; set; }

    public virtual DbSet<PromotoresAgentesTiposCatum> PromotoresAgentesTiposCata { get; set; }

    public virtual DbSet<PromotoresAltasLotesMaster> PromotoresAltasLotesMasters { get; set; }

    public virtual DbSet<PromotoresAltasLotesTran> PromotoresAltasLotesTrans { get; set; }

    public virtual DbSet<PromotoresDisposicionesTiposCatum> PromotoresDisposicionesTiposCata { get; set; }

    public virtual DbSet<PromotoresDisposicionesTran> PromotoresDisposicionesTrans { get; set; }

    public virtual DbSet<PromotoresEstadosCatum> PromotoresEstadosCata { get; set; }

    public virtual DbSet<PromotoresExamenesDetallesTran> PromotoresExamenesDetallesTrans { get; set; }

    public virtual DbSet<PromotoresExamenesEstadosCatum> PromotoresExamenesEstadosCata { get; set; }

    public virtual DbSet<PromotoresExamenesHorariosCatum> PromotoresExamenesHorariosCata { get; set; }

    public virtual DbSet<PromotoresExamenesRequerimientosTran> PromotoresExamenesRequerimientosTrans { get; set; }

    public virtual DbSet<PromotoresExamenesTran> PromotoresExamenesTrans { get; set; }

    public virtual DbSet<PromotoresHistorico> PromotoresHistoricos { get; set; }

    public virtual DbSet<PromotoresMaster> PromotoresMasters { get; set; }

    public virtual DbSet<PromotoresParametrosHistorico> PromotoresParametrosHistoricos { get; set; }

    public virtual DbSet<PromotoresParametrosTran> PromotoresParametrosTrans { get; set; }

    public virtual DbSet<PromotoresPeriodosMaster> PromotoresPeriodosMasters { get; set; }

    public virtual DbSet<PromotoresPreguntasCatum> PromotoresPreguntasCata { get; set; }

    public virtual DbSet<PromotoresPreguntasHistorico> PromotoresPreguntasHistoricos { get; set; }

    public virtual DbSet<PromotoresPreguntasRespuestasCatum> PromotoresPreguntasRespuestasCata { get; set; }

    public virtual DbSet<PromotoresPreguntasRespuestasHistorico> PromotoresPreguntasRespuestasHistoricos { get; set; }

    public virtual DbSet<PromotoresPreguntasRespuestasLetrasCatum> PromotoresPreguntasRespuestasLetrasCata { get; set; }

    public virtual DbSet<PromotoresPromotorasHistorico> PromotoresPromotorasHistoricos { get; set; }

    public virtual DbSet<PromotoresPromotorasMaster> PromotoresPromotorasMasters { get; set; }

    public virtual DbSet<PromotoresPromotorasRequerimientosTran> PromotoresPromotorasRequerimientosTrans { get; set; }

    public virtual DbSet<PromotoresPromotorasVistum> PromotoresPromotorasVista { get; set; }

    public virtual DbSet<PromotoresRequerimientosCatum> PromotoresRequerimientosCata { get; set; }

    public virtual DbSet<PromotoresRequerimientosEstadosCatum> PromotoresRequerimientosEstadosCata { get; set; }

    public virtual DbSet<PromotoresRequerimientosHistorico> PromotoresRequerimientosHistoricos { get; set; }

    public virtual DbSet<PromotoresRequerimientosTran> PromotoresRequerimientosTrans { get; set; }

    public virtual DbSet<PromotoresUsuariosBitacoraTran> PromotoresUsuariosBitacoraTrans { get; set; }

    public virtual DbSet<ProyectoColumnasAliasTran> ProyectoColumnasAliasTrans { get; set; }

    public virtual DbSet<ProyectoColumnasMaster> ProyectoColumnasMasters { get; set; }

    public virtual DbSet<ProyectoTablasNuevasMaster> ProyectoTablasNuevasMasters { get; set; }

    public virtual DbSet<ProyectoTablasSustituidasMaster> ProyectoTablasSustituidasMasters { get; set; }

    public virtual DbSet<ProyectosProcedimiento> ProyectosProcedimientos { get; set; }

    public virtual DbSet<ProyectosTablasCampo> ProyectosTablasCampos { get; set; }

    public virtual DbSet<ProyectosTablasObjeto> ProyectosTablasObjetos { get; set; }

    public virtual DbSet<PypMetasTrimestralesMaster> PypMetasTrimestralesMasters { get; set; }

    public virtual DbSet<PypPoblacionesAnualesTran> PypPoblacionesAnualesTrans { get; set; }

    public virtual DbSet<PypProblacionesObjetivasCatum> PypProblacionesObjetivasCata { get; set; }

    public virtual DbSet<PypSeguimientosActividadesTran> PypSeguimientosActividadesTrans { get; set; }

    public virtual DbSet<PypSeguimientosMensualesTran> PypSeguimientosMensualesTrans { get; set; }

    public virtual DbSet<PypSeguimientosTrimestralesTran> PypSeguimientosTrimestralesTrans { get; set; }

    public virtual DbSet<PypServiciosTemporalTran> PypServiciosTemporalTrans { get; set; }

    public virtual DbSet<PypServiciosTran> PypServiciosTrans { get; set; }

    public virtual DbSet<PypSubGruposCoberturasMaster> PypSubGruposCoberturasMasters { get; set; }

    public virtual DbSet<PypSubGruposPoblacionesCatum> PypSubGruposPoblacionesCata { get; set; }

    public virtual DbSet<SearchTmp> SearchTmps { get; set; }

    public virtual DbSet<SeguimientosCifradosLlavesTran> SeguimientosCifradosLlavesTrans { get; set; }

    public virtual DbSet<SeguimientosEsquemas05Tran> SeguimientosEsquemas05Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas06Tran> SeguimientosEsquemas06Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas07Tran> SeguimientosEsquemas07Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas26Tran> SeguimientosEsquemas26Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas27Tran> SeguimientosEsquemas27Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas28Tran> SeguimientosEsquemas28Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas31Tran> SeguimientosEsquemas31Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas32Tran> SeguimientosEsquemas32Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas33Tran> SeguimientosEsquemas33Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas34Tran> SeguimientosEsquemas34Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas35SubTran> SeguimientosEsquemas35SubTrans { get; set; }

    public virtual DbSet<SeguimientosEsquemas35Tran> SeguimientosEsquemas35Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas35ValidacionesCatum> SeguimientosEsquemas35ValidacionesCata { get; set; }

    public virtual DbSet<SeguimientosEsquemas36Tran> SeguimientosEsquemas36Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas37Tran> SeguimientosEsquemas37Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas40Tran> SeguimientosEsquemas40Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas41Tran> SeguimientosEsquemas41Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas50Tran> SeguimientosEsquemas50Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas51Tran> SeguimientosEsquemas51Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas52Tran> SeguimientosEsquemas52Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas53Tran> SeguimientosEsquemas53Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas54Tran> SeguimientosEsquemas54Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas61Tran> SeguimientosEsquemas61Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas62Tran> SeguimientosEsquemas62Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas63Tran> SeguimientosEsquemas63Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas64Tran> SeguimientosEsquemas64Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas65Tran> SeguimientosEsquemas65Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemas66Tran> SeguimientosEsquemas66Trans { get; set; }

    public virtual DbSet<SeguimientosEsquemasCatum> SeguimientosEsquemasCata { get; set; }

    public virtual DbSet<SeguimientosEsquemasEstructurasCatum> SeguimientosEsquemasEstructurasCata { get; set; }

    public virtual DbSet<SeguimientosEsquemasInstitucionesTipoCatum> SeguimientosEsquemasInstitucionesTipoCata { get; set; }

    public virtual DbSet<SeguimientosEsquemasInstitucionesTran> SeguimientosEsquemasInstitucionesTrans { get; set; }

    public virtual DbSet<SeguimientosEsquemasLinkCatum> SeguimientosEsquemasLinkCata { get; set; }

    public virtual DbSet<SeguimientosEstadosCatum> SeguimientosEstadosCata { get; set; }

    public virtual DbSet<SeguimientosLotesErroresCatum> SeguimientosLotesErroresCata { get; set; }

    public virtual DbSet<SeguimientosLotesErroresEsquemasCatum> SeguimientosLotesErroresEsquemasCata { get; set; }

    public virtual DbSet<SeguimientosLotesErroresHistorico> SeguimientosLotesErroresHistoricos { get; set; }

    public virtual DbSet<SeguimientosLotesErroresProcesosCatum> SeguimientosLotesErroresProcesosCata { get; set; }

    public virtual DbSet<SeguimientosLotesErroresResumenesTran> SeguimientosLotesErroresResumenesTrans { get; set; }

    public virtual DbSet<SeguimientosLotesErroresSistemasTran> SeguimientosLotesErroresSistemasTrans { get; set; }

    public virtual DbSet<SeguimientosLotesErroresTran> SeguimientosLotesErroresTrans { get; set; }

    public virtual DbSet<SeguimientosLotesEsquemasTran> SeguimientosLotesEsquemasTrans { get; set; }

    public virtual DbSet<SeguimientosLotesEventosIndicadoresTran> SeguimientosLotesEventosIndicadoresTrans { get; set; }

    public virtual DbSet<SeguimientosLotesEventosProcedimientosTran> SeguimientosLotesEventosProcedimientosTrans { get; set; }

    public virtual DbSet<SeguimientosLotesEventosTipoCatum> SeguimientosLotesEventosTipoCata { get; set; }

    public virtual DbSet<SeguimientosLotesEventosTran> SeguimientosLotesEventosTrans { get; set; }

    public virtual DbSet<SeguimientosLotesTran> SeguimientosLotesTrans { get; set; }

    public virtual DbSet<SeguimientosMaster> SeguimientosMasters { get; set; }

    public virtual DbSet<SeguimientosProcedimientosLogTran> SeguimientosProcedimientosLogTrans { get; set; }

    public virtual DbSet<SeguimientosProrrogasTran> SeguimientosProrrogasTrans { get; set; }

    public virtual DbSet<SeguimientosRobotInstanciasConfig> SeguimientosRobotInstanciasConfigs { get; set; }

    public virtual DbSet<SeguridadConsultaCiudadanosIntranetLogTran> SeguridadConsultaCiudadanosIntranetLogTrans { get; set; }

    public virtual DbSet<SeguridadConsultasCatum> SeguridadConsultasCata { get; set; }

    public virtual DbSet<SeguridadEventosLogsTipoCatum> SeguridadEventosLogsTipoCata { get; set; }

    public virtual DbSet<SeguridadEventosLogsTran> SeguridadEventosLogsTrans { get; set; }

    public virtual DbSet<SeguridadGruposCatum> SeguridadGruposCata { get; set; }

    public virtual DbSet<SeguridadGruposConsultasTran> SeguridadGruposConsultasTrans { get; set; }

    public virtual DbSet<SeguridadGruposFuncionesTran> SeguridadGruposFuncionesTrans { get; set; }

    public virtual DbSet<SeguridadGruposPermisosTran> SeguridadGruposPermisosTrans { get; set; }

    public virtual DbSet<SeguridadGruposProcesosTran> SeguridadGruposProcesosTrans { get; set; }

    public virtual DbSet<SeguridadPermisosCatum> SeguridadPermisosCata { get; set; }

    public virtual DbSet<SeguridadUsuariosContactosTran> SeguridadUsuariosContactosTrans { get; set; }

    public virtual DbSet<SeguridadUsuariosDocumentosTran> SeguridadUsuariosDocumentosTrans { get; set; }

    public virtual DbSet<SeguridadUsuariosEstadoClaveCatum> SeguridadUsuariosEstadoClaveCata { get; set; }

    public virtual DbSet<SeguridadUsuariosGruposTran> SeguridadUsuariosGruposTrans { get; set; }

    public virtual DbSet<SeguridadUsuariosMaster> SeguridadUsuariosMasters { get; set; }

    public virtual DbSet<SeguridadUsuariosNovedadTipoCatum> SeguridadUsuariosNovedadTipoCata { get; set; }

    public virtual DbSet<Selec> Selecs { get; set; }

    public virtual DbSet<SisalrilVt> SisalrilVts { get; set; }

    public virtual DbSet<SisalrilVt2> SisalrilVt2s { get; set; }

    public virtual DbSet<SisalrilVtHistorico> SisalrilVtHistoricos { get; set; }

    public virtual DbSet<SisalrilVtLote> SisalrilVtLotes { get; set; }

    public virtual DbSet<SisalrilVtStatus> SisalrilVtStatuses { get; set; }

    public virtual DbSet<SistemasAlertasFrecuenciasCatum> SistemasAlertasFrecuenciasCata { get; set; }

    public virtual DbSet<SistemasAlertasFrecuenciasTran> SistemasAlertasFrecuenciasTrans { get; set; }

    public virtual DbSet<SistemasAlertasMaster> SistemasAlertasMasters { get; set; }

    public virtual DbSet<SistemasAlertasPeriodicidadesTran> SistemasAlertasPeriodicidadesTrans { get; set; }

    public virtual DbSet<SistemasAlertasTiemposIntervalosCatum> SistemasAlertasTiemposIntervalosCata { get; set; }

    public virtual DbSet<SistemasAlertasTran> SistemasAlertasTrans { get; set; }

    public virtual DbSet<SistemasAlertasVisualizacionesTran> SistemasAlertasVisualizacionesTrans { get; set; }

    public virtual DbSet<SistemasArchivosCatum> SistemasArchivosCata { get; set; }

    public virtual DbSet<SistemasArchivosEstructurasCatum> SistemasArchivosEstructurasCata { get; set; }

    public virtual DbSet<SistemasAyudasConfig> SistemasAyudasConfigs { get; set; }

    public virtual DbSet<SistemasControlesCatum> SistemasControlesCata { get; set; }

    public virtual DbSet<SistemasControlesNombresPublicosConfig> SistemasControlesNombresPublicosConfigs { get; set; }

    public virtual DbSet<SistemasCorreosDestinatariosCatum> SistemasCorreosDestinatariosCata { get; set; }

    public virtual DbSet<SistemasCorreosEstadosCatum> SistemasCorreosEstadosCata { get; set; }

    public virtual DbSet<SistemasCorreosPlantillasCatum> SistemasCorreosPlantillasCata { get; set; }

    public virtual DbSet<SistemasCorreosTran> SistemasCorreosTrans { get; set; }

    public virtual DbSet<SistemasDocumentosMaster> SistemasDocumentosMasters { get; set; }

    public virtual DbSet<SistemasDocumentosTran> SistemasDocumentosTrans { get; set; }

    public virtual DbSet<SistemasErroresCatum> SistemasErroresCata { get; set; }

    public virtual DbSet<SistemasErroresTran> SistemasErroresTrans { get; set; }

    public virtual DbSet<SistemasMaster> SistemasMasters { get; set; }

    public virtual DbSet<SistemasMensajesConfig> SistemasMensajesConfigs { get; set; }

    public virtual DbSet<SistemasModulosControlesTran> SistemasModulosControlesTrans { get; set; }

    public virtual DbSet<SistemasModulosFuncionesTran> SistemasModulosFuncionesTrans { get; set; }

    public virtual DbSet<SistemasModulosMaster> SistemasModulosMasters { get; set; }

    public virtual DbSet<SistemasOperacionesTipoCatum> SistemasOperacionesTipoCata { get; set; }

    public virtual DbSet<SistemasParametrosConfig> SistemasParametrosConfigs { get; set; }

    public virtual DbSet<SistemasProcesosCatum> SistemasProcesosCata { get; set; }

    public virtual DbSet<SistemasPublicosConfig> SistemasPublicosConfigs { get; set; }

    public virtual DbSet<SistemasSeguimientosEstadosCatum> SistemasSeguimientosEstadosCata { get; set; }

    public virtual DbSet<SistemasSeguimientosMaster> SistemasSeguimientosMasters { get; set; }

    public virtual DbSet<SistemasValoresDefinidosConfig> SistemasValoresDefinidosConfigs { get; set; }

    public virtual DbSet<SistemasWebserviceProcesosLogTran> SistemasWebserviceProcesosLogTrans { get; set; }

    public virtual DbSet<SistemasWebserviceProcesosMaster> SistemasWebserviceProcesosMasters { get; set; }

    public virtual DbSet<SistemasWebserviceProcesosParametrosTran> SistemasWebserviceProcesosParametrosTrans { get; set; }

    public virtual DbSet<SrlCertificacionesAfiliadosTran> SrlCertificacionesAfiliadosTrans { get; set; }

    public virtual DbSet<SrlCertificacionesAfiliadosVistum> SrlCertificacionesAfiliadosVista { get; set; }

    public virtual DbSet<SrlCertificacionesEstadosCatum> SrlCertificacionesEstadosCata { get; set; }

    public virtual DbSet<SrlCertificacionesMaster> SrlCertificacionesMasters { get; set; }

    public virtual DbSet<SrlCertificacionesRegionesAnatomicasCatum> SrlCertificacionesRegionesAnatomicasCata { get; set; }

    public virtual DbSet<SrlComisionesMedicasMaster> SrlComisionesMedicasMasters { get; set; }

    public virtual DbSet<SrlComisionesMedicasRegionesCatum> SrlComisionesMedicasRegionesCata { get; set; }

    public virtual DbSet<SubGruposAreasCatum> SubGruposAreasCata { get; set; }

    public virtual DbSet<SubGruposAtencionesServiciosTipoCatum> SubGruposAtencionesServiciosTipoCata { get; set; }

    public virtual DbSet<SubGruposCategoriasCatum> SubGruposCategoriasCata { get; set; }

    public virtual DbSet<SubGruposCatum> SubGruposCata { get; set; }

    public virtual DbSet<SubGruposGruposCatum> SubGruposGruposCata { get; set; }

    public virtual DbSet<SubGruposPoblacionesCatum> SubGruposPoblacionesCata { get; set; }

    public virtual DbSet<SubGruposServiciosCatum> SubGruposServiciosCata { get; set; }

    public virtual DbSet<SubgruposCie09Catum> SubgruposCie09Cata { get; set; }

    public virtual DbSet<SubgruposCie10Catum> SubgruposCie10Cata { get; set; }

    public virtual DbSet<SysDiagramsAuditore> SysDiagramsAuditores { get; set; }

    public virtual DbSet<SysDiagramsProfesionale> SysDiagramsProfesionales { get; set; }

    public virtual DbSet<TempoPruebaCiudadano> TempoPruebaCiudadanos { get; set; }

    public virtual DbSet<TrabajadoresFf> TrabajadoresFfs { get; set; }

    public virtual DbSet<TraspasoSolicitudesTipoCatum> TraspasoSolicitudesTipoCata { get; set; }

    public virtual DbSet<TraspasosAccionCondicionEnfermedadHistorico> TraspasosAccionCondicionEnfermedadHistoricos { get; set; }

    public virtual DbSet<TraspasosAccionCondicionEnfermedadTran> TraspasosAccionCondicionEnfermedadTrans { get; set; }

    public virtual DbSet<TraspasosAccionProblemaImagenHistorico> TraspasosAccionProblemaImagenHistoricos { get; set; }

    public virtual DbSet<TraspasosAccionSisalrilArsOrigenDestinoTran> TraspasosAccionSisalrilArsOrigenDestinoTrans { get; set; }

    public virtual DbSet<TraspasosAccionesCatum> TraspasosAccionesCata { get; set; }

    public virtual DbSet<TraspasosAfiliadosTran> TraspasosAfiliadosTrans { get; set; }

    public virtual DbSet<TraspasosAfiliadosTrans99> TraspasosAfiliadosTrans99s { get; set; }

    public virtual DbSet<TraspasosCancelacionSisalrilArsTran> TraspasosCancelacionSisalrilArsTrans { get; set; }

    public virtual DbSet<TraspasosErroresCatum> TraspasosErroresCata { get; set; }

    public virtual DbSet<TraspasosErroresRespuestasTran> TraspasosErroresRespuestasTrans { get; set; }

    public virtual DbSet<TraspasosErroresTran> TraspasosErroresTrans { get; set; }

    public virtual DbSet<TraspasosEstadosCatum> TraspasosEstadosCata { get; set; }

    public virtual DbSet<TraspasosFormulariosCdeDetallesTran> TraspasosFormulariosCdeDetallesTrans { get; set; }

    public virtual DbSet<TraspasosFormulariosCdeTran> TraspasosFormulariosCdeTrans { get; set; }

    public virtual DbSet<TraspasosHistorico> TraspasosHistoricos { get; set; }

    public virtual DbSet<TraspasosMaster> TraspasosMasters { get; set; }

    public virtual DbSet<TraspasosMaster1> TraspasosMaster1s { get; set; }

    public virtual DbSet<TraspasosMaster99> TraspasosMaster99s { get; set; }

    public virtual DbSet<TraspasosMasterDuver> TraspasosMasterDuvers { get; set; }

    public virtual DbSet<TraspasosMasterVistum> TraspasosMasterVista { get; set; }

    public virtual DbSet<TraspasosNotificacionArsCancelacionTran> TraspasosNotificacionArsCancelacionTrans { get; set; }

    public virtual DbSet<TraspasosNotificacionCondicionEnfermedadTran> TraspasosNotificacionCondicionEnfermedadTrans { get; set; }

    public virtual DbSet<TraspasosNuctCeTran> TraspasosNuctCeTrans { get; set; }

    public virtual DbSet<TraspasosNuctErroresCatum> TraspasosNuctErroresCata { get; set; }

    public virtual DbSet<TraspasosNuctErroresRechazosCatum> TraspasosNuctErroresRechazosCata { get; set; }

    public virtual DbSet<TraspasosNuctErroresRechazosTran> TraspasosNuctErroresRechazosTrans { get; set; }

    public virtual DbSet<TraspasosNuctErroresTran> TraspasosNuctErroresTrans { get; set; }

    public virtual DbSet<TraspasosNuctRechazosTran> TraspasosNuctRechazosTrans { get; set; }

    public virtual DbSet<TraspasosNucufAccionCondicionEnfermedadTran> TraspasosNucufAccionCondicionEnfermedadTrans { get; set; }

    public virtual DbSet<TraspasosNucufAltasTran> TraspasosNucufAltasTrans { get; set; }

    public virtual DbSet<TraspasosNucufAutorizacionCancelacionTran> TraspasosNucufAutorizacionCancelacionTrans { get; set; }

    public virtual DbSet<TraspasosNucufBajasTran> TraspasosNucufBajasTrans { get; set; }

    public virtual DbSet<TraspasosNucufDetalleAutorizacionCancelacionTran> TraspasosNucufDetalleAutorizacionCancelacionTrans { get; set; }

    public virtual DbSet<TraspasosNucufMaster> TraspasosNucufMasters { get; set; }

    public virtual DbSet<TraspasosNucufNotificacionCondicionEnfermedadTran> TraspasosNucufNotificacionCondicionEnfermedadTrans { get; set; }

    public virtual DbSet<TraspasosNucufNotificacionPreavisoEfectividadTran> TraspasosNucufNotificacionPreavisoEfectividadTrans { get; set; }

    public virtual DbSet<TraspasosNucufNotificacionSolicitudesArsDestinoTran> TraspasosNucufNotificacionSolicitudesArsDestinoTrans { get; set; }

    public virtual DbSet<TraspasosNucufRechazosTran> TraspasosNucufRechazosTrans { get; set; }

    public virtual DbSet<TraspasosNucufTran> TraspasosNucufTrans { get; set; }

    public virtual DbSet<TraspasosProblemasImagenCatum> TraspasosProblemasImagenCata { get; set; }

    public virtual DbSet<TraspasosProblemasImagenDetallesTran> TraspasosProblemasImagenDetallesTrans { get; set; }

    public virtual DbSet<TraspasosProcedimientosVistum> TraspasosProcedimientosVista { get; set; }

    public virtual DbSet<TraspasosRechazosErroresTran> TraspasosRechazosErroresTrans { get; set; }

    public virtual DbSet<TraspasosRechazosTran> TraspasosRechazosTrans { get; set; }

    public virtual DbSet<TraspasosRespuestaAccionCondicionEnfermedadTran> TraspasosRespuestaAccionCondicionEnfermedadTrans { get; set; }

    public virtual DbSet<TraspasosRespuestasCatum> TraspasosRespuestasCata { get; set; }

    public virtual DbSet<TraspasosSancionesCatum> TraspasosSancionesCata { get; set; }

    public virtual DbSet<TraspasosSancionesNivelesCatum> TraspasosSancionesNivelesCata { get; set; }

    public virtual DbSet<TraspasosSeguimientoProblemaImagenTran> TraspasosSeguimientoProblemaImagenTrans { get; set; }

    public virtual DbSet<TraspasosSeguimientosCondicionEnfermedadTran> TraspasosSeguimientosCondicionEnfermedadTrans { get; set; }

    public virtual DbSet<TraspasosSeguimientosEstadosCatum> TraspasosSeguimientosEstadosCata { get; set; }

    public virtual DbSet<TraspasosSeguimientosMaster> TraspasosSeguimientosMasters { get; set; }

    public virtual DbSet<TraspasosSeguimientosProblemaImagenTran> TraspasosSeguimientosProblemaImagenTrans { get; set; }

    public virtual DbSet<TraspasosSeguimientosTipoCatum> TraspasosSeguimientosTipoCata { get; set; }

    public virtual DbSet<TraspasosSolicitudesImagenesUnipagoTran> TraspasosSolicitudesImagenesUnipagoTrans { get; set; }

    public virtual DbSet<TraspasosTipoCatum> TraspasosTipoCata { get; set; }

    public virtual DbSet<TraspasosUsuariosAsignacionesTran> TraspasosUsuariosAsignacionesTrans { get; set; }

    public virtual DbSet<TraspasosUsuariosEstadosCatum> TraspasosUsuariosEstadosCata { get; set; }

    public virtual DbSet<TraspasosUsuariosHistorico> TraspasosUsuariosHistoricos { get; set; }

    public virtual DbSet<TraspasosUsuariosMaster> TraspasosUsuariosMasters { get; set; }

    public virtual DbSet<TraspasosUsuariosMotivosCatum> TraspasosUsuariosMotivosCata { get; set; }

    public virtual DbSet<TraspasosUsuariosSolicitudesEstadosCatum> TraspasosUsuariosSolicitudesEstadosCata { get; set; }

    public virtual DbSet<TraspasosUsuariosSolicitudesHistorico> TraspasosUsuariosSolicitudesHistoricos { get; set; }

    public virtual DbSet<TraspasosUsuariosSolicitudesRequerimientosTran> TraspasosUsuariosSolicitudesRequerimientosTrans { get; set; }

    public virtual DbSet<TraspasosUsuariosSolicitudesTran> TraspasosUsuariosSolicitudesTrans { get; set; }

    public virtual DbSet<TraspasosVecimientosTipoCatum> TraspasosVecimientosTipoCata { get; set; }

    public virtual DbSet<TrpSeguimiento> TrpSeguimientos { get; set; }

    public virtual DbSet<TssActividadesEconomicasCatum> TssActividadesEconomicasCata { get; set; }

    public virtual DbSet<TssCedulasActualizacionesSisalrilTran> TssCedulasActualizacionesSisalrilTrans { get; set; }

    public virtual DbSet<TssCiudadanosMaster> TssCiudadanosMasters { get; set; }

    public virtual DbSet<TssCiudadanosMaster999> TssCiudadanosMaster999s { get; set; }

    public virtual DbSet<TssCiudadanosMasterUp> TssCiudadanosMasterUps { get; set; }

    public virtual DbSet<TssControlCargaVistasTran> TssControlCargaVistasTrans { get; set; }

    public virtual DbSet<TssCuentasBancosTipoCatum> TssCuentasBancosTipoCata { get; set; }

    public virtual DbSet<TssDocumentoTipoCatum> TssDocumentoTipoCata { get; set; }

    public virtual DbSet<TssEmpleadoresActivosHistorico> TssEmpleadoresActivosHistoricos { get; set; }

    public virtual DbSet<TssEmpleadoresHistorico> TssEmpleadoresHistoricos { get; set; }

    public virtual DbSet<TssEmpleadoresMaster> TssEmpleadoresMasters { get; set; }

    public virtual DbSet<TssEmpleadoresTotalVista99> TssEmpleadoresTotalVista99s { get; set; }

    public virtual DbSet<TssEmpleadoresTotalVistaEs04072022> TssEmpleadoresTotalVistaEs04072022s { get; set; }

    public virtual DbSet<TssEmpleadoresTotalVistum> TssEmpleadoresTotalVista { get; set; }

    public virtual DbSet<TssEntidadesRecaudadorasCatum> TssEntidadesRecaudadorasCata { get; set; }

    public virtual DbSet<TssEstadosCivilCatum> TssEstadosCivilCata { get; set; }

    public virtual DbSet<TssInhabilidadJceTipoCatum> TssInhabilidadJceTipoCata { get; set; }

    public virtual DbSet<TssNacionalidadesCatum> TssNacionalidadesCata { get; set; }

    public virtual DbSet<TssPensionadosDispersionesTran> TssPensionadosDispersionesTrans { get; set; }

    public virtual DbSet<TssPensionadosHistorico> TssPensionadosHistoricos { get; set; }

    public virtual DbSet<TssPensionadosMaster> TssPensionadosMasters { get; set; }

    public virtual DbSet<TssPensionadosMotivoBajaCatum> TssPensionadosMotivoBajaCata { get; set; }

    public virtual DbSet<TssPensionadosNovedadesDetallesTipoCatum> TssPensionadosNovedadesDetallesTipoCata { get; set; }

    public virtual DbSet<TssPensionadosNovedadesDetallesTran> TssPensionadosNovedadesDetallesTrans { get; set; }

    public virtual DbSet<TssPensionadosNovedadesTipoCatum> TssPensionadosNovedadesTipoCata { get; set; }

    public virtual DbSet<TssPensionadosNovedadesTran> TssPensionadosNovedadesTrans { get; set; }

    public virtual DbSet<TssPensionadosStatusCatum> TssPensionadosStatusCata { get; set; }

    public virtual DbSet<TssPensionadosVistum> TssPensionadosVista { get; set; }

    public virtual DbSet<TssSangreTipoCatum> TssSangreTipoCata { get; set; }

    public virtual DbSet<TssSectoresEconomicosCatum> TssSectoresEconomicosCata { get; set; }

    public virtual DbSet<TssSectoresSalarialesCatum> TssSectoresSalarialesCata { get; set; }

    public virtual DbSet<TssSectoresSalarialesEscalaTran> TssSectoresSalarialesEscalaTrans { get; set; }

    public virtual DbSet<TssTrabajadoresActivosHistorico> TssTrabajadoresActivosHistoricos { get; set; }

    public virtual DbSet<TssTrabajadoresHistorico> TssTrabajadoresHistoricos { get; set; }

    public virtual DbSet<TssTrabajadoresTotalVistum> TssTrabajadoresTotalVista { get; set; }

    public virtual DbSet<TssTrabajadoresTran> TssTrabajadoresTrans { get; set; }

    public virtual DbSet<TssTrabajadoresTrans20072023> TssTrabajadoresTrans20072023s { get; set; }

    public virtual DbSet<TssTrabajadoresVistum> TssTrabajadoresVista { get; set; }

    public virtual DbSet<UnipagoAfiliacionWebServiceResultadosTran> UnipagoAfiliacionWebServiceResultadosTrans { get; set; }

    public virtual DbSet<UnisigmaImpedimentosSolicitudTraspaso> UnisigmaImpedimentosSolicitudTraspasos { get; set; }

    public virtual DbSet<UsuariosBitacoraRecepcionTran> UsuariosBitacoraRecepcionTrans { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Server=DesarrolloSrv;Database=Simon;Integrated Security=True;TrustServerCertificate=True;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AccidentesColisionesTipoCatum>(entity =>
        {
            entity.HasKey(e => e.ColisionTipoNumero);

            entity.ToTable("Accidentes_Colisiones_Tipo_Cata", tb => tb.HasComment("Es un catálogo con los detalles de los tipo de Colisiones relacionados con los Accidentes de Transito no laborales), su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ColisionTipoNumero)
                .HasComment("Número que identifica con que Colisionó el afiliado.")
                .HasColumnName("Colision_Tipo_Numero");
            entity.Property(e => e.ColisionTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción de la colisión ocurrida durante el accidente.")
                .HasColumnName("Colision_Tipo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AccidentesDiagnosticosCieCatum>(entity =>
        {
            entity.HasKey(e => e.DiagnosticoCodigoCie);

            entity.ToTable("Accidentes_Diagnosticos_CIE_Cata", tb => tb.HasComment("Es una tabla catálogo con los diagnosticos de una enfermedad o padecimiento para Accidentes de Transito reportados por las ARS y pertenece al código de la Clasificación Internacional de las enfermedades (CIE) , esta clasificación es de la Organización Mundial de la Salud (OMS)."));

            entity.Property(e => e.DiagnosticoCodigoCie)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasComment("Es el código de una enfermedad o padecimiento y pertenece al código de la Clasificación Internacional de las enfermedades (CIE) , esta clasificación es de la Organización Mundial de la Salud (OMS).")
                .HasColumnName("Diagnostico_Codigo_CIE");
            entity.Property(e => e.DiagnosticoCieDescripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Es la descripción de una enfermedad o padecimiento y pertenece al código de la Clasificación Internacional de las enfermedades (CIE) , esta clasificación es de la Organización Mundial de la Salud (OMS).")
                .HasColumnName("Diagnostico_CIE_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AccidentesOrigenesCatum>(entity =>
        {
            entity.HasKey(e => e.OrigenNumero);

            entity.ToTable("Accidentes_Origenes_Cata", tb => tb.HasComment("Es un catálogo con los detalles del Origen relacionado con los Accidentes de Transito no laborales), su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.OrigenNumero)
                .HasComment("Número que identifica el origen del accidente.")
                .HasColumnName("Origen_Numero");
            entity.Property(e => e.OrigenDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del origen del accidente.")
                .HasColumnName("Origen_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AccidentesPosicionesLesionadosCatum>(entity =>
        {
            entity.HasKey(e => e.PosicionLesionadoNumero);

            entity.ToTable("Accidentes_Posiciones_Lesionados_Cata", tb => tb.HasComment("Es un catálogo con los detalles de la Posición del lesionado en el Accidente relacionados con los Accidentes de Transito no laborales), su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PosicionLesionadoNumero)
                .HasComment("Representa la Posición del lesionado en el Accidente. ")
                .HasColumnName("Posicion_Lesionado_Numero");
            entity.Property(e => e.PosicionLesionadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción de la Posición del lesionado en el Accidente.")
                .HasColumnName("Posicion_Lesionado_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AccidentesTransitoArsRecargasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.AccidenteFecha, e.AfiliadoNss, e.AutorizacionNumero });

            entity.ToTable("Accidentes_Transito_Ars_Recargas_Trans", tb => tb.HasComment("Es una tabla transaccional,  que contiene los detalles de los Accidentes de Transito no laborables cubiertos por la ARS,  su fuente de datos es el esquema 37 procesado por el Robot Simon. "));

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico.")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.AccidenteFecha)
                .HasComment("Fecha del Accidente.")
                .HasColumnName("Accidente_Fecha");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_Nss");
            entity.Property(e => e.AutorizacionNumero)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasComment("Número único que asigna la ARS a cada autorización de cobertura en su sistema.")
                .HasColumnName("Autorizacion_Numero");
            entity.Property(e => e.AccidenteHora)
                .HasComment("Hora del Accidente.")
                .HasColumnName("Accidente_Hora");
            entity.Property(e => e.ColisionTipoNumero)
                .HasComment("Con que Colisionó el Afiliado.")
                .HasColumnName("Colision_Tipo_Numero");
            entity.Property(e => e.DiagnosticoFinalCodigo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasComment("Diagnóstico Final (código CIE).")
                .HasColumnName("Diagnostico_Final_Codigo");
            entity.Property(e => e.DiagnosticoInicialCodigo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasComment("Diagnóstico Inicial (código CIE).")
                .HasColumnName("Diagnostico_Inicial_Codigo");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Municipio donde ocurrió el Accidente.")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.OrigenFechaActualizacion)
                .HasComment("Fecha en que se actualizó el origen del Accidente. ")
                .HasColumnName("Origen_Fecha_Actualizacion");
            entity.Property(e => e.OrigenNumero)
                .HasComment("Origen del Accidente.")
                .HasColumnName("Origen_Numero");
            entity.Property(e => e.OrigenNumeroCambio)
                .HasComment("Cambio del Origen del Accidente.")
                .HasColumnName("Origen_Numero_Cambio");
            entity.Property(e => e.PosicionLesionadoNumero)
                .HasComment("Posición del lesionado en el Accidente.")
                .HasColumnName("Posicion_Lesionado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.VehiculoTipoNumero)
                .HasComment("Tipo de Vehículo en el cual ocurrió el Accidente.")
                .HasColumnName("Vehiculo_Tipo_Numero");
        });

        modelBuilder.Entity<AccidentesTransitoArsTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.AccidenteFecha, e.AfiliadoNss, e.AutorizacionNumero });

            entity.ToTable("Accidentes_Transito_Ars_Temporal_Trans", tb => tb.HasComment("Es una tabla transaccional,  que contiene los detalles de los Accidentes de Transito no laborables cubiertos por la ARS,  su fuente de datos es el esquema 37 procesado por el Robot Simon. "));

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico.")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.AccidenteFecha)
                .HasComment("Fecha del Accidente.")
                .HasColumnName("Accidente_Fecha");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_Nss");
            entity.Property(e => e.AutorizacionNumero)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasComment("Número único que asigna la ARS a cada autorización de cobertura en su sistema.")
                .HasColumnName("Autorizacion_Numero");
            entity.Property(e => e.AccidenteHora)
                .HasComment("Hora del Accidente.")
                .HasColumnName("Accidente_Hora");
            entity.Property(e => e.ColisionTipoNumero)
                .HasComment("Con que Colisionó el Afiliado.")
                .HasColumnName("Colision_Tipo_Numero");
            entity.Property(e => e.DiagnosticoFinalCodigo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasComment("Diagnóstico Final (código CIE).")
                .HasColumnName("Diagnostico_Final_Codigo");
            entity.Property(e => e.DiagnosticoInicialCodigo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasComment("Diagnóstico Inicial (código CIE).")
                .HasColumnName("Diagnostico_Inicial_Codigo");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Municipio donde ocurrió el Accidente.")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.OrigenFechaActualizacion)
                .HasComment("Fecha en que se actualizó el origen del Accidente. ")
                .HasColumnName("Origen_Fecha_Actualizacion");
            entity.Property(e => e.OrigenNumero)
                .HasComment("Origen del Accidente.")
                .HasColumnName("Origen_Numero");
            entity.Property(e => e.OrigenNumeroCambio)
                .HasComment("Cambio del Origen del Accidente.")
                .HasColumnName("Origen_Numero_Cambio");
            entity.Property(e => e.PosicionLesionadoNumero)
                .HasComment("Posición del lesionado en el Accidente.")
                .HasColumnName("Posicion_Lesionado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.VehiculoTipoNumero)
                .HasComment("Tipo de Vehículo en el cual ocurrió el Accidente.")
                .HasColumnName("Vehiculo_Tipo_Numero");
        });

        modelBuilder.Entity<AccidentesTransitoArsTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoPeriodo, e.ArsNumero, e.AccidenteFecha, e.AfiliadoNss, e.AutorizacionNumero });

            entity.ToTable("Accidentes_Transito_Ars_Trans", tb => tb.HasComment("Es una tabla transaccional,  que contiene los detalles de los Accidentes de Transito no laborables cubiertos por la ARS,  su fuente de datos es el esquema 37 procesado por el Robot Simon. "));

            entity.Property(e => e.SeguimientoPeriodo)
                .HasComment("Periodo (Año y Mes) correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.AccidenteFecha)
                .HasComment("Fecha del Accidente.")
                .HasColumnName("Accidente_Fecha");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_Nss");
            entity.Property(e => e.AutorizacionNumero)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasComment("Número único que asigna la ARS a cada autorización de cobertura en su sistema.")
                .HasColumnName("Autorizacion_Numero");
            entity.Property(e => e.AccidenteHora)
                .HasComment("Hora del Accidente.")
                .HasColumnName("Accidente_Hora");
            entity.Property(e => e.ColisionTipoNumero)
                .HasComment("Con que Colisionó el Afiliado.")
                .HasColumnName("Colision_Tipo_Numero");
            entity.Property(e => e.DiagnosticoFinalCodigo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasComment("Diagnóstico Final (código CIE).")
                .HasColumnName("Diagnostico_Final_Codigo");
            entity.Property(e => e.DiagnosticoInicialCodigo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasComment("Diagnóstico Inicial (código CIE).")
                .HasColumnName("Diagnostico_Inicial_Codigo");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Municipio donde ocurrió el Accidente.")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.OrigenFechaActualizacion)
                .HasComment("Fecha en que se actualizó el origen del Accidente. ")
                .HasColumnName("Origen_Fecha_Actualizacion");
            entity.Property(e => e.OrigenNumero)
                .HasComment("Origen del Accidente.")
                .HasColumnName("Origen_Numero");
            entity.Property(e => e.OrigenNumeroCambio)
                .HasComment("Cambio del Origen del Accidente.")
                .HasColumnName("Origen_Numero_Cambio");
            entity.Property(e => e.PosicionLesionadoNumero)
                .HasComment("Posición del lesionado en el Accidente.")
                .HasColumnName("Posicion_Lesionado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico.")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.VehiculoTipoNumero)
                .HasComment("Tipo de Vehículo en el cual ocurrió el Accidente.")
                .HasColumnName("Vehiculo_Tipo_Numero");

            entity.HasOne(d => d.AfiliadoNssNavigation).WithMany(p => p.AccidentesTransitoArsTrans)
                .HasForeignKey(d => d.AfiliadoNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Accidentes_Transito_Ars_Trans_TSS_Ciudadanos_Master");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.AccidentesTransitoArsTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Accidentes_Transito_Ars_Trans_ARS_Master");

            entity.HasOne(d => d.ColisionTipoNumeroNavigation).WithMany(p => p.AccidentesTransitoArsTrans)
                .HasForeignKey(d => d.ColisionTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Accidentes_Transito_Ars_Trans_Accidentes_Colisiones_Tipo_Cata");

            entity.HasOne(d => d.DiagnosticoInicialCodigoNavigation).WithMany(p => p.AccidentesTransitoArsTrans)
                .HasForeignKey(d => d.DiagnosticoInicialCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Accidentes_Transito_Ars_Trans_Accidentes_Diagnosticos_CIE_Cata");

            entity.HasOne(d => d.MunicipioNumeroNavigation).WithMany(p => p.AccidentesTransitoArsTrans)
                .HasForeignKey(d => d.MunicipioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Accidentes_Transito_Ars_Trans_Comunes_Municipios_Cata");

            entity.HasOne(d => d.OrigenNumeroNavigation).WithMany(p => p.AccidentesTransitoArsTrans)
                .HasForeignKey(d => d.OrigenNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Accidentes_Transito_Ars_Trans_Accidentes_Origenes_Cata");

            entity.HasOne(d => d.PosicionLesionadoNumeroNavigation).WithMany(p => p.AccidentesTransitoArsTrans)
                .HasForeignKey(d => d.PosicionLesionadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Accidentes_Transito_Ars_Trans_Accidentes_Posiciones_Lesionados_Cata");

            entity.HasOne(d => d.VehiculoTipoNumeroNavigation).WithMany(p => p.AccidentesTransitoArsTrans)
                .HasForeignKey(d => d.VehiculoTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Accidentes_Transito_Ars_Trans_Accidentes_Vehiculos_Tipo_Cata");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.AccidentesTransitoArsTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Accidentes_Transito_Ars_Trans_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<AccidentesVehiculosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.VehiculoTipoNumero);

            entity.ToTable("Accidentes_Vehiculos_Tipo_Cata", tb => tb.HasComment("Es un catálogo con los detalles de los tipo de Vehiculos relacionados con los Accidentes de Transito no laborales), su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.VehiculoTipoNumero)
                .HasComment("Número que identifica el Tipo de Vehículo en el cual ocurrió el accidente.")
                .HasColumnName("Vehiculo_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.VehiculoTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción Tipo de Vehículo en el cual ocurrió el accidente.")
                .HasColumnName("Vehiculo_Tipo_Descripcion");
        });

        modelBuilder.Entity<AcreditacionesAgenteTipoCatum>(entity =>
        {
            entity.HasKey(e => e.AgenteTipoNumero);

            entity.ToTable("Acreditaciones_Agente_Tipo_Cata", tb => tb.HasComment("Es un catálogo con los tipo de agentes promotores  para el sistema de acreditación,  su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.AgenteTipoNumero)
                .HasComment("Número único que identifica el tipo de agente promotor (Local, Nacional).")
                .HasColumnName("Agente_Tipo_Numero");
            entity.Property(e => e.AgenteTipoDescripcion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Descripción  del tipo de agente promotor (Local, Nacional).")
                .HasColumnName("Agente_Tipo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AcreditacionesCategoriasCatum>(entity =>
        {
            entity.HasKey(e => e.AcreditacionCategoriaNumero);

            entity.ToTable("Acreditaciones_Categorias_Cata", tb => tb.HasComment("Es un catálogo con las categorías de acreditación a ser otorgada (Auditor, Promotor, Promotora, Firma Auditoria etc.),  su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.AcreditacionCategoriaNumero)
                .HasComment("Número único que identifica la categoría de acreditación a ser otorgada (Auditor, Promotor, Promotora, Firma Auditoria etc.).")
                .HasColumnName("Acreditacion_Categoria_Numero");
            entity.Property(e => e.AcreditacionCategoriaDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción  de la categoría de acreditación a ser otorgada (Auditor, Promotor, Promotora, Firma Auditoria etc.).")
                .HasColumnName("Acreditacion_Categoria_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AcreditacionesCategoriasClasesCatum>(entity =>
        {
            entity.HasKey(e => new { e.AcreditacionCategoriaNumero, e.AcreditacionClaseNumero });

            entity.ToTable("Acreditaciones_Categorias_Clases_Cata", tb => tb.HasComment("Es un  catálogo donde se conjugan las clases y categorías para el sistema acreditación,  su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.AcreditacionCategoriaNumero)
                .HasComment("Número único que identifica la categoría de acreditación a ser otorgada (Auditor, Promotor, Promotora, Firma Auditoria etc.).")
                .HasColumnName("Acreditacion_Categoria_Numero");
            entity.Property(e => e.AcreditacionClaseNumero)
                .HasComment("Número único que identifica que quien se está acreditando es una persona o entidad.")
                .HasColumnName("Acreditacion_Clase_Numero");
            entity.Property(e => e.AcreditacionCategoriaClaseDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es la descripción de la conjugación de una clase y categoría en el proceso de acreditación.")
                .HasColumnName("Acreditacion_Categoria_Clase_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AcreditacionCategoriaNumeroNavigation).WithMany(p => p.AcreditacionesCategoriasClasesCata)
                .HasForeignKey(d => d.AcreditacionCategoriaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Categorias_Clases_Cata_Acreditaciones_Categorias_Cata");

            entity.HasOne(d => d.AcreditacionClaseNumeroNavigation).WithMany(p => p.AcreditacionesCategoriasClasesCata)
                .HasForeignKey(d => d.AcreditacionClaseNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Categorias_Clases_Cata_Acreditaciones_Clase_Cata");
        });

        modelBuilder.Entity<AcreditacionesClaseCatum>(entity =>
        {
            entity.HasKey(e => e.AcreditacionClaseNumero);

            entity.ToTable("Acreditaciones_Clase_Cata", tb => tb.HasComment("Es un catálogo con las clase (Personas  y Entidades) clasificadas en el sistema de acreditación,  su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.AcreditacionClaseNumero)
                .HasComment("Número único que identifica que quien se está acreditando es una persona o entidad.")
                .HasColumnName("Acreditacion_Clase_Numero");
            entity.Property(e => e.AcreditacionClaseDescripcion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Descripción de que quien se está acreditando es una persona o entidad.")
                .HasColumnName("Acreditacion_Clase_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AcreditacionesEntidadesMaster>(entity =>
        {
            entity.HasKey(e => e.EntidadNumero).HasName("PK_Acreditacion_Entidad_Master");

            entity.ToTable("Acreditaciones_Entidades_Master", tb =>
                {
                    tb.HasComment("Es un  maestro con los datos de las entidades  que participan en los procesos de acreditación, sistema acreditación,  su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Acreditaciones_Entidades_Master_Delete");
                    tb.HasTrigger("Acreditaciones_Entidades_Master_Update");
                });

            entity.HasIndex(e => e.EmpleadorRegistroPatronal, "IX_Acreditaciones_Entidades_Master").IsUnique();

            entity.Property(e => e.EntidadNumero)
                .HasComment("Número único que identifica cada entidad en los procesos de acreditación.")
                .HasColumnName("Entidad_Numero");
            entity.Property(e => e.AcreditacionCategoriaNumero)
                .HasComment("Número único que identifica la categoría de acreditación a ser otorgada (Auditor, Promotor, Promotora, Firma Auditoria etc.).")
                .HasColumnName("Acreditacion_Categoria_Numero");
            entity.Property(e => e.AcreditacionClaseNumero)
                .HasDefaultValueSql("((1))")
                .HasComment("Número único que identifica que quien se está acreditando es una persona o entidad.")
                .HasColumnName("Acreditacion_Clase_Numero");
            entity.Property(e => e.EmpleadorRegistroPatronal)
                .HasComment("Es el número único que le asigna la Tesorería de la Seguridad Social a cada uno de los empleadores que se registran en dicha institución.    ")
                .HasColumnName("Empleador_Registro_Patronal");
            entity.Property(e => e.EntidadFechaAcreditacion)
                .HasDefaultValueSql("(((1)/(1))/(1900))")
                .HasComment("Fecha en la que se aprobó una entidad en los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Entidad_Fecha_Acreditacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.EmpleadorRegistroPatronalNavigation).WithOne(p => p.AcreditacionesEntidadesMaster)
                .HasForeignKey<AcreditacionesEntidadesMaster>(d => d.EmpleadorRegistroPatronal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditacion_Entidad_Master_TSS_Empleadores_Master");

            entity.HasOne(d => d.AcreditacionC).WithMany(p => p.AcreditacionesEntidadesMasters)
                .HasForeignKey(d => new { d.AcreditacionCategoriaNumero, d.AcreditacionClaseNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Entidades_Master_Acreditaciones_Categorias_Clases_Cata");
        });

        modelBuilder.Entity<AcreditacionesEntidadesPersonasTran>(entity =>
        {
            entity.HasKey(e => new { e.EntidadNumero, e.PersonaNss }).HasName("PK_Acreditaciones_Entidades_Personas_Trans_1");

            entity.ToTable("Acreditaciones_Entidades_Personas_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran las relaciones entre las personas y las entidades para los procesos de acreditación, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.EntidadNumero)
                .HasComment("Número único que identifica cada entidad en los procesos de acreditación.")
                .HasColumnName("Entidad_Numero");
            entity.Property(e => e.PersonaNss).HasColumnName("Persona_NSS");
            entity.Property(e => e.EntidadObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasColumnName("Entidad_Observacion");
            entity.Property(e => e.PersonaFechaAlta)
                .HasColumnType("datetime")
                .HasColumnName("Persona_Fecha_Alta");
            entity.Property(e => e.PersonaFechaBaja)
                .HasColumnType("datetime")
                .HasColumnName("Persona_Fecha_Baja");
            entity.Property(e => e.PersonaRepresentante)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si la persona es o no  la representante de la evaluación de la entidad en el proceso de acreditación.")
                .HasColumnName("Persona_Representante");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.EntidadNumeroNavigation).WithMany(p => p.AcreditacionesEntidadesPersonasTrans)
                .HasForeignKey(d => d.EntidadNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Entidades_Personas_Trans_Acreditaciones_Entidades_Master");

            entity.HasOne(d => d.PersonaNssNavigation).WithMany(p => p.AcreditacionesEntidadesPersonasTrans)
                .HasPrincipalKey(p => p.PersonaNss)
                .HasForeignKey(d => d.PersonaNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Entidades_Personas_Trans_Acreditaciones_Personas_Master");
        });

        modelBuilder.Entity<AcreditacionesEntidadesRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.EntidadNumero, e.RequerimientoNumero });

            entity.ToTable("Acreditaciones_Entidades_Requerimientos_Trans", tb =>
                {
                    tb.HasComment("Es una tabla transaccional donde se registran los un requerimiento (Documento, Identificación, otros), presentado por una entidad para un proceso de acreditación, su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Acreditaciones_Entidades_Requerimientos_Trans_Delete");
                    tb.HasTrigger("Acreditaciones_Entidades_Requerimientos_Trans_Update");
                });

            entity.Property(e => e.EntidadNumero)
                .HasComment("Número único que identifica cada entidad en los procesos de acreditación.")
                .HasColumnName("Entidad_Numero");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoObservacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Observación de un requerimiento (Documento, Identificación, otros), presentado por una persona o entidad  para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Observacion");

            entity.HasOne(d => d.DocumentoCodigoNavigation).WithMany(p => p.AcreditacionesEntidadesRequerimientosTrans)
                .HasForeignKey(d => d.DocumentoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Entidades_Requerimientos_Trans_Comunes_Documentos_Master");

            entity.HasOne(d => d.EntidadNumeroNavigation).WithMany(p => p.AcreditacionesEntidadesRequerimientosTrans)
                .HasForeignKey(d => d.EntidadNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Entidades_Requerimientos_Trans_Acreditaciones_Entidades_Master");

            entity.HasOne(d => d.RequerimientoNumeroNavigation).WithMany(p => p.AcreditacionesEntidadesRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Entidades_Requerimientos_Trans_Acreditaciones_Requerimientos_Cata");
        });

        modelBuilder.Entity<AcreditacionesEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.AcreditacionEstadoNumero).HasName("PK_Acreditaciones_Estados_Cata_1");

            entity.ToTable("Acreditaciones_Estados_Cata");

            entity.Property(e => e.AcreditacionEstadoNumero).HasColumnName("Acreditacion_Estado_Numero");
            entity.Property(e => e.AcreditacionCategoriaNumero).HasColumnName("Acreditacion_Categoria_Numero");
            entity.Property(e => e.AcreditacionEstadoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Acreditacion_Estado_Codigo");
            entity.Property(e => e.AcreditacionEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Acreditacion_Estado_Descripcion");
            entity.Property(e => e.AcreditacionEstadoExplicacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Acreditacion_Estado_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AcreditacionCategoriaNumeroNavigation).WithMany(p => p.AcreditacionesEstadosCata)
                .HasForeignKey(d => d.AcreditacionCategoriaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Estados_Cata_Acreditaciones_Categorias_Cata");
        });

        modelBuilder.Entity<AcreditacionesExamenesDetallesTran>(entity =>
        {
            entity.HasKey(e => new { e.ExamenNumero, e.PreguntaNumero });

            entity.ToTable("Acreditaciones_Examenes_Detalles_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran las preguntas de los exámenes en las actividades de evaluación de los procesos de acreditación, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ExamenNumero)
                .HasComment("Número único que identifica cada examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Numero");
            entity.Property(e => e.PreguntaNumero)
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.ExamenPreguntaSecuencia)
                .HasComment("Secuencia única de cada pregunta de un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Pregunta_Secuencia");
            entity.Property(e => e.ExamenPuntuacion)
                .HasComment("Valor de la repuesta correcta de una pregunta de un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Examen_Puntuacion");
            entity.Property(e => e.ExamenRespuesta)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Repuesta dada por la persona a la pregunta de un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Respuesta");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ExamenNumeroNavigation).WithMany(p => p.AcreditacionesExamenesDetallesTrans)
                .HasForeignKey(d => d.ExamenNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Examenes_Detalles_Trans_Acreditaciones_Examenes_Trans");

            entity.HasOne(d => d.PreguntaNumeroNavigation).WithMany(p => p.AcreditacionesExamenesDetallesTrans)
                .HasForeignKey(d => d.PreguntaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Examenes_Detalles_Trans_Acreditaciones_Preguntas_Cata");
        });

        modelBuilder.Entity<AcreditacionesExamenesLogsTran>(entity =>
        {
            entity.HasKey(e => e.ExamenLogSecuencia).HasName("PK_Promotores_Bitacora");

            entity.ToTable("Acreditaciones_Examenes_Logs_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los eventos relacionados con los exámenes en las actividades de evaluación de los procesos de acreditación, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ExamenLogSecuencia)
                .ValueGeneratedNever()
                .HasComment("Secuencia numérica única que identifica cada registro del log de cada examen. ")
                .HasColumnName("Examen_Log_Secuencia");
            entity.Property(e => e.ExamenLogFechaEntro)
                .HasComment("Fecha y hora en la cual el usuario inicio el llenado del examen.")
                .HasColumnType("datetime")
                .HasColumnName("Examen_Log_Fecha_Entro");
            entity.Property(e => e.ExamenLogFechaSalio)
                .HasComment("Fecha y hora en la cual el usuario termino o se aborto el llenado del examen.")
                .HasColumnType("datetime")
                .HasColumnName("Examen_Log_Fecha_Salio");
            entity.Property(e => e.ExamenLogInterface)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre de la interface que utilizaba el usuario para el llenado del examen.")
                .HasColumnName("Examen_Log_Interface");
            entity.Property(e => e.ExamenNumero)
                .HasComment("Número único que identifica cada examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Numero");
            entity.Property(e => e.PersonaPeriodoClave)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Calve única generada para cada usuario para un período de exámenes.")
                .HasColumnName("Persona_Periodo_Clave");
            entity.Property(e => e.PersonaPeriodoUsuario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Usuario único generado  para cada usuario para un período de exámenes.")
                .HasColumnName("Persona_Periodo_Usuario");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SistemaNumero)
                .HasComment("Número único del sistema de información.")
                .HasColumnName("Sistema_Numero");

            entity.HasOne(d => d.ExamenNumeroNavigation).WithMany(p => p.AcreditacionesExamenesLogsTrans)
                .HasForeignKey(d => d.ExamenNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Examenes_Logs_Trans_Acreditaciones_Examenes_Trans");

            entity.HasOne(d => d.SistemaNumeroNavigation).WithMany(p => p.AcreditacionesExamenesLogsTrans)
                .HasForeignKey(d => d.SistemaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Bitacora_Sistemas_Master");
        });

        modelBuilder.Entity<AcreditacionesExamenesPeriodosTran>(entity =>
        {
            entity.HasKey(e => e.PeriodoNumero);

            entity.ToTable("Acreditaciones_Examenes_Periodos_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los períodos de exámenes en los procesos de acreditación, su fuente de datos los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PeriodoNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Periodo_Numero");
            entity.Property(e => e.AcreditacionCategoriaNumero)
                .HasComment("Número único que identifica la categoría de acreditación a ser otorgada (Auditor, Promotor, Promotora, Firma Auditoria etc.).")
                .HasColumnName("Acreditacion_Categoria_Numero");
            entity.Property(e => e.PeriodoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Estado en el que se encuentra un período específico de exámenes en los procesos de acreditación.")
                .HasColumnName("Periodo_Estado");
            entity.Property(e => e.PeriodoFechaFinal)
                .HasComment("Fecha en la que finaliza un período específico de exámenes en los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Periodo_Fecha_Final");
            entity.Property(e => e.PeriodoFechaInicio)
                .HasComment("Fecha en la que inicia un período específico de exámenes en los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Periodo_Fecha_Inicio");
            entity.Property(e => e.PeriodoHoraInicioExamen)
                .HasComment("Hora en la que debe iniciar un período específico de exámenes en los procesos de acreditación.")
                .HasColumnName("Periodo_Hora_Inicio_Examen");
            entity.Property(e => e.PeriodoObservacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Observación sobre un período específico de exámenes en los procesos de acreditación.")
                .HasColumnName("Periodo_Observacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AcreditacionCategoriaNumeroNavigation).WithMany(p => p.AcreditacionesExamenesPeriodosTrans)
                .HasForeignKey(d => d.AcreditacionCategoriaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Examenes_Periodos_Trans_Acreditaciones_Categorias_Cata");
        });

        modelBuilder.Entity<AcreditacionesExamenesRecibosTran>(entity =>
        {
            entity.HasKey(e => e.ReciboNumero);

            entity.ToTable("Acreditaciones_Examenes_Recibos_Trans", tb =>
                {
                    tb.HasComment("Es una tabla transaccional donde se registran los recibos de resultados de los exámenes en las actividades de evaluación de los procesos de acreditación, su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Acreditaciones_Examenes_Recibos_Trans_Delete");
                    tb.HasTrigger("Acreditaciones_Examenes_Recibos_Trans_Update");
                });

            entity.Property(e => e.ReciboNumero)
                .HasComment("Número único del recibo de resultado de un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Recibo_Numero");
            entity.Property(e => e.ExamenNumero)
                .HasComment("Número único que identifica cada examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Numero");
            entity.Property(e => e.ReciboFecha)
                .HasComment("Fecha del recibo de resultado de un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Recibo_Fecha");
            entity.Property(e => e.ReciboSerial)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Serial generado para un recibo de resultado de un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Recibo_Serial");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ExamenNumeroNavigation).WithMany(p => p.AcreditacionesExamenesRecibosTrans)
                .HasForeignKey(d => d.ExamenNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Examenes_Recibos_Trans_Acreditaciones_Examenes_Trans");
        });

        modelBuilder.Entity<AcreditacionesExamenesTran>(entity =>
        {
            entity.HasKey(e => e.ExamenNumero);

            entity.ToTable("Acreditaciones_Examenes_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los exámenes en las actividades de evaluación de los procesos de acreditación, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.HasIndex(e => new { e.PeriodoNumero, e.PersonaNss }, "IX_Acreditaciones_Examenes_Master");

            entity.Property(e => e.ExamenNumero)
                .HasComment("Número único que identifica cada examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Numero");
            entity.Property(e => e.ExamenEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Estado en que se encuentra (Iniciado o Finalizado)  un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Estado");
            entity.Property(e => e.ExamenFechaFinal)
                .HasComment("Fecha y hora en que terminó una persona  un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Examen_Fecha_Final");
            entity.Property(e => e.ExamenFechaInicio)
                .HasComment("Fecha y hora en que inició una persona  un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Examen_Fecha_Inicio");
            entity.Property(e => e.ExamenResultado)
                .HasComment("Calificación numérica obtenido por la persona en un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Resultado");
            entity.Property(e => e.PeriodoNumero)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Periodo_Numero");
            entity.Property(e => e.PersonaNss)
                .HasComment("Secuencia única asignada a cada persona en el sistema de acreditación.")
                .HasColumnName("Persona_NSS");
            entity.Property(e => e.PromotoresLotes)
                .HasComment("Número único de lote con el que se cargo la acreditación de un promotor de salud en UNIPAGO.")
                .HasColumnName("Promotores_Lotes");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PersonaNssNavigation).WithMany(p => p.AcreditacionesExamenesTrans)
                .HasPrincipalKey(p => p.PersonaNss)
                .HasForeignKey(d => d.PersonaNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Examenes_Trans_Acreditaciones_Personas_Master");

            entity.HasOne(d => d.PromotoresLotesNavigation).WithMany(p => p.AcreditacionesExamenesTrans)
                .HasForeignKey(d => d.PromotoresLotes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Examenes_Master_Acreditaciones_Promotores_Lotes_Trans");

            entity.HasOne(d => d.Per).WithMany(p => p.AcreditacionesExamenesTrans)
                .HasForeignKey(d => new { d.PeriodoNumero, d.PersonaNss })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Examenes_Trans_Acreditaciones_Personas_Periodos_Trans");
        });

        modelBuilder.Entity<AcreditacionesPersonasMaster>(entity =>
        {
            entity.HasKey(e => e.PersonaSecuencia).HasName("PK_Acreditaciones_Personas_Master_1");

            entity.ToTable("Acreditaciones_Personas_Master", tb => tb.HasComment("Es un  maestro con los datos de las personas que participan en los procesos de acreditación, sistema acreditación,  su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.HasIndex(e => e.PersonaNss, "IX_Acreditaciones_Personas_Master").IsUnique();

            entity.Property(e => e.PersonaSecuencia)
                .HasComment("Secuencia única asignada a cada persona en el sistema de acreditación.")
                .HasColumnName("Persona_Secuencia");
            entity.Property(e => e.AcreditacionCategoriaNumero)
                .HasComment("Número único que identifica la categoría de acreditación a ser otorgada (Auditor, Promotor, Promotora, Firma Auditoria etc.).")
                .HasColumnName("Acreditacion_Categoria_Numero");
            entity.Property(e => e.AcreditacionClaseNumero)
                .HasDefaultValueSql("((2))")
                .HasComment("Número único que identifica que quien se está acreditando es una persona o entidad.")
                .HasColumnName("Acreditacion_Clase_Numero");
            entity.Property(e => e.AcreditacionEstadoNumero).HasColumnName("Acreditacion_Estado_Numero");
            entity.Property(e => e.AgenteTipoNumero)
                .HasComment("Número único que identifica el tipo de agente promotor (Local, Nacional).")
                .HasColumnName("Agente_Tipo_Numero");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.CiudadNumero)
                .HasComment("Número único que identifica la ciudad")
                .HasColumnName("Ciudad_Numero");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.NivelAcademicoNumero)
                .HasComment("Número único que identifica el nivel académico de la persona.")
                .HasColumnName("Nivel_Academico_Numero");
            entity.Property(e => e.PersonaCelular)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Numero de teléfono celular de la persona.")
                .HasColumnName("Persona_Celular");
            entity.Property(e => e.PersonaCorreoElectronico)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Persona_Correo_Electronico");
            entity.Property(e => e.PersonaDireccion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Dirección de  residencia de la persona.")
                .HasColumnName("Persona_Direccion");
            entity.Property(e => e.PersonaFechaAcreditacion)
                .HasColumnType("datetime")
                .HasColumnName("Persona_Fecha_Acreditacion");
            entity.Property(e => e.PersonaFechaRenovacion)
                .HasColumnType("datetime")
                .HasColumnName("Persona_Fecha_Renovacion");
            entity.Property(e => e.PersonaFechaVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("Persona_Fecha_Vencimiento");
            entity.Property(e => e.PersonaNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Persona_NSS");
            entity.Property(e => e.PersonaObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasColumnName("Persona_Observacion");
            entity.Property(e => e.PersonaTelefono)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de teléfono de la persona..")
                .HasColumnName("Persona_Telefono");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SectorNumero)
                .HasComment("Número único  asignado a cada sector de las ciudades y municipio por la JCE.")
                .HasColumnName("Sector_Numero");

            entity.HasOne(d => d.AcreditacionEstadoNumeroNavigation).WithMany(p => p.AcreditacionesPersonasMasters)
                .HasForeignKey(d => d.AcreditacionEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Personas_Master_Acreditaciones_Estados_Cata");

            entity.HasOne(d => d.AgenteTipoNumeroNavigation).WithMany(p => p.AcreditacionesPersonasMasters)
                .HasForeignKey(d => d.AgenteTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Personas_Master_Acreditaciones_Agente_Tipo_Cata");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.AcreditacionesPersonasMasters)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Personas_Master_ARS_Master");

            entity.HasOne(d => d.NivelAcademicoNumeroNavigation).WithMany(p => p.AcreditacionesPersonasMasters)
                .HasForeignKey(d => d.NivelAcademicoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Personas_Master_Comunes_Niveles_Academicos_Cata");

            entity.HasOne(d => d.PersonaNssNavigation).WithOne(p => p.AcreditacionesPersonasMaster)
                .HasForeignKey<AcreditacionesPersonasMaster>(d => d.PersonaNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Personas_Master_TSS_Ciudadanos_Master");

            entity.HasOne(d => d.AcreditacionC).WithMany(p => p.AcreditacionesPersonasMasters)
                .HasForeignKey(d => new { d.AcreditacionCategoriaNumero, d.AcreditacionClaseNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Personas_Master_Acreditaciones_Categorias_Clases_Cata");
        });

        modelBuilder.Entity<AcreditacionesPersonasMasterVistum>(entity =>
        {
            entity.HasKey(e => e.PersonaNss).HasName("PK_Acreditaciones_Promotores_Master_Vista_1");

            entity.ToTable("Acreditaciones_Personas_Master_Vista");

            entity.HasIndex(e => e.PersonaCedula, "Idx_Acreditaciones_Personas_Master_Vista_Cedula");

            entity.Property(e => e.PersonaNss)
                .ValueGeneratedNever()
                .HasColumnName("Persona_NSS");
            entity.Property(e => e.AcreditacionCategoriaClaseDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Acreditacion_Categoria_Clase_Descripcion");
            entity.Property(e => e.AcreditacionCategoriaDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Acreditacion_Categoria_Descripcion");
            entity.Property(e => e.AcreditacionCategoriaNumero).HasColumnName("Acreditacion_Categoria_Numero");
            entity.Property(e => e.AcreditacionClaseDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Acreditacion_Clase_Descripcion");
            entity.Property(e => e.AcreditacionClaseNumero).HasColumnName("Acreditacion_Clase_Numero");
            entity.Property(e => e.AcreditacionEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Acreditacion_Estado_Descripcion");
            entity.Property(e => e.AcreditacionEstadoNumero).HasColumnName("Acreditacion_Estado_Numero");
            entity.Property(e => e.ArsNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ARS_Nombre");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.EmpleadorRegistroPatronal).HasColumnName("Empleador_Registro_Patronal");
            entity.Property(e => e.EntidadFechaAcreditacion)
                .HasColumnType("datetime")
                .HasColumnName("Entidad_Fecha_Acreditacion");
            entity.Property(e => e.EntidadNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Entidad_Nombre");
            entity.Property(e => e.EntidadNumero).HasColumnName("Entidad_Numero");
            entity.Property(e => e.EntidadRnc)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Entidad_RNC");
            entity.Property(e => e.ExamenFechaFin)
                .HasColumnType("datetime")
                .HasColumnName("Examen_Fecha_Fin");
            entity.Property(e => e.ExamenFechaInicio)
                .HasColumnType("datetime")
                .HasColumnName("Examen_Fecha_Inicio");
            entity.Property(e => e.ExamenNumero).HasColumnName("Examen_Numero");
            entity.Property(e => e.ExamenResultado).HasColumnName("Examen_Resultado");
            entity.Property(e => e.NivelAcademicoDescripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Nivel_Academico_Descripcion");
            entity.Property(e => e.NivelAcademicoNumero).HasColumnName("Nivel_Academico_Numero");
            entity.Property(e => e.PeriodoNumero).HasColumnName("Periodo_Numero");
            entity.Property(e => e.PersonaCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Persona_Cedula");
            entity.Property(e => e.PersonaCedulaFormateada)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("Persona_Cedula_Formateada");
            entity.Property(e => e.PersonaFechaAcreditacion)
                .HasColumnType("datetime")
                .HasColumnName("Persona_Fecha_Acreditacion");
            entity.Property(e => e.PersonaFechaRenovacion)
                .HasColumnType("datetime")
                .HasColumnName("Persona_Fecha_Renovacion");
            entity.Property(e => e.PersonaFechaVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("Persona_Fecha_Vencimiento");
            entity.Property(e => e.PersonaNombreCompleto)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Persona_Nombre_Completo");
            entity.Property(e => e.PersonaObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Persona_Observacion");
            entity.Property(e => e.PersonaRepresentaPromotora)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Persona_Representa_Promotora");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AcreditacionesPersonasPalabrasTran>(entity =>
        {
            entity.HasKey(e => new { e.PersonaNss, e.PalabraDetalle });

            entity.ToTable("Acreditaciones_Personas_Palabras_Trans");

            entity.Property(e => e.PersonaNss).HasColumnName("Persona_NSS");
            entity.Property(e => e.PalabraDetalle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Palabra_Detalle");
            entity.Property(e => e.PalabraNumero).HasColumnName("Palabra_Numero");
        });

        modelBuilder.Entity<AcreditacionesPersonasPeriodosTran>(entity =>
        {
            entity.HasKey(e => new { e.PeriodoNumero, e.PersonaNss });

            entity.ToTable("Acreditaciones_Personas_Periodos_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran las personas para un período especifico de  exámenes en los procesos de acreditación, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PeriodoNumero)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Periodo_Numero");
            entity.Property(e => e.PersonaNss)
                .HasComment("Secuencia única asignada a cada persona en el sistema de acreditación.")
                .HasColumnName("Persona_NSS");
            entity.Property(e => e.PersonaPeriodoClave)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Calve única generada para cada usuario para un período de exámenes.")
                .HasColumnName("Persona_Periodo_Clave");
            entity.Property(e => e.PersonaPeriodoUsuario)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Usuario único generado  para cada usuario para un período de exámenes.")
                .HasColumnName("Persona_Periodo_Usuario");
            entity.Property(e => e.ProcesoNumero)
                .HasComment("Número único que identifica el proceso con el cual fue registrada una persona en un periodo de exámenes de evaluación para la acreditación en un proceso de acreditación.")
                .HasColumnName("Proceso_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PeriodoNumeroNavigation).WithMany(p => p.AcreditacionesPersonasPeriodosTrans)
                .HasForeignKey(d => d.PeriodoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Personas_Periodos_Trans_Acreditaciones_Examenes_Periodos_Trans");

            entity.HasOne(d => d.PersonaNssNavigation).WithMany(p => p.AcreditacionesPersonasPeriodosTrans)
                .HasPrincipalKey(p => p.PersonaNss)
                .HasForeignKey(d => d.PersonaNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Personas_Periodos_Trans_Acreditaciones_Personas_Master");

            entity.HasOne(d => d.ProcesoNumeroNavigation).WithMany(p => p.AcreditacionesPersonasPeriodosTrans)
                .HasForeignKey(d => d.ProcesoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Personas_Periodos_Trans_Acreditaciones_Proceso_Cata");
        });

        modelBuilder.Entity<AcreditacionesPersonasRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.PersonaNss, e.RequerimientoNumero });

            entity.ToTable("Acreditaciones_Personas_Requerimientos_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los un requerimiento (Documento, Identificación, otros), presentado por una personas  para un proceso de acreditación, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PersonaNss)
                .HasComment("Secuencia única asignada a cada persona en el sistema de acreditación.")
                .HasColumnName("Persona_NSS");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoObservacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Observación de un requerimiento (Documento, Identificación, otros), presentado por una persona o entidad  para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Observacion");

            entity.HasOne(d => d.DocumentoCodigoNavigation).WithMany(p => p.AcreditacionesPersonasRequerimientosTrans)
                .HasForeignKey(d => d.DocumentoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Personas_Requerimientos_Trans_Comunes_Documentos_Master");

            entity.HasOne(d => d.PersonaNssNavigation).WithMany(p => p.AcreditacionesPersonasRequerimientosTrans)
                .HasPrincipalKey(p => p.PersonaNss)
                .HasForeignKey(d => d.PersonaNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Personas_Requerimientos_Trans_Acreditaciones_Personas_Master");

            entity.HasOne(d => d.RequerimientoNumeroNavigation).WithMany(p => p.AcreditacionesPersonasRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Personas_Requerimientos_Trans_Acreditaciones_Requerimientos_Cata");
        });

        modelBuilder.Entity<AcreditacionesPreguntasCatum>(entity =>
        {
            entity.HasKey(e => e.PreguntaNumero);

            entity.ToTable("Acreditaciones_Preguntas_Cata", tb =>
                {
                    tb.HasComment("Es un  catálogo donde se registran las diferentes preguntas disponibles para generar  los  exámenes de evaluación en un proceso de acreditación.");
                    tb.HasTrigger("Acreditaciones_Preguntas_Cata_Delete");
                    tb.HasTrigger("Acreditaciones_Preguntas_Cata_Update");
                });

            entity.Property(e => e.PreguntaNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.AcreditacionCategoriaNumero)
                .HasComment("Número único que identifica la categoría de acreditación a ser otorgada (Auditor, Promotor, Promotora, Firma Auditoria etc.).")
                .HasColumnName("Acreditacion_Categoria_Numero");
            entity.Property(e => e.PreguntaDescripcion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasComment("Detalles de cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Descripcion");
            entity.Property(e => e.PreguntaPuntuacion)
                .HasComment("Valoración asignada a cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Pregunta_Puntuacion");
            entity.Property(e => e.PreguntaRespuesta)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Respuesta de cada pregunta del banco de preguntas que puede ser utilizado en los exámenes de acreditación.(ascii(convert(char(1),’Carácter A,B,C,D,E,F,G ‘ ))+ Pregunta_Numero)* (Un factor  ejp.: 123).")
                .HasColumnName("Pregunta_Respuesta");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AcreditacionCategoriaNumeroNavigation).WithMany(p => p.AcreditacionesPreguntasCata)
                .HasForeignKey(d => d.AcreditacionCategoriaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Preguntas_Cata_Acreditaciones_Categorias_Cata");
        });

        modelBuilder.Entity<AcreditacionesProcesoCatum>(entity =>
        {
            entity.HasKey(e => e.ProcesoNumero);

            entity.ToTable("Acreditaciones_Proceso_Cata", tb => tb.HasComment("Es un  catálogo donde se registran los diferentes procesos con los cuales se registran las personas  en los periodos de exámenes de evaluación para la acreditación en un proceso de acreditación."));

            entity.Property(e => e.ProcesoNumero)
                .HasComment("Número único que identifica el proceso con el cual fue registrada una persona en un periodo de exámenes de evaluación para la acreditación en un proceso de acreditación.")
                .HasColumnName("Proceso_Numero");
            entity.Property(e => e.ProcesoDescripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Descripción del proceso con el cual fue registrada una persona en un periodo de exámenes de evaluación para la acreditación en un proceso de acreditación.")
                .HasColumnName("Proceso_Descripcion");
            entity.Property(e => e.ProcesoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Explicación de la descripción del proceso con el cual fue registrada una persona en un periodo de exámenes de evaluación para la acreditación en un proceso de acreditación.")
                .HasColumnName("Proceso_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AcreditacionesPromotoresLotesTran>(entity =>
        {
            entity.HasKey(e => e.PromotoresLotes).HasName("PK_Acreditaciones_Promotores_Lotes");

            entity.ToTable("Acreditaciones_Promotores_Lotes_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los lotes con os que se cargaron  las acreditaciones de los promotores de salud en UNIPAGO, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PromotoresLotes)
                .ValueGeneratedNever()
                .HasComment("Número único de lote con el que se cargo la acreditación de un promotor de salud en UNIPAGO.")
                .HasColumnName("Promotores_Lotes");
            entity.Property(e => e.PromotoresLotesFecha)
                .HasComment("Fecha en que se genero el  lote con el que se cargaron  las acreditaciones de los promotores de salud en UNIPAGO.")
                .HasColumnType("datetime")
                .HasColumnName("Promotores_Lotes_Fecha");
            entity.Property(e => e.PromotoresLotesNombreArchivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre del archivo físico que se genero para  el  lote con el que se cargaron  las acreditaciones de los promotores de salud en UNIPAGO.")
                .HasColumnName("Promotores_Lotes_Nombre_Archivo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AcreditacionesRequerimientosCatum>(entity =>
        {
            entity.HasKey(e => e.RequerimientoNumero);

            entity.ToTable("Acreditaciones_Requerimientos_Cata", tb =>
                {
                    tb.HasComment("Es un  catálogo donde se registran los requerimientos que deben presentar las personas o entidades para un proceso de acreditación, su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Acreditaciones_Requerimientos_Cata_Delete");
                    tb.HasTrigger("Acreditaciones_Requerimientos_Cata_Update");
                });

            entity.Property(e => e.RequerimientoNumero)
                .ValueGeneratedOnAdd()
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.AcreditacionCategoriaNumero)
                .HasComment("Número único que identifica la categoría de acreditación a ser otorgada (Auditor, Promotor, Promotora, Firma Auditoria etc.).")
                .HasColumnName("Acreditacion_Categoria_Numero");
            entity.Property(e => e.AcreditacionClaseNumero)
                .HasComment("Número único que identifica que quien se está acreditando es una persona o entidad.")
                .HasColumnName("Acreditacion_Clase_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Descripción del requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Descripcion");
            entity.Property(e => e.RequerimientoOrden)
                .HasComment("Número de orden en que debe aparecer los requerimiento para un personas o entidades, en relación a la categoría de acreditación en un proceso de acreditación.")
                .HasColumnName("Requerimiento_Orden");

            entity.HasOne(d => d.AcreditacionC).WithMany(p => p.AcreditacionesRequerimientosCata)
                .HasForeignKey(d => new { d.AcreditacionCategoriaNumero, d.AcreditacionClaseNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Requerimientos_Cata_Acreditaciones_Categorias_Clases_Cata");
        });

        modelBuilder.Entity<AcreditacionesSeguridadGruposCatum>(entity =>
        {
            entity.HasKey(e => new { e.AcreditacionCategoriaNumero, e.GrupoSeguridadNumero });

            entity.ToTable("Acreditaciones_Seguridad_Grupos_Cata", tb =>
                {
                    tb.HasTrigger("Acreditaciones_Seguridad_Grupos_Cata_Delete");
                    tb.HasTrigger("Acreditaciones_Seguridad_Grupos_Cata_Update");
                });

            entity.Property(e => e.AcreditacionCategoriaNumero)
                .HasComment("Número único que identifica la categoría de acreditación a ser otorgada (Auditor, Promotor, Promotora, Firma Auditoria etc.).")
                .HasColumnName("Acreditacion_Categoria_Numero");
            entity.Property(e => e.GrupoSeguridadNumero)
                .HasComment("Número único del grupo de seguridad al que pertenecen los usuarios de los sistemas de información.")
                .HasColumnName("Grupo_Seguridad_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AcreditacionCategoriaNumeroNavigation).WithMany(p => p.AcreditacionesSeguridadGruposCata)
                .HasForeignKey(d => d.AcreditacionCategoriaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Seguridad_Grupos_Cata_Acreditaciones_Categorias_Cata");

            entity.HasOne(d => d.GrupoSeguridadNumeroNavigation).WithMany(p => p.AcreditacionesSeguridadGruposCata)
                .HasForeignKey(d => d.GrupoSeguridadNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Acreditaciones_Seguridad_Grupos_Cata_Seguridad_Grupos_Cata");
        });

        modelBuilder.Entity<AfiliadosAfiliacionesRespuestasCatum>(entity =>
        {
            entity.HasKey(e => e.AfiliacionesRespuestaCodigo).HasName("PK_Respuestas_Cata");

            entity.ToTable("Afiliados_Afiliaciones_Respuestas_Cata", tb =>
                {
                    tb.HasComment("Es un catálogo de las repuestas de rechazo de una afiliación al SFS, su fuente de alimentación son las vistas estadísticas de UNIPAGO.");
                    tb.HasTrigger("Afiliados_Afiliaciones_Respuestas_Cata_Delete");
                    tb.HasTrigger("Afiliados_Afiliaciones_Respuestas_Cata_Update");
                });

            entity.Property(e => e.AfiliacionesRespuestaCodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Código único que representa la respuesta que da UNIPAGO al procesar una afiliación, esta respuesta justifica el estado en el que queda la afiliación.")
                .HasColumnName("Afiliaciones_Respuesta_Codigo");
            entity.Property(e => e.AfiliacionesRespuestaDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Es la descripción de la respuesta que da UNIPAGO al procesar una afiliación, esta respuesta justifica el estado en el que queda la afiliación.")
                .HasColumnName("Afiliaciones_Respuesta_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AfiliadosAfiliacionesTipoCatum>(entity =>
        {
            entity.HasKey(e => e.AfiliacionTipoCodigo);

            entity.ToTable("Afiliados_Afiliaciones_Tipo_Cata", tb => tb.HasComment("Es un catálogo de los diferentes  formas de afiliación como puede registrarse un afiliado a una ARS, su fuente de alimentación son las vistas estadísticas de UNIPAGO."));

            entity.Property(e => e.AfiliacionTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código único que representa el proceso por el cual se registro  una afiliación,  entre ellas (Traspasos, Afiliación Automática, Normal, etc.).")
                .HasColumnName("Afiliacion_Tipo_Codigo");
            entity.Property(e => e.AfiliacionTipoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción del proceso por el cual se registro  una afiliación,  entre ellos (Traspasos, Afiliación Automática, Normal, etc.).")
                .HasColumnName("Afiliacion_Tipo_Descripcion");
            entity.Property(e => e.AfiliacionTipoExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicación del proceso por el cual se registro  una afiliación,  entre ellos (Traspasos, Afiliación Automática, Normal, etc.).")
                .HasColumnName("Afiliacion_Tipo_Explicacion");
            entity.Property(e => e.AfiliacionTipoNumero)
                .HasComment("Número único que representa el proceso por el cual se registro  una afiliación,  entre ellos (Traspasos, Afiliación Automática, Normal, etc.), su objetivo es ser utilizados en futuras conversiones hacia el DATA WAREHOUSE.")
                .HasColumnName("Afiliacion_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AfiliadosArsVistum>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.AfiliadoNss });

            entity.ToTable("Afiliados_ARS_Vista");

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_NSS");
        });

        modelBuilder.Entity<AfiliadosDependientesPlanesVoluntariosRecargasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.AfiliadoTitularCedula, e.PlanNumero, e.AfiliadoDependienteDocumento });

            entity.ToTable("Afiliados_Dependientes_Planes_Voluntarios_Recargas_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.AfiliadoDependienteDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Dependiente_Documento");
            entity.Property(e => e.AfiliadoDiscapacitado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Discapacitado");
            entity.Property(e => e.AfiliadoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Estado");
            entity.Property(e => e.AfiliadoPlanTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Plan_Tipo");
            entity.Property(e => e.AfiliadoPrimerApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Primer_Apellido");
            entity.Property(e => e.AfiliadoPrimerNombre)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Primer_Nombre");
            entity.Property(e => e.AfiliadoSegundoApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Segundo_Apellido");
            entity.Property(e => e.AfiliadoSegundoNombre)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Segundo_Nombre");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTitularPoliza)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Poliza");
            entity.Property(e => e.DocumentoTipoNumero).HasColumnName("Documento_Tipo_Numero");
            entity.Property(e => e.InicioVigenciaFecha).HasColumnName("Inicio_Vigencia_Fecha");
            entity.Property(e => e.ModalidadPagoNumero).HasColumnName("Modalidad_Pago_Numero");
            entity.Property(e => e.ParentescoNumero).HasColumnName("Parentesco_Numero");
            entity.Property(e => e.PrimaComercialMensual)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.PromotorDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Documento");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.UltimoPagoFactura).HasColumnName("Ultimo_Pago_Factura");
        });

        modelBuilder.Entity<AfiliadosDependientesPlanesVoluntariosTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.AfiliadoTitularCedula, e.PlanNumero, e.AfiliadoDependienteDocumento });

            entity.ToTable("Afiliados_Dependientes_Planes_Voluntarios_Temporal_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.AfiliadoDependienteDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Dependiente_Documento");
            entity.Property(e => e.AfiliadoDiscapacitado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Discapacitado");
            entity.Property(e => e.AfiliadoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Estado");
            entity.Property(e => e.AfiliadoPlanTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Plan_Tipo");
            entity.Property(e => e.AfiliadoPrimerApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Primer_Apellido");
            entity.Property(e => e.AfiliadoPrimerNombre)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Primer_Nombre");
            entity.Property(e => e.AfiliadoSegundoApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Segundo_Apellido");
            entity.Property(e => e.AfiliadoSegundoNombre)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Segundo_Nombre");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTitularPoliza)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Poliza");
            entity.Property(e => e.DocumentoTipoNumero).HasColumnName("Documento_Tipo_Numero");
            entity.Property(e => e.InicioVigenciaFecha).HasColumnName("Inicio_Vigencia_Fecha");
            entity.Property(e => e.ModalidadPagoNumero).HasColumnName("Modalidad_Pago_Numero");
            entity.Property(e => e.ParentescoNumero).HasColumnName("Parentesco_Numero");
            entity.Property(e => e.PrimaComercialMensual)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.PromotorDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Documento");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.UltimoPagoFactura).HasColumnName("Ultimo_Pago_Factura");
        });

        modelBuilder.Entity<AfiliadosDependientesPlanesVoluntariosTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoPeriodo, e.ArsNumero, e.AfiliadoTitularCedula, e.PlanNumero, e.AfiliadoDependienteDocumento }).HasName("PK_Afiliados_Dependientes_Planes_Voluntarios_Trans_Nueva");

            entity.ToTable("Afiliados_Dependientes_Planes_Voluntarios_Trans", tb => tb.HasComment("Es una tabla transaccional,  que contiene los detalles de los afiliados Dependientes a planes voluntarios de las ARS,  su fuente de datos es el esquema 34 procesado por el Robot Simon. "));

            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Código único de la versión del Plan de servicios de Salud (PDSS) al cual pertenece el Subgrupo.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.AfiliadoDependienteDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Afiliado_Dependiente_Documento");
            entity.Property(e => e.AfiliadoDiscapacitado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica con (S/N) si el afiliado es un discapacitado.")
                .HasColumnName("Afiliado_Discapacitado");
            entity.Property(e => e.AfiliadoNombre)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasComment("Es el nombre propio de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Afiliado_Nombre");
            entity.Property(e => e.AfiliadoPlanTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Plan_Tipo");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sexo de la persona (Afiliado)  (F=femenino, M=masculino).")
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTitularPoliza)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Poliza");
            entity.Property(e => e.DocumentoTipoNumero)
                .HasComment("Número único del tipo de documento de identificación personal con el cual se registro el afiliado en la ARS para un Plan de Servicios de Salud (PDSS, Voluntarios, Complementario, Especial, etc.).")
                .HasColumnName("Documento_Tipo_Numero");
            entity.Property(e => e.InicioVigenciaFecha)
                .HasComment("Fecha en que un afiliado solicita su afiliación a una Administradora de Riesgos de Salud (ARS) para un Plan de Servicios de Salud (PDSS, Voluntarios, Complementario, Especial, etc.).")
                .HasColumnName("Inicio_Vigencia_Fecha");
            entity.Property(e => e.ModalidadPagoNumero).HasColumnName("Modalidad_Pago_Numero");
            entity.Property(e => e.ParentescoNumero)
                .HasComment("Número único que representa el parentesco entre un dependiente y el titular de un núcleo familiar en el Seguro Familiar de Salud (SFS).")
                .HasColumnName("Parentesco_Numero");
            entity.Property(e => e.PrimaComercialMensual)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.PromotorDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Promotor_Documento");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.UltimoPagoFactura)
                .HasComment("Indica con (S/N) si el afiliado es estudiante.")
                .HasColumnName("Ultimo_Pago_Factura");

            entity.HasOne(d => d.DocumentoTipoNumeroNavigation).WithMany(p => p.AfiliadosDependientesPlanesVoluntariosTrans)
                .HasForeignKey(d => d.DocumentoTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Dependientes_Planes_Voluntarios_Trans_Nueva_Afiliados_Documentos_Tipo_Cata");

            entity.HasOne(d => d.ModalidadPagoNumeroNavigation).WithMany(p => p.AfiliadosDependientesPlanesVoluntariosTrans)
                .HasForeignKey(d => d.ModalidadPagoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Dependientes_Planes_Voluntarios_Trans_Nueva_Afiliados_Modalidad_Pago_Cata");

            entity.HasOne(d => d.ParentescoNumeroNavigation).WithMany(p => p.AfiliadosDependientesPlanesVoluntariosTrans)
                .HasForeignKey(d => d.ParentescoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Dependientes_Planes_Voluntarios_Trans_Nueva_Afiliados_Parentesco_Cata");

            entity.HasOne(d => d.PlanNumeroNavigation).WithMany(p => p.AfiliadosDependientesPlanesVoluntariosTrans)
                .HasForeignKey(d => d.PlanNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Dependientes_Planes_Voluntarios_Trans_Nueva_Planes_Master");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.AfiliadosDependientesPlanesVoluntariosTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Dependientes_Planes_Voluntarios_Trans_Nueva_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<AfiliadosDocumentosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.DocumentoTipoNumero).HasName("PK_Documentos_Tipo_Cata");

            entity.ToTable("Afiliados_Documentos_Tipo_Cata", tb => tb.HasComment("Es un catálogo con los tipo de documento con lo que se registran  los afiliados a planes voluntarios de las ARS, Su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.DocumentoTipoNumero)
                .HasComment("Número único del tipo de documento de identificación personal con el cual se registro el afiliado en la ARS para un Plan de Servicios de Salud (PDSS, Voluntarios, Complementario, Especial, etc.).")
                .HasColumnName("Documento_Tipo_Numero");
            entity.Property(e => e.DocumentoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el código que identifica el tipo de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) para los casos requeridos de las personas registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Documento_Tipo_Codigo");
            entity.Property(e => e.DocumentoTipoDependientes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica para el tipo de documento de identificación personal, para su registro de afiliación, si aplica o no para un afiliado Dependiente.")
                .HasColumnName("Documento_Tipo_Dependientes");
            entity.Property(e => e.DocumentoTipoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Es la descripción  del tipo de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) para los casos requeridos de las personas registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Documento_Tipo_Descripcion");
            entity.Property(e => e.DocumentoTipoExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicación del tipo de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) para los casos requeridos de las personas registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Documento_Tipo_Explicacion");
            entity.Property(e => e.DocumentoTipoTitulares)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica para el tipo de documento de identificación personal, para su registro de afiliación, si aplica o no para un afiliado Titular.")
                .HasColumnName("Documento_Tipo_Titulares");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.DocumentoTipoCodigoNavigation).WithMany(p => p.AfiliadosDocumentosTipoCata)
                .HasForeignKey(d => d.DocumentoTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Documentos_Tipo_Cata_TSS_Documento_Tipo_Cata");
        });

        modelBuilder.Entity<AfiliadosEstatusCatum>(entity =>
        {
            entity.HasKey(e => e.AfiliadoEstadoNumero).HasName("PK_Estatus_Tipo_Carga_Cata");

            entity.ToTable("Afiliados_Estatus_Cata", tb => tb.HasComment("Es un catálogo de los diferentes  estado en que puede quedar un afiliado en el proceso de afiliación a una ARS, su fuente de alimentación son las vistas estadísticas de UNIPAGO."));

            entity.Property(e => e.AfiliadoEstadoNumero)
                .HasComment("Número único que representa el estado de  un afiliado,  entre ellos (OK, PE, BAJA, etc.), su objetivo es ser utilizados en futuras conversiones hacia el DATA WAREHOUSE.")
                .HasColumnName("Afiliado_Estado_Numero");
            entity.Property(e => e.AfiliadoEstadoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("Código único que representa el estado de  un afiliado,  entre ellos (OK, PE, BAJA, etc.).")
                .HasColumnName("Afiliado_Estado_Codigo");
            entity.Property(e => e.AfiliadoEstadoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción del estado de  un afiliado,  entre ellos (OK, PE, BAJA, etc.).")
                .HasColumnName("Afiliado_Estado_Descripcion");
            entity.Property(e => e.AfiliadoEstadoExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicación del estado de  un afiliado,  entre ellos (OK, PE, BAJA, etc.).")
                .HasColumnName("Afiliado_Estado_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AfiliadosModalidadPagoCatum>(entity =>
        {
            entity.HasKey(e => e.ModalidadPagoNumero);

            entity.ToTable("Afiliados_Modalidad_Pago_Cata");

            entity.Property(e => e.ModalidadPagoNumero).HasColumnName("Modalidad_Pago_Numero");
            entity.Property(e => e.ModalidadPagoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modalidad_Pago_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AfiliadosMotivosBajaCatum>(entity =>
        {
            entity.HasKey(e => e.MotivoBajaCodigo).HasName("PK_Motivos_Baja_Cata");

            entity.ToTable("Afiliados_Motivos_Baja_Cata", tb => tb.HasComment("Es un catálogo de los diferentes motivo por la cual se le da baja a la afiliación de un afiliado en  el SFS, su fuente de alimentación son las vistas estadísticas de UNIPAGO."));

            entity.Property(e => e.MotivoBajaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código único que representa el motivo que provoco la baja del afiliado.")
                .HasColumnName("Motivo_Baja_Codigo");
            entity.Property(e => e.MotivoBajaDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del el motivo que provoco la baja del afiliado.")
                .HasColumnName("Motivo_Baja_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AfiliadosParentescoCatum>(entity =>
        {
            entity.HasKey(e => e.ParentescoNumero).HasName("PK_Parentesco_Tipo_Cata");

            entity.ToTable("Afiliados_Parentesco_Cata", tb => tb.HasComment("Es un catálogo de los diferentes parentescos familiares que pueden ser registrados entre un afiliado titular y sus dependientes, su fuente de alimentación es de la vista estadística de UNIPAGO."));

            entity.Property(e => e.ParentescoNumero)
                .HasComment("Número único que representa el parentesco entre un dependiente y el titular de un núcleo familiar en el Seguro Familiar de Salud (SFS).")
                .HasColumnName("Parentesco_Numero");
            entity.Property(e => e.ParentescoConyugues)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Especifica con (S/N) si el parentesco entre un dependiente y el titular de un núcleo familiar en el Seguro Familiar de Salud (SFS) corresponde a un Cónyuge.")
                .HasColumnName("Parentesco_Conyugues");
            entity.Property(e => e.ParentescoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del parentesco entre un dependiente y el titular de un núcleo familiar en el Seguro Familiar de Salud (SFS).")
                .HasColumnName("Parentesco_Descripcion");
            entity.Property(e => e.ParentescoExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicación del parentesco entre un dependiente y el titular de un núcleo familiar en el Seguro Familiar de Salud (SFS).")
                .HasColumnName("Parentesco_Explicacion");
            entity.Property(e => e.ParentescoHijos)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Especifica con (S/N) si el parentesco entre un dependiente y el titular de un núcleo familiar en el Seguro Familiar de Salud (SFS) corresponde a Hijo.")
                .HasColumnName("Parentesco_Hijos");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AfiliadosPlanesAlternativosVistum>(entity =>
        {
            entity.HasKey(e => new { e.AfiliadoDocumento, e.AfiliadoTitularNss, e.ArsNumero, e.PlanNumero });

            entity.ToTable("Afiliados_Planes_Alternativos_Vista");

            entity.HasIndex(e => e.AfiliadoNss, "Idx_Afiliados_Planes_Alternativos_Vista_Afiliado_NSS");

            entity.HasIndex(e => e.AfiliadoTitularCedula, "Idx_Afiliados_Planes_Alternativos_Vista_Titular_Cedula");

            entity.HasIndex(e => e.AfiliadoTitularPoliza, "Idx_Afiliados_Planes_Alternativos_Vista_Titular_Poliza");

            entity.Property(e => e.AfiliadoDocumento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Documento");
            entity.Property(e => e.AfiliadoTitularNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.AfiliadoDiscapacitado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Discapacitado");
            entity.Property(e => e.AfiliadoFechaNacimiento)
                .HasComment("Es la fecha de nacimiento de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Nacimiento");
            entity.Property(e => e.AfiliadoNombre)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Nombre");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_NSS");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el código que clasifica los afiliados en T = Titulares (Quien representa al núcleo familiar) D = Dependientes  (Hijos y Conjugues) y A = Adicionales (Padres, Hijos con mayoría de edad cumplida 18 o 21, otros familiares dependientes económicamente).")
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNombre)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Nombre");
            entity.Property(e => e.AfiliadoTitularPoliza)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Poliza");
            entity.Property(e => e.ArsNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nombre de la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Nombre");
            entity.Property(e => e.InicioVigenciaFecha).HasColumnName("Inicio_Vigencia_Fecha");
            entity.Property(e => e.ModalidadPagoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modalidad_Pago_Descripcion");
            entity.Property(e => e.ModalidadPagoNumero).HasColumnName("Modalidad_Pago_Numero");
            entity.Property(e => e.NacionalidadDescripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción de la nacionalidad de la persona o afiliado.")
                .HasColumnName("Nacionalidad_Descripcion");
            entity.Property(e => e.NacionalidadNumero)
                .HasComment("Número único que representa la nacionalidad de la persona o afiliado.")
                .HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.ParentescoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del parentesco entre un dependiente y el titular de un núcleo familiar en el Seguro Familiar de Salud (SFS).")
                .HasColumnName("Parentesco_Descripcion");
            entity.Property(e => e.ParentescoNumero).HasColumnName("Parentesco_Numero");
            entity.Property(e => e.PlanNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombre del Plan de Salud.")
                .HasColumnName("Plan_Nombre");
            entity.Property(e => e.PrimaComercialMensual)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.PromotorDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Documento");
            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.UltimoPagoFactura).HasColumnName("Ultimo_Pago_Factura");
        });

        modelBuilder.Entity<AfiliadosPlanesComplementariosRecargasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.AfiliadoTitularNss, e.AfiliadoNss, e.PlanNumero });

            entity.ToTable("Afiliados_Planes_Complementarios_Recargas_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.AfiliadoTitularNss).HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.AfiliadoNss).HasColumnName("Afiliado_NSS");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.AfiliadoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Estado");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularPoliza)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Poliza");
            entity.Property(e => e.InicioVigenciaFecha).HasColumnName("Inicio_Vigencia_Fecha");
            entity.Property(e => e.ModalidadPagoNumero).HasColumnName("Modalidad_Pago_Numero");
            entity.Property(e => e.ParentescoNumero).HasColumnName("Parentesco_Numero");
            entity.Property(e => e.PrimaComercialMensual)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.PromotorDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Documento");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.UltimoPagoFactura).HasColumnName("Ultimo_Pago_Factura");
        });

        modelBuilder.Entity<AfiliadosPlanesComplementariosTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.AfiliadoTitularNss, e.AfiliadoNss, e.PlanNumero });

            entity.ToTable("Afiliados_Planes_Complementarios_Temporal_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.AfiliadoTitularNss).HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.AfiliadoNss).HasColumnName("Afiliado_NSS");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.AfiliadoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Estado");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularPoliza)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Poliza");
            entity.Property(e => e.InicioVigenciaFecha).HasColumnName("Inicio_Vigencia_Fecha");
            entity.Property(e => e.ModalidadPagoNumero).HasColumnName("Modalidad_Pago_Numero");
            entity.Property(e => e.ParentescoNumero).HasColumnName("Parentesco_Numero");
            entity.Property(e => e.PrimaComercialMensual)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.PromotorDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Documento");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.UltimoPagoFactura).HasColumnName("Ultimo_Pago_Factura");
        });

        modelBuilder.Entity<AfiliadosPlanesComplementariosTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoPeriodo, e.ArsNumero, e.AfiliadoTitularNss, e.AfiliadoNss, e.PlanNumero }).HasName("PK_Afiliados_Planes_Complementarios_Trans_Nueva_1");

            entity.ToTable("Afiliados_Planes_Complementarios_Trans", tb => tb.HasComment("Es una tabla transaccional,  que contiene los detalles de los afiliados titulares y dependientes a planes complementarios de las ARS, su fuente de datos es el  esquema 31 procesado por el Robot Simon. "));

            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.AfiliadoTitularNss)
                .HasComment("Número único que identifica a un afiliado titular dentro del SFS, sobre el cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_NSS");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Código único de la versión del Plan de servicios de Salud (PDSS) al cual pertenece el Subgrupo.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el código que clasifica los afiliados en T = Titulares (Quien representa al núcleo familiar) D = Dependientes  (Hijos y Conjugues) y A = Adicionales (Padres, Hijos con mayoría de edad cumplida 18 o 21, otros familiares dependientes económicamente).")
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularPoliza)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Poliza");
            entity.Property(e => e.InicioVigenciaFecha).HasColumnName("Inicio_Vigencia_Fecha");
            entity.Property(e => e.ModalidadPagoNumero).HasColumnName("Modalidad_Pago_Numero");
            entity.Property(e => e.ParentescoNumero)
                .HasComment("Número único que representa el parentesco entre un dependiente y el titular de un núcleo familiar en el Seguro Familiar de Salud (SFS).")
                .HasColumnName("Parentesco_Numero");
            entity.Property(e => e.PrimaComercialMensual)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.PromotorDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Documento de identificación personal del promotor de servicio de salud que gestiono la afiliación del afiliado a la ARS.")
                .HasColumnName("Promotor_Documento");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.UltimoPagoFactura).HasColumnName("Ultimo_Pago_Factura");

            entity.HasOne(d => d.AfiliadoNssNavigation).WithMany(p => p.AfiliadosPlanesComplementariosTranAfiliadoNssNavigations)
                .HasForeignKey(d => d.AfiliadoNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Planes_Complementarios_Trans_Nueva_TSS_Ciudadanos_Master1");

            entity.HasOne(d => d.AfiliadoTipoCodigoNavigation).WithMany(p => p.AfiliadosPlanesComplementariosTrans)
                .HasForeignKey(d => d.AfiliadoTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Planes_Complementarios_Trans_Nueva_Afiliados_Tipo_Cata");

            entity.HasOne(d => d.AfiliadoTitularNssNavigation).WithMany(p => p.AfiliadosPlanesComplementariosTranAfiliadoTitularNssNavigations)
                .HasForeignKey(d => d.AfiliadoTitularNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Planes_Complementarios_Trans_Nueva_TSS_Ciudadanos_Master");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.AfiliadosPlanesComplementariosTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Planes_Complementarios_Trans_Nueva_ARS_Master");

            entity.HasOne(d => d.ModalidadPagoNumeroNavigation).WithMany(p => p.AfiliadosPlanesComplementariosTrans)
                .HasForeignKey(d => d.ModalidadPagoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Planes_Complementarios_Trans_Nueva_Afiliados_Modalidad_Pago_Cata");

            entity.HasOne(d => d.ParentescoNumeroNavigation).WithMany(p => p.AfiliadosPlanesComplementariosTrans)
                .HasForeignKey(d => d.ParentescoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Planes_Complementarios_Trans_Nueva_Afiliados_Parentesco_Cata");

            entity.HasOne(d => d.PlanNumeroNavigation).WithMany(p => p.AfiliadosPlanesComplementariosTrans)
                .HasForeignKey(d => d.PlanNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Planes_Complementarios_Trans_Nueva_Planes_Master");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.AfiliadosPlanesComplementariosTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Planes_Complementarios_Trans_Nueva_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<AfiliadosSfsMaster>(entity =>
        {
            entity.HasKey(e => e.AfiliadoNss);

            entity.ToTable("Afiliados_SFS_Master", tb => tb.HasComment("Es un maestro que contiene las informaciones de cada uno de los afiliados Titulares y Dependientes al SFS,  su fuente de alimentación son las vistas estadísticas de UNIPAGO."));

            entity.HasIndex(e => e.AfiliadoTitularNss, "Idx_Nss_Titular");

            entity.Property(e => e.AfiliadoNss)
                .ValueGeneratedNever()
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_NSS");
            entity.Property(e => e.AfiliacionTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código único que representa el proceso por el cual se registro  una afiliación,  entre ellas (Traspasos, Afiliación Automática, Normal, etc.).")
                .HasColumnName("Afiliacion_Tipo_Codigo");
            entity.Property(e => e.AfiliacionesRespuestaCodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Código único que representa la respuesta que da UNIPAGO al procesar una afiliación, esta respuesta justifica el estado en el que queda la afiliación.")
                .HasColumnName("Afiliaciones_Respuesta_Codigo");
            entity.Property(e => e.AfiliadoCantidadCapitas)
                .HasComment("Cantidad de cápitas que han sido dispersada por el afiliado a la ARS donde se encuentra afiliado actualmente.")
                .HasColumnName("Afiliado_Cantidad_Capitas");
            entity.Property(e => e.AfiliadoContratoNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de contrato o póliza que asigna cada ARS a cada uno de sus afiliados, puede ser representado por el número acreditado de formulario de afiliación.")
                .HasColumnName("Afiliado_Contrato_Numero");
            entity.Property(e => e.AfiliadoDiscapacitado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica con (S/N) si el afiliado es un discapacitado.")
                .HasColumnName("Afiliado_Discapacitado");
            entity.Property(e => e.AfiliadoEstadoNumero)
                .HasComment("Número único que representa el estado de  un afiliado,  entre ellos (OK, PE, BAJA, etc.), su objetivo es ser utilizados en futuras conversiones hacia el DATA WAREHOUSE.")
                .HasColumnName("Afiliado_Estado_Numero");
            entity.Property(e => e.AfiliadoEstudiante)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica con (S/N) si el afiliado es estudiante.")
                .HasColumnName("Afiliado_Estudiante");
            entity.Property(e => e.AfiliadoFechaAfiliacion)
                .HasComment("Fecha en que la que se realiza la afiliación de un afiliado a una Administradora de Riesgos de Salud (ARS) para un Plan de Servicios de Salud (PDSS, Voluntarios, Complementario, Especial, etc.).")
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Afiliacion");
            entity.Property(e => e.AfiliadoFechaBaja)
                .HasComment("Fecha en la que se realizo la baja de un afiliado de una cartera de afiliación de una ARS.")
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Baja");
            entity.Property(e => e.AfiliadoFechaNacimiento)
                .HasComment("Es la fecha de nacimiento de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Nacimiento");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sexo de la persona (Afiliado)  (F=femenino, M=masculino).")
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el código que clasifica los afiliados en T = Titulares (Quien representa al núcleo familiar) D = Dependientes  (Hijos y Conjugues) y A = Adicionales (Padres, Hijos con mayoría de edad cumplida 18 o 21, otros familiares dependientes económicamente).")
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularNss)
                .HasComment("Número único que identifica a un afiliado titular dentro del SFS, sobre el cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.AfiliadoUltimoPeriodoPagado)
                .HasComment("Representa el año y mes del  último periodo de facturación dispersado para el afiliado.")
                .HasColumnName("Afiliado_Ultimo_Periodo_Pagado");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.MotivoBajaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código único que representa el motivo que provoco la baja del afiliado.")
                .HasColumnName("Motivo_Baja_Codigo");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.NumeroSecuencia)
                .HasComment("Número que representan un lote de actualización desde una de las vista estadísticas que nos reporta UNIPAGO.")
                .HasColumnName("Numero_Secuencia");
            entity.Property(e => e.ParentescoNumero)
                .HasComment("Número único que representa el parentesco entre un dependiente y el titular de un núcleo familiar en el Seguro Familiar de Salud (SFS).")
                .HasColumnName("Parentesco_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AfiliacionTipoCodigoNavigation).WithMany(p => p.AfiliadosSfsMasters)
                .HasForeignKey(d => d.AfiliacionTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_SFS_Master_Afiliados_Afiliaciones_Tipo_Cata");

            entity.HasOne(d => d.AfiliacionesRespuestaCodigoNavigation).WithMany(p => p.AfiliadosSfsMasters)
                .HasForeignKey(d => d.AfiliacionesRespuestaCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_SFS_Master_Afiliaciones_Respuestas_Cata");

            entity.HasOne(d => d.AfiliadoEstadoNumeroNavigation).WithMany(p => p.AfiliadosSfsMasters)
                .HasForeignKey(d => d.AfiliadoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_SFS_Master_Afiliados_Estatus_Cata");

            entity.HasOne(d => d.AfiliadoNssNavigation).WithOne(p => p.AfiliadosSfsMasterAfiliadoNssNavigation)
                .HasForeignKey<AfiliadosSfsMaster>(d => d.AfiliadoNss)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.AfiliadoTipoCodigoNavigation).WithMany(p => p.AfiliadosSfsMasters)
                .HasForeignKey(d => d.AfiliadoTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_SFS_Master_Afiliados_Tipo_Cata");

            entity.HasOne(d => d.AfiliadoTitularNssNavigation).WithMany(p => p.AfiliadosSfsMasterAfiliadoTitularNssNavigations)
                .HasForeignKey(d => d.AfiliadoTitularNss)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.AfiliadosSfsMasters)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_SFS_Master_ARS_Master");

            entity.HasOne(d => d.MotivoBajaCodigoNavigation).WithMany(p => p.AfiliadosSfsMasters)
                .HasForeignKey(d => d.MotivoBajaCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_SFS_Master_Afiliados_Motivos_Baja_Cata");

            entity.HasOne(d => d.MunicipioNumeroNavigation).WithMany(p => p.AfiliadosSfsMasters)
                .HasForeignKey(d => d.MunicipioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_SFS_Master_Comunes_Municipios_Cata");

            entity.HasOne(d => d.ParentescoNumeroNavigation).WithMany(p => p.AfiliadosSfsMasters)
                .HasForeignKey(d => d.ParentescoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_SFS_Master_Afiliados_Parentesco_Cata");
        });

        modelBuilder.Entity<AfiliadosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.AfiliadoTipoCodigo);

            entity.ToTable("Afiliados_Tipo_Cata", tb => tb.HasComment("Es un catálogo de los diferentes tipo de afiliados para el SFS, su fuente de alimentación son las vistas estadísticas de UNIPAGO."));

            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el código que clasifica los afiliados en T = Titulares (Quien representa al núcleo familiar) D = Dependientes  (Hijos y Conjugues) y A = Adicionales (Padres, Hijos con mayoría de edad cumplida 18 o 21, otros familiares dependientes económicamente).")
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Clasifica los afiliados en Titulares (Quien representa al núcleo familiar) dependientes directos (Hijos y Conjugues) y Adicionales (Padres, Hijos con mayoría de edad cumplida 18 o 21, otros familiares dependientes económicamente).")
                .HasColumnName("Afiliado_Tipo_Descripcion");
            entity.Property(e => e.AfiliadoTipoDescripcionCorta)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Es la descripción abreviada que clasifica los afiliados en TIT=Titulares, DEP=Dependientes y ADI=Adicionales.")
                .HasColumnName("Afiliado_Tipo_Descripcion_Corta");
            entity.Property(e => e.AfiliadoTipoExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Explicación de la clasificación de los afiliados en Titulares (Quien representa al núcleo familiar) dependientes directos (Hijos y Conjugues) y Adicionales (Padres, Hijos con mayoría de edad cumplida 18 o 21, otros familiares dependientes económicamente).")
                .HasColumnName("Afiliado_Tipo_Explicacion");
            entity.Property(e => e.AfiliadoTipoNumero)
                .HasComment("Número único de clasificación de afiliado (Titular, Dependiente y Adicional), , su objetivo es ser utilizados en futuras conversiones hacia el DATA WAREHOUSE.")
                .HasColumnName("Afiliado_Tipo_Numero");
            entity.Property(e => e.AfiliadoTipoTitulo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es la descripción que clasifica los afiliados en Titulares, Dependientes y Adicionales.")
                .HasColumnName("Afiliado_Tipo_Titulo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AfiliadosTitularesPlanesVoluntariosRecargasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.AfiliadoTitularCedula, e.PlanNumero });

            entity.ToTable("Afiliados_Titulares_Planes_Voluntarios_Recargas_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.AfiliadoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Estado");
            entity.Property(e => e.AfiliadoTitularPoliza)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Poliza");
            entity.Property(e => e.InicioVigenciaFecha).HasColumnName("Inicio_Vigencia_Fecha");
            entity.Property(e => e.ModalidadPagoNumero).HasColumnName("Modalidad_Pago_Numero");
            entity.Property(e => e.PrimaComercialMensual)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.PromotorDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Documento");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.UltimoPagoFactura).HasColumnName("Ultimo_Pago_Factura");
        });

        modelBuilder.Entity<AfiliadosTitularesPlanesVoluntariosTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.AfiliadoTitularCedula, e.PlanNumero });

            entity.ToTable("Afiliados_Titulares_Planes_Voluntarios_Temporal_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.AfiliadoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Estado");
            entity.Property(e => e.AfiliadoTitularPoliza)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Poliza");
            entity.Property(e => e.InicioVigenciaFecha).HasColumnName("Inicio_Vigencia_Fecha");
            entity.Property(e => e.ModalidadPagoNumero).HasColumnName("Modalidad_Pago_Numero");
            entity.Property(e => e.PrimaComercialMensual)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.PromotorDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Documento");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.UltimoPagoFactura).HasColumnName("Ultimo_Pago_Factura");
        });

        modelBuilder.Entity<AfiliadosTitularesPlanesVoluntariosTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoPeriodo, e.ArsNumero, e.AfiliadoTitularCedula, e.PlanNumero }).HasName("PK_Afiliados_Titulares_Planes_Voluntarios_Trans_Nueva2");

            entity.ToTable("Afiliados_Titulares_Planes_Voluntarios_Trans", tb => tb.HasComment("Es una tabla transaccional,  que contiene los detalles de los afiliados Titulares a planes voluntarios de las ARS,  su fuente de datos es el esquema 33 procesado por el Robot Simon."));

            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Código único de la versión del Plan de servicios de Salud (PDSS) al cual pertenece el Subgrupo.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.AfiliadoTitularPoliza)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Poliza");
            entity.Property(e => e.InicioVigenciaFecha)
                .HasComment("Fecha en que un afiliado solicita su afiliación a una Administradora de Riesgos de Salud (ARS) para un Plan de Servicios de Salud (PDSS, Voluntarios, Complementario, Especial, etc.).")
                .HasColumnName("Inicio_Vigencia_Fecha");
            entity.Property(e => e.ModalidadPagoNumero).HasColumnName("Modalidad_Pago_Numero");
            entity.Property(e => e.PrimaComercialMensual)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.PromotorDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Documento de identificación personal del promotor de servicio de salud que gestiono la afiliación del afiliado a la ARS.")
                .HasColumnName("Promotor_Documento");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.UltimoPagoFactura)
                .HasComment("Fecha en que la que se realiza la afiliación de un afiliado a una Administradora de Riesgos de Salud (ARS) para un Plan de Servicios de Salud (PDSS, Voluntarios, Complementario, Especial, etc.).")
                .HasColumnName("Ultimo_Pago_Factura");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.AfiliadosTitularesPlanesVoluntariosTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Titulares_Planes_Voluntarios_Trans_Nueva2_Nueva_ARS_Master");

            entity.HasOne(d => d.ModalidadPagoNumeroNavigation).WithMany(p => p.AfiliadosTitularesPlanesVoluntariosTrans)
                .HasForeignKey(d => d.ModalidadPagoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Titulares_Planes_Voluntarios_Trans_Nueva2_Nueva_Afiliados_Modalidad_Pago_Cata");

            entity.HasOne(d => d.PlanNumeroNavigation).WithMany(p => p.AfiliadosTitularesPlanesVoluntariosTrans)
                .HasForeignKey(d => d.PlanNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Titulares_Planes_Voluntarios_Trans_Nueva2_Nueva_Planes_Master");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.AfiliadosTitularesPlanesVoluntariosTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Titulares_Planes_Voluntarios_Trans_Nueva2_Nueva_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<AfiliadosVoluntariosEspecialesRecargasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.PlanNumero, e.AfiliadoTitularPoliza, e.AfiliadoNumero });

            entity.ToTable("Afiliados_Voluntarios_Especiales_Recargas_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.AfiliadoTitularPoliza)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Poliza");
            entity.Property(e => e.AfiliadoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Numero");
            entity.Property(e => e.AfiliadoDependienteDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Dependiente_Documento");
            entity.Property(e => e.AfiliadoDiscapacitado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Discapacitado");
            entity.Property(e => e.AfiliadoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Estado");
            entity.Property(e => e.AfiliadoFechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Nacimiento");
            entity.Property(e => e.AfiliadoPlanTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Plan_Tipo");
            entity.Property(e => e.AfiliadoPrimerApellido)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Primer_Apellido");
            entity.Property(e => e.AfiliadoPrimerNombre)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Primer_Nombre");
            entity.Property(e => e.AfiliadoSegundoApellido)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Segundo_Apellido");
            entity.Property(e => e.AfiliadoSegundoNombre)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Segundo_Nombre");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Documento");
            entity.Property(e => e.InicioVigenciaFecha).HasColumnName("Inicio_Vigencia_Fecha");
            entity.Property(e => e.ModalidadPagoNumero).HasColumnName("Modalidad_Pago_Numero");
            entity.Property(e => e.NacionalidadNumero).HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.ParentescoNumero).HasColumnName("Parentesco_Numero");
            entity.Property(e => e.PrimaComercialMensual)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.PromotorDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Documento");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.UltimoPagoFactura).HasColumnName("Ultimo_Pago_Factura");
        });

        modelBuilder.Entity<AfiliadosVoluntariosEspecialesTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.PlanNumero, e.AfiliadoTitularPoliza, e.AfiliadoNumero });

            entity.ToTable("Afiliados_Voluntarios_Especiales_Temporal_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.AfiliadoTitularPoliza)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Poliza");
            entity.Property(e => e.AfiliadoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Numero");
            entity.Property(e => e.AfiliadoDependienteDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Dependiente_Documento");
            entity.Property(e => e.AfiliadoDiscapacitado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Discapacitado");
            entity.Property(e => e.AfiliadoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Estado");
            entity.Property(e => e.AfiliadoFechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Nacimiento");
            entity.Property(e => e.AfiliadoPlanTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Plan_Tipo");
            entity.Property(e => e.AfiliadoPrimerApellido)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Primer_Apellido");
            entity.Property(e => e.AfiliadoPrimerNombre)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Primer_Nombre");
            entity.Property(e => e.AfiliadoSegundoApellido)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Segundo_Apellido");
            entity.Property(e => e.AfiliadoSegundoNombre)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Segundo_Nombre");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Documento");
            entity.Property(e => e.InicioVigenciaFecha).HasColumnName("Inicio_Vigencia_Fecha");
            entity.Property(e => e.ModalidadPagoNumero).HasColumnName("Modalidad_Pago_Numero");
            entity.Property(e => e.NacionalidadNumero).HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.ParentescoNumero).HasColumnName("Parentesco_Numero");
            entity.Property(e => e.PrimaComercialMensual)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.PromotorDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Documento");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.UltimoPagoFactura).HasColumnName("Ultimo_Pago_Factura");
        });

        modelBuilder.Entity<AfiliadosVoluntariosEspecialesTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoPeriodo, e.ArsNumero, e.PlanNumero, e.AfiliadoTitularPoliza, e.AfiliadoNumero }).HasName("PK_Afiliados_Voluntarios_Especiales_Trans_Nueva");

            entity.ToTable("Afiliados_Voluntarios_Especiales_Trans", tb => tb.HasComment("Es una tabla transaccional que contiene los detalles de los afiliados extranjeros  titulares y dependientes a planes voluntarios en  los planes y carteras de las ARS, su fuente de datos es el  esquema 32  y procesado por el Robot Simon. "));

            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Código único de la versión del Plan de servicios de Salud (PDSS) al cual pertenece el Subgrupo.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.AfiliadoTitularPoliza)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de contrato o póliza que asigna cada ARS a cada uno de sus afiliados, puede ser representado por el número acreditado de formulario de afiliación.")
                .HasColumnName("Afiliado_Titular_Poliza");
            entity.Property(e => e.AfiliadoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de contrato o póliza que asigna cada ARS a cada uno de sus afiliados, puede ser representado por el número acreditado de formulario de afiliación.")
                .HasColumnName("Afiliado_Numero");
            entity.Property(e => e.AfiliadoDependienteDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Dependiente_Documento");
            entity.Property(e => e.AfiliadoDiscapacitado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica con (S/N) si el afiliado es un discapacitado.")
                .HasColumnName("Afiliado_Discapacitado");
            entity.Property(e => e.AfiliadoFechaNacimiento)
                .HasComment("Es la fecha de nacimiento de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Nacimiento");
            entity.Property(e => e.AfiliadoNombre)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Nombre completo del afiliado que está en el proceso de traspaso donde  se determino una  condición de enfermedad (CDE).")
                .HasColumnName("Afiliado_Nombre");
            entity.Property(e => e.AfiliadoPlanTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Plan_Tipo");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sexo de la persona (Afiliado)  (F=femenino, M=masculino).")
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el código que clasifica los afiliados en T = Titulares (Quien representa al núcleo familiar) D = Dependientes  (Hijos y Conjugues) y A = Adicionales (Padres, Hijos con mayoría de edad cumplida 18 o 21, otros familiares dependientes económicamente).")
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Documento");
            entity.Property(e => e.InicioVigenciaFecha).HasColumnName("Inicio_Vigencia_Fecha");
            entity.Property(e => e.ModalidadPagoNumero).HasColumnName("Modalidad_Pago_Numero");
            entity.Property(e => e.NacionalidadNumero)
                .HasComment("Número único que representa la nacionalidad de la persona o afiliado.")
                .HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.ParentescoNumero)
                .HasComment("Número único que representa el parentesco entre un dependiente y el titular de un núcleo familiar en el Seguro Familiar de Salud (SFS).")
                .HasColumnName("Parentesco_Numero");
            entity.Property(e => e.PrimaComercialMensual)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.PromotorDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasComment("Documento de identificación personal del promotor de servicio de salud que gestiono la afiliación del afiliado a la ARS.")
                .HasColumnName("Promotor_Documento");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.UltimoPagoFactura).HasColumnName("Ultimo_Pago_Factura");

            entity.HasOne(d => d.AfiliadoTipoCodigoNavigation).WithMany(p => p.AfiliadosVoluntariosEspecialesTrans)
                .HasForeignKey(d => d.AfiliadoTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Voluntarios_Especiales_Trans_Nueva_Afiliados_Tipo_Cata");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.AfiliadosVoluntariosEspecialesTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Voluntarios_Especiales_Trans_Nueva_ARS_Master");

            entity.HasOne(d => d.ModalidadPagoNumeroNavigation).WithMany(p => p.AfiliadosVoluntariosEspecialesTrans)
                .HasForeignKey(d => d.ModalidadPagoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Voluntarios_Especiales_Trans_Nueva_Afiliados_Modalidad_Pago_Cata");

            entity.HasOne(d => d.NacionalidadNumeroNavigation).WithMany(p => p.AfiliadosVoluntariosEspecialesTrans)
                .HasForeignKey(d => d.NacionalidadNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Voluntarios_Especiales_Trans_Nueva_TSS_Nacionalidades_Cata");

            entity.HasOne(d => d.ParentescoNumeroNavigation).WithMany(p => p.AfiliadosVoluntariosEspecialesTrans)
                .HasForeignKey(d => d.ParentescoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Voluntarios_Especiales_Trans_Nueva_Afiliados_Parentesco_Cata");

            entity.HasOne(d => d.PlanNumeroNavigation).WithMany(p => p.AfiliadosVoluntariosEspecialesTrans)
                .HasForeignKey(d => d.PlanNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Voluntarios_Especiales_Trans_Nueva_Planes_Master");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.AfiliadosVoluntariosEspecialesTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Afiliados_Voluntarios_Especiales_Trans_Nueva_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<ArlAccidentesEnfermedadesCalificadosRecargasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ExpedienteArlNumero, e.CalificacionFecha, e.CalificacionEstadoNumero });

            entity.ToTable("ARL_Accidentes_Enfermedades_Calificados_Recargas_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARL SS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.CalificacionFecha)
                .HasComment("Fecha de Calificación del AT /EP, contendrá el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Calificacion_Fecha");
            entity.Property(e => e.CalificacionEstadoNumero)
                .HasComment("1= Aprobado, 2 = Declinado.")
                .HasColumnName("Calificacion_Estado_Numero");
            entity.Property(e => e.AccidenteHora)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("Hora en la que sucedió el accidente contendrá el siguiente formato hh:mm, hora marina, será válido para el tipo de notificación 1. Caso contrario en blanco.")
                .HasColumnName("Accidente_Hora");
            entity.Property(e => e.Cie10Codigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("Código del diagnostico, Según codificación CIE-10.")
                .HasColumnName("CIE10_Codigo");
            entity.Property(e => e.ContingenciaTipoNumero)
                .HasComment("Código valido para reportar el tipo de contingencia de acuerdo al accidente reportado.   ")
                .HasColumnName("Contingencia_Tipo_Numero");
            entity.Property(e => e.DejoTrabajarFecha)
                .HasComment("Fecha en la salió de sus labores previo a el  accidente de trabajo contendrá el siguiente  formato DDMMYYYY. Esto solo aplica para el tipo de notificación 1, caso contrario en blanco.")
                .HasColumnType("datetime")
                .HasColumnName("Dejo_Trabajar_Fecha");
            entity.Property(e => e.EventoFecha)
                .HasComment("Fecha en la que sucedió el  AT o Diagnostico de EP. Contendrá el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Evento_Fecha");
            entity.Property(e => e.LesionGradoNumero)
                .HasComment("Código valido para reportar  el  tipo de lesión de acuerdo al accidente reportado.")
                .HasColumnName("Lesion_Grado_Numero");
            entity.Property(e => e.NotificacionTipoNumero)
                .HasComment("Para identificar el tipo de notificación 1 .Notificación AT y 2. Notificación E.P.")
                .HasColumnName("Notificacion_Tipo_Numero");
            entity.Property(e => e.PrestadoraIdentificada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Para especificar si se tiene identificado la PSS de atención,  indicar S o N.")
                .HasColumnName("Prestadora_Identificada");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Indica número de PSS donde se le brindo la atención al trabajador. Sera validada la PSS cuando el tipo de notificación sea  1, en caso contrario deberá ser reportado en 0.")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PrestadoraNumeroMedicoTratante)
                .HasComment("Identifica el número único asignado de PSS al Medico en el SIMON. Ver Catálogo de PSS (SIMON).")
                .HasColumnName("Prestadora_Numero_Medico_Tratante");
            entity.Property(e => e.ProcesoTipoNumero)
                .HasComment("Tipo de proceso en el cual se encuentra la solicitud AT /EP. Ver catálogo Tipo Proceso.")
                .HasColumnName("Proceso_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArlAccidentesEnfermedadesCalificadosTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ExpedienteArlNumero, e.CalificacionFecha, e.CalificacionEstadoNumero });

            entity.ToTable("ARL_Accidentes_Enfermedades_Calificados_Temporal_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARL SS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.CalificacionFecha)
                .HasComment("Fecha de Calificación del AT /EP, contendrá el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Calificacion_Fecha");
            entity.Property(e => e.CalificacionEstadoNumero)
                .HasComment("1= Aprobado, 2 = Declinado.")
                .HasColumnName("Calificacion_Estado_Numero");
            entity.Property(e => e.AccidenteHora)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("Hora en la que sucedió el accidente contendrá el siguiente formato hh:mm, hora marina, será válido para el tipo de notificación 1. Caso contrario en blanco.")
                .HasColumnName("Accidente_Hora");
            entity.Property(e => e.Cie10Codigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("Código del diagnostico, Según codificación CIE-10.")
                .HasColumnName("CIE10_Codigo");
            entity.Property(e => e.ContingenciaTipoNumero)
                .HasComment("Código valido para reportar el tipo de contingencia de acuerdo al accidente reportado.   ")
                .HasColumnName("Contingencia_Tipo_Numero");
            entity.Property(e => e.DejoTrabajarFecha)
                .HasComment("Fecha en la salió de sus labores previo a el  accidente de trabajo contendrá el siguiente  formato DDMMYYYY. Esto solo aplica para el tipo de notificación 1, caso contrario en blanco.")
                .HasColumnType("datetime")
                .HasColumnName("Dejo_Trabajar_Fecha");
            entity.Property(e => e.EventoFecha)
                .HasComment("Fecha en la que sucedió el  AT o Diagnostico de EP. Contendrá el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Evento_Fecha");
            entity.Property(e => e.LesionGradoNumero)
                .HasComment("Código valido para reportar  el  tipo de lesión de acuerdo al accidente reportado.")
                .HasColumnName("Lesion_Grado_Numero");
            entity.Property(e => e.NotificacionTipoNumero)
                .HasComment("Para identificar el tipo de notificación 1 .Notificación AT y 2. Notificación E.P.")
                .HasColumnName("Notificacion_Tipo_Numero");
            entity.Property(e => e.PrestadoraIdentificada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Para especificar si se tiene identificado la PSS de atención,  indicar S o N.")
                .HasColumnName("Prestadora_Identificada");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Indica número de PSS donde se le brindo la atención al trabajador. Sera validada la PSS cuando el tipo de notificación sea  1, en caso contrario deberá ser reportado en 0.")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PrestadoraNumeroMedicoTratante)
                .HasComment("Identifica el número único asignado de PSS al Medico en el SIMON. Ver Catálogo de PSS (SIMON).")
                .HasColumnName("Prestadora_Numero_Medico_Tratante");
            entity.Property(e => e.ProcesoTipoNumero)
                .HasComment("Tipo de proceso en el cual se encuentra la solicitud AT /EP. Ver catálogo Tipo Proceso.")
                .HasColumnName("Proceso_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArlAccidentesEnfermedadesCalificadosTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoPeriodo, e.ExpedienteArlNumero, e.CalificacionFecha, e.CalificacionEstadoNumero });

            entity.ToTable("ARL_Accidentes_Enfermedades_Calificados_Trans");

            entity.Property(e => e.SeguimientoPeriodo)
                .HasComment("Periodo (Año y Mes) correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARL SS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.CalificacionFecha)
                .HasComment("Fecha de Calificación del AT /EP, contendrá el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Calificacion_Fecha");
            entity.Property(e => e.CalificacionEstadoNumero)
                .HasComment("1= Aprobado, 2 = Declinado.")
                .HasColumnName("Calificacion_Estado_Numero");
            entity.Property(e => e.AccidenteHora)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("Hora en la que sucedió el accidente contendrá el siguiente formato hh:mm, hora marina, será válido para el tipo de notificación 1. Caso contrario en blanco.")
                .HasColumnName("Accidente_Hora");
            entity.Property(e => e.Cie10Codigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("Código del diagnostico, Según codificación CIE-10.")
                .HasColumnName("CIE10_Codigo");
            entity.Property(e => e.ContingenciaTipoNumero)
                .HasComment("Código valido para reportar el tipo de contingencia de acuerdo al accidente reportado.   ")
                .HasColumnName("Contingencia_Tipo_Numero");
            entity.Property(e => e.DejoTrabajarFecha)
                .HasComment("Fecha en la salió de sus labores previo a el  accidente de trabajo contendrá el siguiente  formato DDMMYYYY. Esto solo aplica para el tipo de notificación 1, caso contrario en blanco.")
                .HasColumnType("datetime")
                .HasColumnName("Dejo_Trabajar_Fecha");
            entity.Property(e => e.EventoFecha)
                .HasComment("Fecha en la que sucedió el  AT o Diagnostico de EP. Contendrá el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Evento_Fecha");
            entity.Property(e => e.LesionGradoNumero)
                .HasComment("Código valido para reportar  el  tipo de lesión de acuerdo al accidente reportado.")
                .HasColumnName("Lesion_Grado_Numero");
            entity.Property(e => e.NotificacionTipoNumero)
                .HasComment("Para identificar el tipo de notificación 1 .Notificación AT y 2. Notificación E.P.")
                .HasColumnName("Notificacion_Tipo_Numero");
            entity.Property(e => e.PrestadoraIdentificada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Para especificar si se tiene identificado la PSS de atención,  indicar S o N.")
                .HasColumnName("Prestadora_Identificada");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Indica número de PSS donde se le brindo la atención al trabajador. Sera validada la PSS cuando el tipo de notificación sea  1, en caso contrario deberá ser reportado en 0.")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PrestadoraNumeroMedicoTratante)
                .HasComment("Identifica el número único asignado de PSS al Medico en el SIMON. Ver Catálogo de PSS (SIMON).")
                .HasColumnName("Prestadora_Numero_Medico_Tratante");
            entity.Property(e => e.ProcesoTipoNumero)
                .HasComment("Tipo de proceso en el cual se encuentra la solicitud AT /EP. Ver catálogo Tipo Proceso.")
                .HasColumnName("Proceso_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
        });

        modelBuilder.Entity<ArlAccidentesEnfermedadesRecargasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ExpedienteArlNumero, e.TrabajadorCedula });

            entity.ToTable("ARL_Accidentes_Enfermedades_Recargas_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARL SS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.TrabajadorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Número de Cédula del trabajador asignada por la Junta Central Electoral.")
                .HasColumnName("Trabajador_Cedula");
            entity.Property(e => e.AccidenteFecha)
                .HasComment("Fecha del Accidente Reportado. Debe contener el siguiente formato DDMMYYYY.  Solo aplica cuando el tipo notificación es 1 en caso reportar en blanco.")
                .HasColumnType("datetime")
                .HasColumnName("Accidente_Fecha");
            entity.Property(e => e.AccidenteHora)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("Hora del accidente, contendrá el siguiente formato HH:MM, hora marina. Solo aplica cuando el tipo notificación es 1 en caso reportar en blanco.")
                .HasColumnName("Accidente_Hora");
            entity.Property(e => e.CiioCodigo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasComment("Código de Ocupación, según clasificación internacional de ocupaciones CIUO 88.")
                .HasColumnName("CIIO_Codigo");
            entity.Property(e => e.EmpleadorRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Registro Nacional de Contribuyente de la Empresa que reportó al trabajador.")
                .HasColumnName("Empleador_RNC_O_Cedula");
            entity.Property(e => e.IngresoFecha)
                .HasComment("Fecha en la Ingreso a la  Empresa. Debe contener el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Ingreso_Fecha");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número del municipio donde sucedió el accidente.")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.NotificacionFecha)
                .HasComment("Fecha de notificación del Accidente de Trabajo / Enfermedad Profesional. Debe contener el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Notificacion_Fecha");
            entity.Property(e => e.NotificacionTipoNumero)
                .HasComment("Para identificar el tipo de notificación 1 .Notificación AT y 2. Notificación E.P.")
                .HasColumnName("Notificacion_Tipo_Numero");
            entity.Property(e => e.PrestadoraIdentificada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Para especificar si se tiene identificado la PSS de atención,  indicar S o N.")
                .HasColumnName("Prestadora_Identificada");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Indica número de PSS donde se le brindo la atención al trabajador. Sera validada la PSS cuando el tipo de notificación sea  1, en caso contrario deberá ser reportado en 0.")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArlAccidentesEnfermedadesTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ExpedienteArlNumero, e.TrabajadorCedula });

            entity.ToTable("ARL_Accidentes_Enfermedades_Temporal_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARL SS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.TrabajadorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Número de Cédula del trabajador asignada por la Junta Central Electoral.")
                .HasColumnName("Trabajador_Cedula");
            entity.Property(e => e.AccidenteFecha)
                .HasComment("Fecha del Accidente Reportado. Debe contener el siguiente formato DDMMYYYY.  Solo aplica cuando el tipo notificación es 1 en caso reportar en blanco.")
                .HasColumnType("datetime")
                .HasColumnName("Accidente_Fecha");
            entity.Property(e => e.AccidenteHora)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("Hora del accidente, contendrá el siguiente formato HH:MM, hora marina. Solo aplica cuando el tipo notificación es 1 en caso reportar en blanco.")
                .HasColumnName("Accidente_Hora");
            entity.Property(e => e.CiioCodigo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasComment("Código de Ocupación, según clasificación internacional de ocupaciones CIUO 88.")
                .HasColumnName("CIIO_Codigo");
            entity.Property(e => e.EmpleadorRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Registro Nacional de Contribuyente de la Empresa que reportó al trabajador.")
                .HasColumnName("Empleador_RNC_O_Cedula");
            entity.Property(e => e.IngresoFecha)
                .HasComment("Fecha en la Ingreso a la  Empresa. Debe contener el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Ingreso_Fecha");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número del municipio donde sucedió el accidente.")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.NotificacionFecha)
                .HasComment("Fecha de notificación del Accidente de Trabajo / Enfermedad Profesional. Debe contener el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Notificacion_Fecha");
            entity.Property(e => e.NotificacionTipoNumero)
                .HasComment("Para identificar el tipo de notificación 1 .Notificación AT y 2. Notificación E.P.")
                .HasColumnName("Notificacion_Tipo_Numero");
            entity.Property(e => e.PrestadoraIdentificada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Para especificar si se tiene identificado la PSS de atención,  indicar S o N.")
                .HasColumnName("Prestadora_Identificada");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Indica número de PSS donde se le brindo la atención al trabajador. Sera validada la PSS cuando el tipo de notificación sea  1, en caso contrario deberá ser reportado en 0.")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArlAccidentesEnfermedadesTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoPeriodo, e.ExpedienteArlNumero, e.TrabajadorCedula });

            entity.ToTable("ARL_Accidentes_Enfermedades_Trans");

            entity.Property(e => e.SeguimientoPeriodo)
                .HasComment("Periodo (Año y Mes) correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARL SS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.TrabajadorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Número de Cédula del trabajador asignada por la Junta Central Electoral.")
                .HasColumnName("Trabajador_Cedula");
            entity.Property(e => e.AccidenteFecha)
                .HasComment("Fecha del Accidente Reportado. Debe contener el siguiente formato DDMMYYYY.  Solo aplica cuando el tipo notificación es 1 en caso reportar en blanco.")
                .HasColumnType("datetime")
                .HasColumnName("Accidente_Fecha");
            entity.Property(e => e.AccidenteHora)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("Hora del accidente, contendrá el siguiente formato HH:MM, hora marina. Solo aplica cuando el tipo notificación es 1 en caso reportar en blanco.")
                .HasColumnName("Accidente_Hora");
            entity.Property(e => e.CiioCodigo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasComment("Código de Ocupacióm, según clasificación internacional de ocupaciones CIUO 88.")
                .HasColumnName("CIIO_Codigo");
            entity.Property(e => e.EmpleadorRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Registro Nacional de Contribuyente de la Empresa que reportó al trabajador.")
                .HasColumnName("Empleador_RNC_O_Cedula");
            entity.Property(e => e.IngresoFecha)
                .HasComment("Fecha en la Ingreso a la  Empresa. Debe contener el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Ingreso_Fecha");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número del municipio donde sucedió el accidente.")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.NotificacionFecha)
                .HasComment("Fecha de notificación del Accidente de Trabajo / Enfermedad Profesional. Debe contener el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Notificacion_Fecha");
            entity.Property(e => e.NotificacionTipoNumero)
                .HasComment("Para identificar el tipo de notificación 1 .Notificación AT y 2. Notificación E.P.")
                .HasColumnName("Notificacion_Tipo_Numero");
            entity.Property(e => e.PrestadoraIdentificada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Para especificar si se tiene identificado la PSS de atención,  indicar S o N.")
                .HasColumnName("Prestadora_Identificada");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Indica número de PSS donde se le brindo la atención al trabajador. Sera validada la PSS cuando el tipo de notificación sea  1, en caso contrario deberá ser reportado en 0.")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
        });

        modelBuilder.Entity<ArlCalificacionesEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.CalificacionEstadoNumero);

            entity.ToTable("ARL_Calificaciones_Estados_Cata", tb => tb.HasComment("Es una tabla catálogo que contiene los tipos de estado de la calificación por Accidente de Trabajo y/o Enfermedad Profecional (1= Aprobado , 2 = Declinado) publicados por la ARLSS, ver catálogo de Estado de Calificación, su fuente de datos es el  esquema 62 procesado por el Robot Simon. "));

            entity.Property(e => e.CalificacionEstadoNumero)
                .HasComment("1= Aprobado, 2 = Declinado.")
                .HasColumnName("Calificacion_Estado_Numero");
            entity.Property(e => e.CalificacionEstadoDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Descripción de cada estado en el que se encuentra la  certificación de discapacidad otorgada bajo el Seguro de Riesgos Laborales.")
                .HasColumnName("Calificacion_Estado_Descripcion");
            entity.Property(e => e.CalificacionEstadoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Explicación de cada estado en el que se encuentra la  certificación de discapacidad otorgada bajo el Seguro de Riesgos Laborales.")
                .HasColumnName("Calificacion_Estado_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArlContingenciasTipoCatum>(entity =>
        {
            entity.HasKey(e => e.ContingenciaTipoNumero).HasName("PK_Contigencia_tipo_Cata");

            entity.ToTable("ARL_Contingencias_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene los tipo de contingencias utilizado por la ARL para reportar los detalles de los accidentes de trabajos, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ContingenciaTipoNumero)
                .HasComment("Código valido para reportar el tipo de contingencia de acuerdo al accidente reportado.")
                .HasColumnName("Contingencia_Tipo_Numero");
            entity.Property(e => e.ContingenciaTipoDescripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de contingencia de acuerdo al accidente reportado.")
                .HasColumnName("Contingencia_Tipo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArlLesionesGradosCatum>(entity =>
        {
            entity.HasKey(e => e.LesionGradoNumero).HasName("PK_ARL_Lesiones_Grados_Cata_Cata");

            entity.ToTable("ARL_Lesiones_Grados_Cata", tb => tb.HasComment("Es un catálogo que contiene los grados de severidad de las lesiones que puede recibir  un trabajador,  utilizado por la ARL para reportar los detalles de los accidentes de trabajos, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.LesionGradoNumero)
                .HasComment("Código valido para reportar el tipo de lesión de acuerdo al accidente reportado.")
                .HasColumnName("Lesion_Grado_Numero");
            entity.Property(e => e.LesionGradoDescripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de lesión de acuerdo al accidente reportado.")
                .HasColumnName("Lesion_Grado_Descripcion");
            entity.Property(e => e.LesionGradoExplicacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Explicación de la descripción del tipo de lesión de acuerdo al accidente reportado.")
                .HasColumnName("Lesion_Grado_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArlNotificacionesTipoCatum>(entity =>
        {
            entity.HasKey(e => e.NotificacionTipoNumero).HasName("PK_ARL_Notificaciones_Tipos_Cata");

            entity.ToTable("ARL_Notificaciones_Tipo_Cata", tb => tb.HasComment("Es una tabla catálogo que contiene los tipos de Notificación de la calificación por Accidente de Trabajo y/o Enfermedad Profecional (1 .Notificación AT y 2. Notificación E.P.) publicados por la ARLSS, ver catálogo de Estado de Calificación, su fuente de datos es el  esquema 62 procesado por el Robot Simon. "));

            entity.Property(e => e.NotificacionTipoNumero)
                .HasComment("1. Notificación AT y 2. Notificación E.P.")
                .HasColumnName("Notificacion_Tipo_Numero");
            entity.Property(e => e.NotificacionTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("1. Notificación AT y 2. Notificación E.P.")
                .HasColumnName("Notificacion_Tipo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArlPagosDerivadosPrestacionesRecargasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ExpedienteArlNumero, e.ReclamacionNumero, e.PagoFecha, e.PagoViaCodigo });

            entity.ToTable("ARL_Pagos_Derivados_Prestaciones_Recargas_Trans", tb => tb.HasComment("Es una tabla transaccional, que contiene los detalles de las prestaciones en especies  reportadas por  la ARL,  su fuente de datos es el esquema 54 procesado por el Robot Simon. "));

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARLSS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.ReclamacionNumero)
                .HasComment("Para reportar el número de la reclamación asignado por la ARLSS.")
                .HasColumnName("Reclamacion_Numero");
            entity.Property(e => e.PagoFecha)
                .HasComment("Para reportar la fecha en que se realizo el pago. Contendrá el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Pago_Fecha");
            entity.Property(e => e.PagoViaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Vía del Pago TB = Transferencia Bancaria, CK = Cheque.")
                .HasColumnName("Pago_Via_Codigo");
            entity.Property(e => e.Cie09Codigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Código del procedimiento Medico, Según codificación CIE-09, en caso de no tener la información, reportar en cero, Ej.: 0000000000.")
                .HasColumnName("CIE09_Codigo");
            entity.Property(e => e.DocumentoPagoNumero)
                .HasComment("Número de identificación de la transacción del pago. En caso de que la vía de pago  sea igual a CK, será requerido Número de Cheque, caso contrario reportar en cero.")
                .HasColumnName("Documento_Pago_Numero");
            entity.Property(e => e.MontoPagado)
                .HasComment("Monto pagado por la ARL al beneficiario. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales). ")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Monto_Pagado");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudPagoNumero)
                .HasComment("Número único asignado por la ARL a cada solicitud de pago. Reportar en cero en caso de no tenerlo.")
                .HasColumnName("Solicitud_Pago_Numero");
        });

        modelBuilder.Entity<ArlPagosDerivadosPrestacionesTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ExpedienteArlNumero, e.ReclamacionNumero, e.PagoFecha, e.PagoViaCodigo }).HasName("PK_ARL_Pagos_Derivados_Prestaciones_Temporal_Trans_1");

            entity.ToTable("ARL_Pagos_Derivados_Prestaciones_Temporal_Trans", tb => tb.HasComment("Es una tabla transaccional, que contiene los detalles de las prestaciones en especies  reportadas por  la ARL,  su fuente de datos es el esquema 54 procesado por el Robot Simon. "));

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARLSS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.ReclamacionNumero)
                .HasComment("Para reportar el número de la reclamación asignado por la ARLSS.")
                .HasColumnName("Reclamacion_Numero");
            entity.Property(e => e.PagoFecha)
                .HasComment("Para reportar la fecha en que se realizo el pago. Contendrá el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Pago_Fecha");
            entity.Property(e => e.PagoViaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Vía del Pago TB = Transferencia Bancaria, CK = Cheque.")
                .HasColumnName("Pago_Via_Codigo");
            entity.Property(e => e.Cie09Codigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Código del procedimiento Medico, Según codificación CIE-09, en caso de no tener la información, reportar en cero, Ej.: 0000000000.")
                .HasColumnName("CIE09_Codigo");
            entity.Property(e => e.DocumentoPagoNumero)
                .HasComment("Número de identificación de la transacción del pago. En caso de que la vía de pago  sea igual a CK, será requerido Número de Cheque, caso contrario reportar en cero.")
                .HasColumnName("Documento_Pago_Numero");
            entity.Property(e => e.MontoPagado)
                .HasComment("Monto pagado por la ARL al beneficiario. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales). ")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Monto_Pagado");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudPagoNumero)
                .HasComment("Número único asignado por la ARL a cada solicitud de pago. Reportar en cero en caso de no tenerlo.")
                .HasColumnName("Solicitud_Pago_Numero");
        });

        modelBuilder.Entity<ArlPagosDerivadosPrestacionesTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoPeriodo, e.ExpedienteArlNumero, e.ReclamacionNumero, e.PagoFecha, e.PagoViaCodigo });

            entity.ToTable("ARL_Pagos_Derivados_Prestaciones_Trans", tb => tb.HasComment("Es una tabla transaccional, que contiene los detalles de las prestaciones en especies  reportadas por  la ARL,  su fuente de datos es el esquema 54 procesado por el Robot Simon. "));

            entity.Property(e => e.SeguimientoPeriodo)
                .HasComment("Periodo (Año y Mes) correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARLSS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.ReclamacionNumero)
                .HasComment("Para reportar el número de la reclamación asignado por la ARLSS.")
                .HasColumnName("Reclamacion_Numero");
            entity.Property(e => e.PagoFecha)
                .HasComment("Para reportar la fecha en que se realizo el pago. Contendrá el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Pago_Fecha");
            entity.Property(e => e.PagoViaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Vía del Pago TB = Transferencia Bancaria, CK = Cheque.")
                .HasColumnName("Pago_Via_Codigo");
            entity.Property(e => e.Cie09Codigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Código del procedimiento Medico, Según codificación CIE-09, en caso de no tener la información, reportar en cero, Ej.: 0000000000.")
                .HasColumnName("CIE09_Codigo");
            entity.Property(e => e.DocumentoPagoNumero)
                .HasComment("Número de identificación de la transacción del pago. En caso de que la vía de pago  sea igual a CK, será requerido Número de Cheque, caso contrario reportar en cero.")
                .HasColumnName("Documento_Pago_Numero");
            entity.Property(e => e.MontoPagado)
                .HasComment("Monto pagado por la ARL al beneficiario. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales). ")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Monto_Pagado");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.SolicitudPagoNumero)
                .HasComment("Número único asignado por la ARL a cada solicitud de pago. Reportar en cero en caso de no tenerlo.")
                .HasColumnName("Solicitud_Pago_Numero");
        });

        modelBuilder.Entity<ArlPagosIndemnizacionesDiscapacidadesRecargasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ExpedienteArlNumero, e.PrestacionTipoNumero, e.SolicitudFecha, e.PagoFecha, e.PagoTipoNumero });

            entity.ToTable("ARL_Pagos_Indemnizaciones_Discapacidades_Recargas_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARLSS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.PrestacionTipoNumero)
                .HasComment("Código valido para reportar  el  tipo de Prestación. Solo reportar 2 = Indemnización y  3 = Pensión por  Discapacidad.")
                .HasColumnName("Prestacion_Tipo_Numero");
            entity.Property(e => e.SolicitudFecha)
                .HasComment("Para reportar la fecha en que se realizo solicitud de la evaluación de la discapacidad formato  DDMMYYYY ")
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
            entity.Property(e => e.PagoFecha)
                .HasComment("Fecha en que se realizo el pago   Debe ser la fecha correspondiente al periodo reportado y contener el siguiente formato: DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Pago_Fecha");
            entity.Property(e => e.PagoTipoNumero)
                .HasComment("Para especificar si el pago es 1= Retroactivo, 2 = Único, 3 =Pensión.")
                .HasColumnName("Pago_Tipo_Numero");
            entity.Property(e => e.DocumentoPagoNumero)
                .HasComment("Número de identificación de la transacción del pago. En caso de que la vía de pago  sea igual a CK, será requerido Número de Cheque, caso contrario reporta en cero.")
                .HasColumnName("Documento_Pago_Numero");
            entity.Property(e => e.PagoViaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Para especificar si el pago fue TB = Transferencia Bancaria o CK = Cheque.")
                .HasColumnName("Pago_Via_Codigo");
            entity.Property(e => e.PrestacionMonto)
                .HasComment("Para reportar el monto calculado de la prestación económica por mes que  se le va a pagar al trabajador. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Prestacion_Monto");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArlPagosIndemnizacionesDiscapacidadesTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ExpedienteArlNumero, e.PrestacionTipoNumero, e.SolicitudFecha, e.PagoFecha, e.PagoTipoNumero });

            entity.ToTable("ARL_Pagos_Indemnizaciones_Discapacidades_Temporal_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARLSS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.PrestacionTipoNumero)
                .HasComment("Código valido para reportar  el  tipo de Prestación. Solo reportar 2 = Indemnización y  3 = Pensión por  Discapacidad.")
                .HasColumnName("Prestacion_Tipo_Numero");
            entity.Property(e => e.SolicitudFecha)
                .HasComment("Para reportar la fecha en que se realizo solicitud de la evaluación de la discapacidad formato  DDMMYYYY ")
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
            entity.Property(e => e.PagoFecha)
                .HasComment("Fecha en que se realizo el pago   Debe ser la fecha correspondiente al periodo reportado y contener el siguiente formato: DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Pago_Fecha");
            entity.Property(e => e.PagoTipoNumero)
                .HasComment("Para especificar si el pago es 1= Retroactivo, 2 = Único, 3 =Pensión.")
                .HasColumnName("Pago_Tipo_Numero");
            entity.Property(e => e.DocumentoPagoNumero)
                .HasComment("Número de identificación de la transacción del pago. En caso de que la vía de pago  sea igual a CK, será requerido Número de Cheque, caso contrario reporta en cero.")
                .HasColumnName("Documento_Pago_Numero");
            entity.Property(e => e.PagoViaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Para especificar si el pago fue TB = Transferencia Bancaria o CK = Cheque.")
                .HasColumnName("Pago_Via_Codigo");
            entity.Property(e => e.PrestacionMonto)
                .HasComment("Para reportar el monto calculado de la prestación económica por mes que  se le va a pagar al trabajador. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Prestacion_Monto");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArlPagosIndemnizacionesDiscapacidadesTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoPeriodo, e.ExpedienteArlNumero, e.PrestacionTipoNumero, e.SolicitudFecha, e.PagoFecha, e.PagoTipoNumero });

            entity.ToTable("ARL_Pagos_Indemnizaciones_Discapacidades_Trans");

            entity.Property(e => e.SeguimientoPeriodo)
                .HasComment("Periodo (Año y Mes) correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARLSS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.PrestacionTipoNumero)
                .HasComment("Código valido para reportar  el  tipo de Prestación. Solo reportar 2 = Indemnización y  3 = Pensión por  Discapacidad.")
                .HasColumnName("Prestacion_Tipo_Numero");
            entity.Property(e => e.SolicitudFecha)
                .HasComment("Para reportar la fecha en que se realizo solicitud de la evaluación de la discapacidad formato  DDMMYYYY ")
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
            entity.Property(e => e.PagoFecha)
                .HasComment("Fecha en que se realizo el pago   Debe ser la fecha correspondiente al periodo reportado y contener el siguiente formato: DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Pago_Fecha");
            entity.Property(e => e.PagoTipoNumero)
                .HasComment("Para especificar si el pago es 1= Retroactivo, 2 = Único, 3 =Pensión.")
                .HasColumnName("Pago_Tipo_Numero");
            entity.Property(e => e.DocumentoPagoNumero)
                .HasComment("Número de identificación de la transacción del pago. En caso de que la vía de pago  sea igual a CK, será requerido Número de Cheque, caso contrario reporta en cero.")
                .HasColumnName("Documento_Pago_Numero");
            entity.Property(e => e.PagoViaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Para especificar si el pago fue TB = Transferencia Bancaria o CK = Cheque.")
                .HasColumnName("Pago_Via_Codigo");
            entity.Property(e => e.PrestacionMonto)
                .HasComment("Para reportar el monto calculado de la prestación económica por mes que  se le va a pagar al trabajador. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Prestacion_Monto");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
        });

        modelBuilder.Entity<ArlPagosPensionesSobrevivenciasRecargasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ExpedienteArlNumero, e.BeneficiarioCedula, e.BeneficiarioTipoNumero });

            entity.ToTable("ARL_Pagos_Pensiones_Sobrevivencias_Recargas_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARLSS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.BeneficiarioCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Para reportar número de identificación y electoral del beneficiario.")
                .HasColumnName("Beneficiario_Cedula");
            entity.Property(e => e.BeneficiarioTipoNumero)
                .HasComment("1 = Conyugue, 2 =Tutor, 3 = Hijo Mayor.")
                .HasColumnName("Beneficiario_Tipo_Numero");
            entity.Property(e => e.BaneficiariosCantidad)
                .HasComment("Para reportar la cantidad de beneficiarios.")
                .HasColumnName("Baneficiarios_Cantidad");
            entity.Property(e => e.DocumentoPagoNumero)
                .HasComment("Número de identificación de la transacción del pago. En caso de que la vía de pago  sea igual a CK, será requerido Número de Cheque, caso contrario reportar en cero.")
                .HasColumnName("Documento_Pago_Numero");
            entity.Property(e => e.PagoFecha)
                .HasComment("Para reportar la fecha en que se realizo el pago. Contendrá el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Pago_Fecha");
            entity.Property(e => e.PagoTipoNumero)
                .HasComment("Para especificar si el pago es 1= Retroactivo, 2 = Único, 3 =Pensión.")
                .HasColumnName("Pago_Tipo_Numero");
            entity.Property(e => e.PagoViaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Vía del Pago TB = Transferencia Bancaria, CK = Cheque.")
                .HasColumnName("Pago_Via_Codigo");
            entity.Property(e => e.PrestacionMonto)
                .HasComment("Para reportar el monto calculado de la prestación económica por mes que  se le va a pagar al trabajador. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Prestacion_Monto");
            entity.Property(e => e.PrestacionTipoNumero)
                .HasComment("Código valido para reportar  el  tipo de Prestación. Solo reportar 4= Pensión Viudez. Y  5 = Pensión Orfandad.")
                .HasColumnName("Prestacion_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudFecha)
                .HasComment("Para reportar la fecha en que se realizo solicitud de la evaluación de la discapacidad formato  DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
        });

        modelBuilder.Entity<ArlPagosPensionesSobrevivenciasTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ExpedienteArlNumero, e.BeneficiarioCedula, e.BeneficiarioTipoNumero });

            entity.ToTable("ARL_Pagos_Pensiones_Sobrevivencias_Temporal_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARLSS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.BeneficiarioCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Para reportar número de identificación y electoral del beneficiario.")
                .HasColumnName("Beneficiario_Cedula");
            entity.Property(e => e.BeneficiarioTipoNumero)
                .HasComment("1 = Conyugue, 2 =Tutor, 3 = Hijo Mayor.")
                .HasColumnName("Beneficiario_Tipo_Numero");
            entity.Property(e => e.BaneficiariosCantidad)
                .HasComment("Para reportar la cantidad de beneficiarios.")
                .HasColumnName("Baneficiarios_Cantidad");
            entity.Property(e => e.DocumentoPagoNumero)
                .HasComment("Número de identificación de la transacción del pago. En caso de que la vía de pago  sea igual a CK, será requerido Número de Cheque, caso contrario reportar en cero.")
                .HasColumnName("Documento_Pago_Numero");
            entity.Property(e => e.PagoFecha)
                .HasComment("Para reportar la fecha en que se realizo el pago. Contendrá el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Pago_Fecha");
            entity.Property(e => e.PagoTipoNumero)
                .HasComment("Para especificar si el pago es 1= Retroactivo, 2 = Único, 3 =Pensión.")
                .HasColumnName("Pago_Tipo_Numero");
            entity.Property(e => e.PagoViaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Vía del Pago TB = Transferencia Bancaria, CK = Cheque.")
                .HasColumnName("Pago_Via_Codigo");
            entity.Property(e => e.PrestacionMonto)
                .HasComment("Para reportar el monto calculado de la prestación económica por mes que  se le va a pagar al trabajador. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Prestacion_Monto");
            entity.Property(e => e.PrestacionTipoNumero)
                .HasComment("Código valido para reportar  el  tipo de Prestación. Solo reportar 4= Pensión Viudez. Y  5 = Pensión Orfandad.")
                .HasColumnName("Prestacion_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudFecha)
                .HasComment("Para reportar la fecha en que se realizo solicitud de la evaluación de la discapacidad formato  DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
        });

        modelBuilder.Entity<ArlPagosPensionesSobrevivenciasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoPeriodo, e.ExpedienteArlNumero, e.BeneficiarioCedula, e.BeneficiarioTipoNumero });

            entity.ToTable("ARL_Pagos_Pensiones_Sobrevivencias_Trans");

            entity.Property(e => e.SeguimientoPeriodo)
                .HasComment("Periodo (Año y Mes) correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARLSS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.BeneficiarioCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Para reportar número de identificación y electoral del beneficiario.")
                .HasColumnName("Beneficiario_Cedula");
            entity.Property(e => e.BeneficiarioTipoNumero)
                .HasComment("1 = Conyugue, 2 =Tutor, 3 = Hijo Mayor.")
                .HasColumnName("Beneficiario_Tipo_Numero");
            entity.Property(e => e.BaneficiariosCantidad)
                .HasComment("Para reportar la cantidad de beneficiarios.")
                .HasColumnName("Baneficiarios_Cantidad");
            entity.Property(e => e.DocumentoPagoNumero)
                .HasComment("Número de identificación de la transacción del pago. En caso de que la vía de pago  sea igual a CK, será requerido Número de Cheque, caso contrario reportar en cero.")
                .HasColumnName("Documento_Pago_Numero");
            entity.Property(e => e.PagoFecha)
                .HasComment("Para reportar la fecha en que se realizo el pago. Contendrá el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Pago_Fecha");
            entity.Property(e => e.PagoTipoNumero)
                .HasComment("Para especificar si el pago es 1= Retroactivo, 2 = Único, 3 =Pensión.")
                .HasColumnName("Pago_Tipo_Numero");
            entity.Property(e => e.PagoViaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Vía del Pago TB = Transferencia Bancaria, CK = Cheque.")
                .HasColumnName("Pago_Via_Codigo");
            entity.Property(e => e.PrestacionMonto)
                .HasComment("Para reportar el monto calculado de la prestación económica por mes que  se le va a pagar al trabajador. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Prestacion_Monto");
            entity.Property(e => e.PrestacionTipoNumero)
                .HasComment("Código valido para reportar  el  tipo de Prestación. Solo reportar 4= Pensión Viudez. Y  5 = Pensión Orfandad.")
                .HasColumnName("Prestacion_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.SolicitudFecha)
                .HasComment("Para reportar la fecha en que se realizo solicitud de la evaluación de la discapacidad formato  DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
        });

        modelBuilder.Entity<ArlPagosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.PagoTipoNumero).HasName("PK_Pago_Tipo_Cata");

            entity.ToTable("ARL_Pagos_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene tipo de pago,  utilizado por la ARL para reportar los detalles de los pagos derivados de prestaciones de salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PagoTipoNumero)
                .ValueGeneratedNever()
                .HasComment("Número único del tipo de pago que se realiza a una reclamación, por pago derivado de prestación de salud.")
                .HasColumnName("Pago_Tipo_Numero");
            entity.Property(e => e.PagoTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del  tipo de pago que se realiza a una reclamación, por pago derivado de prestación de salud.")
                .HasColumnName("Pago_Tipo_Descripcion");
            entity.Property(e => e.PagoTipoExplicacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Explicación de la descripción del  tipo de pago que se realiza a una reclamación, por pago derivado de prestación de salud.")
                .HasColumnName("Pago_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArlPrestacionesEconomicasTran>(entity =>
        {
            entity.HasKey(e => e.PrestacionSecuencia);

            entity.ToTable("ARL_Prestaciones_Economicas_Trans", tb => tb.HasComment("Es una tabla transaccional, que contiene los detalles de las prestaciones económicas pagadas  y reportados por  la ARL,  su fuente de datos es el esquema 53 procesado por el Robot Simon. "));

            entity.HasIndex(e => new { e.TrabajadorCedula, e.ExpedienteArlNumero, e.BeneficiarioCedula }, "IX_ARL_Prestaciones_Economicas_Trans").IsUnique();

            entity.Property(e => e.PrestacionSecuencia)
                .HasComment("Número de secuencia generado por cada transacción.")
                .HasColumnName("Prestacion_Secuencia");
            entity.Property(e => e.BeneficiarioCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Número de Cédula del beneficiario asignada por la Junta Central Electoral.")
                .HasColumnName("Beneficiario_Cedula");
            entity.Property(e => e.EmpleadorRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es el Registro Nacional de Contribuyente de la Empresa que reportó al trabajador.")
                .HasColumnName("Empleador_RNC_O_Cedula");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Es el número de expediente reportado por la ARLSS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.PrestacionCantidadPagosRetroactivos)
                .HasComment("Cantidad de pagos retroactivos acumulados y pagados realizado al trabajador que se está reportando.")
                .HasColumnName("Prestacion_Cantidad_Pagos_Retroactivos");
            entity.Property(e => e.PrestacionInicioPagoFecha)
                .HasComment("Fecha en que se comenzó a pagarle al trabajador.")
                .HasColumnType("datetime")
                .HasColumnName("Prestacion_Inicio_Pago_Fecha");
            entity.Property(e => e.PrestacionMontoCalculado)
                .HasComment("Es el monto calculado de la prestación económica por mes que se le va a pagar al trabajador.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Prestacion_Monto_Calculado");
            entity.Property(e => e.PrestacionMontoPrimerPago)
                .HasComment("Es el primer monto pagado por la ARL, al trabajador.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Prestacion_Monto_Primer_Pago");
            entity.Property(e => e.PrestacionMontoRetroactivo)
                .HasComment("Monto retroactivo pagado por la ARL al trabajador.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Prestacion_Monto_Retroactivo");
            entity.Property(e => e.PrestacionSalarioSuirCalculado)
                .HasComment("Es el salario del trabajador, notificado por el SUIR en base al monto calculado.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Prestacion_Salario_SUIR_Calculado");
            entity.Property(e => e.PrestacionTipoNumero)
                .HasComment("Código del tipo de prestación.")
                .HasColumnName("Prestacion_Tipo_Numero");
            entity.Property(e => e.PrestacionUltimoPagoFecha)
                .HasComment("Fecha en que se pronostica que se realizará el último pago del trabajador.")
                .HasColumnType("datetime")
                .HasColumnName("Prestacion_Ultimo_Pago_Fecha");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.TrabajadorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Número de Cédula del trabajador asignada por la Junta Central Electoral.")
                .HasColumnName("Trabajador_Cedula");

            entity.HasOne(d => d.PrestacionTipoNumeroNavigation).WithMany(p => p.ArlPrestacionesEconomicasTrans)
                .HasForeignKey(d => d.PrestacionTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestaciones_Economicas_Trans_Prestacion_Tipo_Cata");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.ArlPrestacionesEconomicasTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARL_Prestaciones_Economicas_Trans_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<ArlPrestacionesTipoCatum>(entity =>
        {
            entity.HasKey(e => e.PrestacionTipoNumero).HasName("PK_Prestacion_Tipo_Cata");

            entity.ToTable("ARL_Prestaciones_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene el tipo de prestación económica pagada,  utilizado por la ARL para reportar los detalles de los prestaciones económicas, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PrestacionTipoNumero)
                .HasComment("Número único asignado a tipo de prestación que califica a un pago de prestaciones económica de un trabajador o beneficiario de este,  por la ARL.")
                .HasColumnName("Prestacion_Tipo_Numero");
            entity.Property(e => e.PrestacionTipoDescripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Descripción  del tipo de prestación que califica a un pago de prestaciones económica de un trabajador o beneficiario de este,  por la ARL.")
                .HasColumnName("Prestacion_Tipo_Descripcion");
            entity.Property(e => e.PrestacionTipoExplicacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Explicación de la descripción  del tipo de prestación que califica a un pago de prestaciones económica de un trabajador o beneficiario de este,  por la ARL.")
                .HasColumnName("Prestacion_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArlProcesosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.ProcesoTipoNumero).HasName("PK_ARL_Procesos_Tipos_Cata");

            entity.ToTable("ARL_Procesos_Tipo_Cata", tb => tb.HasComment("Es una tabla catálogo que contiene Tipo de proceso en el cual se encuentra la solicitud AT /EP. Ver catálogo Tipo Proceso publicada por la ARLSS, su fuente de datos es el  esquema 62 procesado por el Robot Simon. "));

            entity.Property(e => e.ProcesoTipoNumero)
                .HasComment("Tipo de proceso en el cual se encuentra la solicitud AT /EP. Ver catálogo Tipo Proceso.")
                .HasColumnName("Proceso_Tipo_Numero");
            entity.Property(e => e.ProcesoTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del Tipo de proceso en el cual se encuentra la solicitud AT /EP. Ver catálogo Tipo Proceso.")
                .HasColumnName("Proceso_Tipo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArlReclamacionesNotificacionesTipoCatum>(entity =>
        {
            entity.HasKey(e => e.ReclamacionNotificacionTipoNumero).HasName("PK_Reclamacion_Tipo_Cata");

            entity.ToTable("ARL_Reclamaciones_Notificaciones_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene tipo de reclamaciones notificaciones,  utilizado por la ARL para reportar los detalles de los pagos derivados de prestaciones de salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ReclamacionNotificacionTipoNumero)
                .HasComment("Tipo de notificación número de una reclamación por pago derivado de prestación de salud.")
                .HasColumnName("Reclamacion_Notificacion_Tipo_Numero");
            entity.Property(e => e.ReclamacionNotificacionTipoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción del Tipo de notificación número de una reclamación por pago derivado de prestación de salud.")
                .HasColumnName("Reclamacion_Notificacion_Tipo_Descripcion");
            entity.Property(e => e.ReclamacionNotificacionTipoExplicacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Explicación de la descripción del Tipo de notificación número de una reclamación por pago derivado de prestación de salud.")
                .HasColumnName("Reclamacion_Notificacion_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArlReclamacionesPrestacionesRecargasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ExpedienteArlNumero, e.ReclamacionNumero, e.ReclamanteDocumento, e.ReclamanteTipoNumero });

            entity.ToTable("ARL_Reclamaciones_Prestaciones_Recargas_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARL SS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.ReclamacionNumero)
                .HasComment("Para reportar el número de reclamación asignado por la ARLSS.")
                .HasColumnName("Reclamacion_Numero");
            entity.Property(e => e.ReclamanteDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es el número de documento o identificación que aplica  según el tipo de reclamante. Ver Tabla Tipo de Reclamante.")
                .HasColumnName("Reclamante_Documento");
            entity.Property(e => e.ReclamanteTipoNumero)
                .HasComment("Código valido para reportar el tipo de reclamante que realizo la reclamación a la ARLSS.  Ver Tabla Tipo de Reclamante.")
                .HasColumnName("Reclamante_Tipo_Numero");
            entity.Property(e => e.ReclamacionFecha)
                .HasComment("Para reportar la fecha en que se realizo la reclamación a la ARLSS. Contendrá el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Reclamacion_Fecha");
            entity.Property(e => e.ReclamacionMontoReclamado)
                .HasComment("Para reportar el monto reclamado  a la ARLSS, (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales). En caso de subsidio por Incapacidad Temporal, el campo monto reclamado será igual a cero. Cuando el tipo de reclamación sea por incapacidad  temporal (código 05), reportar en 0 ejemplo: 00000000.00.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Reclamacion_Monto_Reclamado");
            entity.Property(e => e.ReclamacionTipoNumero)
                .HasComment("Código valido para reportar el tipo de reclamación o notificación. Ver Tabla de tipo de reclamación o notificación.")
                .HasColumnName("Reclamacion_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SalarioPromedioTss)
                .HasComment("Para reportar el salario del trabajador accidentado acorde con lo registrado en TSS. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales). Cuando el tipo de reclamación sea por prestaciones en especie (Gastos en Salud)  (código 10), reportar en 0 ejemplo: 00000000.00.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Salario_Promedio_TSS");
        });

        modelBuilder.Entity<ArlReclamacionesPrestacionesTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ExpedienteArlNumero, e.ReclamacionNumero, e.ReclamanteDocumento, e.ReclamanteTipoNumero });

            entity.ToTable("ARL_Reclamaciones_Prestaciones_Temporal_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARL SS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.ReclamacionNumero)
                .HasComment("Para reportar el número de reclamación asignado por la ARLSS.")
                .HasColumnName("Reclamacion_Numero");
            entity.Property(e => e.ReclamanteDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es el número de documento o identificación que aplica  según el tipo de reclamante. Ver Tabla Tipo de Reclamante.")
                .HasColumnName("Reclamante_Documento");
            entity.Property(e => e.ReclamanteTipoNumero)
                .HasComment("Código valido para reportar el tipo de reclamante que realizo la reclamación a la ARLSS.  Ver Tabla Tipo de Reclamante.")
                .HasColumnName("Reclamante_Tipo_Numero");
            entity.Property(e => e.ReclamacionFecha)
                .HasComment("Para reportar la fecha en que se realizo la reclamación a la ARLSS. Contendrá el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Reclamacion_Fecha");
            entity.Property(e => e.ReclamacionMontoReclamado)
                .HasComment("Para reportar el monto reclamado  a la ARLSS, (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales). En caso de subsidio por Incapacidad Temporal, el campo monto reclamado será igual a cero. Cuando el tipo de reclamación sea por incapacidad  temporal (código 05), reportar en 0 ejemplo: 00000000.00.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Reclamacion_Monto_Reclamado");
            entity.Property(e => e.ReclamacionTipoNumero)
                .HasComment("Código valido para reportar el tipo de reclamación o notificación. Ver Tabla de tipo de reclamación o notificación.")
                .HasColumnName("Reclamacion_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SalarioPromedioTss)
                .HasComment("Para reportar el salario del trabajador accidentado acorde con lo registrado en TSS. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales). Cuando el tipo de reclamación sea por prestaciones en especie (Gastos en Salud)  (código 10), reportar en 0 ejemplo: 00000000.00.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Salario_Promedio_TSS");
        });

        modelBuilder.Entity<ArlReclamacionesPrestacionesTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoPeriodo, e.ExpedienteArlNumero, e.ReclamacionNumero, e.ReclamanteDocumento, e.ReclamanteTipoNumero });

            entity.ToTable("ARL_Reclamaciones_Prestaciones_Trans");

            entity.Property(e => e.SeguimientoPeriodo)
                .HasComment("Periodo (Año y Mes) correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasComment("Para reportar el número de expediente dado por la ARL SS.")
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.ReclamacionNumero)
                .HasComment("Para reportar el número de reclamación asignado por la ARLSS.")
                .HasColumnName("Reclamacion_Numero");
            entity.Property(e => e.ReclamanteDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es el número de documento o identificación que aplica  según el tipo de reclamante. Ver Tabla Tipo de Reclamante.")
                .HasColumnName("Reclamante_Documento");
            entity.Property(e => e.ReclamanteTipoNumero)
                .HasComment("Código valido para reportar el tipo de reclamante que realizo la reclamación a la ARLSS.  Ver Tabla Tipo de Reclamante.")
                .HasColumnName("Reclamante_Tipo_Numero");
            entity.Property(e => e.ReclamacionFecha)
                .HasComment("Para reportar la fecha en que se realizo la reclamación a la ARLSS. Contendrá el siguiente formato DDMMYYYY.")
                .HasColumnType("datetime")
                .HasColumnName("Reclamacion_Fecha");
            entity.Property(e => e.ReclamacionMontoReclamado)
                .HasComment("Para reportar el monto reclamado  a la ARLSS, (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales). En caso de subsidio por Incapacidad Temporal, el campo monto reclamado será igual a cero. Cuando el tipo de reclamación sea por incapacidad  temporal (código 05), reportar en 0 ejemplo: 00000000.00.")
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Reclamacion_Monto_Reclamado");
            entity.Property(e => e.ReclamacionTipoNumero)
                .HasComment("Código valido para reportar el tipo de reclamación o notificación. Ver Tabla de tipo de reclamación o notificación.")
                .HasColumnName("Reclamacion_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SalarioPromedioTss)
                .HasComment("Para reportar el salario del trabajador accidentado acorde con lo registrado en TSS. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales). Cuando el tipo de reclamación sea por prestaciones en especie (Gastos en Salud)  (código 10), reportar en 0 ejemplo: 00000000.00.")
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Salario_Promedio_TSS");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
        });

        modelBuilder.Entity<ArlReclamantesTipoCatum>(entity =>
        {
            entity.HasKey(e => e.ReclamanteTipoNumero).HasName("PK_Reclamante_Tipo_Cata");

            entity.ToTable("ARL_Reclamantes_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene el tipo de reclamante,  utilizado por la ARL para reportar los detalles de las notificaciones de las reclamaciones, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ReclamanteTipoNumero)
                .HasComment("Código válido para reportar el tipo de reclamante que realizó la reclamación a la ARLSS.")
                .HasColumnName("Reclamante_Tipo_Numero");
            entity.Property(e => e.ReclamanteTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de reclamante.")
                .HasColumnName("Reclamante_Tipo_Descripcion");
            entity.Property(e => e.ReclamanteTipoDocumentoValido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Indica dependiendo del tipo de reclamante, el documento será valido.")
                .HasColumnName("Reclamante_Tipo_Documento_Valido");
            entity.Property(e => e.ReclamanteTipoExplicacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Explicación del tipo de reclamante.")
                .HasColumnName("Reclamante_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArlSeveridadLesionTipoCatum>(entity =>
        {
            entity.HasKey(e => e.SeveridadLesionTipoNumero).HasName("PK_Severidad_Lesion_Cata");

            entity.ToTable("ARL_Severidad_Lesion_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene los grados de severidad de las lesiones que puede recibir  un trabajador,  utilizado por la ARL para reportar los detalles de los accidentes de trabajos, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SeveridadLesionTipoNumero)
                .HasComment("Código valido para reportar el tipo de lesión de acuerdo al accidente reportado.")
                .HasColumnName("Severidad_Lesion_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeveridadLesionDescripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de lesión de acuerdo al accidente reportado.")
                .HasColumnName("Severidad_Lesion_Descripcion");
            entity.Property(e => e.SeveridadLesionExplicacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Explicación de la descripción del tipo de lesión de acuerdo al accidente reportado.")
                .HasColumnName("Severidad_Lesion_Explicacion");
        });

        modelBuilder.Entity<ArsAsociacionesCatum>(entity =>
        {
            entity.HasKey(e => e.ArsAsociacionNumero);

            entity.ToTable("ARS_Asociaciones_Cata");

            entity.Property(e => e.ArsAsociacionNumero)
                .HasComment("Código único que representa la calsificación de las ARS en Públicas, Privadas y Auto gestionada.")
                .HasColumnName("ARS_Asociacion_Numero");
            entity.Property(e => e.ArsAsociacionNombre)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Descripción que clasifica las ARS en Públicas, Privadas y Auto gestionada.")
                .HasColumnName("ARS_Asociacion_Nombre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArsCategoriaCatum>(entity =>
        {
            entity.HasKey(e => e.ArsCategoriaCodigo);

            entity.ToTable("ARS_Categoria_Cata", tb => tb.HasComment("Es un catálogo que contiene las categorías de las ARS/ARL , su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ArsCategoriaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código único que representa la calsificación de las ARS en Públicas, Privadas y Auto gestionada.")
                .HasColumnName("ARS_Categoria_Codigo");
            entity.Property(e => e.ArsCategoriaDescripcion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Descripción que clasifica las ARS en Públicas, Privadas y Auto gestionada.")
                .HasColumnName("ARS_Categoria_Descripcion");
            entity.Property(e => e.ArsCategoriaNumero).HasColumnName("ARS_Categoria_Numero");
            entity.Property(e => e.ArsCategoriaSeguro)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Descripción que clasifica las ARS en Públicas, Privadas y Auto gestionada.")
                .HasColumnName("ARS_Categoria_Seguro");
            entity.Property(e => e.ArsCategoriaTitulo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Descripción que clasifica las ARS en Públicas, Privadas y Auto gestionada.")
                .HasColumnName("ARS_Categoria_Titulo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ArsMaster>(entity =>
        {
            entity.HasKey(e => e.ArsNumero);

            entity.ToTable("ARS_Master", tb =>
                {
                    tb.HasComment("Es un maestro que contiene las informaciones de cada una de las ARS/ARL que han existido a nivel de sistema, está estrechamente ligada a la tabla Instituciones Máster,  su fuente de alimentación es de la vista estadística de UNIPAGO.");
                    tb.HasTrigger("ARS_Master_Delete");
                    tb.HasTrigger("ARS_Master_Update");
                });

            entity.HasIndex(e => e.InstitucionNumero, "Indx_Ars_Master_Institucion_Numero");

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.ArsAsociacionNumero)
                .HasComment("Código único que representa la calsificación de las ARS en Públicas, Privadas y Auto gestionada.")
                .HasColumnName("ARS_Asociacion_Numero");
            entity.Property(e => e.ArsCategoriaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Clasifica las ARS en Públicas, Privadas y Auto gestionada.")
                .HasColumnName("ARS_Categoria_Codigo");
            entity.Property(e => e.ArsHabilitacionNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número con el cual de habilito la ARS mediante resolución para su funcionamiento en el SFS.")
                .HasColumnName("ARS_Habilitacion_Numero");
            entity.Property(e => e.ArsNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nombre de la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Nombre");
            entity.Property(e => e.EmpresaTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código que representa el Tipo de empresa según el sector al que pertenece (Pública centralizada, Pública No Centralizada, Privada y Mixta).")
                .HasColumnName("Empresa_Tipo_Codigo");
            entity.Property(e => e.InstitucionNumero)
                .HasComment("Número de la institución que es o a la que pertenece la ARS.")
                .HasColumnName("Institucion_Numero");
            entity.Property(e => e.RegimenNumero)
                .HasComment("Número único que identifica cada uno de los regímenes definidos en la ley 87-01, (Contributivo, Subsidiado y Contributivo Subsidiado).")
                .HasColumnName("Regimen_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ArsAsociacionNumeroNavigation).WithMany(p => p.ArsMasters)
                .HasForeignKey(d => d.ArsAsociacionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARS_Master_ARS_Asociaciones_Cata");

            entity.HasOne(d => d.ArsCategoriaCodigoNavigation).WithMany(p => p.ArsMasters)
                .HasForeignKey(d => d.ArsCategoriaCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARS_Master_ARS_Categoria_Cata");

            entity.HasOne(d => d.EmpresaTipoCodigoNavigation).WithMany(p => p.ArsMasters)
                .HasForeignKey(d => d.EmpresaTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARS_Master_Comunes_Empresas_Tipo_Cata");

            entity.HasOne(d => d.InstitucionNumeroNavigation).WithMany(p => p.ArsMasters)
                .HasForeignKey(d => d.InstitucionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARS_Master_Instituciones_Master");

            entity.HasOne(d => d.RegimenNumeroNavigation).WithMany(p => p.ArsMasters)
                .HasForeignKey(d => d.RegimenNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARS_Master_Comunes_Regimenes_Cata");
        });

        modelBuilder.Entity<ArsReportesMaster>(entity =>
        {
            entity.HasKey(e => e.ReporteNumero);

            entity.ToTable("ARS_Reportes_Master");

            entity.Property(e => e.ReporteNumero).HasColumnName("Reporte_Numero");
            entity.Property(e => e.EsquemaNumero).HasColumnName("Esquema_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.ReporteTemaNumero).HasColumnName("Reporte_Tema_Numero");
            entity.Property(e => e.ReporteTipoNumero).HasColumnName("Reporte_Tipo_Numero");
            entity.Property(e => e.ReporteTitulo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Reporte_Titulo");

            entity.HasOne(d => d.EsquemaNumeroNavigation).WithMany(p => p.ArsReportesMasters)
                .HasForeignKey(d => d.EsquemaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARS_Reportes_Master_Seguimientos_Esquemas_Cata");

            entity.HasOne(d => d.ReporteTemaNumeroNavigation).WithMany(p => p.ArsReportesMasters)
                .HasForeignKey(d => d.ReporteTemaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARS_Reportes_Master_ARS_Reportes_Temas_Cata");

            entity.HasOne(d => d.ReporteTipoNumeroNavigation).WithMany(p => p.ArsReportesMasters)
                .HasForeignKey(d => d.ReporteTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARS_Reportes_Master_ARS_Reportes_Tipos_Cata");
        });

        modelBuilder.Entity<ArsReportesTemasCatum>(entity =>
        {
            entity.HasKey(e => e.ReporteTemaNumero);

            entity.ToTable("ARS_Reportes_Temas_Cata");

            entity.Property(e => e.ReporteTemaNumero).HasColumnName("Reporte_Tema_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.ReporteTemaDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Reporte_Tema_Descripcion");
        });

        modelBuilder.Entity<ArsReportesTiposCatum>(entity =>
        {
            entity.HasKey(e => e.ReporteTipoNumero);

            entity.ToTable("ARS_Reportes_Tipos_Cata");

            entity.Property(e => e.ReporteTipoNumero).HasColumnName("Reporte_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.ReporteTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Reporte_Tipo_Descripcion");
        });

        modelBuilder.Entity<ArsReportesTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.ReporteNumero, e.SeguimientoPeriodo });

            entity.ToTable("ARS_Reportes_Trans");

            entity.Property(e => e.ArsNumero).HasColumnName("Ars_Numero");
            entity.Property(e => e.ReporteNumero).HasColumnName("Reporte_Numero");
            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.ReporteDetalle)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Reporte_Detalle");
            entity.Property(e => e.ReporteGeneradoResultado)
                .HasColumnType("text")
                .HasColumnName("Reporte_Generado_Resultado");
            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.ArsReportesTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARS_Reportes_Trans_ARS_Master");

            entity.HasOne(d => d.ReporteNumeroNavigation).WithMany(p => p.ArsReportesTrans)
                .HasForeignKey(d => d.ReporteNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ARS_Reportes_Trans_ARS_Reportes_Master");
        });

        modelBuilder.Entity<ArsReportesVistum>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.ReporteNumero, e.SeguimientoPeriodo }).HasName("PK_ARS_Reportes_Vista_1");

            entity.ToTable("ARS_Reportes_Vista");

            entity.Property(e => e.ArsNumero).HasColumnName("Ars_Numero");
            entity.Property(e => e.ReporteNumero).HasColumnName("Reporte_Numero");
            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ArsNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Ars_Nombre");
            entity.Property(e => e.EsquemaDescripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Esquema_Descripcion");
            entity.Property(e => e.EsquemaNumero).HasColumnName("Esquema_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.ReporteDetalle)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Reporte_Detalle");
            entity.Property(e => e.ReporteGeneradoResultado)
                .HasColumnType("text")
                .HasColumnName("Reporte_Generado_Resultado");
            entity.Property(e => e.ReporteTemaDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Reporte_Tema_Descripcion");
            entity.Property(e => e.ReporteTemaNumero).HasColumnName("Reporte_Tema_Numero");
            entity.Property(e => e.ReporteTitulo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Reporte_Titulo");
            entity.Property(e => e.SeguimientoPeriodoFormateado)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Seguimiento_Periodo_Formateado");
        });

        modelBuilder.Entity<AtAutorizacionCalendarioTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.AtInformeFecha }).HasName("PK_At_Autorizacion_Calendario_Trans_1");

            entity.ToTable("AT_Autorizacion_Calendario_Trans");

            entity.Property(e => e.ArsNumero)
                .HasComment("Número unico que identifica a la ARS que reporte el accidente de transito.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.AtInformeFecha)
                .HasComment("Fecha en la cual la ARS reporto el accidente de tránsito a la SISALRIL.")
                .HasColumnType("datetime")
                .HasColumnName("At_Informe_Fecha");
            entity.Property(e => e.AtInformeFechaTope)
                .HasComment("Fecha Tope del informe por accidente de transito.")
                .HasColumnType("datetime")
                .HasColumnName("At_Informe_Fecha_Tope");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Estado. A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de Registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del Usuario.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.AtAutorizacionCalendarioTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Autorizacion_Calendario_Trans_ARS_Master");

            entity.HasOne(d => d.AtInformeFechaNavigation).WithMany(p => p.AtAutorizacionCalendarioTrans)
                .HasForeignKey(d => d.AtInformeFecha)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Autorizacion_Calendario_Trans_At_Calendario_Trans");
        });

        modelBuilder.Entity<AtCalendarioTran>(entity =>
        {
            entity.HasKey(e => e.AtInformeFecha).HasName("PK_At_Calendario_Trans");

            entity.ToTable("AT_Calendario_Trans");

            entity.Property(e => e.AtInformeFecha)
                .HasComment("Fecha en la cual la ARS reporto el accidente de tránsito a la SISALRIL.")
                .HasColumnType("datetime")
                .HasColumnName("At_Informe_Fecha");
            entity.Property(e => e.AtInformeFechaTope)
                .HasComment("Fecha Tope del informe por accidente de transito.")
                .HasColumnType("datetime")
                .HasColumnName("At_Informe_Fecha_Tope");
            entity.Property(e => e.AtInformeNumero)
                .HasComment("Número del informe que se esta reportando, del 1 al 52.")
                .HasColumnName("At_Informe_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Estado. A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de Registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del Usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AtCargado>(entity =>
        {
            entity.HasKey(e => e.AtEventoNumero);

            entity.ToTable("AT_Cargados");

            entity.Property(e => e.AtEventoNumero).HasColumnName("AT_Evento_Numero");
            entity.Property(e => e.AtCargadoSecuencia)
                .ValueGeneratedOnAdd()
                .HasColumnName("AT_Cargado_Secuencia");
            entity.Property(e => e.AtColisionNumero).HasColumnName("AT_Colision_Numero");
            entity.Property(e => e.AtDiagnosticoCodigoCieFinal)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("AT_Diagnostico_CodigoCIE_Final");
            entity.Property(e => e.AtDiagnosticoCodigoCieInicial)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("AT_Diagnostico_CodigoCIE_Inicial");
            entity.Property(e => e.AtEstadoReclamacionNumero).HasColumnName("AT_Estado_Reclamacion_NUmero");
            entity.Property(e => e.AtEventoChequeNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("AT_Evento_Cheque_Numero");
            entity.Property(e => e.AtEventoChequeReembolso).HasColumnName("AT_Evento_Cheque_Reembolso");
            entity.Property(e => e.AtEventoFechaApertura)
                .HasColumnType("datetime")
                .HasColumnName("AT_Evento_Fecha_Apertura");
            entity.Property(e => e.AtEventoFechaEgreso)
                .HasColumnType("datetime")
                .HasColumnName("AT_Evento_Fecha_Egreso");
            entity.Property(e => e.AtEventoFechaEntrada)
                .HasColumnType("datetime")
                .HasColumnName("AT_Evento_Fecha_Entrada");
            entity.Property(e => e.AtEventoFechaPago)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AT_Evento_Fecha_Pago");
            entity.Property(e => e.AtEventoMontoAfiliado)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("AT_Evento_Monto_Afiliado");
            entity.Property(e => e.AtEventoMontoImputado)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("AT_Evento_Monto_Imputado");
            entity.Property(e => e.AtEventoMontoPagado)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("AT_Evento_Monto_Pagado");
            entity.Property(e => e.AtEventoMontoReclamado)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("AT_Evento_Monto_Reclamado");
            entity.Property(e => e.AtEventoNumeroAutorizacion).HasColumnName("AT_Evento_Numero_Autorizacion");
            entity.Property(e => e.AtFecha)
                .HasColumnType("datetime")
                .HasColumnName("AT_Fecha");
            entity.Property(e => e.AtHora)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("AT_Hora");
            entity.Property(e => e.AtInformeFecha)
                .HasColumnType("datetime")
                .HasColumnName("AT_Informe_Fecha");
            entity.Property(e => e.AtNumero).HasColumnName("AT_Numero");
            entity.Property(e => e.AtOrigenNumero).HasColumnName("AT_Origen_NUmero");
            entity.Property(e => e.AtOrigenNumeroCambio).HasColumnName("AT_Origen_Numero_Cambio");
            entity.Property(e => e.AtPrestadoraDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("AT_Prestadora_Descripcion");
            entity.Property(e => e.IdArs).HasColumnName("Id_ARS");
            entity.Property(e => e.IdEgresoTipoNumero).HasColumnName("Id_Egreso_Tipo_Numero");
            entity.Property(e => e.IdNss).HasColumnName("Id_NSS");
            entity.Property(e => e.IdProvincia).HasColumnName("Id_Provincia");
            entity.Property(e => e.IdServicioTipoNumero).HasColumnName("Id_Servicio_Tipo_Numero");
            entity.Property(e => e.IdVehiculoTipoNumero).HasColumnName("Id_Vehiculo_Tipo_Numero");
            entity.Property(e => e.PrestadoraNumero).HasColumnName("Prestadora_Numero");
            entity.Property(e => e.Usuario)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AtColisionTipoCatum>(entity =>
        {
            entity.HasKey(e => e.ColisionTipoNumero).HasName("PK_At_Colision_Tipo_Cata");

            entity.ToTable("AT_Colision_Tipo_Cata");

            entity.Property(e => e.ColisionTipoNumero)
                .HasComment("Número de colisión por accidente de transito.")
                .HasColumnName("Colision_Tipo_Numero");
            entity.Property(e => e.ColisionTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción de la colisión por accidente de transito.")
                .HasColumnName("Colision_Tipo_Descripcion");
            entity.Property(e => e.ColisionTipoExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicación de la colisión por accidente de transito.")
                .HasColumnName("Colision_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Estado. A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de Registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del Usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AtDiagnosticosCieCatum>(entity =>
        {
            entity.HasKey(e => e.DiagnosticoCieCodigo).HasName("PK_At_Diagnosticos_CIE_Cata");

            entity.ToTable("AT_Diagnosticos_CIE_Cata");

            entity.Property(e => e.DiagnosticoCieCodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Código de diagnostico CIE para accidentes de transito.")
                .HasColumnName("Diagnostico_CIE_Codigo");
            entity.Property(e => e.DiagnosticoCieDescripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("Descripción del diagnostico CIE para accidentes de transito.")
                .HasColumnName("Diagnostico_CIE_Descripcion");
            entity.Property(e => e.DiagnosticoCieExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicacion del diagnostico CIE para accidentes de transito.")
                .HasColumnName("Diagnostico_CIE_Explicacion");
            entity.Property(e => e.DiagnosticoCieGrupo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Grupo especial de diagnostico para accidentes de transito.")
                .HasColumnName("Diagnostico_CIE_Grupo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Estado. A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de Registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del Usuario.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.DiagnosticoCieGrupoNavigation).WithMany(p => p.AtDiagnosticosCieCata)
                .HasForeignKey(d => d.DiagnosticoCieGrupo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Diagnosticos_CIE_Cata_At_Diagnosticos_Grupos_CIE_Cata");
        });

        modelBuilder.Entity<AtDiagnosticosGruposCieCatum>(entity =>
        {
            entity.HasKey(e => e.DiagnosticoCieGrupo).HasName("PK_At_Diagnosticos_Grupos_CIE_Cata");

            entity.ToTable("AT_Diagnosticos_Grupos_CIE_Cata");

            entity.Property(e => e.DiagnosticoCieGrupo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Grupo al que corresponde el diagnostico CIE por accidente de transito.")
                .HasColumnName("Diagnostico_CIE_Grupo");
            entity.Property(e => e.DiagnosticoCieCodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Código CIE del diagnostico por accidente de transito.")
                .HasColumnName("Diagnostico_CIE_Codigo");
            entity.Property(e => e.DiagnosticoCieGrupoDescripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("Descripción del grupo del código CIE por accidente de transito.")
                .HasColumnName("Diagnostico_CIE_Grupo_Descripcion");
            entity.Property(e => e.DiagnosticoCieGrupoExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicación del grupo del código CIE por accidente de transito.")
                .HasColumnName("Diagnostico_CIE_Grupo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Estado. A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Fecha de Registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Registro del Usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AtEstadoReclamacionCatum>(entity =>
        {
            entity.HasKey(e => e.EstadoReclamacionNumero).HasName("PK_At_Estado_Reclamacion_Cata");

            entity.ToTable("AT_Estado_Reclamacion_Cata");

            entity.Property(e => e.EstadoReclamacionNumero)
                .HasComment("Número único asignado para el estado de la reclamación.")
                .HasColumnName("Estado_Reclamacion_Numero");
            entity.Property(e => e.EstadoReclamacionCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("PE = Reclamación Pendiente, PA = Reclamacion Pagada. ")
                .HasColumnName("Estado_Reclamacion_Codigo");
            entity.Property(e => e.EstadoReclamacionDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción de la reclamación para accidentes de transito.")
                .HasColumnName("Estado_Reclamacion_Descripcion");
            entity.Property(e => e.EstadoReclamacionExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicación de la reclamación para accidentes de transito.")
                .HasColumnName("Estado_Reclamacion_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Estado. A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de Registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del Usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AtEventosTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.AtInformeNumero, e.CiudadanoNss, e.AtEventoSecuencia }).HasName("PK_At_Eventos_Trans");

            entity.ToTable("AT_Eventos_Trans");

            entity.Property(e => e.ArsNumero)
                .HasComment("Número unico que identifica a la ARS que reporte el accidente de transito.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.AtInformeNumero)
                .HasComment("Número del informe que se esta reportando, del 1 al 52.")
                .HasColumnName("At_Informe_Numero");
            entity.Property(e => e.CiudadanoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Ciudadano_NSS");
            entity.Property(e => e.AtEventoSecuencia)
                .HasComment("Número secuencial asignado a cada evento del accidente.")
                .HasColumnName("At_Evento_Secuencia");
            entity.Property(e => e.AtEventoAutorizacionNumero)
                .HasComment("Número de autorización del evento otorgado por la ARS.")
                .HasColumnName("At_Evento_Autorizacion_Numero");
            entity.Property(e => e.AtEventoChequeNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Número de cheque de pago por el evento del accidente de transito.")
                .HasColumnName("At_Evento_Cheque_Numero");
            entity.Property(e => e.AtEventoChequeReembolso)
                .HasComment("Indicador de reembolso por cheque ante un accidente de transito o evento. 1 = Si, 0 = No.")
                .HasColumnName("At_Evento_Cheque_Reembolso");
            entity.Property(e => e.AtEventoFechaApertura)
                .HasComment("Fecha de apertura del evento, igual a la fecha del accidente.")
                .HasColumnType("datetime")
                .HasColumnName("At_Evento_Fecha_Apertura");
            entity.Property(e => e.AtEventoFechaEgreso)
                .HasComment("Fecha de evento del egresado por accidente de transito.")
                .HasColumnType("datetime")
                .HasColumnName("At_Evento_Fecha_Egreso");
            entity.Property(e => e.AtEventoFechaEntrada)
                .HasComment("Fecha en la que se recibió al afiliado accidentado en la PSS : Día(DD), Mes (MM) y Año (AAAA).")
                .HasColumnType("datetime")
                .HasColumnName("At_Evento_Fecha_Entrada");
            entity.Property(e => e.AtEventoFechaPago)
                .HasComment("Fecha de pago del evento por accidente de transito.")
                .HasColumnType("datetime")
                .HasColumnName("At_Evento_Fecha_Pago");
            entity.Property(e => e.AtEventoMontoImputado)
                .HasComment("Monto imputado del evento por accidente de transito.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("At_Evento_Monto_Imputado");
            entity.Property(e => e.AtEventoMontoPagado)
                .HasComment("Monto pagado por la ARS.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("At_Evento_Monto_Pagado");
            entity.Property(e => e.AtEventoMontoPagadoAfiliado)
                .HasComment("Monto total de copago pagado por el afiliado.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("At_Evento_Monto_Pagado_Afiliado");
            entity.Property(e => e.AtEventoMontoReclamado)
                .HasComment("Monto total reclamado por la ARS.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("At_Evento_Monto_Reclamado");
            entity.Property(e => e.EgresoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del tipo de egreso para accidentes de transito.")
                .HasColumnName("Egreso_Tipo_Codigo");
            entity.Property(e => e.PrestadoraNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nombre de la Prestadora de Servicios de Salud que recibe al afiliado accidentado. ")
                .HasColumnName("Prestadora_Nombre");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Código de la Prestadora de Servicios de Salud que recibe al afiliado accidentado. ")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.ReclamacionEstadoNumero)
                .HasComment("Número único que identifica el estado de la reclamación.")
                .HasColumnName("Reclamacion_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Estado. A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de Registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del Usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.ServicioTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código para el tipo de servicio por accidente de transito.")
                .HasColumnName("Servicio_Tipo_Codigo");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.AtEventosTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Eventos_Trans_ARS_Master");

            entity.HasOne(d => d.CiudadanoNssNavigation).WithMany(p => p.AtEventosTrans)
                .HasForeignKey(d => d.CiudadanoNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Eventos_Trans_TSS_Ciudadanos_Master");

            entity.HasOne(d => d.EgresoTipoCodigoNavigation).WithMany(p => p.AtEventosTrans)
                .HasForeignKey(d => d.EgresoTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Eventos_Trans_Episodios_Egresos_Tipo_Cata");

            entity.HasOne(d => d.PrestadoraNumeroNavigation).WithMany(p => p.AtEventosTrans)
                .HasForeignKey(d => d.PrestadoraNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Eventos_Trans_Prestadoras_Master");

            entity.HasOne(d => d.ReclamacionEstadoNumeroNavigation).WithMany(p => p.AtEventosTrans)
                .HasForeignKey(d => d.ReclamacionEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Eventos_Trans_At_Estado_Reclamacion_Cata");

            entity.HasOne(d => d.ServicioTipoCodigoNavigation).WithMany(p => p.AtEventosTrans)
                .HasForeignKey(d => d.ServicioTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Eventos_Trans_Episodios_Servicios_Tipo_Cata");

            entity.HasOne(d => d.AtMaster).WithMany(p => p.AtEventosTrans)
                .HasForeignKey(d => new { d.ArsNumero, d.AtInformeNumero, d.CiudadanoNss })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Eventos_Trans_At_Master");
        });

        modelBuilder.Entity<AtHechosCieCatum>(entity =>
        {
            entity.HasKey(e => e.HechosCieCodigo).HasName("PK_At_Hechos_CIE_Cata");

            entity.ToTable("AT_Hechos_CIE_Cata");

            entity.Property(e => e.HechosCieCodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Código CIE para accidentes de transito.")
                .HasColumnName("Hechos_CIE_Codigo");
            entity.Property(e => e.ColisionTipoNumero)
                .HasComment("Número único que identifica el tipo de colisión.")
                .HasColumnName("Colision_Tipo_Numero");
            entity.Property(e => e.HechosCieDescripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("Descripción del código CIE para accidentes de transito.")
                .HasColumnName("Hechos_CIE_Descripcion");
            entity.Property(e => e.HechosCieExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicación del código CIE para accidentes de transito.")
                .HasColumnName("Hechos_CIE_Explicacion");
            entity.Property(e => e.HechosCieGrupo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Código del grupo CIE para accidentes de transito.")
                .HasColumnName("Hechos_CIE_Grupo");
            entity.Property(e => e.PosicionLesionadoNumero)
                .HasComment("Número único que identifica el tipo de lesionado.")
                .HasColumnName("Posicion_Lesionado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Estado. A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de Registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.VehiculoTipoNumero)
                .HasComment("Número único que identifica el tipo de vehiculo.")
                .HasColumnName("Vehiculo_Tipo_Numero");

            entity.HasOne(d => d.ColisionTipoNumeroNavigation).WithMany(p => p.AtHechosCieCata)
                .HasForeignKey(d => d.ColisionTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Hechos_CIE_Cata_At_Colision_Tipo_Cata");

            entity.HasOne(d => d.PosicionLesionadoNumeroNavigation).WithMany(p => p.AtHechosCieCata)
                .HasForeignKey(d => d.PosicionLesionadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Hechos_CIE_Cata_At_Posicion_Lesionado_Cata");

            entity.HasOne(d => d.VehiculoTipoNumeroNavigation).WithMany(p => p.AtHechosCieCata)
                .HasForeignKey(d => d.VehiculoTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Hechos_CIE_Cata_At_Vehiculo_Tipo_Cata");
        });

        modelBuilder.Entity<AtInformesSeguimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.AtSeguimientoNumero, e.AtSeguimientoPeriodo }).HasName("PK_At_Informes_Seguimientos_Trans");

            entity.ToTable("AT_Informes_Seguimientos_Trans");

            entity.Property(e => e.AtSeguimientoNumero).HasColumnName("At_Seguimiento_Numero");
            entity.Property(e => e.AtSeguimientoPeriodo).HasColumnName("At_Seguimiento_Periodo");
            entity.Property(e => e.AtInformeDias).HasColumnName("At_Informe_Dias");
            entity.Property(e => e.AtInformeFechaAviso)
                .HasColumnType("datetime")
                .HasColumnName("At_Informe_Fecha_Aviso");
            entity.Property(e => e.AtInformeFechaDesde)
                .HasColumnType("datetime")
                .HasColumnName("At_Informe_Fecha_Desde");
            entity.Property(e => e.AtInformeFechaHasta)
                .HasColumnType("datetime")
                .HasColumnName("At_Informe_Fecha_Hasta");
            entity.Property(e => e.AtInformeFechaTope)
                .HasColumnType("datetime")
                .HasColumnName("At_Informe_Fecha_Tope");
            entity.Property(e => e.AtInformeNumero).HasColumnName("At_Informe_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Estado. A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de Registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del Usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AtMaster>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.AtInformeNumero, e.CiudadanoNss }).HasName("PK_At_Master");

            entity.ToTable("AT_Master");

            entity.Property(e => e.ArsNumero)
                .HasComment("Número unico que identifica a la ARS que reporte el accidente de transito.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.AtInformeNumero)
                .HasComment("Número del informe que se esta reportando, del 1 al 52.")
                .HasColumnName("At_Informe_Numero");
            entity.Property(e => e.CiudadanoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Ciudadano_NSS");
            entity.Property(e => e.AtFecha)
                .HasComment("Fecha en que ocurrió el Accidente: Día(dd), Mes (mm) y Año (AAAA).")
                .HasColumnType("datetime")
                .HasColumnName("At_Fecha");
            entity.Property(e => e.AtHora)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Hora en que ocurrió el Accidente: Día(dd), Mes (mm) y Año (AAAA).")
                .HasColumnName("At_Hora");
            entity.Property(e => e.AtInformeFechaId)
                .HasComment("Fecha en que se generó el informe por Accidente de Transito: Día(dd), Mes (mm) y Año (AAAA).")
                .HasColumnType("datetime")
                .HasColumnName("At_Informe_Fecha_Id");
            entity.Property(e => e.AtOrigenNumero)
                .HasComment("Identificación del tipo del origen del reclamo:  1. Tránsito 2. Laboral 3. Salud 4. Otro.")
                .HasColumnName("At_Origen_Numero");
            entity.Property(e => e.AtOrigenNumeroCambio)
                .HasComment("Identificación del tipo del origen del reclamo:  1. Tránsito 2. Laboral 3. Salud 4. Otro.")
                .HasColumnName("At_Origen_Numero_Cambio");
            entity.Property(e => e.ColisionTipoNumero)
                .HasComment("Número único que identifica el tipo de colisión del accidente.")
                .HasColumnName("Colision_Tipo_Numero");
            entity.Property(e => e.DiagnosticoCieCodigoFinal)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Código final de diagnostico CIE para accidentes de transito.")
                .HasColumnName("Diagnostico_CIE_Codigo_Final");
            entity.Property(e => e.DiagnosticoCieCodigoInicial)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Código inicial de diagnostico CIE para accidentes de transito.")
                .HasColumnName("Diagnostico_CIE_Codigo_Inicial");
            entity.Property(e => e.PosicionLesionadoNumero)
                .HasComment("Número único que Identifica el número posición del lesionado en el accidente.")
                .HasColumnName("Posicion_Lesionado_Numero");
            entity.Property(e => e.ProvinciaNumero)
                .HasComment("Número único de la provincia según catálogo de la JCE.  (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Provincia_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Estado. A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de Registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del Usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.VehiculoTipoNumero)
                .HasComment("Número único que identifica el tipo de Vehiculo en el accidente.")
                .HasColumnName("Vehiculo_Tipo_Numero");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.AtMasters)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Master_ARS_Master");

            entity.HasOne(d => d.AtInformeFecha).WithMany(p => p.AtMasters)
                .HasForeignKey(d => d.AtInformeFechaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Master_At_Calendario_Trans");

            entity.HasOne(d => d.AtOrigenNumeroNavigation).WithMany(p => p.AtMasterAtOrigenNumeroNavigations)
                .HasForeignKey(d => d.AtOrigenNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Master_At_Origen_Cata");

            entity.HasOne(d => d.AtOrigenNumeroCambioNavigation).WithMany(p => p.AtMasterAtOrigenNumeroCambioNavigations)
                .HasForeignKey(d => d.AtOrigenNumeroCambio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Master_At_Origen_Cata1");

            entity.HasOne(d => d.CiudadanoNssNavigation).WithMany(p => p.AtMasters)
                .HasForeignKey(d => d.CiudadanoNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Master_TSS_Ciudadanos_Master");

            entity.HasOne(d => d.ColisionTipoNumeroNavigation).WithMany(p => p.AtMasters)
                .HasForeignKey(d => d.ColisionTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Master_At_Colision_Tipo_Cata");

            entity.HasOne(d => d.DiagnosticoCieCodigoFinalNavigation).WithMany(p => p.AtMasterDiagnosticoCieCodigoFinalNavigations)
                .HasForeignKey(d => d.DiagnosticoCieCodigoFinal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Master_At_Diagnosticos_CIE_Cata1");

            entity.HasOne(d => d.DiagnosticoCieCodigoInicialNavigation).WithMany(p => p.AtMasterDiagnosticoCieCodigoInicialNavigations)
                .HasForeignKey(d => d.DiagnosticoCieCodigoInicial)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Master_At_Diagnosticos_CIE_Cata");

            entity.HasOne(d => d.PosicionLesionadoNumeroNavigation).WithMany(p => p.AtMasters)
                .HasForeignKey(d => d.PosicionLesionadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Master_At_Posicion_Lesionado_Cata");

            entity.HasOne(d => d.ProvinciaNumeroNavigation).WithMany(p => p.AtMasters)
                .HasForeignKey(d => d.ProvinciaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Master_Comunes_Provincias_Cata");

            entity.HasOne(d => d.VehiculoTipoNumeroNavigation).WithMany(p => p.AtMasters)
                .HasForeignKey(d => d.VehiculoTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Master_At_Vehiculo_Tipo_Cata");
        });

        modelBuilder.Entity<AtNotificacionNoCargaTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.AtInformeFecha }).HasName("PK_At_Notificacion_No_Carga_Trans");

            entity.ToTable("AT_Notificacion_No_Carga_Trans");

            entity.Property(e => e.ArsNumero)
                .HasComment("Número unico que identifica a la ARS que reporte el accidente de transito.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.AtInformeFecha)
                .HasComment("Fecha en la cual la ARS reporto el accidente de tránsito a la SISALRIL.")
                .HasColumnType("datetime")
                .HasColumnName("At_Informe_Fecha");
            entity.Property(e => e.AtNotificacionObservacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasComment("Observación de la notificación de no carga de data para accidentes de transito.")
                .HasColumnName("At_Notificacion_Observacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Estado. A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Fecha de Registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Registro del Usuario.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.AtNotificacionNoCargaTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Notificacion_No_Carga_Trans_ARS_Master");

            entity.HasOne(d => d.AtInformeFechaNavigation).WithMany(p => p.AtNotificacionNoCargaTrans)
                .HasForeignKey(d => d.AtInformeFecha)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_At_Notificacion_No_Carga_Trans_At_Calendario_Trans");
        });

        modelBuilder.Entity<AtOrigenCatum>(entity =>
        {
            entity.HasKey(e => e.AtOrigenNumero).HasName("PK_At_Origen_Cata");

            entity.ToTable("AT_Origen_Cata");

            entity.Property(e => e.AtOrigenNumero)
                .HasComment("Número único del origen que condujo al reporte del accidente (Accidente de Tránsito, Accidente laboral, SFS). ")
                .HasColumnName("At_Origen_Numero");
            entity.Property(e => e.AtOrigenCierre)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el reporte del accidente debe ser cerrado, cuando por investigación de la ARS se identifica que el origen inicial con el que se reporto el accidente no es el correcto y se selecciona un origen de cambio  con esta columna con el dato (‘S’). ")
                .HasColumnName("At_Origen_Cierre");
            entity.Property(e => e.AtOrigenDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del origen real que condujo al reporte del accidente (Accidente de Tránsito, Accidente laboral, SFS, etc.). ")
                .HasColumnName("At_Origen_Descripcion");
            entity.Property(e => e.AtOrigenExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicación del origen real que condujo al reporte del accidente (Accidente de Tránsito, Accidente laboral, SFS, etc.). ")
                .HasColumnName("At_Origen_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Estado. A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de Registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del Usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AtPosicionLesionadoCatum>(entity =>
        {
            entity.HasKey(e => e.PosicionLesionadoNumero).HasName("PK_At_Posicion_Lesionado_Cata");

            entity.ToTable("AT_Posicion_Lesionado_Cata");

            entity.Property(e => e.PosicionLesionadoNumero)
                .HasComment("Número que define la posición que ocupaba el afiliado al momento del accidente de transito.")
                .HasColumnName("Posicion_Lesionado_Numero");
            entity.Property(e => e.PosicionLesionadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción de la posición del lesionado por accidente de transito.")
                .HasColumnName("Posicion_Lesionado_Descripcion");
            entity.Property(e => e.PosicionLesionadoExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicación de la posición del lesionado por accidente de transito.")
                .HasColumnName("Posicion_Lesionado_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Estado. A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Fecha de Registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Registro del Usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AtVehiculoTipoCatum>(entity =>
        {
            entity.HasKey(e => e.VehiculoTipoNumero).HasName("PK_At_Vehiculo_Tipo_Cata");

            entity.ToTable("AT_Vehiculo_Tipo_Cata");

            entity.Property(e => e.VehiculoTipoNumero)
                .HasComment("Número único que representa el tipo de vehiculo en accidentes de transito.")
                .HasColumnName("Vehiculo_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Estado. A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de Registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del Usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.VehiculoTipoDescripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de vehiculo.")
                .HasColumnName("Vehiculo_Tipo_Descripcion");
            entity.Property(e => e.VehiculoTipoExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicación del tipo de vehiculo.")
                .HasColumnName("Vehiculo_Tipo_Explicacion");
        });

        modelBuilder.Entity<AuditoresAgentesTiposCatum>(entity =>
        {
            entity.HasKey(e => e.AgenteTipoNumero);

            entity.ToTable("Auditores_Agentes_Tipos_Cata");

            entity.Property(e => e.AgenteTipoNumero)
                .HasComment("Número único que identifica el tipo de agente promotor (Local, Nacional).")
                .HasColumnName("Agente_Tipo_Numero");
            entity.Property(e => e.AgenteTipoDescripcion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Descripción  del tipo de agente promotor (Local, Nacional).")
                .HasColumnName("Agente_Tipo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AuditoresAuditorasHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PromotoraRnc, e.RegistroFecha });

            entity.ToTable("Auditores_Auditoras_Historico");

            entity.Property(e => e.PromotoraRnc)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotora_RNC");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.PromotorEstadoFecha)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Estado_Fecha");
            entity.Property(e => e.PromotorEstadoMotivo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Promotor_Estado_Motivo");
            entity.Property(e => e.PromotorEstadoNumero).HasColumnName("Promotor_Estado_Numero");
            entity.Property(e => e.PromotoraFechaAcreditacion)
                .HasDefaultValueSql("(((1)/(1))/(1900))")
                .HasComment("Fecha en la que se aprobó una entidad en los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Promotora_Fecha_Acreditacion");
            entity.Property(e => e.PromotoraRegistroPatronal)
                .HasComment("Es el número único que le asigna la Tesorería de la Seguridad Social a cada uno de los empleadores que se registran en dicha institución.    ")
                .HasColumnName("Promotora_Registro_Patronal");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PromotoraRncNavigation).WithMany(p => p.AuditoresAuditorasHistoricos)
                .HasForeignKey(d => d.PromotoraRnc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Auditoras_Historico_Auditores_Auditoras_Master");
        });

        modelBuilder.Entity<AuditoresAuditorasMaster>(entity =>
        {
            entity.HasKey(e => e.PromotoraRnc);

            entity.ToTable("Auditores_Auditoras_Master");

            entity.Property(e => e.PromotoraRnc)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotora_RNC");
            entity.Property(e => e.PromotorEstadoFecha)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Estado_Fecha");
            entity.Property(e => e.PromotorEstadoMotivo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Promotor_Estado_Motivo");
            entity.Property(e => e.PromotorEstadoNumero).HasColumnName("Promotor_Estado_Numero");
            entity.Property(e => e.PromotorFechaVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Fecha_Vencimiento");
            entity.Property(e => e.PromotoraFechaAcreditacion)
                .HasDefaultValueSql("(((1)/(1))/(1900))")
                .HasComment("Fecha en la que se aprobó una entidad en los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Promotora_Fecha_Acreditacion");
            entity.Property(e => e.PromotoraRegistroPatronal)
                .HasComment("Es el número único que le asigna la Tesorería de la Seguridad Social a cada uno de los empleadores que se registran en dicha institución.    ")
                .HasColumnName("Promotora_Registro_Patronal");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PromotorEstadoNumeroNavigation).WithMany(p => p.AuditoresAuditorasMasters)
                .HasForeignKey(d => d.PromotorEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Auditoras_Master_Auditores_Estados_Cata");

            entity.HasOne(d => d.PromotoraRegistroPatronalNavigation).WithMany(p => p.AuditoresAuditorasMasters)
                .HasForeignKey(d => d.PromotoraRegistroPatronal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Auditoras_Master_TSS_Empleadores_Master");
        });

        modelBuilder.Entity<AuditoresAuditorasRepresentantesTran>(entity =>
        {
            entity.HasKey(e => new { e.PromotorCedula, e.PromotoraRegistroPatronal });

            entity.ToTable("Auditores_Auditoras_Representantes_Trans", tb => tb.HasComment("Es una tabla transaccional en donde se registran los Promotores vinculado a una Promotora de Salud, en esta tabla se identifica con S si el Promotor es representan de una Promotora con una S, si este no es representante se marca con una N."));

            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.PromotoraRegistroPatronal)
                .HasComment("Es el número único que le asigna la Tesorería de la Seguridad Social a cada uno de los empleadores que se registran en dicha institución.    ")
                .HasColumnName("Promotora_Registro_Patronal");
            entity.Property(e => e.PromotorRepresentante)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si el Promotor de Salud es un Representante de la Promotora (S = Si, N = No).")
                .HasColumnName("Promotor_Representante");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AuditoresAuditorasRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.PromotoraRnc, e.RequerimientoNumero });

            entity.ToTable("Auditores_Auditoras_Requerimientos_Trans");

            entity.Property(e => e.PromotoraRnc)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotora_RNC");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.DocumentoRuta)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("Es la ruta del servidor y carpeta donde se encuentra almacenado el documento.")
                .HasColumnName("Documento_Ruta");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoObservacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Observación de un requerimiento (Documento, Identificación, otros), presentado por una persona o entidad  para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Observacion");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.PromotoraRncNavigation).WithMany(p => p.AuditoresAuditorasRequerimientosTrans)
                .HasForeignKey(d => d.PromotoraRnc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Auditoras_Requerimientos_Trans_Auditores_Auditoras_Master");

            entity.HasOne(d => d.RequerimientoEstadoNumeroNavigation).WithMany(p => p.AuditoresAuditorasRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Auditoras_Requerimientos_Trans_Auditores_Requerimientos_Estados_Cata");
        });

        modelBuilder.Entity<AuditoresDisposicionesTiposCatum>(entity =>
        {
            entity.HasKey(e => e.DisposicionTipoNumero);

            entity.ToTable("Auditores_Disposiciones_Tipos_Cata");

            entity.Property(e => e.DisposicionTipoNumero).HasColumnName("Disposicion_Tipo_Numero");
            entity.Property(e => e.DisposicionTipoDescripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Disposicion_Tipo_Descripcion");
            entity.Property(e => e.DisposicionTipoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Disposicion_Tipo_Estado");
            entity.Property(e => e.DisposicionTipoExamenes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Disposicion_Tipo_Examenes");
            entity.Property(e => e.DisposicionTipoPromotor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Disposicion_Tipo_Promotor");
            entity.Property(e => e.DisposicionTipoPromotora)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Disposicion_Tipo_Promotora");
            entity.Property(e => e.DisposicionTipoRequerimientos)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Disposicion_Tipo_Requerimientos");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AuditoresDisposicionesTran>(entity =>
        {
            entity.HasKey(e => e.DisposicionNumero);

            entity.ToTable("Auditores_Disposiciones_Trans");

            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DisposicionDetalle)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Disposicion_Detalle");
            entity.Property(e => e.DisposicionFecha)
                .HasColumnType("datetime")
                .HasColumnName("Disposicion_Fecha");
            entity.Property(e => e.DisposicionTipoNumero).HasColumnName("Disposicion_Tipo_Numero");
            entity.Property(e => e.PeriodoNumero).HasColumnName("Periodo_Numero");
            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.PromotoraRnc)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotora_RNC");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.DisposicionTipoNumeroNavigation).WithMany(p => p.AuditoresDisposicionesTrans)
                .HasForeignKey(d => d.DisposicionTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Disposiciones_Trans_Auditores_Disposiciones_Tipos_Cata");
        });

        modelBuilder.Entity<AuditoresEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.PromotorEstadoNumero);

            entity.ToTable("Auditores_Estados_Cata");

            entity.Property(e => e.PromotorEstadoNumero).HasColumnName("Promotor_Estado_Numero");
            entity.Property(e => e.PromotorEstadoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Promotor_Estado_Codigo");
            entity.Property(e => e.PromotorEstadoConsulta)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Promotor_Estado_Consulta");
            entity.Property(e => e.PromotorEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Promotor_Estado_Descripcion");
            entity.Property(e => e.PromotorEstadoExplicacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Promotor_Estado_Explicacion");
            entity.Property(e => e.PromotorEstadoMotivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Promotor_Estado_Motivo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AuditoresExamenesDetallesTran>(entity =>
        {
            entity.HasKey(e => new { e.ExamenNumero, e.PreguntaNumero, e.PreguntaRespuestaNumero });

            entity.ToTable("Auditores_Examenes_Detalles_Trans");

            entity.Property(e => e.ExamenNumero).HasColumnName("Examen_Numero");
            entity.Property(e => e.PreguntaNumero).HasColumnName("Pregunta_Numero");
            entity.Property(e => e.PreguntaRespuestaNumero).HasColumnName("Pregunta_Respuesta_Numero");
            entity.Property(e => e.PreguntaDescripcion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Descripcion");
            entity.Property(e => e.PreguntaOrden).HasColumnName("Pregunta_Orden");
            entity.Property(e => e.PreguntaRespuestaDescripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Respuesta_Descripcion");
            entity.Property(e => e.PreguntaRespuestaElegida)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Pregunta_Respuesta_Elegida");
            entity.Property(e => e.PreguntaRespuestaLetra)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Pregunta_Respuesta_Letra");
            entity.Property(e => e.PreguntaRespuestaValida).HasColumnName("Pregunta_Respuesta_Valida");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ExamenNumeroNavigation).WithMany(p => p.AuditoresExamenesDetallesTrans)
                .HasForeignKey(d => d.ExamenNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Examenes_Detalles_Trans_Auditores_Examenes_Trans");

            entity.HasOne(d => d.PreguntaNumeroNavigation).WithMany(p => p.AuditoresExamenesDetallesTrans)
                .HasForeignKey(d => d.PreguntaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Examenes_Detalles_Trans_Auditores_Preguntas_Cata");
        });

        modelBuilder.Entity<AuditoresExamenesDetallesTransBk>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Auditores_Examenes_Detalles_Trans_BK");

            entity.Property(e => e.ExamenNumero).HasColumnName("Examen_Numero");
            entity.Property(e => e.PreguntaDescripcion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Descripcion");
            entity.Property(e => e.PreguntaNumero).HasColumnName("Pregunta_Numero");
            entity.Property(e => e.PreguntaOrden).HasColumnName("Pregunta_Orden");
            entity.Property(e => e.PreguntaRespuestaDescripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Respuesta_Descripcion");
            entity.Property(e => e.PreguntaRespuestaElegida)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Pregunta_Respuesta_Elegida");
            entity.Property(e => e.PreguntaRespuestaLetra)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Pregunta_Respuesta_Letra");
            entity.Property(e => e.PreguntaRespuestaNumero).HasColumnName("Pregunta_Respuesta_Numero");
            entity.Property(e => e.PreguntaRespuestaValida).HasColumnName("Pregunta_Respuesta_Valida");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AuditoresExamenesEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.ExamenEstadoNumero);

            entity.ToTable("Auditores_Examenes_Estados_Cata");

            entity.Property(e => e.ExamenEstadoNumero).HasColumnName("Examen_Estado_Numero");
            entity.Property(e => e.ExamenEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Examen_Estado_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AuditoresExamenesHorariosCatum>(entity =>
        {
            entity.HasKey(e => e.HorarioNumero);

            entity.ToTable("Auditores_Examenes_Horarios_Cata");

            entity.Property(e => e.HorarioNumero)
                .ValueGeneratedOnAdd()
                .HasColumnName("Horario_Numero");
            entity.Property(e => e.HorarioDetalle)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Horario_Detalle");
            entity.Property(e => e.HorarioInicia).HasColumnName("Horario_Inicia");
            entity.Property(e => e.HorarioTermina).HasColumnName("Horario_Termina");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AuditoresExamenesRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.ExamenNumero, e.RequerimientoNumero });

            entity.ToTable("Auditores_Examenes_Requerimientos_Trans");

            entity.Property(e => e.ExamenNumero)
                .HasComment("Número único que identifica cada examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Numero");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoObservacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Observación de un requerimiento (Documento, Identificación, otros), presentado por una persona o entidad  para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Observacion");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.ExamenNumeroNavigation).WithMany(p => p.AuditoresExamenesRequerimientosTrans)
                .HasForeignKey(d => d.ExamenNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Examenes_Requerimientos_Trans_Auditores_Examenes_Trans");
        });

        modelBuilder.Entity<AuditoresExamenesTran>(entity =>
        {
            entity.HasKey(e => e.ExamenNumero);

            entity.ToTable("Auditores_Examenes_Trans");

            entity.HasIndex(e => new { e.PromotorCedula, e.PeriodoNumero }, "CK_Auditores_Examenes_Periodo_Cedula").IsUnique();

            entity.HasIndex(e => new { e.PeriodoNumero, e.ExamenPeriodoSecuencia }, "CK_Auditores_Examenes_Periodo_Periodo_Sec").IsUnique();

            entity.Property(e => e.ExamenNumero)
                .HasComment("Número único que identifica cada examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Numero");
            entity.Property(e => e.DisposicionNumero)
                .HasDefaultValueSql("((0))")
                .HasColumnName("Disposicion_Numero");
            entity.Property(e => e.ExamenEstadoNumero).HasColumnName("Examen_Estado_Numero");
            entity.Property(e => e.ExamenFechaFinal)
                .HasComment("Fecha y hora en que terminó una persona  un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Examen_Fecha_Final");
            entity.Property(e => e.ExamenFechaInicio)
                .HasComment("Fecha y hora en que inició una persona  un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Examen_Fecha_Inicio");
            entity.Property(e => e.ExamenPeriodoSecuencia).HasColumnName("Examen_Periodo_Secuencia");
            entity.Property(e => e.ExamenPreguntas).HasColumnName("Examen_Preguntas");
            entity.Property(e => e.ExamenPuntuacion)
                .HasComment("Representa la puntuación obtenida por un Promotor de Saludral finalizar su exámen.")
                .HasColumnName("Examen_Puntuacion");
            entity.Property(e => e.ExamenPuntuacionMinima)
                .HasDefaultValueSql("((70))")
                .HasColumnName("Examen_Puntuacion_Minima");
            entity.Property(e => e.ExamenReciboSerial)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasComment("Serial generado para un recibo de resultado de un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Recibo_Serial");
            entity.Property(e => e.ExamenTiempoMinutos)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Tiempo_Minutos");
            entity.Property(e => e.ExamenTiempoSegundos)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Tiempo_Segundos");
            entity.Property(e => e.HorarioNumero).HasColumnName("Horario_Numero");
            entity.Property(e => e.PeriodoNumero)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Periodo_Numero");
            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.PromotorEstadoNumero)
                .HasComment("Indica el Estatus del Promotor, solo aplica para los estados 0 = No Acreditado y 1 = Acreditado, va a depender de si el promotor aprueba o no.")
                .HasColumnName("Promotor_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ExamenEstadoNumeroNavigation).WithMany(p => p.AuditoresExamenesTrans)
                .HasForeignKey(d => d.ExamenEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Examenes_Trans_Auditores_Examenes_Estados_Cata");

            entity.HasOne(d => d.HorarioNumeroNavigation).WithMany(p => p.AuditoresExamenesTrans)
                .HasForeignKey(d => d.HorarioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Examenes_Trans_Auditores_Examenes_Horarios_Cata");

            entity.HasOne(d => d.PeriodoNumeroNavigation).WithMany(p => p.AuditoresExamenesTrans)
                .HasForeignKey(d => d.PeriodoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Examenes_Trans_Auditores_Periodos_Master");

            entity.HasOne(d => d.PromotorCedulaNavigation).WithMany(p => p.AuditoresExamenesTrans)
                .HasForeignKey(d => d.PromotorCedula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Examenes_Trans_Auditores_Master");
        });

        modelBuilder.Entity<AuditoresHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PromotorCedula, e.RegistroFecha });

            entity.ToTable("Auditores_Historico");

            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.ArsNumeroAutorizo).HasColumnName("ARS_Numero_Autorizo");
            entity.Property(e => e.PromotorCorreoElectronico)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Promotor_Correo_Electronico");
            entity.Property(e => e.PromotorEstadoFecha)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Estado_Fecha");
            entity.Property(e => e.PromotorEstadoNumero).HasColumnName("Promotor_Estado_Numero");
            entity.Property(e => e.PromotorObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasColumnName("Promotor_Observacion");
            entity.Property(e => e.PromotoraRnc)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotora_RNC");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PromotorCedulaNavigation).WithMany(p => p.AuditoresHistoricos)
                .HasForeignKey(d => d.PromotorCedula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Historico_Auditores_Master");
        });

        modelBuilder.Entity<AuditoresMaster>(entity =>
        {
            entity.HasKey(e => e.PromotorCedula);

            entity.ToTable("Auditores_Master", tb => tb.HasTrigger("Trigger_Auditores_Auditoras"));

            entity.HasIndex(e => e.PromotoraRnc, "NonClusteredIndex-20160718-160253");

            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.AgenteTipoNumero)
                .HasComment("Número único que identifica el tipo de agente promotor (Local, Nacional).")
                .HasColumnName("Agente_Tipo_Numero");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.ArsNumeroAutorizo).HasColumnName("ARS_Numero_Autorizo");
            entity.Property(e => e.DisposicionNumero)
                .HasDefaultValueSql("((0))")
                .HasColumnName("Disposicion_Numero");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.NivelAcademicoNumero)
                .HasComment("Número único que identifica el nivel académico de la persona.")
                .HasColumnName("Nivel_Academico_Numero");
            entity.Property(e => e.PromotorCelular)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Numero de teléfono celular de la persona.")
                .HasColumnName("Promotor_Celular");
            entity.Property(e => e.PromotorCorreoElectronico)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Promotor_Correo_Electronico");
            entity.Property(e => e.PromotorDireccion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Dirección de  residencia de la persona.")
                .HasColumnName("Promotor_Direccion");
            entity.Property(e => e.PromotorEstadoFecha)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Estado_Fecha");
            entity.Property(e => e.PromotorEstadoMotivo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasColumnName("Promotor_Estado_Motivo");
            entity.Property(e => e.PromotorEstadoNumero).HasColumnName("Promotor_Estado_Numero");
            entity.Property(e => e.PromotorFechaAcreditacion)
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Fecha_Acreditacion");
            entity.Property(e => e.PromotorFechaVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Fecha_Vencimiento");
            entity.Property(e => e.PromotorNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Promotor_NSS");
            entity.Property(e => e.PromotorObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasColumnName("Promotor_Observacion");
            entity.Property(e => e.PromotorRepresentante)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Promotor_Representante");
            entity.Property(e => e.PromotorTelefono)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de teléfono de la persona..")
                .HasColumnName("Promotor_Telefono");
            entity.Property(e => e.PromotoraRnc)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotora_RNC");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AgenteTipoNumeroNavigation).WithMany(p => p.AuditoresMasters)
                .HasForeignKey(d => d.AgenteTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Master_Auditores_Agentes_Tipos_Cata");

            entity.HasOne(d => d.AgenteTipoNumero1).WithMany(p => p.AuditoresMasters)
                .HasForeignKey(d => d.AgenteTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Master_Promotores_Agentes_Tipos_Cata");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.AuditoresMasters)
                .HasForeignKey(d => d.ArsNumero)
                .HasConstraintName("FK_Auditores_Master_ARS_Master");

            entity.HasOne(d => d.NivelAcademicoNumeroNavigation).WithMany(p => p.AuditoresMasters)
                .HasForeignKey(d => d.NivelAcademicoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Master_Comunes_Niveles_Academicos_Cata");

            entity.HasOne(d => d.PromotorEstadoNumeroNavigation).WithMany(p => p.AuditoresMasters)
                .HasForeignKey(d => d.PromotorEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Master_Auditores_Estados_Cata");

            entity.HasOne(d => d.PromotorEstadoNumero1).WithMany(p => p.AuditoresMasters)
                .HasForeignKey(d => d.PromotorEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Master_Promotores_Estados_Cata");

            entity.HasOne(d => d.PromotorNssNavigation).WithMany(p => p.AuditoresMasters)
                .HasForeignKey(d => d.PromotorNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Master_TSS_Ciudadanos_Master");

            entity.HasOne(d => d.PromotoraRncNavigation).WithMany(p => p.AuditoresMasters)
                .HasForeignKey(d => d.PromotoraRnc)
                .HasConstraintName("FK_Auditores_Master_Auditores_Auditoras_Master");
        });

        modelBuilder.Entity<AuditoresParametrosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.ParametroNombre, e.RegistroFecha });

            entity.ToTable("Auditores_Parametros_Historico");

            entity.Property(e => e.ParametroNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Parametro_Nombre");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.ParametroDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Parametro_Descripcion");
            entity.Property(e => e.ParametroTexto)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Parametro_Texto");
            entity.Property(e => e.ParametroValor).HasColumnName("Parametro_Valor");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ParametroNombreNavigation).WithMany(p => p.AuditoresParametrosHistoricos)
                .HasForeignKey(d => d.ParametroNombre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Parametros_Historico_Auditores_Parametros_Trans");
        });

        modelBuilder.Entity<AuditoresParametrosTran>(entity =>
        {
            entity.HasKey(e => e.ParametroNombre);

            entity.ToTable("Auditores_Parametros_Trans");

            entity.Property(e => e.ParametroNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Parametro_Nombre");
            entity.Property(e => e.ParametroDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Parametro_Descripcion");
            entity.Property(e => e.ParametroTexto)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Parametro_Texto");
            entity.Property(e => e.ParametroValor).HasColumnName("Parametro_Valor");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AuditoresPeriodosMaster>(entity =>
        {
            entity.HasKey(e => e.PeriodoNumero);

            entity.ToTable("Auditores_Periodos_Master");

            entity.Property(e => e.PeriodoNumero)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Periodo_Numero");
            entity.Property(e => e.ExamenPreguntas).HasColumnName("Examen_Preguntas");
            entity.Property(e => e.ExamenPreguntasVencidos).HasColumnName("Examen_Preguntas_Vencidos");
            entity.Property(e => e.PeriodoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Estado en el que se encuentra un período específico de exámenes en los procesos de acreditación.")
                .HasColumnName("Periodo_Estado");
            entity.Property(e => e.PeriodoFechaFinal)
                .HasComment("Fecha en la que finaliza un período específico de exámenes en los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Periodo_Fecha_Final");
            entity.Property(e => e.PeriodoFechaInicio)
                .HasComment("Fecha en la que inicia un período específico de exámenes en los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Periodo_Fecha_Inicio");
            entity.Property(e => e.PeriodoHoraInicioExamen)
                .HasComment("Hora en la que debe iniciar un período específico de exámenes en los procesos de acreditación.")
                .HasColumnName("Periodo_Hora_Inicio_Examen");
            entity.Property(e => e.PeriodoObservacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Observación sobre un período específico de exámenes en los procesos de acreditación.")
                .HasColumnName("Periodo_Observacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AuditoresPreguntasCatum>(entity =>
        {
            entity.HasKey(e => e.PreguntaNumero);

            entity.ToTable("Auditores_Preguntas_Cata");

            entity.Property(e => e.PreguntaNumero)
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.PreguntaDescripcion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasComment("Detalles de cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Descripcion");
            entity.Property(e => e.PreguntaObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Observacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AuditoresPreguntasHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PreguntaNumero, e.RegistroFecha });

            entity.ToTable("Auditores_Preguntas_Historico");

            entity.Property(e => e.PreguntaNumero)
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.PreguntaDescripcion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasComment("Detalles de cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Descripcion");
            entity.Property(e => e.PreguntaObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Observacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PreguntaNumeroNavigation).WithMany(p => p.AuditoresPreguntasHistoricos)
                .HasForeignKey(d => d.PreguntaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Preguntas_Historico_Auditores_Preguntas_Cata");
        });

        modelBuilder.Entity<AuditoresPreguntasRespuestasCatum>(entity =>
        {
            entity.HasKey(e => new { e.PreguntaNumero, e.PreguntaRespuestaNumero });

            entity.ToTable("Auditores_Preguntas_Respuestas_Cata");

            entity.Property(e => e.PreguntaNumero)
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.PreguntaRespuestaNumero)
                .ValueGeneratedOnAdd()
                .HasColumnName("Pregunta_Respuesta_Numero");
            entity.Property(e => e.PreguntaRespuestaDescripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasComment("Es el código (Letra) con la que se puede responder una pregunta específica en un examen de evaluación en un proceso de acreditación.")
                .HasColumnName("Pregunta_Respuesta_Descripcion");
            entity.Property(e => e.PreguntaRespuestaObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Respuesta_Observacion");
            entity.Property(e => e.PreguntaRespuestaValida).HasColumnName("Pregunta_Respuesta_Valida");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PreguntaNumeroNavigation).WithMany(p => p.AuditoresPreguntasRespuestasCata)
                .HasForeignKey(d => d.PreguntaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Preguntas_Respuestas_Cata_Auditores_Preguntas_Cata");
        });

        modelBuilder.Entity<AuditoresPreguntasRespuestasHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PreguntaNumero, e.PreguntaRespuestaNumero, e.RegistroFecha });

            entity.ToTable("Auditores_Preguntas_Respuestas_Historico");

            entity.Property(e => e.PreguntaNumero)
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.PreguntaRespuestaNumero).HasColumnName("Pregunta_Respuesta_Numero");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.PreguntaRespuestaDescripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasComment("Es el código (Letra) con la que se puede responder una pregunta específica en un examen de evaluación en un proceso de acreditación.")
                .HasColumnName("Pregunta_Respuesta_Descripcion");
            entity.Property(e => e.PreguntaRespuestaObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Respuesta_Observacion");
            entity.Property(e => e.PreguntaRespuestaValida).HasColumnName("Pregunta_Respuesta_Valida");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.Pregunta).WithMany(p => p.AuditoresPreguntasRespuestasHistoricos)
                .HasForeignKey(d => new { d.PreguntaNumero, d.PreguntaRespuestaNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Preguntas_Respuestas_Historico_Auditores_Preguntas_Respuestas_Cata");
        });

        modelBuilder.Entity<AuditoresPreguntasRespuestasLetrasCatum>(entity =>
        {
            entity.HasKey(e => e.LetraNumero);

            entity.ToTable("Auditores_Preguntas_Respuestas_Letras_Cata");

            entity.Property(e => e.LetraNumero).HasColumnName("Letra_Numero");
            entity.Property(e => e.LetraLetra)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Letra_Letra");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<AuditoresRequerimientosCataBk>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Auditores_Requerimientos_Cata_BK");

            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoAplicaPromotor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Aplica_Promotor");
            entity.Property(e => e.RequerimientoAplicaPromotora)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Aplica_Promotora");
            entity.Property(e => e.RequerimientoAplicaRenovacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Aplica_Renovacion");
            entity.Property(e => e.RequerimientoDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Descripcion");
            entity.Property(e => e.RequerimientoFechaVencimiento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Fecha_Vencimiento");
            entity.Property(e => e.RequerimientoNumero).HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.RequerimientoObligatorio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Obligatorio");
            entity.Property(e => e.RequerimientoOrden).HasColumnName("Requerimiento_Orden");
        });

        modelBuilder.Entity<AuditoresRequerimientosCatum>(entity =>
        {
            entity.HasKey(e => e.RequerimientoNumero);

            entity.ToTable("Auditores_Requerimientos_Cata");

            entity.Property(e => e.RequerimientoNumero)
                .ValueGeneratedOnAdd()
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoAplicaPromotor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Requerimiento_Aplica_Promotor");
            entity.Property(e => e.RequerimientoAplicaPromotora)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Requerimiento_Aplica_Promotora");
            entity.Property(e => e.RequerimientoAplicaRenovacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Requerimiento_Aplica_Renovacion");
            entity.Property(e => e.RequerimientoDescripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Descripción del requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Descripcion");
            entity.Property(e => e.RequerimientoFechaVencimiento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Fecha_Vencimiento");
            entity.Property(e => e.RequerimientoObligatorio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Obligatorio");
            entity.Property(e => e.RequerimientoOrden)
                .HasComment("Número de orden en que debe aparecer los requerimiento para un personas o entidades, en relación a la categoría de acreditación en un proceso de acreditación.")
                .HasColumnName("Requerimiento_Orden");
        });

        modelBuilder.Entity<AuditoresRequerimientosEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.RequerimientoEstadoNumero);

            entity.ToTable("Auditores_Requerimientos_Estados_Cata");

            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Descripcion");
            entity.Property(e => e.RequerimientoEstadoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Estado_Estado");
            entity.Property(e => e.RequerimientoEstadoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Explicacion");
        });

        modelBuilder.Entity<AuditoresRequerimientosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PromotorCedula, e.RequerimientoNumero, e.RegistroFecha });

            entity.ToTable("Auditores_Requerimientos_Historico");

            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoObservacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Observación de un requerimiento (Documento, Identificación, otros), presentado por una persona o entidad  para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Observacion");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.PromotorCedulaNavigation).WithMany(p => p.AuditoresRequerimientosHistoricos)
                .HasForeignKey(d => d.PromotorCedula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Requerimientos_Historico_Auditores_Master");

            entity.HasOne(d => d.RequerimientoEstadoNumeroNavigation).WithMany(p => p.AuditoresRequerimientosHistoricos)
                .HasForeignKey(d => d.RequerimientoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Requerimientos_Historico_Auditores_Requerimientos_Estados_Cata");
        });

        modelBuilder.Entity<AuditoresRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.PromotorCedula, e.RequerimientoNumero });

            entity.ToTable("Auditores_Requerimientos_Trans");

            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoObservacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Observación de un requerimiento (Documento, Identificación, otros), presentado por una persona o entidad  para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Observacion");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.RequerimientoEstadoNumeroNavigation).WithMany(p => p.AuditoresRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Auditores_Requerimientos_Trans_Auditores_Requerimientos_Estados_Cata");
        });

        modelBuilder.Entity<AuditoresUsuariosBitacoraTran>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Auditores_Usuarios_Bitacora_Trans");

            entity.Property(e => e.ExamenNumero).HasColumnName("Examen_Numero");
            entity.Property(e => e.ExamenReciboSerial)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Examen_Recibo_Serial");
            entity.Property(e => e.PeriodoNumero).HasColumnName("Periodo_Numero");
            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.UsuarioAccion)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Usuario_Accion");
            entity.Property(e => e.UsuarioCuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Usuario_Cuenta");
        });

        modelBuilder.Entity<CambiosExcepcionesAltasTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero).HasName("PK_Altas_Cambios_Excepciones_Trans");

            entity.ToTable("Cambios_Excepciones_Altas_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.ActaNacimientoAnio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un dependiente sin cédula, se proporcionará el año del acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Anio");
            entity.Property(e => e.ActaNacimientoFolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un dependiente sin cédula, se  proporcionará el folio del acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Folio");
            entity.Property(e => e.ActaNacimientoLibro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un dependiente sin cédula, se proporcionará el libro en donde está registrada el acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Libro");
            entity.Property(e => e.ActaNacimientoMunicipio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un dependiente sin cédula, se proporcionará el municipio en que fue elaborada el acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Municipio");
            entity.Property(e => e.ActaNacimientoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un dependiente sin cédula, se proporcionará el número del acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Numero");
            entity.Property(e => e.ActaNacimientoOficialia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un dependiente sin cédula, se proporcionará la oficialia en donde fue elaborada el acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Oficialia");
            entity.Property(e => e.AfiliadoDependienteCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del Dependiente solicitante o solicitado para el cambio de ARS o de tipo.")
                .HasColumnName("Afiliado_Dependiente_Cedula");
            entity.Property(e => e.AfiliadoDependienteNss)
                .HasComment("Número de Seguridad Social del dependiente solicitante o solicitado para el cambio de ARS o tipo.")
                .HasColumnName("Afiliado_Dependiente_NSS");
            entity.Property(e => e.AfiliadoDiscapacitado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el dependiente es discapacitado (S = Si y N = No). (Este campo será obligatorio si el tipo de afiliado es dependiente).")
                .HasColumnName("Afiliado_Discapacitado");
            entity.Property(e => e.AfiliadoEstudiante)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el dependiente es estudiante (S = Si y N = No). (Este campo será obligatorio si el tipo de afiliado es dependiente).")
                .HasColumnName("Afiliado_Estudiante");
            entity.Property(e => e.AfiliadoFechaNacimiento)
                .HasComment("Fecha de nacimiento del afiliado.")
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Nacimiento");
            entity.Property(e => e.AfiliadoPrimerApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Primer apellido del afiliado.")
                .HasColumnName("Afiliado_Primer_Apellido");
            entity.Property(e => e.AfiliadoPrimerNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Primer nombre del afiliado.")
                .HasColumnName("Afiliado_Primer_Nombre");
            entity.Property(e => e.AfiliadoSegundoApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Segundo apellido del afiliado.")
                .HasColumnName("Afiliado_Segundo_Apellido");
            entity.Property(e => e.AfiliadoSegundoNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Segundo nombre del afiliado.")
                .HasColumnName("Afiliado_Segundo_Nombre");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sexo del afiliado.")
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica el tipo de afiliado (T = Titular, D = Dependiente Directo, A = Dependiente Adicional).")
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del titular que solicitó el cambio de ARS o tipo.")
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNss)
                .HasComment("Número de Seguridad Social del titular que solicitó el cambio de ARS o tipo.")
                .HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.AfiliadoTitularNuevoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del nuevo titular.")
                .HasColumnName("Afiliado_Titular_Nuevo_Cedula");
            entity.Property(e => e.AfiliadoTitularNuevoNss)
                .HasComment("Número de Seguridad Social del nuevo titular.")
                .HasColumnName("Afiliado_Titular_Nuevo_NSS");
            entity.Property(e => e.MotivoCambioNumero)
                .HasComment("Código del tipo de motivo de cambio por el cual el afiliado cambió de ARS o de tipo.")
                .HasColumnName("Motivo_Cambio_Numero");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Muncipio donde reside el afiliado.")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.ParentescoNumero)
                .HasComment("Código del parentesco que identifica la relación de un dependiente con su titular.")
                .HasColumnName("Parentesco_Numero");
            entity.Property(e => e.ProvinciaNumero)
                .HasComment("Provincia donde reside el afiliado.")
                .HasColumnName("Provincia_Numero");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identificador del tipo de registro (Constante = D).")
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.SolicitudCambioNumero)
                .HasComment("Número único de Solicitud de Cambio por Excepción con el cual fue autorizado el cambio.")
                .HasColumnName("Solicitud_Cambio_Numero");

            entity.HasOne(d => d.SeguimientoNumeroNavigation).WithOne(p => p.CambiosExcepcionesAltasTran)
                .HasForeignKey<CambiosExcepcionesAltasTran>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Altas_Cambios_Excepciones_Trans_Sistemas_Seguimientos_Master");
        });

        modelBuilder.Entity<CambiosExcepcionesBajasTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero).HasName("PK_Bajas_Cambios_Excepciones_Trans");

            entity.ToTable("Cambios_Excepciones_Bajas_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.AfiliadoDependienteCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del Dependiente solicitante o solicitado para el cambio de ARS o de tipo.")
                .HasColumnName("Afiliado_Dependiente_Cedula");
            entity.Property(e => e.AfiliadoDependienteNss)
                .HasComment("Número de Seguridad Social del dependiente solicitante o solicitado para el cambio de ARS o tipo")
                .HasColumnName("Afiliado_Dependiente_NSS");
            entity.Property(e => e.AfiliadoFechaNacimiento)
                .HasComment("Fecha de nacimiento del afiliado.")
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Nacimiento");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sexo del afiliado.")
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica el tipo de afiliado (T = Titular, D = Dependiente Directo, A = Dependiente Adicional).")
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del titular que solicitó el cambio de ARS o tipo.")
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNss)
                .HasComment("Número de Seguridad Social del titular que solicitó el cambio de ARS o Tipo.")
                .HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.LoteCargaNumero)
                .HasComment("Número del lote donde se cargó el afiliado (Solo tendrá valor cuando el tipo del afiliado dea Pendiente o corresponda a un afiliado que haya sido validado contra nómina.")
                .HasColumnName("Lote_Carga_Numero");
            entity.Property(e => e.MotivoCambioNumero)
                .HasComment("Código del tipo de motivo de cambio por el cual el afiliado cambió de ARS o de tipo.")
                .HasColumnName("Motivo_Cambio_Numero");
            entity.Property(e => e.MotivoRechazo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Indica el motivo del rechazo del registro en el SUIR según catálogo de motivos del SUIR.")
                .HasColumnName("Motivo_Rechazo");
            entity.Property(e => e.ParentescoNumero)
                .HasComment("Código del parentesco que identifica la relación de un dependiente con su titular.")
                .HasColumnName("Parentesco_Numero");
            entity.Property(e => e.RegistroCargaId)
                .HasComment("Número de Id registro de la posición donde se encuentra el afiliado cargado (Solo tendrá valor cuando el tipo del afiliado dea Pendiente o corresponda a un afiliado que haya sido validado contra nómina).")
                .HasColumnName("Registro_Carga_ID");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica el estatus en que será marcado el registro por ser rechazado (RE = Rechazado).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identificador del tipo de registro (Constante = D).")
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.SolicitudCambioNumero)
                .HasComment("Número único de Solicitud de Cambio por Excepción con el cual fue autorizado el cambio.")
                .HasColumnName("Solicitud_Cambio_Numero");

            entity.HasOne(d => d.SeguimientoNumeroNavigation).WithOne(p => p.CambiosExcepcionesBajasTran)
                .HasForeignKey<CambiosExcepcionesBajasTran>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Bajas_Cambios_Excepciones_Trans_Sistemas_Seguimientos_Master");
        });

        modelBuilder.Entity<CambiosExcepcionesSolicitudesTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero).HasName("PK_Respuestas_Solicitudes_Cambios_Excepciones_Trans");

            entity.ToTable("Cambios_Excepciones_Solicitudes_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.AfiliadoDependienteCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Dependiente_Cedula");
            entity.Property(e => e.AfiliadoDependienteNss).HasColumnName("Afiliado_Dependiente_NSS");
            entity.Property(e => e.AfiliadoDependienteTipoCodigoAAfiliarse)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Dependiente_Tipo_Codigo_A_Afiliarse");
            entity.Property(e => e.AfiliadoDiscapacitado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Discapacitado");
            entity.Property(e => e.AfiliadoEstudiante)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Estudiante");
            entity.Property(e => e.AfiliadoFechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Nacimiento");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNss).HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.AfiliadoTitularNuevoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Nuevo_Cedula");
            entity.Property(e => e.AfiliadoTitularNuevoNss).HasColumnName("Afiliado_Titular_Nuevo_NSS");
            entity.Property(e => e.ArsDestinoNumero).HasColumnName("ARS_Destino_Numero");
            entity.Property(e => e.ArsOrigenNumero).HasColumnName("ARS_Origen_Numero");
            entity.Property(e => e.MotivoCambioNumero).HasColumnName("Motivo_Cambio_Numero");
            entity.Property(e => e.ParentescoNumeroAAfiliarse).HasColumnName("Parentesco_Numero_A_Afiliarse");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.RespuestaCodigo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Respuesta_Codigo");
            entity.Property(e => e.SolicitudCambioNumero).HasColumnName("Solicitud_Cambio_Numero");

            entity.HasOne(d => d.SeguimientoNumeroNavigation).WithOne(p => p.CambiosExcepcionesSolicitudesTran)
                .HasForeignKey<CambiosExcepcionesSolicitudesTran>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Respuestas_Solicitudes_Cambios_Excepciones_Trans_Sistemas_Seguimientos_Master");
        });

        modelBuilder.Entity<CasosActividadesTipoCatum>(entity =>
        {
            entity.HasKey(e => e.CasoActividadTipoNumero);

            entity.ToTable("Casos_Actividades_Tipo_Cata");

            entity.Property(e => e.CasoActividadTipoNumero)
                .HasComment("Número que identifica el tipo de actividad.")
                .HasColumnName("Caso_Actividad_Tipo_Numero");
            entity.Property(e => e.CasoActividadTipoAplicaTiempo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indicador de aplicación de tiempo para la actividad a realizar (S = SI, N = NO).")
                .HasColumnName("Caso_Actividad_Tipo_Aplica_Tiempo");
            entity.Property(e => e.CasoActividadTipoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de actividad.")
                .HasColumnName("Caso_Actividad_Tipo_Descripcion");
            entity.Property(e => e.CasoActividadTipoPermiteEdicion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indicador de permiso para editar una actividad (S = SI, N = NO).")
                .HasColumnName("Caso_Actividad_Tipo_Permite_Edicion");
            entity.Property(e => e.CasoProcesoTipoNumero)
                .HasComment("Número que identifica el tipo de proceso de la actividad a realizar.")
                .HasColumnName("Caso_Proceso_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CasoProcesoTipoNumeroNavigation).WithMany(p => p.CasosActividadesTipoCata)
                .HasForeignKey(d => d.CasoProcesoTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Actividades_Tipo_Cata_Casos_Procesos_Tipo_Cata");
        });

        modelBuilder.Entity<CasosActividadesTran>(entity =>
        {
            entity.HasKey(e => new { e.CasoNumero, e.CasoActividadSecuencia });

            entity.ToTable("Casos_Actividades_Trans");

            entity.Property(e => e.CasoNumero)
                .HasComment("Número que identifica el caso generado mediante una solicitud ante una queja o reclamo por parte de los ciudadanos.")
                .HasColumnName("Caso_Numero");
            entity.Property(e => e.CasoActividadSecuencia)
                .HasComment("Número de secuencia de la actividad, cuya finalidad es almacenar la frecuencia con la que ocurre una determinada actividad.")
                .HasColumnName("Caso_Actividad_Secuencia");
            entity.Property(e => e.CasoActividadComentario)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasComment("Comentario de la actividad, en caso sea necesario.")
                .HasColumnName("Caso_Actividad_Comentario");
            entity.Property(e => e.CasoActividadFechaFin)
                .HasComment("Fecha en que finaliza una actividad.")
                .HasColumnType("datetime")
                .HasColumnName("Caso_Actividad_Fecha_Fin");
            entity.Property(e => e.CasoActividadFechaInicio)
                .HasComment("Fecha de inicia una actividad.")
                .HasColumnType("datetime")
                .HasColumnName("Caso_Actividad_Fecha_Inicio");
            entity.Property(e => e.CasoActividadTipoNumero)
                .HasComment("Número que identifica el tipo de actividad.")
                .HasColumnName("Caso_Actividad_Tipo_Numero");
            entity.Property(e => e.CasoDireccionNumero)
                .HasComment("Número que identifica la dirección (Uadministrativa), solo para casos.")
                .HasColumnName("Caso_Direccion_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CasoActividadTipoNumeroNavigation).WithMany(p => p.CasosActividadesTrans)
                .HasForeignKey(d => d.CasoActividadTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Actividades_Trans_Casos_Actividades_Tipo_Cata");

            entity.HasOne(d => d.CasoDireccionNumeroNavigation).WithMany(p => p.CasosActividadesTrans)
                .HasForeignKey(d => d.CasoDireccionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Actividades_Trans_Casos_Direcciones_Master");

            entity.HasOne(d => d.CasoNumeroNavigation).WithMany(p => p.CasosActividadesTrans)
                .HasForeignKey(d => d.CasoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Actividades_Trans_Casos_Master");
        });

        modelBuilder.Entity<CasosActividadesUsuariosTran>(entity =>
        {
            entity.HasKey(e => new { e.CasoNumero, e.CasoActividadSecuencia, e.UsuarioUsuarioNombre });

            entity.ToTable("Casos_Actividades_Usuarios_Trans");

            entity.Property(e => e.CasoNumero)
                .HasComment("Número que identifica el caso generado mediante una solicitud ante una queja o reclamo por parte de los ciudadanos.")
                .HasColumnName("Caso_Numero");
            entity.Property(e => e.CasoActividadSecuencia)
                .HasComment("Número de secuencia de la actividad, cuya finalidad es almacenar la frecuencia con la que ocurre una determinada actividad.")
                .HasColumnName("Caso_Actividad_Secuencia");
            entity.Property(e => e.UsuarioUsuarioNombre)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Nombre del usuario (Usuario_NT) que tendrá permiso ante un rol determinado.")
                .HasColumnName("Usuario_Usuario_Nombre");
            entity.Property(e => e.CasoActividadCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Número de cédula e identidad electoral del usuario que realiza la actividad.")
                .HasColumnName("Caso_Actividad_Cedula");
            entity.Property(e => e.CasoActividadNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nombre de la actividad realizada por el usuario.")
                .HasColumnName("Caso_Actividad_Nombre");
            entity.Property(e => e.CasoActividadUsuarioOrigen)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica el origen del usuario que realizó la actividad (I = Interno, E = Externo).")
                .HasColumnName("Caso_Actividad_Usuario_Origen");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.UsuarioUsuarioNombreNavigation).WithMany(p => p.CasosActividadesUsuariosTrans)
                .HasForeignKey(d => d.UsuarioUsuarioNombre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Actividades_Usuarios_Trans_Casos_Usuarios_Master1");

            entity.HasOne(d => d.Caso).WithMany(p => p.CasosActividadesUsuariosTrans)
                .HasForeignKey(d => new { d.CasoNumero, d.CasoActividadSecuencia })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Actividades_Usuarios_Trans_Casos_Actividades_Trans");
        });

        modelBuilder.Entity<CasosCambiosExcepcionErroresCatum>(entity =>
        {
            entity.HasKey(e => e.CambioExcepcionSolicitudErrorNumero);

            entity.ToTable("Casos_Cambios_Excepcion_Errores_Cata");

            entity.Property(e => e.CambioExcepcionSolicitudErrorNumero)
                .ValueGeneratedNever()
                .HasColumnName("Cambio_Excepcion_Solicitud_Error_Numero");
            entity.Property(e => e.CambioExcepcionSolicitudErrorDescripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Cambio_Excepcion_Solicitud_Error_Descripcion");
            entity.Property(e => e.CambioExcepcionSolicitudErrorExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Cambio_Excepcion_Solicitud_Error_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CasosCambiosExcepcionMotivosCatum>(entity =>
        {
            entity.HasKey(e => new { e.CambioExcepcionMotivoSecuencia, e.CambioExcepcionMotivoUnipagoNumero });

            entity.ToTable("Casos_Cambios_Excepcion_Motivos_Cata");

            entity.Property(e => e.CambioExcepcionMotivoSecuencia).HasColumnName("Cambio_Excepcion_Motivo_Secuencia");
            entity.Property(e => e.CambioExcepcionMotivoUnipagoNumero).HasColumnName("Cambio_Excepcion_Motivo_Unipago_Numero");
            entity.Property(e => e.CambioExcepcionMotivoAfiliadoDestinoTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cambio_Excepcion_Motivo_Afiliado_Destino_Tipo");
            entity.Property(e => e.CambioExcepcionMotivoAfiliadoEstatus)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cambio_Excepcion_Motivo_Afiliado_Estatus");
            entity.Property(e => e.CambioExcepcionMotivoAfiliadoEstatusMotivo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cambio_Excepcion_Motivo_Afiliado_Estatus_Motivo");
            entity.Property(e => e.CambioExcepcionMotivoAfiliadoOrigenTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cambio_Excepcion_Motivo_Afiliado_Origen_Tipo");
            entity.Property(e => e.CambioExcepcionMotivoAprobadoUnipago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Cambio_Excepcion_Motivo_Aprobado_Unipago");
            entity.Property(e => e.CambioExcepcionMotivoDescripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Cambio_Excepcion_Motivo_Descripcion");
            entity.Property(e => e.CambioExcepcionMotivoEstatus)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cambio_Excepcion_Motivo_Estatus");
            entity.Property(e => e.CambioExcepcionMotivoGeneraAlta)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cambio_Excepcion_Motivo_Genera_Alta");
            entity.Property(e => e.CambioExcepcionMotivoGeneraBaja)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cambio_Excepcion_Motivo_Genera_Baja");
            entity.Property(e => e.CambioExcepcionMotivoGeneraMovimientoArs).HasColumnName("Cambio_Excepcion_Motivo_Genera_Movimiento_Ars");
            entity.Property(e => e.CambioExcepcionMotivoParticipoTraspasoArs).HasColumnName("Cambio_Excepcion_Motivo_Participo_Traspaso_Ars");
            entity.Property(e => e.CambioExcepcionMotivoRegimenDestinoNumero).HasColumnName("Cambio_Excepcion_Motivo_Regimen_Destino_Numero");
            entity.Property(e => e.CambioExcepcionMotivoRegimenOrigenNumero).HasColumnName("Cambio_Excepcion_Motivo_Regimen_Origen_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CasosCambiosExcepcionSolicitudesErroresTran>(entity =>
        {
            entity.HasKey(e => new { e.CambioExcepcionSolicitudNumero, e.SeguimientoNumero, e.CambioExcepcionSolicitudErrorNumero });

            entity.ToTable("Casos_Cambios_Excepcion_Solicitudes_Errores_Trans");

            entity.Property(e => e.CambioExcepcionSolicitudNumero).HasColumnName("Cambio_Excepcion_Solicitud_Numero");
            entity.Property(e => e.SeguimientoNumero).HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.CambioExcepcionSolicitudErrorNumero).HasColumnName("Cambio_Excepcion_Solicitud_Error_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CambioExcepcionSolicitudErrorNumeroNavigation).WithMany(p => p.CasosCambiosExcepcionSolicitudesErroresTrans)
                .HasForeignKey(d => d.CambioExcepcionSolicitudErrorNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Cambios_Excepcion_Solicitudes_Errores_Trans_Casos_Cambios_Excepcion_Errores_Cata");

            entity.HasOne(d => d.CambioExcepcionSolicitudNumeroNavigation).WithMany(p => p.CasosCambiosExcepcionSolicitudesErroresTrans)
                .HasForeignKey(d => d.CambioExcepcionSolicitudNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Cambios_Excepcion_Solicitudes_Errores_Trans_Casos_Cambios_Excepcion_Solicitudes_Trans");
        });

        modelBuilder.Entity<CasosCambiosExcepcionSolicitudesEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.CambioExcepcionSolicitudEstadoNumero);

            entity.ToTable("Casos_Cambios_Excepcion_Solicitudes_Estados_Cata");

            entity.Property(e => e.CambioExcepcionSolicitudEstadoNumero).HasColumnName("Cambio_Excepcion_Solicitud_Estado_Numero");
            entity.Property(e => e.CambioExcepcionSolicitudEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Cambio_Excepcion_Solicitud_Estado_Descripcion");
            entity.Property(e => e.CambioExcepcionSolicitudEstadoExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Cambio_Excepcion_Solicitud_Estado_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CasosCambiosExcepcionSolicitudesTran>(entity =>
        {
            entity.HasKey(e => e.CambioExcepcionSolicitudNumero);

            entity.ToTable("Casos_Cambios_Excepcion_Solicitudes_Trans");

            entity.Property(e => e.CambioExcepcionSolicitudNumero)
                .ValueGeneratedNever()
                .HasColumnName("Cambio_Excepcion_Solicitud_Numero");
            entity.Property(e => e.AfiliadoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Cedula");
            entity.Property(e => e.AfiliadoDiscapacitado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Discapacitado");
            entity.Property(e => e.AfiliadoEstudiante)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Estudiante");
            entity.Property(e => e.AfiliadoNacimientoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Nacimiento_Fecha");
            entity.Property(e => e.AfiliadoNombres)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Nombres");
            entity.Property(e => e.AfiliadoNss).HasColumnName("Afiliado_NSS");
            entity.Property(e => e.AfiliadoParentescoNumero).HasColumnName("Afiliado_Parentesco_Numero");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoAfiliarseNumero).HasColumnName("Afiliado_Tipo_Afiliarse_Numero");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularNuevoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Nuevo_Cedula");
            entity.Property(e => e.AfiliadoTitularNuevoNss).HasColumnName("Afiliado_Titular_Nuevo_Nss");
            entity.Property(e => e.ArsDestinoNumero).HasColumnName("Ars_Destino_Numero");
            entity.Property(e => e.ArsOrigenNumero).HasColumnName("Ars_Origen_Numero");
            entity.Property(e => e.CambioExcepcionMotivoSecuencia).HasColumnName("Cambio_Excepcion_Motivo_Secuencia");
            entity.Property(e => e.CambioExcepcionMotivoUnipagoNumero).HasColumnName("Cambio_Excepcion_Motivo_Unipago_Numero");
            entity.Property(e => e.CambioExcepcionSolicitudAprobadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Cambio_Excepcion_Solicitud_Aprobado_Fecha");
            entity.Property(e => e.CambioExcepcionSolicitudAprobadoUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Cambio_Excepcion_Solicitud_Aprobado_Usuario");
            entity.Property(e => e.CambioExcepcionSolicitudAutorizadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Cambio_Excepcion_Solicitud_Autorizado_Fecha");
            entity.Property(e => e.CambioExcepcionSolicitudAutorizadoUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Cambio_Excepcion_Solicitud_Autorizado_Usuario");
            entity.Property(e => e.CambioExcepcionSolicitudCreadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Cambio_Excepcion_Solicitud_Creado_Fecha");
            entity.Property(e => e.CambioExcepcionSolicitudCreadoUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Cambio_Excepcion_Solicitud_Creado_Usuario");
            entity.Property(e => e.CambioExcepcionSolicitudEstadoNumero).HasColumnName("Cambio_Excepcion_Solicitud_Estado_Numero");
            entity.Property(e => e.CambioExcepcionSolicitudRechazadoComentario)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Cambio_Excepcion_Solicitud_Rechazado_Comentario");
            entity.Property(e => e.CambioExcepcionSolicitudRechazadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Cambio_Excepcion_Solicitud_Rechazado_Fecha");
            entity.Property(e => e.CambioExcepcionSolicitudRechazadoUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Cambio_Excepcion_Solicitud_Rechazado_Usuario");
            entity.Property(e => e.CasoNumero).HasColumnName("Caso_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoNumero).HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.SeguimientoRespuesta)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Seguimiento_Respuesta");
            entity.Property(e => e.SeguimientoRespuestaEstatus)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Seguimiento_Respuesta_Estatus");

            entity.HasOne(d => d.CambioExcepcionSolicitudEstadoNumeroNavigation).WithMany(p => p.CasosCambiosExcepcionSolicitudesTrans)
                .HasForeignKey(d => d.CambioExcepcionSolicitudEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Cambios_Excepcion_Solicitudes_Trans_Casos_Cambios_Excepcion_Solicitudes_Estados_Cata");

            entity.HasOne(d => d.CasoNumeroNavigation).WithMany(p => p.CasosCambiosExcepcionSolicitudesTrans)
                .HasForeignKey(d => d.CasoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Cambios_Excepcion_Solicitudes_Trans_Casos_Master");

            entity.HasOne(d => d.CambioExcepcionMotivo).WithMany(p => p.CasosCambiosExcepcionSolicitudesTrans)
                .HasForeignKey(d => new { d.CambioExcepcionMotivoSecuencia, d.CambioExcepcionMotivoUnipagoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Cambios_Excepcion_Solicitudes_Trans_Casos_Cambios_Excepcion_Motivos_Cata");
        });

        modelBuilder.Entity<CasosContactosMaster>(entity =>
        {
            entity.HasKey(e => e.CasoContactoNumero);

            entity.ToTable("Casos_Contactos_Master");

            entity.Property(e => e.CasoContactoNumero)
                .HasComment("Número que identifica la persona o contacto para gestión de casos.")
                .HasColumnName("Caso_Contacto_Numero");
            entity.Property(e => e.CasoContactoCargo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Cargo que desempeña la persona o contacto.")
                .HasColumnName("Caso_Contacto_Cargo");
            entity.Property(e => e.CasoContactoCelular)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de célular de la persona o contacto.")
                .HasColumnName("Caso_Contacto_Celular");
            entity.Property(e => e.CasoContactoDireccion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Número que identifica la dirección (Uadministrativa), solo para casos.")
                .HasColumnName("Caso_Contacto_Direccion");
            entity.Property(e => e.CasoContactoExtension)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Número de extensión de la persona o contacto.")
                .HasColumnName("Caso_Contacto_Extension");
            entity.Property(e => e.CasoContactoFax)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de fax de la persona o contacto.")
                .HasColumnName("Caso_Contacto_Fax");
            entity.Property(e => e.CasoContactoNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nombre de la persona o contacto.")
                .HasColumnName("Caso_Contacto_Nombre");
            entity.Property(e => e.CasoContactoNssOPatronal)
                .HasComment("Número de Seguridad Social o Registro Patronal de la persona o contacto.")
                .HasColumnName("Caso_Contacto_NSS_O_Patronal");
            entity.Property(e => e.CasoContactoRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Número de RNC o cédula de la persona o contacto.")
                .HasColumnName("Caso_Contacto_RNC_O_Cedula");
            entity.Property(e => e.CasoContactoTelefono1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Primer número de teléfono de la persona o contacto.")
                .HasColumnName("Caso_Contacto_Telefono_1");
            entity.Property(e => e.CasoContactoTelefono2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Primer número de teléfono de la persona o contacto.")
                .HasColumnName("Caso_Contacto_Telefono_2");
            entity.Property(e => e.CasoContactoTipoNumero)
                .HasComment("Número que identifica el tipo de contacto para gestión de casos.")
                .HasColumnName("Caso_Contacto_Tipo_Numero");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CasoContactoTipoNumeroNavigation).WithMany(p => p.CasosContactosMasters)
                .HasForeignKey(d => d.CasoContactoTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Contactos_Master_Casos_Contactos_Tipo_Cata");
        });

        modelBuilder.Entity<CasosContactosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.CasoContactoTipoNumero);

            entity.ToTable("Casos_Contactos_Tipo_Cata");

            entity.Property(e => e.CasoContactoTipoNumero)
                .HasComment("Número que identifica el tipo de contacto para gestión de casos.")
                .HasColumnName("Caso_Contacto_Tipo_Numero");
            entity.Property(e => e.CasoContactoTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de contacto.")
                .HasColumnName("Caso_Contacto_Tipo_Descripcion");
            entity.Property(e => e.CasoContactoTipoExplicacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Breve explicación del tipo de contacto.")
                .HasColumnName("Caso_Contacto_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CasosCorreosPlantillasCatum>(entity =>
        {
            entity.HasKey(e => e.CasoCorreoPlantillaNumero).HasName("PK_Caso_Correo_Plantilla_Cata");

            entity.ToTable("Casos_Correos_Plantillas_Cata");

            entity.Property(e => e.CasoCorreoPlantillaNumero)
                .HasComment("Número que identifica la plantilla.")
                .HasColumnName("Caso_Correo_Plantilla_Numero");
            entity.Property(e => e.CasoCorreoPlantillaAsunto)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasComment("Asunto de la plantilla.")
                .HasColumnName("Caso_Correo_Plantilla_Asunto");
            entity.Property(e => e.CasoCorreoPlantillaCuerpo)
                .HasComment("Cuerpo de la plantilla.")
                .HasColumnType("ntext")
                .HasColumnName("Caso_Correo_Plantilla_Cuerpo");
            entity.Property(e => e.CasoCorreoPlantillaDescripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Descripción de la plantilla.")
                .HasColumnName("Caso_Correo_Plantilla_Descripcion");
            entity.Property(e => e.CasoCorreoPlantillaNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre de la plantilla.")
                .HasColumnName("Caso_Correo_Plantilla_Nombre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CasosDireccionesMaster>(entity =>
        {
            entity.HasKey(e => e.CasoDireccionNumero);

            entity.ToTable("Casos_Direcciones_Master");

            entity.Property(e => e.CasoDireccionNumero)
                .HasComment("Número que identifica la dirección (Uadministrativa), solo para casos.")
                .HasColumnName("Caso_Direccion_Numero");
            entity.Property(e => e.CasoDireccionNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nombre de la Unidad Administrativa o Dirección.")
                .HasColumnName("Caso_Direccion_Nombre");
            entity.Property(e => e.CasoDireccionUnidadAdministrativa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Unidad Administrativa al que corresponde la Dirección con acceso a casos.")
                .HasColumnName("Caso_Direccion_Unidad_Administrativa");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CasosDireccionesViasTiemposTran>(entity =>
        {
            entity.HasKey(e => new { e.CasoDireccionNumero, e.CasoViaNumero, e.CasoViaTiempoSecuencia });

            entity.ToTable("Casos_Direcciones_Vias_Tiempos_Trans");

            entity.Property(e => e.CasoDireccionNumero)
                .HasComment("Número que identifica la dirección (Uadministrativa), solo para casos.")
                .HasColumnName("Caso_Direccion_Numero");
            entity.Property(e => e.CasoViaNumero)
                .HasComment("Número que identifica la vía de recepción de la información para la gestión del caso.")
                .HasColumnName("Caso_Via_Numero");
            entity.Property(e => e.CasoViaTiempoSecuencia)
                .ValueGeneratedOnAdd()
                .HasComment("Frecuencia de tiempo con la que se mide la vía de entrada de un documento.")
                .HasColumnName("Caso_Via_Tiempo_Secuencia");
            entity.Property(e => e.CasoViaTiempoLimite)
                .HasComment("Tiempo limite establecido para la vía de entrada del servicio.")
                .HasColumnName("Caso_Via_Tiempo_Limite");
            entity.Property(e => e.CasoViaTiempoUnidadNumero)
                .HasComment("Unidad de tiempo establecida para la vía de entrada del servicio.")
                .HasColumnName("Caso_Via_Tiempo_Unidad_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CasoDireccionNumeroNavigation).WithMany(p => p.CasosDireccionesViasTiemposTrans)
                .HasForeignKey(d => d.CasoDireccionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Direcciones_Vias_Tiempos_Trans_Casos_Direcciones_Master");

            entity.HasOne(d => d.CasoViaNumeroNavigation).WithMany(p => p.CasosDireccionesViasTiemposTrans)
                .HasForeignKey(d => d.CasoViaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Vias_Tiempos_Trans_Casos_Vias_Cata");

            entity.HasOne(d => d.CasoViaTiempoUnidadNumeroNavigation).WithMany(p => p.CasosDireccionesViasTiemposTrans)
                .HasForeignKey(d => d.CasoViaTiempoUnidadNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Direcciones_Vias_Tiempos_Trans_Casos_Vias_Tiempo_Unidad_Cata");
        });

        modelBuilder.Entity<CasosDocumentosTran>(entity =>
        {
            entity.HasKey(e => new { e.CasoNumero, e.DocumentoCodigo });

            entity.ToTable("Casos_Documentos_Trans");

            entity.Property(e => e.CasoNumero)
                .HasComment("Número que identifica el caso generado mediante una solicitud ante una queja o reclamo por parte de los ciudadanos.")
                .HasColumnName("Caso_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.CasoDocumentoComentario)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Comentario u observación acerca del documento relacionado al caso.")
                .HasColumnName("Caso_Documento_Comentario");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CasoNumeroNavigation).WithMany(p => p.CasosDocumentosTrans)
                .HasForeignKey(d => d.CasoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Documentos_Trans_Casos_Master");

            entity.HasOne(d => d.DocumentoCodigoNavigation).WithMany(p => p.CasosDocumentosTrans)
                .HasForeignKey(d => d.DocumentoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Documentos_Trans_Comunes_Documentos_Master");
        });

        modelBuilder.Entity<CasosEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.CasoEstadoNumero);

            entity.ToTable("Casos_Estados_Cata");

            entity.Property(e => e.CasoEstadoNumero)
                .HasComment("Número que identifica el estado en el que se encuentra el caso.")
                .HasColumnName("Caso_Estado_Numero");
            entity.Property(e => e.CasoEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del estado del caso.")
                .HasColumnName("Caso_Estado_Descripcion");
            entity.Property(e => e.CasoEstadoExplicacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Breve explicación del estado del caso.")
                .HasColumnName("Caso_Estado_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CasosMaster>(entity =>
        {
            entity.HasKey(e => e.CasoNumero);

            entity.ToTable("Casos_Master", tb =>
                {
                    tb.HasTrigger("Casos_Master_Delete");
                    tb.HasTrigger("Casos_Master_Update");
                });

            entity.Property(e => e.CasoNumero)
                .ValueGeneratedNever()
                .HasComment("Número que identifica el caso generado mediante una solicitud ante una queja o reclamo por parte de los ciudadanos.")
                .HasColumnName("Caso_Numero");
            entity.Property(e => e.CasoConclusionDescripcion)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("Conclusión del caso o servicio brindado.")
                .HasColumnName("Caso_Conclusion_Descripcion");
            entity.Property(e => e.CasoConclusionFecha)
                .HasComment("Fecha de conclsión del caso o servicio.")
                .HasColumnType("datetime")
                .HasColumnName("Caso_Conclusion_Fecha");
            entity.Property(e => e.CasoConclusionUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Usuario que concluyó el caso o servicio.")
                .HasColumnName("Caso_Conclusion_Usuario");
            entity.Property(e => e.CasoDireccionNumero)
                .HasComment("Número que identifica la dirección (Uadministrativa), solo para casos.")
                .HasColumnName("Caso_Direccion_Numero");
            entity.Property(e => e.CasoEstadoNumero)
                .HasComment("Número que identifica el estado en el que se encuentra el caso.")
                .HasColumnName("Caso_Estado_Numero");
            entity.Property(e => e.CasoFecha)
                .HasComment("Fecha de registro del caso o solicitud.")
                .HasColumnType("datetime")
                .HasColumnName("Caso_Fecha");
            entity.Property(e => e.CasoMotivacionDescripcion)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasComment("Descripción de la motivación de solicitud para la gestión del caso o servicio.")
                .HasColumnName("Caso_Motivacion_Descripcion");
            entity.Property(e => e.CasoMotivoNumero)
                .HasComment("Número que indica el motivo para la gestión de un caso o servicio.")
                .HasColumnName("Caso_Motivo_Numero");
            entity.Property(e => e.CasoOrigenNumero)
                .HasComment("Número que indica el origen del caso o servicio.")
                .HasColumnName("Caso_Origen_Numero");
            entity.Property(e => e.CasoTipoNumero)
                .HasComment("Número de identifica el tipo de servicio, el cual puede ser un Servicio o un Caso.")
                .HasColumnName("Caso_Tipo_Numero");
            entity.Property(e => e.CasoViaNumero)
                .HasComment("Número que identifica la vía de recepción de la información para la gestión del caso.")
                .HasColumnName("Caso_Via_Numero");
            entity.Property(e => e.CasoViaTiempoSecuencia)
                .HasComment("Frecuencia de tiempo con la que se mide la vía de entrada de un documento.")
                .HasColumnName("Caso_Via_Tiempo_Secuencia");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CasoDireccionNumeroNavigation).WithMany(p => p.CasosMasters)
                .HasForeignKey(d => d.CasoDireccionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Master_Casos_Direcciones_Master");

            entity.HasOne(d => d.CasoEstadoNumeroNavigation).WithMany(p => p.CasosMasters)
                .HasForeignKey(d => d.CasoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Master_Casos_Estados_Cata");

            entity.HasOne(d => d.CasoOrigenNumeroNavigation).WithMany(p => p.CasosMasters)
                .HasForeignKey(d => d.CasoOrigenNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Master_Casos_Origen_Cata");

            entity.HasOne(d => d.CasoTipoNumeroNavigation).WithMany(p => p.CasosMasters)
                .HasForeignKey(d => d.CasoTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Master_Casos_Tipos_Cata");
        });

        modelBuilder.Entity<CasosMotivosCatum>(entity =>
        {
            entity.HasKey(e => e.CasoMotivoNumero).HasName("PK_Casos_Motivos_Tipo_Cata");

            entity.ToTable("Casos_Motivos_Cata");

            entity.Property(e => e.CasoMotivoNumero)
                .ValueGeneratedNever()
                .HasComment("Número que indica el motivo para la gestión de un caso o servicio.")
                .HasColumnName("Caso_Motivo_Numero");
            entity.Property(e => e.CasoDireccionNumero)
                .HasComment("Número que identifica la dirección (Uadministrativa), solo para casos.")
                .HasColumnName("Caso_Direccion_Numero");
            entity.Property(e => e.CasoMotivoDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Descripción del motivo por el cual se gestionará el caso o servicio.")
                .HasColumnName("Caso_Motivo_Descripcion");
            entity.Property(e => e.CasoTemaNumero)
                .HasComment("Número que indica el tema referente a la motivación del ciudadano.")
                .HasColumnName("Caso_Tema_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CasoDireccionNumeroNavigation).WithMany(p => p.CasosMotivosCata)
                .HasForeignKey(d => d.CasoDireccionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Motivos_Cata_Casos_Direcciones_Master");

            entity.HasOne(d => d.CasoTemaNumeroNavigation).WithMany(p => p.CasosMotivosCata)
                .HasForeignKey(d => d.CasoTemaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Motivos_Cata_Casos_Temas_Cata");
        });

        modelBuilder.Entity<CasosOrigenesCatum>(entity =>
        {
            entity.HasKey(e => e.CasoOrigenNumero).HasName("PK_Casos_Origen_Cata");

            entity.ToTable("Casos_Origenes_Cata");

            entity.Property(e => e.CasoOrigenNumero)
                .HasComment("Número que indica el origen del caso o servicio.")
                .HasColumnName("Caso_Origen_Numero");
            entity.Property(e => e.CasoOrigenNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre del origen del caso o servicio.")
                .HasColumnName("Caso_Origen_Nombre");
            entity.Property(e => e.CasoOrigenPuedeConcluir)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indicador de si puede concluir o no el caso (S = SI, N = NO).")
                .HasColumnName("Caso_Origen_Puede_Concluir");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CasosProcesosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.CasoProcesoTipoNumero);

            entity.ToTable("Casos_Procesos_Tipo_Cata");

            entity.Property(e => e.CasoProcesoTipoNumero)
                .HasComment("Número que indica el tipo de proceso ante determinada actividad.")
                .HasColumnName("Caso_Proceso_Tipo_Numero");
            entity.Property(e => e.CasoProcesoTipoDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de proceso ante determinada actividad.")
                .HasColumnName("Caso_Proceso_Tipo_Descripcion");
            entity.Property(e => e.CasoProcesoTipoExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicación del tipo de proceso ante determinada actividad.")
                .HasColumnName("Caso_Proceso_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CasosRelacionadosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.CasoRelacionadoTipoNumero);

            entity.ToTable("Casos_Relacionados_Tipo_Cata");

            entity.Property(e => e.CasoRelacionadoTipoNumero)
                .HasComment("Número que identifica el tipo de relacionado de un caso.")
                .HasColumnName("Caso_Relacionado_Tipo_Numero");
            entity.Property(e => e.CasoRelacionadoTipoDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de relacionado de un caso.")
                .HasColumnName("Caso_Relacionado_Tipo_Descripcion");
            entity.Property(e => e.CasoRelacionadoTipoExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicación del tipo de relacionado de un caso.")
                .HasColumnName("Caso_Relacionado_Tipo_Explicacion");
            entity.Property(e => e.CasoRelacionadoTipoOrden)
                .HasComment("Número de orden del tipo de relacionado de un caso.")
                .HasColumnName("Caso_Relacionado_Tipo_Orden");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CasosRelacionadosTran>(entity =>
        {
            entity.HasKey(e => new { e.CasoNumero, e.CasoContactoNumero, e.CasoRelacionadoTipoNumero }).HasName("PK_Caso_Relacionados_Trans");

            entity.ToTable("Casos_Relacionados_Trans");

            entity.Property(e => e.CasoNumero)
                .HasComment("Número que identifica el caso generado mediante una solicitud ante una queja o reclamo por parte de los ciudadanos.")
                .HasColumnName("Caso_Numero");
            entity.Property(e => e.CasoContactoNumero)
                .HasComment("Número que identifica la persona o contacto para gestión de casos.")
                .HasColumnName("Caso_Contacto_Numero");
            entity.Property(e => e.CasoRelacionadoTipoNumero)
                .HasComment("Número que identifica el tipo de relacionado de un caso.")
                .HasColumnName("Caso_Relacionado_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CasoContactoNumeroNavigation).WithMany(p => p.CasosRelacionadosTrans)
                .HasForeignKey(d => d.CasoContactoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Relacionados_Trans_Casos_Contactos_Master");

            entity.HasOne(d => d.CasoNumeroNavigation).WithMany(p => p.CasosRelacionadosTrans)
                .HasForeignKey(d => d.CasoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Relacionados_Trans_Casos_Master");

            entity.HasOne(d => d.CasoRelacionadoTipoNumeroNavigation).WithMany(p => p.CasosRelacionadosTrans)
                .HasForeignKey(d => d.CasoRelacionadoTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Relacionados_Trans_Casos_Relacionados_Tipo_Cata");
        });

        modelBuilder.Entity<CasosTemasCatum>(entity =>
        {
            entity.HasKey(e => e.CasoTemaNumero).HasName("PK_Casos_Temas_Tipo_Cata");

            entity.ToTable("Casos_Temas_Cata", tb =>
                {
                    tb.HasTrigger("Casos_Temas_Cata_Delete");
                    tb.HasTrigger("Casos_Temas_Cata_Update");
                });

            entity.Property(e => e.CasoTemaNumero)
                .HasComment("Número que identifica el tema de interes por el cual el afiliado o ciudadano refiere o reclama.")
                .HasColumnName("Caso_Tema_Numero");
            entity.Property(e => e.CasoTemaDescripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Descripción del tema de interes por el cual el afiliado o ciudadano refiere o reclama.")
                .HasColumnName("Caso_Tema_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CasosTiposCatum>(entity =>
        {
            entity.HasKey(e => e.CasoTipoNumero);

            entity.ToTable("Casos_Tipos_Cata");

            entity.Property(e => e.CasoTipoNumero)
                .HasComment("Número que identifica el tipo de servicio ante una queja o reclamo.")
                .HasColumnName("Caso_Tipo_Numero");
            entity.Property(e => e.CasoTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de servicio ante una queja o reclamo.")
                .HasColumnName("Caso_Tipo_Descripcion");
            entity.Property(e => e.CasoTipoExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicación del tipo de servicio ante una queja o reclamo.")
                .HasColumnName("Caso_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CasosUsuariosMaster>(entity =>
        {
            entity.HasKey(e => e.UsuarioUsuarioNombre);

            entity.ToTable("Casos_Usuarios_Master");

            entity.Property(e => e.UsuarioUsuarioNombre)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Nombre de usuario (Usuario_NT) de la empresa.")
                .HasColumnName("Usuario_Usuario_Nombre");
            entity.Property(e => e.CasoDireccionNumero)
                .HasComment("Número que identifica la dirección (Uadministrativa), solo para casos.")
                .HasColumnName("Caso_Direccion_Numero");
            entity.Property(e => e.EmpleadoNombreCompleto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nombre completo del empleado.")
                .HasColumnName("Empleado_Nombre_Completo");
            entity.Property(e => e.EmpleadoNumero)
                .HasComment("Número que identifica el empleado.")
                .HasColumnName("Empleado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CasoDireccionNumeroNavigation).WithMany(p => p.CasosUsuariosMasters)
                .HasForeignKey(d => d.CasoDireccionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Casos_Usuarios_Master_Casos_Direcciones_Master");
        });

        modelBuilder.Entity<CasosViasCatum>(entity =>
        {
            entity.HasKey(e => e.CasoViaNumero);

            entity.ToTable("Casos_Vias_Cata");

            entity.Property(e => e.CasoViaNumero)
                .HasComment("Número que identifica la vía de entrada de la solicitud.")
                .HasColumnName("Caso_Via_Numero");
            entity.Property(e => e.CasoViaDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción de la vía de entrada de la solicitud.")
                .HasColumnName("Caso_Via_Descripcion");
            entity.Property(e => e.CasoViaVisible)
                .HasComment("Indicador de visibilidad de la vía.")
                .HasColumnName("Caso_Via_Visible");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CasosViasTiemposUnidadesCatum>(entity =>
        {
            entity.HasKey(e => e.CasoViaTiempoUnidadNumero).HasName("PK_Casos_Vias_Tiempo_Unidad_Cata");

            entity.ToTable("Casos_Vias_Tiempos_Unidades_Cata", tb =>
                {
                    tb.HasTrigger("Casos_Vias_Tiempos_Unidades_Cata_Delete");
                    tb.HasTrigger("Casos_Vias_Tiempos_Unidades_Cata_Update");
                });

            entity.Property(e => e.CasoViaTiempoUnidadNumero)
                .HasComment("Unidad de tiempo establecida para la vía de entrada del servicio.")
                .HasColumnName("Caso_Via_Tiempo_Unidad_Numero");
            entity.Property(e => e.CasoViaTiempoUnidadDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción de la unidad de tiempo.")
                .HasColumnName("Caso_Via_Tiempo_Unidad_Descripcion");
            entity.Property(e => e.CasoViaTiempoUnidadMinutos)
                .HasComment("Cantidad de minutos establecidos por unidad de tiempo.")
                .HasColumnName("Caso_Via_Tiempo_Unidad_Minutos");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CiudadanosExP>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Ciudadanos_ExP");

            entity.Property(e => e.CausaInhabilidadNumero).HasColumnName("Causa_Inhabilidad_Numero");
            entity.Property(e => e.CausaTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Causa_Tipo_codigo");
            entity.Property(e => e.CiudadanoActaNacimientoAnio)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Anio");
            entity.Property(e => e.CiudadanoActaNacimientoFolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Folio");
            entity.Property(e => e.CiudadanoActaNacimientoLibro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Libro");
            entity.Property(e => e.CiudadanoActaNacimientoMunicipio)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Municipio");
            entity.Property(e => e.CiudadanoActaNacimientoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Numero");
            entity.Property(e => e.CiudadanoActaNacimientoOficialia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Oficialia");
            entity.Property(e => e.CiudadanoActaNacimientoUnida)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Unida");
            entity.Property(e => e.CiudadanoCedulaFormateada)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Cedula_Formateada");
            entity.Property(e => e.CiudadanoFechaNacimiento)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Fecha_Nacimiento");
            entity.Property(e => e.CiudadanoFechaNacimientoDti)
                .HasColumnType("smalldatetime")
                .HasColumnName("Ciudadano_Fecha_Nacimiento_DTI");
            entity.Property(e => e.CiudadanoNoDocumento)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_No_Documento");
            entity.Property(e => e.CiudadanoNoDocumentoAnterior)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_No_Documento_Anterior");
            entity.Property(e => e.CiudadanoNombreCompleto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Nombre_Completo");
            entity.Property(e => e.CiudadanoNombres)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Nombres");
            entity.Property(e => e.CiudadanoNss).HasColumnName("Ciudadano_NSS");
            entity.Property(e => e.CiudadanoNssEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Ciudadano_NSS_Estatus");
            entity.Property(e => e.CiudadanoPrimerApellido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Primer_Apellido");
            entity.Property(e => e.CiudadanoSegundoApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Segundo_Apellido");
            entity.Property(e => e.CiudadanoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Ciudadano_Sexo");
            entity.Property(e => e.DocumentoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Documento_Tipo_Codigo");
            entity.Property(e => e.EstadoCivilCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Estado_Civil_Codigo");
            entity.Property(e => e.FechaActualizacionTss)
                .HasColumnType("smalldatetime")
                .HasColumnName("Fecha_Actualizacion_TSS");
            entity.Property(e => e.NacionalidadNumero).HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.ProvinciaNumero).HasColumnName("Provincia_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("smalldatetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SangreTipoNumero).HasColumnName("Sangre_Tipo_Numero");
        });

        modelBuilder.Entity<CiudadanosExportar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Ciudadanos_Exportar");

            entity.Property(e => e.CausaInhabilidadNumero).HasColumnName("Causa_Inhabilidad_Numero");
            entity.Property(e => e.CausaTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Causa_Tipo_codigo");
            entity.Property(e => e.CiudadanoActaNacimientoAnio)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Anio");
            entity.Property(e => e.CiudadanoActaNacimientoFolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Folio");
            entity.Property(e => e.CiudadanoActaNacimientoLibro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Libro");
            entity.Property(e => e.CiudadanoActaNacimientoMunicipio)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Municipio");
            entity.Property(e => e.CiudadanoActaNacimientoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Numero");
            entity.Property(e => e.CiudadanoActaNacimientoOficialia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Oficialia");
            entity.Property(e => e.CiudadanoActaNacimientoUnida)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Unida");
            entity.Property(e => e.CiudadanoCedulaFormateada)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Cedula_Formateada");
            entity.Property(e => e.CiudadanoFechaNacimiento)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Fecha_Nacimiento");
            entity.Property(e => e.CiudadanoFechaNacimientoDti)
                .HasColumnType("datetime")
                .HasColumnName("Ciudadano_Fecha_Nacimiento_DTI");
            entity.Property(e => e.CiudadanoNoDocumento)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_No_Documento");
            entity.Property(e => e.CiudadanoNoDocumentoAnterior)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_No_Documento_Anterior");
            entity.Property(e => e.CiudadanoNombreCompleto)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Nombre_Completo");
            entity.Property(e => e.CiudadanoNombres)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Nombres");
            entity.Property(e => e.CiudadanoNss).HasColumnName("Ciudadano_NSS");
            entity.Property(e => e.CiudadanoNssEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Ciudadano_NSS_Estatus");
            entity.Property(e => e.CiudadanoPrimerApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Primer_Apellido");
            entity.Property(e => e.CiudadanoSegundoApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Segundo_Apellido");
            entity.Property(e => e.CiudadanoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Ciudadano_Sexo");
            entity.Property(e => e.DocumentoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Documento_Tipo_Codigo");
            entity.Property(e => e.EstadoCivilCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Estado_Civil_Codigo");
            entity.Property(e => e.FechaActualizacionTss)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_Actualizacion_TSS");
            entity.Property(e => e.NacionalidadNumero).HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.ProvinciaNumero).HasColumnName("Provincia_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SangreTipoNumero).HasColumnName("Sangre_Tipo_Numero");
        });

        modelBuilder.Entity<CiudadanosParaMaternidad>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ciudadanos_para_maternidad");

            entity.Property(e => e.CausaInhabilidadNumero).HasColumnName("Causa_Inhabilidad_Numero");
            entity.Property(e => e.CausaTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Causa_Tipo_codigo");
            entity.Property(e => e.CiudadanoActaNacimientoAnio)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Anio");
            entity.Property(e => e.CiudadanoActaNacimientoFolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Folio");
            entity.Property(e => e.CiudadanoActaNacimientoLibro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Libro");
            entity.Property(e => e.CiudadanoActaNacimientoMunicipio)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Municipio");
            entity.Property(e => e.CiudadanoActaNacimientoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Numero");
            entity.Property(e => e.CiudadanoActaNacimientoOficialia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Oficialia");
            entity.Property(e => e.CiudadanoActaNacimientoUnida)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Unida");
            entity.Property(e => e.CiudadanoCedulaFormateada)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Cedula_Formateada");
            entity.Property(e => e.CiudadanoFechaNacimiento)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Fecha_Nacimiento");
            entity.Property(e => e.CiudadanoFechaNacimientoDti)
                .HasColumnType("smalldatetime")
                .HasColumnName("Ciudadano_Fecha_Nacimiento_DTI");
            entity.Property(e => e.CiudadanoNoDocumento)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_No_Documento");
            entity.Property(e => e.CiudadanoNoDocumentoAnterior)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_No_Documento_Anterior");
            entity.Property(e => e.CiudadanoNombreCompleto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Nombre_Completo");
            entity.Property(e => e.CiudadanoNombres)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Nombres");
            entity.Property(e => e.CiudadanoNss).HasColumnName("Ciudadano_NSS");
            entity.Property(e => e.CiudadanoNssEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Ciudadano_NSS_Estatus");
            entity.Property(e => e.CiudadanoPrimerApellido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Primer_Apellido");
            entity.Property(e => e.CiudadanoSegundoApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Segundo_Apellido");
            entity.Property(e => e.CiudadanoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Ciudadano_Sexo");
            entity.Property(e => e.DocumentoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Documento_Tipo_Codigo");
            entity.Property(e => e.EstadoCivilCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Estado_Civil_Codigo");
            entity.Property(e => e.FechaActualizacionTss)
                .HasColumnType("smalldatetime")
                .HasColumnName("Fecha_Actualizacion_TSS");
            entity.Property(e => e.NacionalidadNumero).HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.ProvinciaNumero).HasColumnName("Provincia_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("smalldatetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SangreTipoNumero).HasColumnName("Sangre_Tipo_Numero");
        });

        modelBuilder.Entity<Ciudadanot>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CIUDADANOT");

            entity.Property(e => e.CausaInhabilidadNumero).HasColumnName("Causa_Inhabilidad_Numero");
            entity.Property(e => e.CausaTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Causa_Tipo_codigo");
            entity.Property(e => e.CiudadanoActaNacimientoAnio)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Anio");
            entity.Property(e => e.CiudadanoActaNacimientoFolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Folio");
            entity.Property(e => e.CiudadanoActaNacimientoLibro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Libro");
            entity.Property(e => e.CiudadanoActaNacimientoMunicipio)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Municipio");
            entity.Property(e => e.CiudadanoActaNacimientoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Numero");
            entity.Property(e => e.CiudadanoActaNacimientoOficialia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Oficialia");
            entity.Property(e => e.CiudadanoActaNacimientoUnida)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Unida");
            entity.Property(e => e.CiudadanoCedulaFormateada)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Cedula_Formateada");
            entity.Property(e => e.CiudadanoFechaNacimiento)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Fecha_Nacimiento");
            entity.Property(e => e.CiudadanoFechaNacimientoDti)
                .HasColumnType("datetime")
                .HasColumnName("Ciudadano_Fecha_Nacimiento_DTI");
            entity.Property(e => e.CiudadanoNoDocumento)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_No_Documento");
            entity.Property(e => e.CiudadanoNoDocumentoAnterior)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_No_Documento_Anterior");
            entity.Property(e => e.CiudadanoNombreCompleto)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Nombre_Completo");
            entity.Property(e => e.CiudadanoNombres)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Nombres");
            entity.Property(e => e.CiudadanoNss).HasColumnName("Ciudadano_NSS");
            entity.Property(e => e.CiudadanoNssEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Ciudadano_NSS_Estatus");
            entity.Property(e => e.CiudadanoPrimerApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Primer_Apellido");
            entity.Property(e => e.CiudadanoSegundoApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Segundo_Apellido");
            entity.Property(e => e.CiudadanoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Ciudadano_Sexo");
            entity.Property(e => e.DocumentoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Documento_Tipo_Codigo");
            entity.Property(e => e.EstadoCivilCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Estado_Civil_Codigo");
            entity.Property(e => e.FechaActualizacionTss)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_Actualizacion_TSS");
            entity.Property(e => e.NacionalidadNumero).HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.ProvinciaNumero).HasColumnName("Provincia_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SangreTipoNumero).HasColumnName("Sangre_Tipo_Numero");
        });

        modelBuilder.Entity<CoberturasMaster>(entity =>
        {
            entity.HasKey(e => e.CoberturaNumero);

            entity.ToTable("Coberturas_Master", tb =>
                {
                    tb.HasComment("Es un catálogo que contiene las coberturas (Servicios y procedimientos de salud),  utilizado por la SISALRIL para identificar  las coberturas de servicios de salud que se prestan en los planes de salud, su fuente de datos son los sistemas internos de la ");
                    tb.HasTrigger("Coberturas_Master_Delete");
                    tb.HasTrigger("Coberturas_Master_Update");
                });

            entity.Property(e => e.CoberturaNumero)
                .ValueGeneratedNever()
                .HasComment("Numero único de cobertura que representa un  insumo, procedimiento médico, material, fármaco,  servicio  general que fue o puede ser prestado.")
                .HasColumnName("Cobertura_Numero");
            entity.Property(e => e.CoberturaAplicaPyp)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura (insumo, procedimiento médico, material, fármaco, servicio, etc.) pertenece a las actividades que se reportan a través del esquema 40 (Seguimiento a la Promoción y Prevención de Salud, Grupo 1 del PDSS).")
                .HasColumnName("Cobertura_Aplica_PYP");
            entity.Property(e => e.CoberturaAplicaTraspasosCde)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura (insumo, procedimiento médico, material, fármaco, servicio, etc.) es uno de los procedimiento o actos quirúrgicos que pueden ser reportados en una objeción de traspasos por condición de enfermedad CDE.")
                .HasColumnName("Cobertura_Aplica_Traspasos_CDE");
            entity.Property(e => e.CoberturaDescripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Descripción de la cobertura que representa un  insumo, procedimiento médico, material, fármaco,  servicio  general que fue o puede ser prestado.")
                .HasColumnName("Cobertura_Descripcion");
            entity.Property(e => e.CoberturaNivelAtencion1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 1er. Nivel de atención de salud.")
                .HasColumnName("Cobertura_Nivel_Atencion_1");
            entity.Property(e => e.CoberturaNivelAtencion2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 2do. Nivel de atención de salud.")
                .HasColumnName("Cobertura_Nivel_Atencion_2");
            entity.Property(e => e.CoberturaNivelAtencion3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 3er. Nivel de atención de salud.")
                .HasColumnName("Cobertura_Nivel_Atencion_3");
            entity.Property(e => e.CoberturaTipoNumero)
                .HasComment("Número único del tipo de cobertura, clasifica las coberturas en Actos Quirúrgicos, Consultas, Fármacos, Estudios radiológicos, Etc.")
                .HasColumnName("Cobertura_Tipo_Numero");
            entity.Property(e => e.CupsCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Es  el código de la clasificación única de procedimientos en salud utilizado por el ministerio de salud de Colombia.")
                .HasColumnName("CUPS_Codigo");
            entity.Property(e => e.PypNivelNumero)
                .HasComment("Número único del tipo de cobertura, clasifica las coberturas en Actos Quirúrgicos, Consultas, Fármacos, Estudios radiológicos, Etc.")
                .HasColumnName("PYP_Nivel_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CoberturaTipoNumeroNavigation).WithMany(p => p.CoberturasMasters)
                .HasForeignKey(d => d.CoberturaTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Coberturas_Master_Coberturas_Tipo_Cata");

            entity.HasOne(d => d.CupsCodigoNavigation).WithMany(p => p.CoberturasMasters)
                .HasForeignKey(d => d.CupsCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Coberturas_Master_Comunes_CUPS_Cata");

            entity.HasOne(d => d.PypNivelNumeroNavigation).WithMany(p => p.CoberturasMasters)
                .HasForeignKey(d => d.PypNivelNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Coberturas_Master_Coberturas_PYP_Nivel_Cata");
        });

        modelBuilder.Entity<CoberturasMaster01022018>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Coberturas_Master_01022018");

            entity.Property(e => e.CoberturaAplicaPyp)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Aplica_PYP");
            entity.Property(e => e.CoberturaAplicaTraspasosCde)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Aplica_Traspasos_CDE");
            entity.Property(e => e.CoberturaDescripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Cobertura_Descripcion");
            entity.Property(e => e.CoberturaNivelAtencion1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Nivel_Atencion_1");
            entity.Property(e => e.CoberturaNivelAtencion2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Nivel_Atencion_2");
            entity.Property(e => e.CoberturaNivelAtencion3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Nivel_Atencion_3");
            entity.Property(e => e.CoberturaNumero).HasColumnName("Cobertura_Numero");
            entity.Property(e => e.CoberturaTipoNumero).HasColumnName("Cobertura_Tipo_Numero");
            entity.Property(e => e.CupsCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CUPS_Codigo");
            entity.Property(e => e.PypNivelNumero).HasColumnName("PYP_Nivel_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CoberturasMaster08122017>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Coberturas_Master_08122017");

            entity.Property(e => e.CoberturaAplicaPyp)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Aplica_PYP");
            entity.Property(e => e.CoberturaAplicaTraspasosCde)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Aplica_Traspasos_CDE");
            entity.Property(e => e.CoberturaDescripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Cobertura_Descripcion");
            entity.Property(e => e.CoberturaNivelAtencion1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Nivel_Atencion_1");
            entity.Property(e => e.CoberturaNivelAtencion2)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Nivel_Atencion_2");
            entity.Property(e => e.CoberturaNivelAtencion3)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Nivel_Atencion_3");
            entity.Property(e => e.CoberturaNumero).HasColumnName("Cobertura_Numero");
            entity.Property(e => e.CoberturaTipoNumero).HasColumnName("Cobertura_Tipo_Numero");
            entity.Property(e => e.CupsCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CUPS_Codigo");
            entity.Property(e => e.PypNivelNumero).HasColumnName("PYP_Nivel_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CoberturasPypNivelCatum>(entity =>
        {
            entity.HasKey(e => e.PypNivelNumero);

            entity.ToTable("Coberturas_PYP_Nivel_Cata");

            entity.Property(e => e.PypNivelNumero)
                .HasComment("Número único del tipo de cobertura, clasifica las coberturas en Actos Quirúrgicos, Consultas, Fármacos, Estudios radiológicos, Etc.")
                .HasColumnName("PYP_Nivel_Numero");
            entity.Property(e => e.PypNivelDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de cobertura, clasifica las coberturas en Actos Quirúrgicos, Consultas, Fármacos, Estudios radiológicos, Etc.")
                .HasColumnName("PYP_Nivel_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CoberturasTecnicasTran>(entity =>
        {
            entity.HasKey(e => new { e.CoberturaNumero, e.CoberturaTecnicaSecuencia });

            entity.ToTable("Coberturas_Tecnicas_Trans", tb =>
                {
                    tb.HasTrigger("Coberturas_Tecnicas_Trans_Delete");
                    tb.HasTrigger("Coberturas_Tecnicas_Trans_Update");
                });

            entity.Property(e => e.CoberturaNumero).HasColumnName("Cobertura_Numero");
            entity.Property(e => e.CoberturaTecnicaSecuencia).HasColumnName("Cobertura_Tecnica_Secuencia");
            entity.Property(e => e.CoberturaTecnicaDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Cobertura_Tecnica_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CoberturaNumeroNavigation).WithMany(p => p.CoberturasTecnicasTrans)
                .HasForeignKey(d => d.CoberturaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Coberturas_Tecnicas_Trans_Coberturas_Master");
        });

        modelBuilder.Entity<CoberturasTipoCata99>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Coberturas_Tipo_Cata99");

            entity.Property(e => e.CoberturaTipoCups)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Tipo_Cups");
            entity.Property(e => e.CoberturaTipoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Cobertura_Tipo_Descripcion");
            entity.Property(e => e.CoberturaTipoNumero).HasColumnName("Cobertura_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<CoberturasTipoCatum>(entity =>
        {
            entity.HasKey(e => e.CoberturaTipoNumero);

            entity.ToTable("Coberturas_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene tipo de coberturas (Servicios y procedimientos de salud),  utilizado por la SISALRIL para clasificar las coberturas de los planes de salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.CoberturaTipoNumero)
                .HasComment("Número único del tipo de cobertura, clasifica las coberturas en Actos Quirúrgicos, Consultas, Fármacos, Estudios radiológicos, Etc.")
                .HasColumnName("Cobertura_Tipo_Numero");
            entity.Property(e => e.CoberturaTipoCups)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Nos indica el tipo de  cobertura (insumo, procedimiento médico, material, fármaco, servicio, etc.) deben estar relacionadas a un CUPS ")
                .HasColumnName("Cobertura_Tipo_Cups");
            entity.Property(e => e.CoberturaTipoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de cobertura, clasifica las coberturas en Actos Quirúrgicos, Consultas, Fármacos, Estudios radiológicos, Etc.")
                .HasColumnName("Cobertura_Tipo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ComunesCie09Catum>(entity =>
        {
            entity.HasKey(e => e.Cie09Codigo).HasName("PK_CIE09_Cata");

            entity.ToTable("Comunes_CIE09_Cata", tb => tb.HasComment("Es un catálogo que contiene el código internacional de enfermedades  del tomo de los procedimientos  (CIE9) de la OPS OMS, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.Cie09Codigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Es un código que representa un procedimiento de salud y pertenece al código de la Clasificación Internacional de las enfermedades (CIE) , esta clasificación es de la Organización Mundial de la Salud (OMS).")
                .HasColumnName("CIE09_Codigo");
            entity.Property(e => e.Cie09Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Es la descripción de un procedimiento de salud y pertenece al código de la Clasificación Internacional de las enfermedades (CIE) , esta clasificación es de la Organización Mundial de la Salud (OMS).")
                .HasColumnName("CIE09_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ComunesCie10Catum>(entity =>
        {
            entity.HasKey(e => e.Cie10Codigo).HasName("PK_CIE10_Cata");

            entity.ToTable("Comunes_CIE10_Cata", tb => tb.HasComment("Es un catálogo que contiene el código internacional de enfermedades (diagnósticos) de la OPS OMS, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.Cie10Codigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Es el código de una enfermedad o padecimiento y pertenece al código de la Clasificación Internacional de las enfermedades (CIE) , esta clasificación es de la Organización Mundial de la Salud (OMS).")
                .HasColumnName("CIE10_Codigo");
            entity.Property(e => e.Cie10Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Es la descripción de una enfermedad o padecimiento y pertenece al código de la Clasificación Internacional de las enfermedades (CIE) , esta clasificación es de la Organización Mundial de la Salud (OMS).")
                .HasColumnName("CIE10_Descripcion");
            entity.Property(e => e.Cie10Grupo)
                .HasComment("Código de un grupo de enfermedades o padecimientos, pertenece al código de la Clasificación Internacional de las enfermedades (CIE) , esta clasificación es de la Organización Mundial de la Salud (OMS).")
                .HasColumnName("CIE10_Grupo");
            entity.Property(e => e.Cie10Seleccionado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica con S ó N, si la enfermedades o padecimientos del CIE10 en este catálogo fue seleccionada o no para el Sistema de Subsidio de enfermedad común")
                .HasColumnName("CIE10_Seleccionado");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ComunesCie10DiagnosticosCatum>(entity =>
        {
            entity.HasKey(e => e.Cie10DiagnosticoCodigo);

            entity.ToTable("Comunes_CIE10_Diagnosticos_Cata");

            entity.Property(e => e.Cie10DiagnosticoCodigo)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Diagnostico_Codigo");
            entity.Property(e => e.Cie10DiagnosticoCodigoSimon)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CIE10_Diagnostico_Codigo_SIMON");
            entity.Property(e => e.Cie10DiagnosticoDescripcion)
                .HasMaxLength(600)
                .IsUnicode(false)
                .HasColumnName("CIE10_Diagnostico_Descripcion");
            entity.Property(e => e.Cie10DiagnosticoGrupoCodigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CIE10_Diagnostico_Grupo_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.Cie10DiagnosticoGrupoCodigoNavigation).WithMany(p => p.ComunesCie10DiagnosticosCata)
                .HasForeignKey(d => d.Cie10DiagnosticoGrupoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comunes_CIE10_Diagnosticos_Cata_Comunes_CIE10_Diagnostico_Grupo");
        });

        modelBuilder.Entity<ComunesCie10DiagnosticosGruposCatum>(entity =>
        {
            entity.HasKey(e => e.Cie10DiagnosticoGrupoCodigo).HasName("PK_Comunes_CIE10_Diagnostico_Grupo");

            entity.ToTable("Comunes_CIE10_Diagnosticos_Grupos_Cata");

            entity.Property(e => e.Cie10DiagnosticoGrupoCodigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("CIE10_Diagnostico_Grupo_Codigo");
            entity.Property(e => e.Cie10DiagnosticoCapitulo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("CIE10_Diagnostico_Capitulo");
            entity.Property(e => e.Cie10DiagnosticoCapituloDescripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CIE10_Diagnostico_Capitulo_Descripcion");
            entity.Property(e => e.Cie10DiagnosticoClasificacionCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CIE10_Diagnostico_Clasificacion_Codigo");
            entity.Property(e => e.Cie10DiagnosticoClasificacionDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CIE10_Diagnostico_Clasificacion_Descripcion");
            entity.Property(e => e.Cie10DiagnosticoGrupoDescripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("CIE10_Diagnostico_Grupo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ComunesCiioCatum>(entity =>
        {
            entity.HasKey(e => e.CiioCodigo).HasName("PK_CIUO_Cata");

            entity.ToTable("Comunes_CIIO_Cata", tb => tb.HasComment("Es un catálogo que contiene el código de identificación internacional de ocupación de la OIT, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.CiioCodigo)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasComment("Código de ocupación del trabajador, según clasificación internacional de ocupaciones (CIIO).")
                .HasColumnName("CIIO_Codigo");
            entity.Property(e => e.CiioDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Descripción de la ocupación del trabajador, según clasificación internacional de ocupaciones (CIIO).")
                .HasColumnName("CIIO_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ComunesCiiuClasesCatum>(entity =>
        {
            entity.HasKey(e => e.CiiuClaseCodigo);

            entity.ToTable("Comunes_CIIU_Clases_Cata", tb => tb.HasComment("Es un catálogo con los clasificaciones de los CIIU, código industrial internacional unificado, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.CiiuClaseCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código de la clase a la que corresponde el código CIIU clasificación internacional industrial uniforme de la división de estadísticas de la ONU, dentro de catálogo de actividades económicas con la que se clasifican los empleadores.")
                .HasColumnName("CIIU_Clase_Codigo");
            entity.Property(e => e.CiiuClaseDescripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Descripción de la clase a la que pertenece el código CIIU,  clasificación internacional industrial uniforme de la división de estadísticas de la ONU, dentro de catálogo de actividades económicas con la que se clasifican los empleadores.")
                .HasColumnName("CIIU_Clase_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ComunesCiiuGruposCatum>(entity =>
        {
            entity.HasKey(e => e.CiiuGrupoNumero);

            entity.ToTable("Comunes_CIIU_Grupos_Cata", tb => tb.HasComment("Es un catálogo con los grupos de los CIIU, código industrial internacional unificado, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.CiiuGrupoNumero)
                .HasComment("Código del grupo al que pertenece el código CIIU,  clasificación internacional industrial uniforme de la división de estadísticas de la ONU, dentro de catálogo de actividades económicas con la que se clasifican los empleadores.")
                .HasColumnName("CIIU_Grupo_Numero");
            entity.Property(e => e.CiiuGrupoDescripcion)
                .HasMaxLength(140)
                .IsUnicode(false)
                .HasComment("Descripción del grupo al que pertenece el código CIIU,  clasificación internacional industrial uniforme de la división de estadísticas de la ONU, dentro de catálogo de actividades económicas con la que se clasifican los empleadores.")
                .HasColumnName("CIIU_Grupo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ComunesCiudadesCatum>(entity =>
        {
            entity.HasKey(e => e.CiudadMunicipioNumero);

            entity.ToTable("Comunes_Ciudades_Cata", tb => tb.HasComment("Es un catálogo con los detalles de las ciudades de la República Dominicana, según codificación de la JCE, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.CiudadMunicipioNumero).HasColumnName("Ciudad_Municipio_Numero");
            entity.Property(e => e.CiudadMunicipioNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Ciudad_Municipio_Nombre");
            entity.Property(e => e.CiudadNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre de la ciudad")
                .HasColumnName("Ciudad_Nombre");
            entity.Property(e => e.CiudadNumero)
                .HasComment("Número único que identifica la ciudad")
                .HasColumnName("Ciudad_Numero");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.MunicipioNumeroNavigation).WithMany(p => p.ComunesCiudadesCata)
                .HasForeignKey(d => d.MunicipioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Ciudades_Cata_Municipios_Cata");
        });

        modelBuilder.Entity<ComunesCupsCatum>(entity =>
        {
            entity.HasKey(e => e.CupsCodigo).HasName("PK_CUPS_Cata");

            entity.ToTable("Comunes_CUPS_Cata", tb => tb.HasComment("Es un catálogo que contiene los detalles de los códigos únicos de procedimientos de salud (CUPS del ministerios de salud de Colombia), se relacionan con las coberturas de servicios de  salud,  fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.CupsCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Es  el código de la clasificación única de procedimientos en salud utilizado por el ministerio de salud de Colombia.")
                .HasColumnName("CUPS_Codigo");
            entity.Property(e => e.CupsDetalle)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Es la descripción del código de la clasificación única de procedimientos en salud utilizado por el ministerio de salud de Colombia.")
                .HasColumnName("CUPS_Detalle");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ComunesCupsCie09Catum>(entity =>
        {
            entity.HasKey(e => new { e.CupsCodigo, e.Cie09Codigo }).HasName("PK_CUPS_CIE09_Cata");

            entity.ToTable("Comunes_CUPS_CIE09_Cata", tb => tb.HasComment("Es un catálogo que contiene el código internacional de enfermedades  del tomo de los procedimientos  (CIE9) de la OPS OMS y su relación con los códigos únicos de procedimiento de salud (CUPS), su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.CupsCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Es  el código de la clasificación única de procedimientos en salud utilizado por el ministerio de salud de Colombia.")
                .HasColumnName("CUPS_Codigo");
            entity.Property(e => e.Cie09Codigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Es un código que representa un procedimiento de salud y pertenece al código de la Clasificación Internacional de las enfermedades (CIE) , esta clasificación es de la Organización Mundial de la Salud (OMS).")
                .HasColumnName("CIE09_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.Cie09CodigoNavigation).WithMany(p => p.ComunesCupsCie09Cata)
                .HasForeignKey(d => d.Cie09Codigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CUPS_CIE09_Cata_CIE09_Cata");

            entity.HasOne(d => d.CupsCodigoNavigation).WithMany(p => p.ComunesCupsCie09Cata)
                .HasForeignKey(d => d.CupsCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CUPS_CIE09_Cata_CUPS_Cata");
        });

        modelBuilder.Entity<ComunesDocumentosMaster>(entity =>
        {
            entity.HasKey(e => e.DocumentoCodigo).HasName("PK_Documentos_Master");

            entity.ToTable("Comunes_Documentos_Master", tb => tb.HasComment("Es un maestro que contiene las informaciones de los documentos para ser relacionados con diferentes tablas del sistema como prueba documental o certificación del registro,  su fuente de datos es la tabla de documentos del sistema ARCHI."));

            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.DocumentoAsunto)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasComment("Es el asunto principal en el contenido del documento.")
                .HasColumnName("Documento_Asunto");
            entity.Property(e => e.DocumentoRuta)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("Es la ruta del servidor y carpeta donde se encuentra almacenado el documento.")
                .HasColumnName("Documento_Ruta");
            entity.Property(e => e.DocumentoTema)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Es el detalle del tema con el cual está relacionado el documento.")
                .HasColumnName("Documento_Tema");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ComunesEmpresasTipoCatum>(entity =>
        {
            entity.HasKey(e => e.EmpresaTipoCodigo);

            entity.ToTable("Comunes_Empresas_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene los tipos de empresas (Públicas, Privadas, etc.) según estándar de la TSS, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.EmpresaTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código que representa el Tipo de empresa según el sector al que pertenece (Pública centralizada, Pública No Centralizada, Privada y Mixta).")
                .HasColumnName("Empresa_Tipo_Codigo");
            entity.Property(e => e.EmpresaTipoCategoria)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('Privada')")
                .HasComment("Clasifica las empresas en de Autogestión,  Mixtas, Públicas y Privadas.")
                .HasColumnName("Empresa_Tipo_Categoria");
            entity.Property(e => e.EmpresaTipoDescripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Descripción del Tipo de empresa según el sector al que pertenece (Pública centralizada, Pública No Centralizada, Privada y Mixta).")
                .HasColumnName("Empresa_Tipo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ComunesFechasMaster>(entity =>
        {
            entity.HasKey(e => e.FechaNumero).HasName("PK_Dim_Tiempo");

            entity.ToTable("Comunes_Fechas_Master");

            entity.Property(e => e.FechaNumero)
                .ValueGeneratedNever()
                .HasColumnName("Fecha_Numero");
            entity.Property(e => e.DiaAnio).HasColumnName("Dia_Anio");
            entity.Property(e => e.DiaFeriado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Dia_Feriado");
            entity.Property(e => e.DiaSemana).HasColumnName("Dia_Semana");
            entity.Property(e => e.DiaSemanaLetra)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Dia_Semana_Letra");
            entity.Property(e => e.DiaSemanaLetraCorto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Dia_Semana_Letra_Corto");
            entity.Property(e => e.Fecha).HasColumnType("datetime");
            entity.Property(e => e.FechaLetra)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Fecha_Letra");
            entity.Property(e => e.MesLetra)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Mes_Letra");
            entity.Property(e => e.MesLetraCorto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Mes_Letra_Corto");
            entity.Property(e => e.PeriodoNumero).HasColumnName("Periodo_Numero");
        });

        modelBuilder.Entity<ComunesMesesCatum>(entity =>
        {
            entity.HasKey(e => e.MesNumero).HasName("PK_Meses_Cata");

            entity.ToTable("Comunes_Meses_Cata", tb => tb.HasComment("Es un catálogo con los detalles de los meses del año, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.MesNumero)
                .HasComment("Es el número único de 1 a 12 que representa el mes de una fecha o período.")
                .HasColumnName("Mes_Numero");
            entity.Property(e => e.CuatrimestreNumero)
                .HasComment("Número del cuatrimestre dentro del año (1 a 3) al cual corresponde la Fecha o el Mes del hecho o la situación reportada.")
                .HasColumnName("Cuatrimestre_Numero");
            entity.Property(e => e.DiaMaximo)
                .HasComment("Día máximo al cual corresponde la Fecha o el Mes del hecho o la situación reportada.")
                .HasColumnName("Dia_Maximo");
            entity.Property(e => e.DiaMinimo)
                .HasComment("Día mínimo al cual corresponde la Fecha o el Mes del hecho o la situación reportada.")
                .HasColumnName("Dia_Minimo");
            entity.Property(e => e.MesLetra)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Es el nombre completo del mes. (Enero, Febrero, Marzo..., Diciembre).")
                .HasColumnName("Mes_Letra");
            entity.Property(e => e.MesLetraCorto)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Son las primeras tres letras del nombre del mes. (Ene, Feb, Mar... , Dic.).")
                .HasColumnName("Mes_Letra_Corto");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TrimestreNumero)
                .HasComment("Corresponde al período de tres meses de un año")
                .HasColumnName("Trimestre_Numero");

            entity.HasOne(d => d.TrimestreNumeroNavigation).WithMany(p => p.ComunesMesesCata)
                .HasForeignKey(d => d.TrimestreNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Meses_Cata_Trimestres_Cata");
        });

        modelBuilder.Entity<ComunesMunicipiosCatum>(entity =>
        {
            entity.HasKey(e => e.MunicipioNumero).HasName("PK_Municipios_Cata");

            entity.ToTable("Comunes_Municipios_Cata", tb => tb.HasComment("Es un catálogo de los municipios de la República Dominicana, según codificación de la JCS, su fuente de alimentación son las vistas estadísticas de UNIPAGO."));

            entity.Property(e => e.MunicipioNumero)
                .ValueGeneratedNever()
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.MunicipioNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Nombre");
            entity.Property(e => e.MunicipioProvinciaNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('Pendiente')")
                .HasColumnName("Municipio_Provincia_Nombre");
            entity.Property(e => e.ProvinciaNumero)
                .HasComment("Número único de la provincia según catálogo de la JCE.  (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Provincia_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ProvinciaNumeroNavigation).WithMany(p => p.ComunesMunicipiosCata)
                .HasForeignKey(d => d.ProvinciaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Municipios_Cata_Provincias_Cata");
        });

        modelBuilder.Entity<ComunesNivelesAcademicosCatum>(entity =>
        {
            entity.HasKey(e => e.NivelAcademicoNumero);

            entity.ToTable("Comunes_Niveles_Academicos_Cata", tb => tb.HasComment("Es un  catálogo donde se registran los detalles de los niveles académicos que puede presentar una persona, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.NivelAcademicoNumero)
                .HasComment("Número único que identifica el nivel académico de la persona.")
                .HasColumnName("Nivel_Academico_Numero");
            entity.Property(e => e.NivelAcademicoDescripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Descripción del nivel académico de la persona.")
                .HasColumnName("Nivel_Academico_Descripcion");
            entity.Property(e => e.NivelAcademicoPromotorTmp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Este campo es temporal hasta se realice al pase de promotores a la BDD Simon.")
                .HasColumnName("Nivel_Academico_Promotor_TMP");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ComunesPalabrasCatum>(entity =>
        {
            entity.HasKey(e => e.PalabraNumero);

            entity.ToTable("Comunes_Palabras_Cata");

            entity.Property(e => e.PalabraNumero)
                .ValueGeneratedNever()
                .HasColumnName("Palabra_Numero");
            entity.Property(e => e.PalabraDetalle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Palabra_Detalle");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ComunesPalabrasDiccionarioCatum>(entity =>
        {
            entity.HasKey(e => e.PalabraDetalle).HasName("PK_Comunes_Diccionario_Cata");

            entity.ToTable("Comunes_Palabras_Diccionario_Cata");

            entity.Property(e => e.PalabraDetalle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Palabra_Detalle");
            entity.Property(e => e.PalabraNumero).HasColumnName("Palabra_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PalabraNumeroNavigation).WithMany(p => p.ComunesPalabrasDiccionarioCata)
                .HasForeignKey(d => d.PalabraNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Comunes_Diccionario_Cata_Comunes_Palabras_Cata");
        });

        modelBuilder.Entity<ComunesPalabrasRechazadasCatum>(entity =>
        {
            entity.HasKey(e => e.PalabraDetalle);

            entity.ToTable("Comunes_Palabras_Rechazadas_Cata");

            entity.Property(e => e.PalabraDetalle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Palabra_Detalle");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(128)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ComunesPalabrasTempo>(entity =>
        {
            entity.HasKey(e => e.PalabraDetalle);

            entity.ToTable("Comunes_Palabras_Tempo");

            entity.Property(e => e.PalabraDetalle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Palabra_Detalle");
            entity.Property(e => e.PalabraAplica)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Palabra_Aplica");
            entity.Property(e => e.PalabraNumero).HasColumnName("Palabra_Numero");
            entity.Property(e => e.PalabraSecuencia)
                .ValueGeneratedOnAdd()
                .HasColumnName("Palabra_Secuencia");
            entity.Property(e => e.PalabraSinomimo).HasColumnName("Palabra_Sinomimo");
        });

        modelBuilder.Entity<ComunesPeriodosMaster>(entity =>
        {
            entity.HasKey(e => e.PeriodoFactura);

            entity.ToTable("Comunes_Periodos_Master", tb => tb.HasComment("Es un maestro donde se registran todo los periodos de facturas con todas las tasas, topes, salarios cotizables, resoluciones y otras informaciones relacionadas con el SFS y el SRL, su fuente de datos los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PeriodoFactura)
                .ValueGeneratedNever()
                .HasComment("Es el año y mes correspondiente al período de factura,  este período es en él se factura (Generación de NP) a los empleadores basado en sus nóminas depositadas en las TSS.")
                .HasColumnName("Periodo_Factura");
            entity.Property(e => e.FinancieroCantidadSalario)
                .HasDefaultValueSql("((4000))")
                .HasComment("Cantidad de salarios a contemplar en un mes para calcular el margen de solvencia mínimo de las ARS ")
                .HasColumnName("Financiero_Cantidad_Salario");
            entity.Property(e => e.FinancieroPorcentajeExcesoGastoAmd)
                .HasDefaultValueSql("((0))")
                .HasComment("Porcentaje máximo de los ingresos que pueden utilizar las ARS en sus gastos administrativos ")
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("Financiero_Porcentaje_Exceso_Gasto_Amd");
            entity.Property(e => e.FinancieroPublicacionEstados)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Financiero_Publicacion_Estados");
            entity.Property(e => e.FinancieroResoluciones)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValueSql("('Res.')")
                .HasComment("Para detallar las resoluciones que aplican a la presentación y seguimiento fe los estados financieros de las ARS")
                .HasColumnName("Financiero_Resoluciones");
            entity.Property(e => e.PeriodoDispersion)
                .HasComment("Es el año correspondiente al período en el cual se debe dispersar la cápita a las ARS, este período es equivalente al período de cobertura.  El período de cobertura es el mes inmediatamente  después al periodo de factura.")
                .HasColumnName("Periodo_Dispersion");
            entity.Property(e => e.PeriodoDispersionAnio)
                .HasComment("Es el año correspondiente al período en el cual se debe dispersar la cápita a las ARS, este período es equivalente al período de cobertura.  El período de cobertura es el mes inmediatamente  después al periodo de factura.")
                .HasColumnName("Periodo_Dispersion_Anio");
            entity.Property(e => e.PeriodoDispersionMes)
                .HasComment("Es el mes correspondiente al período en el cual se debe dispersar la cápita a las ARS, este período es equivalente al período de cobertura.  El período de cobertura es el mes inmediatamente  después al periodo de factura.")
                .HasColumnName("Periodo_Dispersion_Mes");
            entity.Property(e => e.PeriodoFacturaAnio)
                .HasComment("Es el año correspondiente al período de factura,  este período es en él se factura (Generación de NP) a los empleadores basado en sus nóminas depositadas en las TSS.")
                .HasColumnName("Periodo_Factura_Anio");
            entity.Property(e => e.PeriodoFacturaCuatrimestre)
                .HasComment("Es el cuatrimestre correspondiente mes del período de factura,  este período es en él que se factura (Generación de NP) a los empleadores basado en sus nóminas depositadas en las TSS.")
                .HasColumnName("Periodo_Factura_Cuatrimestre");
            entity.Property(e => e.PeriodoFacturaMes)
                .HasComment("Es el mes correspondiente al período de factura,  este período es en él se factura (Generación de NP) a los empleadores basado en sus nóminas depositadas en las TSS.")
                .HasColumnName("Periodo_Factura_Mes");
            entity.Property(e => e.PeriodoFacturaTrimestre)
                .HasComment("Es el trimestre correspondiente mes del período de factura,  este período es en él que se factura (Generación de NP) a los empleadores basado en sus nóminas depositadas en las TSS.")
                .HasColumnName("Periodo_Factura_Trimestre");
            entity.Property(e => e.PeriodoFormateado)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasComment("Es el año y mes correspondiente al período de factura separado con un guion (AAAA-MM), este período es en él que se factura (Generación de NP) a los empleadores basado en sus nóminas depositadas en las TSS.")
                .HasColumnName("Periodo_Formateado");
            entity.Property(e => e.PeriodoSecuencia)
                .ValueGeneratedOnAdd()
                .HasColumnName("Periodo_Secuencia");
            entity.Property(e => e.SfsAporteEmpleador)
                .HasComment("Es la tasa que se aplica al salario en nomina del trabajador para el aporte correspondiente al empleador,   para aportar las cotizaciones al SFS vía la TSS.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Aporte_Empleador");
            entity.Property(e => e.SfsAporteTrabajador)
                .HasComment("Es la tasa que se aplica al salario en nomina del trabajador para el aporte correspondiente al mismo trabajador,  para aportar las cotizaciones al SFS vía la TSS.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Aporte_Trabajador");
            entity.Property(e => e.SfsCapitaAfiliado)
                .HasComment("Es el monto de cápita que deberá se dispersado por cada afiliado a las ARS por el SFS régimen contributivo para el período de cobertura correspondiente.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Capita_Afiliado");
            entity.Property(e => e.SfsCapitaAfiliadoAdicional)
                .HasComment("Es el monto de cápita que deberá se dispersado por cada afiliado Adicional a las ARS para el período de cobertura correspondiente.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Capita_Afiliado_Adicional");
            entity.Property(e => e.SfsDispersionComisionSisalril)
                .HasComment("Es la tasa que se aplica al aporte realizado por el trabajador  al SFS para el fondo de la Comisión  de la SISALRIL, de donde se toman los recursos para la los gastos de las operaciones de la SISALRIL.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Dispersion_Comision_Sisalril");
            entity.Property(e => e.SfsDispersionCuidadoSalud)
                .HasComment("Es la tasa que se aplica al aporte realizado por el trabajador  al SFS para el fondo del cuidado de la salud de los afiliados, de donde se toman los recursos para la dispersión de las cápitas a las ARS")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Dispersion_Cuidado_Salud");
            entity.Property(e => e.SfsDispersionEstancias)
                .HasComment("Es la tasa que se aplica al aporte realizado por el trabajador  al SFS para el fondo de las Estancias Infantiles.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Dispersion_Estancias");
            entity.Property(e => e.SfsDispersionSubsidio)
                .HasComment("Es la tasa que se aplica al aporte realizado por el trabajador  al SFS para el fondo de los Subsidios, de donde se toman los recursos para la entrega de los beneficios de subsidios por maternidad, lactancia y enfermedad común.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Dispersion_Subsidio");
            entity.Property(e => e.SfsNotasTecnicas)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasComment("Son notas de proceso, normativas  o aclaraciones que incidieron en los procesos de recaudo y dispersión del Seguro Familiar de Salud para ese periodo específico.")
                .HasColumnName("Sfs_Notas_Tecnicas");
            entity.Property(e => e.SfsPlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Código único de la versión del Plan de servicios de Salud (PDSS) al cual pertenece el Subgrupo.")
                .HasColumnName("Sfs_Plan_Numero");
            entity.Property(e => e.SfsResoluciones)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Son las resoluciones que regulan los procesos de recaudo y dispersión del Seguro Familiar de Salud para ese periodo específico.")
                .HasColumnName("Sfs_Resoluciones");
            entity.Property(e => e.SfsSalarioCotizable)
                .HasComment("Es el salario nacional oficial definido por el Consejo Nacional de la Seguridad Social para las cotizaciones ")
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Sfs_Salario_Cotizable");
            entity.Property(e => e.SfsSalarioTope)
                .HasComment("Es el salario máximo hasta  el cual debe cotizar un trabajador  para el SFS. Se obtiene de multiplicar el Salario Cotizables por Salarios Cotizables Tope.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Salario_Tope");
            entity.Property(e => e.SfsSalariosCotizableTope)
                .HasComment("Es la cantidad de salarios (Salario Nacional Oficial) definido por el Consejo Nacional de la Seguridad Social para las cotizaciones del SFS, con el cual se calcula el salario tope de cotización. ")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Salarios_Cotizable_Tope");
            entity.Property(e => e.SfsSubCapitaAfiliado)
                .HasComment("Es el monto de cápita que deberá se dispersado por cada afiliado a las ARS por el SFS régimen subsidiado para el período de cobertura correspondiente.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Sub_Capita_Afiliado");
            entity.Property(e => e.SfsSubNotasTecnicas)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasComment("Son notas de proceso, normativas  o aclaraciones que incidieron en los procesos de recaudo y dispersión del Seguro Familiar de Salud para ese periodo específico.")
                .HasColumnName("Sfs_Sub_Notas_Tecnicas");
            entity.Property(e => e.SfsSubResoluciones)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasComment("Son las resoluciones que regulan los procesos de recaudo y dispersión del Seguro Familiar de Salud para ese periodo específico.")
                .HasColumnName("Sfs_Sub_Resoluciones");
            entity.Property(e => e.SrlAporteEmpleador)
                .HasComment("Es la tasa que se aplica al salario en nomina del trabajador para el aporte correspondiente al empleador,   para aportar las cotizaciones al SRL vía la TSS.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Aporte_Empleador");
            entity.Property(e => e.SrlAporteTrabajador)
                .HasComment("Es la tasa que se aplica al salario en nomina del trabajador para el aporte correspondiente al mismo trabajador,  para aportar las cotizaciones al SRL vía la TSS.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Aporte_Trabajador");
            entity.Property(e => e.SrlCategoriaRiesgoI)
                .HasComment("Es la tasa para la categoría de riesgo I que se aplica al salario en nomina del trabajador para el aporte correspondiente al mismo trabajador, para aportar las cotizaciones al SRL.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Categoria_Riesgo_I");
            entity.Property(e => e.SrlCategoriaRiesgoIi)
                .HasComment("Es la tasa para la categoría de riesgo II que se aplica al salario en nomina del trabajador para el aporte correspondiente al mismo trabajador, para aportar las cotizaciones al SRL.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Categoria_Riesgo_II");
            entity.Property(e => e.SrlCategoriaRiesgoIii)
                .HasComment("Es la tasa para la categoría de riesgo III que se aplica al salario en nomina del trabajador para el aporte correspondiente al mismo trabajador, para aportar las cotizaciones al SRL.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Categoria_Riesgo_III");
            entity.Property(e => e.SrlCategoriaRiesgoIv)
                .HasComment("Es la tasa para la categoría de riesgo IV que se aplica al salario en nomina del trabajador para el aporte correspondiente al mismo trabajador, para aportar las cotizaciones al SRL.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Categoria_Riesgo_IV");
            entity.Property(e => e.SrlDispersionArl)
                .HasComment("Es la tasa que se aplica al aporte realizado por el trabajador  al SRL para el  fondo del cuidado de la salud y beneficios monetarios de los trabajadores afiliados, de donde se toman los recursos para la dispersión a las ARL.  ")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Dispersion_Arl");
            entity.Property(e => e.SrlDispersionSisalril)
                .HasComment("Es la tasa que se aplica al aporte realizado por el trabajador  al SRL para el fondo de la Comisión  de la SISALRIL, de donde se toman los recursos para la los gastos de las operaciones  de supervisión del SRL de la SISALRIL.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Dispersion_Sisalril");
            entity.Property(e => e.SrlResoluciones)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Son las resoluciones que regulan los procesos de recaudo y dispersión del Seguro de Riesgos Laborales para ese periodo específico.")
                .HasColumnName("Srl_Resoluciones");
            entity.Property(e => e.SrlSalarioCotizable)
                .HasComment("Es el salario nacional oficial definido por el Consejo Nacional de la Seguridad Social para las cotizaciones ")
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Srl_Salario_Cotizable");
            entity.Property(e => e.SrlSalarioTope)
                .HasComment("Es el salario máximo hasta  el cual debe cotizar un trabajador para el SRL. Se obtiene de multiplicar el Salario Cotizables por Salarios Cotizables Tope.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Salario_Tope");
            entity.Property(e => e.SrlSalariosCotizableTope)
                .HasComment("Es la cantidad de salarios (Salario Nacional Oficial) definido por el Consejo Nacional de la Seguridad Social para las cotizaciones del SRL, con el cual se calcula el salario tope de cotización. ")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Salarios_Cotizable_Tope");
        });

        modelBuilder.Entity<ComunesPeriodosMasterE>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Comunes_Periodos_MasterES");

            entity.Property(e => e.FinancieroCantidadSalario).HasColumnName("Financiero_Cantidad_Salario");
            entity.Property(e => e.FinancieroPorcentajeExcesoGastoAmd)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("Financiero_Porcentaje_Exceso_Gasto_Amd");
            entity.Property(e => e.FinancieroPublicacionEstados)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Financiero_Publicacion_Estados");
            entity.Property(e => e.FinancieroResoluciones)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Financiero_Resoluciones");
            entity.Property(e => e.FonamatCapitaAfiliado)
                .HasColumnType("decimal(7, 2)")
                .HasColumnName("Fonamat_Capita_Afiliado");
            entity.Property(e => e.PeriodoDispersion).HasColumnName("Periodo_Dispersion");
            entity.Property(e => e.PeriodoDispersionAnio).HasColumnName("Periodo_Dispersion_Anio");
            entity.Property(e => e.PeriodoDispersionMes).HasColumnName("Periodo_Dispersion_Mes");
            entity.Property(e => e.PeriodoFactura).HasColumnName("Periodo_Factura");
            entity.Property(e => e.PeriodoFacturaAnio).HasColumnName("Periodo_Factura_Anio");
            entity.Property(e => e.PeriodoFacturaCuatrimestre).HasColumnName("Periodo_Factura_Cuatrimestre");
            entity.Property(e => e.PeriodoFacturaMes).HasColumnName("Periodo_Factura_Mes");
            entity.Property(e => e.PeriodoFacturaTrimestre).HasColumnName("Periodo_Factura_Trimestre");
            entity.Property(e => e.PeriodoFormateado)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Periodo_Formateado");
            entity.Property(e => e.PeriodoSecuencia).HasColumnName("Periodo_Secuencia");
            entity.Property(e => e.SfsAporteEmpleador)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Aporte_Empleador");
            entity.Property(e => e.SfsAporteTrabajador)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Aporte_Trabajador");
            entity.Property(e => e.SfsCapitaAfiliado)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Capita_Afiliado");
            entity.Property(e => e.SfsCapitaAfiliadoAdicional)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Capita_Afiliado_Adicional");
            entity.Property(e => e.SfsDispersionComisionSisalril)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Dispersion_Comision_Sisalril");
            entity.Property(e => e.SfsDispersionCuidadoSalud)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Dispersion_Cuidado_Salud");
            entity.Property(e => e.SfsDispersionEstancias)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Dispersion_Estancias");
            entity.Property(e => e.SfsDispersionSubsidio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Dispersion_Subsidio");
            entity.Property(e => e.SfsNotasTecnicas)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Sfs_Notas_Tecnicas");
            entity.Property(e => e.SfsPlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Sfs_Plan_Numero");
            entity.Property(e => e.SfsResoluciones)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Sfs_Resoluciones");
            entity.Property(e => e.SfsSalarioCotizable)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Sfs_Salario_Cotizable");
            entity.Property(e => e.SfsSalarioTope)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Salario_Tope");
            entity.Property(e => e.SfsSalariosCotizableTope)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Salarios_Cotizable_Tope");
            entity.Property(e => e.SfsSubCapitaAfiliado)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Sfs_Sub_Capita_Afiliado");
            entity.Property(e => e.SrlAporteEmpleador)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Aporte_Empleador");
            entity.Property(e => e.SrlAporteTrabajador)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Aporte_Trabajador");
            entity.Property(e => e.SrlCategoriaRiesgoI)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Categoria_Riesgo_I");
            entity.Property(e => e.SrlCategoriaRiesgoIi)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Categoria_Riesgo_II");
            entity.Property(e => e.SrlCategoriaRiesgoIii)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Categoria_Riesgo_III");
            entity.Property(e => e.SrlCategoriaRiesgoIv)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Categoria_Riesgo_IV");
            entity.Property(e => e.SrlDispersionArl)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Dispersion_Arl");
            entity.Property(e => e.SrlDispersionSisalril)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Dispersion_Sisalril");
            entity.Property(e => e.SrlResoluciones)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Srl_Resoluciones");
            entity.Property(e => e.SrlSalarioCotizable)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Srl_Salario_Cotizable");
            entity.Property(e => e.SrlSalarioTope)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Salario_Tope");
            entity.Property(e => e.SrlSalariosCotizableTope)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Srl_Salarios_Cotizable_Tope");
        });

        modelBuilder.Entity<ComunesProvinciasCatum>(entity =>
        {
            entity.HasKey(e => e.ProvinciaNumero).HasName("PK_Provincias_Cata");

            entity.ToTable("Comunes_Provincias_Cata", tb => tb.HasComment("Es un catálogo con los detalles de las provincias de la República Dominicana, según codificación de la JCE, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ProvinciaNumero)
                .ValueGeneratedNever()
                .HasComment("Número único de la provincia según catálogo de la JCE.  (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Provincia_Numero");
            entity.Property(e => e.ProvinciaNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre de la provincia según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Provincia_Nombre");
            entity.Property(e => e.RegionSaludNumero)
                .HasComment("Número único de la región de salud  según clasificación del Ministerio de Salud. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Region_Salud_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.RegionSaludNumeroNavigation).WithMany(p => p.ComunesProvinciasCata)
                .HasForeignKey(d => d.RegionSaludNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Provincias_Cata_Regiones_Salud_Cata");
        });

        modelBuilder.Entity<ComunesRegimenesCatum>(entity =>
        {
            entity.HasKey(e => e.RegimenNumero);

            entity.ToTable("Comunes_Regimenes_Cata", tb => tb.HasComment("Es un catálogo de los regímenes que aplican de ley para el SFS y el SRL, su fuente de alimentación es vía sistemas internos de la SISALRIL."));

            entity.Property(e => e.RegimenNumero)
                .HasComment("Número único que identifica cada uno de los regímenes definidos en la ley 87-01, (Contributivo, Subsidiado y Contributivo Subsidiado).")
                .HasColumnName("Regimen_Numero");
            entity.Property(e => e.RegimenDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción de los regímenes definidos en la ley 87-01, (Contributivo, Subsidiado y Contributivo Subsidiado). Cada uno es representado por un número de régimen.")
                .HasColumnName("Regimen_Descripcion");
            entity.Property(e => e.RegimenExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Breve explicación de los regímenes definidos en la ley 87-01, (Contributivo, Subsidiado y Contributivo Subsidiado). Cada uno es representado por un número de régimen.")
                .HasColumnName("Regimen_Explicacion");
            entity.Property(e => e.RegimenSiglas)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Siglas de los regímenes definidos en la ley 87-01, (RC = Régimen Contributivo, RS = Régimen Subsidiado y CS = Régimen  Contributivo Subsidiado). Cada uno es representado por un número de régimen.")
                .HasColumnName("Regimen_Siglas");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ComunesRegionesGeograficasCatum>(entity =>
        {
            entity.HasKey(e => e.RegionGeograficaNumero).HasName("PK_Regiones_Geograficas_Cata");

            entity.ToTable("Comunes_Regiones_Geograficas_Cata", tb => tb.HasComment("Es un catálogo con los detalles de las regiones geográficas de la República Dominicana, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.RegionGeograficaNumero)
                .HasComment("Número único de la región geográfica a la cual equivale una región de salud  según clasificación del Ministerio de Salud. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Region_Geografica_Numero");
            entity.Property(e => e.RegionGeograficaNombre)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Nombre de la región geográfica a la cual equivale una región de salud  según clasificación del Ministerio de Salud. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Region_Geografica_Nombre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ComunesRegionesSaludCatum>(entity =>
        {
            entity.HasKey(e => e.RegionSaludNumero).HasName("PK_Regiones_Salud_Cata");

            entity.ToTable("Comunes_Regiones_Salud_Cata", tb => tb.HasComment("Es un catálogo con los detalles de las regiones de salud definidas por el Ministerio de Salud de la República Dominicana, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.RegionSaludNumero)
                .HasComment("Número único de la región de salud  según clasificación del Ministerio de Salud. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Region_Salud_Numero");
            entity.Property(e => e.RegionGeograficaNumero)
                .HasComment("Número único de la región geográfica a la cual equivale una región de salud  según clasificación del Ministerio de Salud. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Region_Geografica_Numero");
            entity.Property(e => e.RegionSaludNombre)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasComment("Nombre de la región de salud  según clasificación del Ministerio de Salud. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Region_Salud_Nombre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.RegionGeograficaNumeroNavigation).WithMany(p => p.ComunesRegionesSaludCata)
                .HasForeignKey(d => d.RegionGeograficaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Regiones_Salud_Cata_Regiones_Geograficas_Cata");
        });

        modelBuilder.Entity<ComunesSectoresParajesCatum>(entity =>
        {
            entity.HasKey(e => e.SectorMunicipioNumero);

            entity.ToTable("Comunes_Sectores_Parajes_Cata", tb => tb.HasComment("Es un catálogo con los detalles de los sectores por municipios de la República Dominicana, según codificación de la JCE, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SectorMunicipioNumero).HasColumnName("Sector_Municipio_Numero");
            entity.Property(e => e.CiudadNumero)
                .HasComment("Número único que identifica la ciudad")
                .HasColumnName("Ciudad_Numero");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SectorMunicipioNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Sector_Municipio_Nombre");
            entity.Property(e => e.SectorNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre del sector de las ciudad y/o municipio según catálogo de  la JCE.")
                .HasColumnName("Sector_Nombre");
            entity.Property(e => e.SectorNumero)
                .HasComment("Número único  asignado a cada sector de las ciudades y municipio por la JCE.")
                .HasColumnName("Sector_Numero");

            entity.HasOne(d => d.MunicipioNumeroNavigation).WithMany(p => p.ComunesSectoresParajesCata)
                .HasForeignKey(d => d.MunicipioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sectores_Parajes_Cata_Municipios_Cata");
        });

        modelBuilder.Entity<ComunesTrimestresCatum>(entity =>
        {
            entity.HasKey(e => e.TrimestreNumero).HasName("PK_Trimestres_Cata");

            entity.ToTable("Comunes_Trimestres_Cata", tb => tb.HasComment("Es un catálogo con los detalles de los trimestres del año, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.TrimestreNumero)
                .HasComment("Corresponde al período de tres meses de un año")
                .HasColumnName("Trimestre_Numero");
            entity.Property(e => e.MesNumeroInicia)
                .HasComment("Es el número único de 1 a 12 que representa el mes con el que inicia el trimestre.")
                .HasColumnName("Mes_Numero_Inicia");
            entity.Property(e => e.MesNumeroTermina)
                .HasComment("Es el número único de 1 a 12 que representa el mes con el que termina el trimestre.")
                .HasColumnName("Mes_Numero_Termina");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TrimestreDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Corresponde al período de tres meses de un año")
                .HasColumnName("Trimestre_Descripcion");
        });

        modelBuilder.Entity<ConsultasRecepcionCatum>(entity =>
        {
            entity.HasKey(e => e.ConsultaNumero);

            entity.ToTable("Consultas_Recepcion_Cata");

            entity.Property(e => e.ConsultaNumero)
                .ValueGeneratedOnAdd()
                .HasColumnName("Consulta_Numero");
            entity.Property(e => e.ConsultaNombre)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Consulta_Nombre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<DocumentosJahironPrueba>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Documentos_Jahiron_Prueba");

            entity.Property(e => e.DocumentoEstado).HasColumnName("Documento_Estado");
            entity.Property(e => e.DocumentoNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Documento_Nombre");
        });

        modelBuilder.Entity<EpisodiosAtencionesPnaTipoCatum>(entity =>
        {
            entity.HasKey(e => e.AtencionPnaTipoNumero);

            entity.ToTable("Episodios_Atenciones_PNA_Tipo_Cata");

            entity.Property(e => e.AtencionPnaTipoNumero)
                .HasComment("Código del Tipo de Atención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Atencion_PNA_Tipo_Numero");
            entity.Property(e => e.AtencionPnaTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del Tipo de Atención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Atencion_PNA_Tipo_Descripcion");
            entity.Property(e => e.AtencionPnaTipoDescripcionCorta)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Descripción corta del Tipo de Atención (Resumido para mejor visualización en las interfaces), especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Atencion_PNA_Tipo_Descripcion_Corta");
            entity.Property(e => e.AtencionPnaTipoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('NE')")
                .HasComment("Descripción del Tipo de Atención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Atencion_PNA_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<EpisodiosAtencionesTipoCatum>(entity =>
        {
            entity.HasKey(e => e.AtencionTipoCodigo).HasName("PK_Atenciones_Tipo_Cata");

            entity.ToTable("Episodios_Atenciones_Tipo_Cata", tb => tb.HasComment("Es un catálogo con los detalles de los tipos de atenciones o forma de atención, relacionados con los episodios de salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.AtencionTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del Tipo de Atención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Atencion_Tipo_Codigo");
            entity.Property(e => e.AtencionTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del Tipo de Atención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Atencion_Tipo_Descripcion");
            entity.Property(e => e.AtencionTipoDescripcionCorta)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Descripción corta del Tipo de Atención (Resumido para mejor visualización en las interfaces), especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Atencion_Tipo_Descripcion_Corta");
            entity.Property(e => e.AtencionTipoNumero)
                .HasComment("Número único que representa  el Tipo de Atención,  especifica si el servicio fue prestado en forma de Emergencia o Programado, su objetivo es ser utilizados en futuras conversiones hacia el DATA WAREHOUSE.")
                .HasColumnName("Atencion_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<EpisodiosCausasReferenciasCatum>(entity =>
        {
            entity.HasKey(e => e.CausaReferenciaCodigo);

            entity.ToTable("Episodios_Causas_Referencias_Cata");

            entity.Property(e => e.CausaReferenciaCodigo)
                .HasComment("Número que identifica el Tipo de Atención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Causa_Referencia_Codigo");
            entity.Property(e => e.CausaReferenciaDescripcion)
                .HasMaxLength(125)
                .IsUnicode(false)
                .HasComment("Descripción del Tipo de Atención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Causa_Referencia_Descripcion");
            entity.Property(e => e.CausaReferenciaExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('NE')")
                .HasComment("Descripción del Tipo de Atención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Causa_Referencia_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<EpisodiosDiagnosticosSubsidiadosRecargasTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.PrestadoraNumero, e.AfiliadoNss, e.EpisodioFechaRealizacion, e.EpisodioFechaEgreso, e.SeguimientoCodigo, e.SeguimientoLote });

            entity.ToTable("Episodios_Diagnosticos_Subsidiados_Recargas_Trans");

            entity.Property(e => e.ArsNumero).HasColumnName("Ars_Numero");
            entity.Property(e => e.PrestadoraNumero).HasColumnName("Prestadora_Numero");
            entity.Property(e => e.AfiliadoNss).HasColumnName("Afiliado_Nss");
            entity.Property(e => e.EpisodioFechaRealizacion).HasColumnName("Episodio_Fecha_Realizacion");
            entity.Property(e => e.EpisodioFechaEgreso).HasColumnName("Episodio_Fecha_Egreso");
            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.AtencionTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Atencion_Tipo_Codigo");
            entity.Property(e => e.Cie10CodigoComplicaciones)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Complicaciones");
            entity.Property(e => e.Cie10CodigoFallecimiento)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Fallecimiento");
            entity.Property(e => e.Cie10CodigoMuerteRecienNacido)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Muerte_Recien_Nacido");
            entity.Property(e => e.Cie10CodigoPrincipal)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Principal");
            entity.Property(e => e.Cie10CodigoSecundario1)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Secundario_1");
            entity.Property(e => e.Cie10CodigoSecundario2)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Secundario_2");
            entity.Property(e => e.EgresoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Egreso_Tipo_Codigo");
            entity.Property(e => e.EpisodioMenorNoRegistrado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Episodio_Menor_No_Registrado");
            entity.Property(e => e.EpisodioNumero).HasColumnName("Episodio_Numero");
            entity.Property(e => e.EpisodioRecienNacidoMuerto).HasColumnName("Episodio_Recien_Nacido_Muerto");
            entity.Property(e => e.EpisodioRecienNacidoVivo).HasColumnName("Episodio_Recien_Nacido_Vivo");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.ServicioTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Servicio_Tipo_Codigo");
            entity.Property(e => e.SubgrupoCodigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Subgrupo_Codigo");
        });

        modelBuilder.Entity<EpisodiosDiagnosticosSubsidiadosTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.PrestadoraNumero, e.AfiliadoNss, e.EpisodioFechaRealizacion, e.EpisodioFechaEgreso, e.SeguimientoCodigo, e.SeguimientoLote });

            entity.ToTable("Episodios_Diagnosticos_Subsidiados_Temporal_Trans");

            entity.Property(e => e.ArsNumero).HasColumnName("Ars_Numero");
            entity.Property(e => e.PrestadoraNumero).HasColumnName("Prestadora_Numero");
            entity.Property(e => e.AfiliadoNss).HasColumnName("Afiliado_Nss");
            entity.Property(e => e.EpisodioFechaRealizacion).HasColumnName("Episodio_Fecha_Realizacion");
            entity.Property(e => e.EpisodioFechaEgreso).HasColumnName("Episodio_Fecha_Egreso");
            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.AtencionTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Atencion_Tipo_Codigo");
            entity.Property(e => e.Cie10CodigoComplicaciones)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Complicaciones");
            entity.Property(e => e.Cie10CodigoFallecimiento)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Fallecimiento");
            entity.Property(e => e.Cie10CodigoMuerteRecienNacido)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Muerte_Recien_Nacido");
            entity.Property(e => e.Cie10CodigoPrincipal)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Principal");
            entity.Property(e => e.Cie10CodigoSecundario1)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Secundario_1");
            entity.Property(e => e.Cie10CodigoSecundario2)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Secundario_2");
            entity.Property(e => e.EgresoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Egreso_Tipo_Codigo");
            entity.Property(e => e.EpisodioMenorNoRegistrado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Episodio_Menor_No_Registrado");
            entity.Property(e => e.EpisodioNumero).HasColumnName("Episodio_Numero");
            entity.Property(e => e.EpisodioRecienNacidoMuerto).HasColumnName("Episodio_Recien_Nacido_Muerto");
            entity.Property(e => e.EpisodioRecienNacidoVivo).HasColumnName("Episodio_Recien_Nacido_Vivo");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.ServicioTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Servicio_Tipo_Codigo");
            entity.Property(e => e.SubgrupoCodigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Subgrupo_Codigo");
        });

        modelBuilder.Entity<EpisodiosDiagnosticosSubsidiadosTran>(entity =>
        {
            entity.HasKey(e => new { e.EpisodioNumero, e.ArsNumero });

            entity.ToTable("Episodios_Diagnosticos_Subsidiados_Trans");

            entity.Property(e => e.EpisodioNumero).HasColumnName("Episodio_Numero");
            entity.Property(e => e.ArsNumero).HasColumnName("Ars_Numero");
            entity.Property(e => e.AfiliadoNss).HasColumnName("Afiliado_Nss");
            entity.Property(e => e.AtencionTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Atencion_Tipo_Codigo");
            entity.Property(e => e.Cie10CodigoComplicaciones)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Complicaciones");
            entity.Property(e => e.Cie10CodigoFallecimiento)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Fallecimiento");
            entity.Property(e => e.Cie10CodigoMuerteRecienNacido)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Muerte_Recien_Nacido");
            entity.Property(e => e.Cie10CodigoPrincipal)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Principal");
            entity.Property(e => e.Cie10CodigoSecundario1)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Secundario_1");
            entity.Property(e => e.Cie10CodigoSecundario2)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("CIE10_Codigo_Secundario_2");
            entity.Property(e => e.EgresoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Egreso_Tipo_Codigo");
            entity.Property(e => e.EpisodioFechaEgreso).HasColumnName("Episodio_Fecha_Egreso");
            entity.Property(e => e.EpisodioFechaRealizacion).HasColumnName("Episodio_Fecha_Realizacion");
            entity.Property(e => e.EpisodioMenorNoRegistrado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Episodio_Menor_No_Registrado");
            entity.Property(e => e.EpisodioRecienNacidoMuerto).HasColumnName("Episodio_Recien_Nacido_Muerto");
            entity.Property(e => e.EpisodioRecienNacidoVivo).HasColumnName("Episodio_Recien_Nacido_Vivo");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PrestadoraNumero).HasColumnName("Prestadora_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ServicioTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Servicio_Tipo_Codigo");
            entity.Property(e => e.SubgrupoCodigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("Subgrupo_Codigo");

            entity.HasOne(d => d.AfiliadoNssNavigation).WithMany(p => p.EpisodiosDiagnosticosSubsidiadosTrans)
                .HasForeignKey(d => d.AfiliadoNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Diagnosticos_Subsidiados_Trans_TSS_Ciudadanos_Master");

            entity.HasOne(d => d.AtencionTipoCodigoNavigation).WithMany(p => p.EpisodiosDiagnosticosSubsidiadosTrans)
                .HasForeignKey(d => d.AtencionTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Diagnosticos_Subsidiados_Trans_Episodios_Atenciones_Tipo_Cata");

            entity.HasOne(d => d.Cie10CodigoPrincipalNavigation).WithMany(p => p.EpisodiosDiagnosticosSubsidiadosTrans)
                .HasForeignKey(d => d.Cie10CodigoPrincipal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Diagnosticos_Subsidiados_Trans_Comunes_CIE10_Diagnosticos_Cata");

            entity.HasOne(d => d.EgresoTipoCodigoNavigation).WithMany(p => p.EpisodiosDiagnosticosSubsidiadosTrans)
                .HasForeignKey(d => d.EgresoTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Diagnosticos_Subsidiados_Trans_Episodios_Egresos_Tipo_Cata");

            entity.HasOne(d => d.PrestadoraNumeroNavigation).WithMany(p => p.EpisodiosDiagnosticosSubsidiadosTrans)
                .HasForeignKey(d => d.PrestadoraNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Diagnosticos_Subsidiados_Trans_Prestadoras_Master");

            entity.HasOne(d => d.ServicioTipoCodigoNavigation).WithMany(p => p.EpisodiosDiagnosticosSubsidiadosTrans)
                .HasForeignKey(d => d.ServicioTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Diagnosticos_Subsidiados_Trans_Episodios_Servicios_Tipo_Cata");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.EpisodiosDiagnosticosSubsidiadosTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Diagnosticos_Subsidiados_Trans_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<EpisodiosEgresosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.EgresoTipoCodigo).HasName("PK_Egresos_Tipo_Cata");

            entity.ToTable("Episodios_Egresos_Tipo_Cata", tb => tb.HasComment("Es un catálogo con los detalles de los tipo de egreso relacionados con los episodios de salud (Generalmente cuando son hospitalizaciones), su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.EgresoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del Tipo de Egreso, especifica el estado o situación del paciente (Afiliado) al finalizar un episodio de prestación de servicios de salud (Fallecido, Trasferido, Alta, etc.).")
                .HasColumnName("Egreso_Tipo_Codigo");
            entity.Property(e => e.EgresoTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del Tipo de Egreso, especifica el estado o situación del paciente (Afiliado) al finalizar un episodio de prestación de servicios de salud (Fallecido, Trasferido, Alta, etc.).")
                .HasColumnName("Egreso_Tipo_Descripcion");
            entity.Property(e => e.EgresoTipoDescripcionCorta)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Descripción corta del Tipo de Egreso (Resumido para mejor visualización en las interfaces), especifica el estado o situación del paciente (Afiliado) al finalizar un episodio de prestación de servicios de salud (Fallecido, Trasferido, Alta, etc.).")
                .HasColumnName("Egreso_Tipo_Descripcion_Corta");
            entity.Property(e => e.EgresoTipoNumero)
                .HasComment("Número único que representa  Tipo de Egreso, especifica el destino o estado del paciente  , su objetivo es ser utilizados en futuras conversiones hacia el DATA WAREHOUSE.")
                .HasColumnName("Egreso_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<EpisodiosFrecuenciaCatum>(entity =>
        {
            entity.HasKey(e => e.FrecuenciaCodigo);

            entity.ToTable("Episodios_Frecuencia_Cata");

            entity.Property(e => e.FrecuenciaCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del Tipo de Atención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Frecuencia_Codigo");
            entity.Property(e => e.FrecuenciaDescripcion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Descripción del Tipo de Atención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Frecuencia_Descripcion");
            entity.Property(e => e.FrecuenciaExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('NE')")
                .HasComment("Descripción del Tipo de Atención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Frecuencia_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<EpisodiosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.InstitucionNumero, e.PrestadoraNumero, e.AfiliadoNss, e.EpisodioFechaRealizacion, e.EpisodioFechaPago, e.EpisodioDetalleSecuencia });

            entity.ToTable("Episodios_Historico");

            entity.Property(e => e.InstitucionNumero).HasColumnName("Institucion_Numero");
            entity.Property(e => e.PrestadoraNumero).HasColumnName("Prestadora_Numero");
            entity.Property(e => e.AfiliadoNss).HasColumnName("Afiliado_NSS");
            entity.Property(e => e.EpisodioFechaRealizacion).HasColumnName("Episodio_Fecha_Realizacion");
            entity.Property(e => e.EpisodioFechaPago).HasColumnName("Episodio_Fecha_Pago");
            entity.Property(e => e.EpisodioDetalleSecuencia).HasColumnName("Episodio_Detalle_Secuencia");
            entity.Property(e => e.AtencionTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Atencion_Tipo_Codigo");
            entity.Property(e => e.CoberturaNumero).HasColumnName("Cobertura_Numero");
            entity.Property(e => e.EgresoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Egreso_Tipo_Codigo");
            entity.Property(e => e.EpisodioDetalleMontoPagadoAfiliado)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Episodio_Detalle_Monto_Pagado_Afiliado");
            entity.Property(e => e.EpisodioDetalleMontoPagadoArs)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Episodio_Detalle_Monto_Pagado_ARS");
            entity.Property(e => e.EpisodioDetalleMontoReclamado)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Episodio_Detalle_Monto_Reclamado");
            entity.Property(e => e.EpisodioFechaApertura).HasColumnName("Episodio_Fecha_Apertura");
            entity.Property(e => e.EpisodioFechaAutorizacion).HasColumnName("Episodio_Fecha_Autorizacion");
            entity.Property(e => e.EpisodioFechaEgreso).HasColumnName("Episodio_Fecha_Egreso");
            entity.Property(e => e.EpisodioNumero).HasColumnName("Episodio_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ServicioTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Servicio_Tipo_Codigo");
            entity.Property(e => e.SubGrupoCodigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SubGrupo_Codigo");
        });

        modelBuilder.Entity<EpisodiosIntervencionesCatum>(entity =>
        {
            entity.HasKey(e => e.IntervencionNumero);

            entity.ToTable("Episodios_Intervenciones_Cata");

            entity.Property(e => e.IntervencionNumero)
                .HasComment("Número del Tipo de Intervención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Intervencion_Numero");
            entity.Property(e => e.IntervencionDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción del Tipo de Intervención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Intervencion_Descripcion");
            entity.Property(e => e.IntervencionExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('NE')")
                .HasComment("Explicación del Tipo de Intervención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Intervencion_Explicacion");
            entity.Property(e => e.IntervencionTema)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Indica el tema relacionado al tipo de Intervención.")
                .HasColumnName("Intervencion_Tema");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<EpisodiosPersonalTipoCatum>(entity =>
        {
            entity.HasKey(e => e.PersonalTipoCodigo);

            entity.ToTable("Episodios_Personal_Tipo_Cata");

            entity.Property(e => e.PersonalTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código que identifica el tipo de persona (E = Enfermera, M = Médico y P = Promotor Salud).")
                .HasColumnName("Personal_Tipo_Codigo");
            entity.Property(e => e.PersonalTipoDescripcion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Descripción del Tipo de persona, especifica si el servicio fue prestado por una Enfermera, Médico o por un Promotor de Salud.")
                .HasColumnName("Personal_Tipo_Descripcion");
            entity.Property(e => e.PersonalTipoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('NE')")
                .HasComment("Explicación del Tipo de persona, especifica si el servicio fue prestado por una Enfermera, Médico o por un Promotor de Salud.")
                .HasColumnName("Personal_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<EpisodiosPnaTran>(entity =>
        {
            entity.HasKey(e => new { e.EpisodioNumero, e.PrestadoraNumeroRegional, e.PrestadoraNumero, e.CiudadanoNss, e.CoberturaNumero });

            entity.ToTable("Episodios_PNA_Trans");

            entity.Property(e => e.EpisodioNumero).HasColumnName("Episodio_Numero");
            entity.Property(e => e.PrestadoraNumeroRegional)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero_Regional");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.CiudadanoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Ciudadano_NSS");
            entity.Property(e => e.CoberturaNumero)
                .HasComment("Numero único de cobertura que representa un  insumo, procedimiento médico, material, fármaco,  servicio  general que fue o puede ser prestado.")
                .HasColumnName("Cobertura_Numero");
            entity.Property(e => e.AtencionPnaTipoNumero).HasColumnName("Atencion_PNA_Tipo_Numero");
            entity.Property(e => e.CausaReferenciaCodigo).HasColumnName("Causa_Referencia_Codigo");
            entity.Property(e => e.Cie10Codigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Es el código de una enfermedad o padecimiento y pertenece al código de la Clasificación Internacional de las enfermedades (CIE) , esta clasificación es de la Organización Mundial de la Salud (OMS).")
                .HasColumnName("CIE10_Codigo");
            entity.Property(e => e.EpisodioFacturaFecha)
                .HasColumnType("datetime")
                .HasColumnName("Episodio_Factura_Fecha");
            entity.Property(e => e.EpisodioFacturaNumero)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Episodio_Factura_Numero");
            entity.Property(e => e.EpisodioPagoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Episodio_Pago_Fecha");
            entity.Property(e => e.EpisodioRecienFecha)
                .HasColumnType("datetime")
                .HasColumnName("Episodio_Recien_Fecha");
            entity.Property(e => e.EpisodioRecienNacidos).HasColumnName("Episodio_Recien_Nacidos");
            entity.Property(e => e.EpisodioValorPagado)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Episodio_Valor_Pagado");
            entity.Property(e => e.EpisodioValorReclamado)
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Episodio_Valor_Reclamado");
            entity.Property(e => e.EpisoidoAtencionFecha)
                .HasColumnType("datetime")
                .HasColumnName("Episoido_Atencion_Fecha");
            entity.Property(e => e.FichaFamiliarNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Ficha_Familiar_Numero");
            entity.Property(e => e.FrecuenciaCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Frecuencia_Codigo");
            entity.Property(e => e.HistoriaClinicaNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Historia_Clinica_Numero");
            entity.Property(e => e.IntervencionNumero).HasColumnName("Intervencion_Numero");
            entity.Property(e => e.PersonalTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Personal_Tipo_Codigo");
            entity.Property(e => e.PrestadoraNumeroReferido)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero_Referido");
            entity.Property(e => e.RecurrenciaDiagnosticoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Recurrencia_Diagnostico_Codigo");
            entity.Property(e => e.ReferenciaTipoNumero).HasColumnName("Referencia_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.VacunaDosisCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Vacuna_Dosis_Codigo");
        });

        modelBuilder.Entity<EpisodiosRecargasTran>(entity =>
        {
            entity.HasKey(e => e.EpisodioSecuencia);

            entity.ToTable("Episodios_Recargas_Trans", tb =>
                {
                    tb.HasTrigger("Episodios_Recargas_Trans_Delete");
                    tb.HasTrigger("Episodios_Recargas_Trans_Update");
                });

            entity.Property(e => e.EpisodioSecuencia)
                .ValueGeneratedNever()
                .HasColumnName("Episodio_Secuencia");
            entity.Property(e => e.AfiliadoNss).HasColumnName("Afiliado_NSS");
            entity.Property(e => e.AfiliadoNumeroUnico).HasColumnName("Afiliado_Numero_Unico");
            entity.Property(e => e.AtencionTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Atencion_Tipo_Codigo");
            entity.Property(e => e.CoberturaNumero).HasColumnName("Cobertura_Numero");
            entity.Property(e => e.EgresoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Egreso_Tipo_Codigo");
            entity.Property(e => e.EpisodioAutorizacionNumero)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Episodio_Autorizacion_Numero");
            entity.Property(e => e.EpisodioDetalleMontoPagadoAfiliado)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Episodio_Detalle_Monto_Pagado_Afiliado");
            entity.Property(e => e.EpisodioDetalleMontoPagadoArs)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Episodio_Detalle_Monto_Pagado_ARS");
            entity.Property(e => e.EpisodioDetalleMontoReclamado)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Episodio_Detalle_Monto_Reclamado");
            entity.Property(e => e.EpisodioDetalleSecuencia).HasColumnName("Episodio_Detalle_Secuencia");
            entity.Property(e => e.EpisodioFechaApertura).HasColumnName("Episodio_Fecha_Apertura");
            entity.Property(e => e.EpisodioFechaAutorizacion).HasColumnName("Episodio_Fecha_Autorizacion");
            entity.Property(e => e.EpisodioFechaEgreso).HasColumnName("Episodio_Fecha_Egreso");
            entity.Property(e => e.EpisodioFechaPago).HasColumnName("Episodio_Fecha_Pago");
            entity.Property(e => e.EpisodioFechaRealizacion).HasColumnName("Episodio_Fecha_Realizacion");
            entity.Property(e => e.EpisodioNumero).HasColumnName("Episodio_Numero");
            entity.Property(e => e.EpisodioRecienNacido)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Episodio_Recien_Nacido");
            entity.Property(e => e.InstitucionNumero).HasColumnName("Institucion_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PrestadoraNumero).HasColumnName("Prestadora_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ServicioTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Servicio_Tipo_Codigo");
            entity.Property(e => e.SubGrupoCodigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SubGrupo_Codigo");
        });

        modelBuilder.Entity<EpisodiosRecurrenciaDiagnosticoCatum>(entity =>
        {
            entity.HasKey(e => e.RecurrenciaDiagnosticoCodigo);

            entity.ToTable("Episodios_Recurrencia_Diagnostico_Cata");

            entity.Property(e => e.RecurrenciaDiagnosticoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del Diagnostico de Recurrencia (N = Nuevo, R = Recurrente).")
                .HasColumnName("Recurrencia_Diagnostico_Codigo");
            entity.Property(e => e.RecurrenciaDiagnosticoDescripcion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Descripción de la Recurrencia  del diagnostico, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Recurrencia_Diagnostico_Descripcion");
            entity.Property(e => e.RecurrenciaDiagnosticoExplicacion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('NE')")
                .HasComment("Descripción de la Recurrencia  del diagnostico, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Recurrencia_Diagnostico_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<EpisodiosReferenciasTipoCatum>(entity =>
        {
            entity.HasKey(e => e.ReferenciaTipoNumero);

            entity.ToTable("Episodios_Referencias_Tipo_Cata");

            entity.Property(e => e.ReferenciaTipoNumero)
                .HasComment("Número que identifica el tipo de Referencia.")
                .HasColumnName("Referencia_Tipo_Numero");
            entity.Property(e => e.ReferenciaTipoDescripcion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Descripción del Tipo de Referencia, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Referencia_Tipo_Descripcion");
            entity.Property(e => e.ReferenciaTipoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('NE')")
                .HasComment("Explicación del Tipo de Referencia, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Referencia_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<EpisodiosSeguimientosZikaTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.AfiliadoNss, e.PrestadoraNumero });

            entity.ToTable("Episodios_Seguimientos_Zika_Trans", tb => tb.HasComment("Esta tabla contiene el reporte de casos de los Afiliados para la vigilancia de las complicaciones por Zika, reportados por las ARS."));

            entity.HasIndex(e => e.AfiliadoCedula, "Idx_Afiliado_No_Documento");

            entity.HasIndex(e => e.AfiliadoCedula, "Idx_Ced_Afil");

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_Nss");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.AfiliadoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Afiliado_Cedula");
            entity.Property(e => e.ArsNumeroDti)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero_DTI");
            entity.Property(e => e.EpisodioCasoProbableZika)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica si el Afiliado es un caso probable del Zika virus (Si, No).")
                .HasColumnName("Episodio_Caso_Probable_Zika");
            entity.Property(e => e.EpisodioCondicionEgreso)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Indica la condición el Afiliado egresado (Vivo ó Muerto).")
                .HasColumnName("Episodio_Condicion_Egreso");
            entity.Property(e => e.EpisodioEmbarazada)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica si el Afiliado es una mujer embarazada (Si, No).")
                .HasColumnName("Episodio_Embarazada");
            entity.Property(e => e.EpisodioManejo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Indica el manejo que se le dió al Afiliado con síntomas del Zika (Ambulatorio, Intrahospitalario).")
                .HasColumnName("Episodio_Manejo");
            entity.Property(e => e.EpisodioOtroDiagnostico)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Descripción otros Diagnosticos que pueda presentar el afiliado.")
                .HasColumnName("Episodio_Otro_Diagnostico");
            entity.Property(e => e.EpisodioRecienNacidoMicrocefalia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica si el recién nacido tiene Microcefalia (Si, No).")
                .HasColumnName("Episodio_Recien_Nacido_Microcefalia");
            entity.Property(e => e.EpisodioSindromeNeurologicoGuillainBarre)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el Afiliado tiene el sídrome neurológico de Guilliain Barré. (Si, No).")
                .HasColumnName("Episodio_Sindrome_Neurologico_Guillain_Barre");
            entity.Property(e => e.EpisodioTrimestreGestacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Representa el Trimestre de gestación de la Afiliada de ser una persona Embarazada.")
                .HasColumnName("Episodio_Trimestre_Gestacion");
            entity.Property(e => e.EpisodioUsoUci)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el Afiliado estuvo en UCI (Unidad de Cuidados Intensivos).")
                .HasColumnName("Episodio_Uso_UCI");
            entity.Property(e => e.PlanPensionadoDti)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Plan_Pensionado_DTI");
            entity.Property(e => e.PrestadoraNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nombre del prestador de servicio de salud (PSS) que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Nombre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroSecuencia)
                .ValueGeneratedOnAdd()
                .HasComment("Número de Secuencia del Registro.")
                .HasColumnName("Registro_Secuencia");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<EpisodiosServiciosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.ServicioTipoCodigo).HasName("PK_Servicios_Tipo_Cata");

            entity.ToTable("Episodios_Servicios_Tipo_Cata", tb => tb.HasComment("Es un catálogo con los detalles de los tipos de servicios o área de servicios, relacionados con los episodios de salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ServicioTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del Tipo de servicio, especifica si el servicio fue prestado bajo el área de  Hospitalización,  Prevención y Promoción,  Emergencia y Ambulatorio.")
                .HasColumnName("Servicio_Tipo_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.ServicioTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del Tipo de servicio, especifica si el servicio fue prestado bajo el área de  Hospitalización,  Prevención y Promoción,  Emergencia y Ambulatorio.")
                .HasColumnName("Servicio_Tipo_Descripcion");
            entity.Property(e => e.ServicioTipoDescripcionCorta)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Descripción corta del Tipo de servicio (Resumido para mejor visualización en las interfaces), especifica si el servicio fue prestado bajo el área de  Hospitalización,  Prevención y Promoción,  Emergencia y Ambulatorio.")
                .HasColumnName("Servicio_Tipo_Descripcion_Corta");
            entity.Property(e => e.ServicioTipoNumero)
                .HasComment("Número único que representa  el Tipo de servicio, especifica si el servicio fue prestado bajo el área de  Hospitalización,  Prevención y Promoción,  Emergencia y Ambulatorio, su objetivo es ser utilizados en futuras conversiones hacia el DATA WAREHOUSE.")
                .HasColumnName("Servicio_Tipo_Numero");
        });

        modelBuilder.Entity<EpisodiosSubsidiadosTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.PrestadoraNumero, e.AfiliadoNss, e.EpisodioFechaRealizacion, e.EpisodioFechaPago, e.EpisodioDetalleSecuencia }).HasName("PK_Episodios_Subsidiados_Trans_Nuevo_N");

            entity.ToTable("Episodios_Subsidiados_Trans");

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_NSS");
            entity.Property(e => e.EpisodioFechaRealizacion)
                .HasComment("Fecha en que se inicio la entrega del servicio de salud (Ingreso/Admisión).")
                .HasColumnName("Episodio_Fecha_Realizacion");
            entity.Property(e => e.EpisodioFechaPago)
                .HasComment("Fecha cuando la ARS pago a la PSS por el servicio prestado.")
                .HasColumnName("Episodio_Fecha_Pago");
            entity.Property(e => e.EpisodioDetalleSecuencia)
                .HasComment("Es una secuencia de 1 a N que depende del Número de Episodio,  y representa cada detalle de servicio prestado dentro del episodio.")
                .HasColumnName("Episodio_Detalle_Secuencia");
            entity.Property(e => e.AfiliadoNumeroUnico).HasColumnName("Afiliado_Numero_Unico");
            entity.Property(e => e.AtencionTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del Tipo de Atención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Atencion_Tipo_Codigo");
            entity.Property(e => e.CoberturaNumero)
                .HasComment("Numero único de cobertura que representa un  insumo, procedimiento médico, material, fármaco,  servicio  general que fue o puede ser prestado.")
                .HasColumnName("Cobertura_Numero");
            entity.Property(e => e.EgresoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del Tipo de Egreso, especifica el estado o situación del paciente (Afiliado) al finalizar un episodio de prestación de servicios de salud (Fallecido, Trasferido, Alta, etc.).")
                .HasColumnName("Egreso_Tipo_Codigo");
            entity.Property(e => e.EpisodioAutorizacionNumero)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Episodio_Autorizacion_Numero");
            entity.Property(e => e.EpisodioDetalleMontoPagadoAfiliado)
                .HasComment("Monto que representa lo pagado por  el afiliado directamente a la PSS por el servicio prestado.")
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Episodio_Detalle_Monto_Pagado_Afiliado");
            entity.Property(e => e.EpisodioDetalleMontoPagadoArs)
                .HasComment("Monto que representa lo pagado por la ARS a la PSS por el servicio prestado.")
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Episodio_Detalle_Monto_Pagado_ARS");
            entity.Property(e => e.EpisodioDetalleMontoReclamado)
                .HasComment("Monto que representa el valor reclamado por la PSS a la ARS por el servicio prestado.")
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Episodio_Detalle_Monto_Reclamado");
            entity.Property(e => e.EpisodioFechaApertura)
                .HasComment("Fecha cuando la ARS apertura en sus registro,  la solicitud o autorización para la prestación del servicio de salud.")
                .HasColumnName("Episodio_Fecha_Apertura");
            entity.Property(e => e.EpisodioFechaAutorizacion)
                .HasComment("Fecha cuando la ARS autorizo a la PSS a prestar el servicio de salud.")
                .HasColumnName("Episodio_Fecha_Autorizacion");
            entity.Property(e => e.EpisodioFechaEgreso)
                .HasComment("Fecha cuando se culmino la prestación del servicio de salud (De Alta/Egreso).")
                .HasColumnName("Episodio_Fecha_Egreso");
            entity.Property(e => e.EpisodioNumero)
                .HasComment("Número de Episodio,  es un número único que representa y agrupa el conjunto de todos los servicios prestado en una misma atención de salud. \r\n")
                .HasColumnName("Episodio_Numero");
            entity.Property(e => e.EpisodioRecienNacido)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Episodio_Recien_Nacido");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Código único de la versión del Plan de servicios de Salud (PDSS) al cual pertenece el Subgrupo.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ServicioTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del Tipo de servicio, especifica si el servicio fue prestado bajo el área de  Hospitalización,  Prevención y Promoción,  Emergencia y Ambulatorio.")
                .HasColumnName("Servicio_Tipo_Codigo");
            entity.Property(e => e.SubGrupoCodigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("Código creado a partir de la combinación de numero de grupo con el numero del subgrupo separados por un punto (.). ")
                .HasColumnName("SubGrupo_Codigo");

            entity.HasOne(d => d.AfiliadoNssNavigation).WithMany(p => p.EpisodiosSubsidiadosTrans)
                .HasForeignKey(d => d.AfiliadoNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Subsidiados_Trans_Nuevo_N_TSS_Ciudadanos_Master");

            entity.HasOne(d => d.AtencionTipoCodigoNavigation).WithMany(p => p.EpisodiosSubsidiadosTrans)
                .HasForeignKey(d => d.AtencionTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Subsidiados_Trans_Nuevo_N_Episodios_Atenciones_Tipo_Cata");

            entity.HasOne(d => d.CoberturaNumeroNavigation).WithMany(p => p.EpisodiosSubsidiadosTrans)
                .HasForeignKey(d => d.CoberturaNumero)
                .HasConstraintName("FK_Episodios_Subsidiados_Trans_Nuevo_N_Coberturas_Master");

            entity.HasOne(d => d.EgresoTipoCodigoNavigation).WithMany(p => p.EpisodiosSubsidiadosTrans)
                .HasForeignKey(d => d.EgresoTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Subsidiados_Trans_Nuevo_N_Episodios_Egresos_Tipo_Cata");

            entity.HasOne(d => d.PrestadoraNumeroNavigation).WithMany(p => p.EpisodiosSubsidiadosTrans)
                .HasForeignKey(d => d.PrestadoraNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Subsidiados_Trans_Nuevo_N_Prestadoras_Master");

            entity.HasOne(d => d.ServicioTipoCodigoNavigation).WithMany(p => p.EpisodiosSubsidiadosTrans)
                .HasForeignKey(d => d.ServicioTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Subsidiados_Trans_Nuevo_N_Episodios_Servicios_Tipo_Cata");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.EpisodiosSubsidiadosTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Subsidiados_Trans_Nuevo_N_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<EpisodiosTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.PrestadoraNumero, e.AfiliadoNss, e.EpisodioFechaRealizacion, e.EpisodioFechaPago, e.EpisodioDetalleSecuencia, e.SeguimientoCodigo, e.SeguimientoLote });

            entity.ToTable("Episodios_Temporal_Trans");

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_NSS");
            entity.Property(e => e.EpisodioFechaRealizacion)
                .HasComment("Fecha en que se inicio la entrega del servicio de salud (Ingreso/Admisión).")
                .HasColumnName("Episodio_Fecha_Realizacion");
            entity.Property(e => e.EpisodioFechaPago)
                .HasComment("Fecha cuando la ARS pago a la PSS por el servicio prestado.")
                .HasColumnName("Episodio_Fecha_Pago");
            entity.Property(e => e.EpisodioDetalleSecuencia)
                .HasComment("Es una secuencia de 1 a N que depende del Número de Episodio,  y representa cada detalle de servicio prestado dentro del episodio.")
                .HasColumnName("Episodio_Detalle_Secuencia");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.AfiliadoNumeroUnico).HasColumnName("Afiliado_Numero_Unico");
            entity.Property(e => e.AtencionTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del Tipo de Atención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Atencion_Tipo_Codigo");
            entity.Property(e => e.CoberturaNumero)
                .HasComment("Numero único de cobertura que representa un  insumo, procedimiento médico, material, fármaco,  servicio  general que fue o puede ser prestado.")
                .HasColumnName("Cobertura_Numero");
            entity.Property(e => e.EgresoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del Tipo de Egreso, especifica el estado o situación del paciente (Afiliado) al finalizar un episodio de prestación de servicios de salud (Fallecido, Trasferido, Alta, etc.).")
                .HasColumnName("Egreso_Tipo_Codigo");
            entity.Property(e => e.EpisodioAutorizacionNumero)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Episodio_Autorizacion_Numero");
            entity.Property(e => e.EpisodioDetalleMontoPagadoAfiliado)
                .HasComment("Monto que representa lo pagado por  el afiliado directamente a la PSS por el servicio prestado.")
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Episodio_Detalle_Monto_Pagado_Afiliado");
            entity.Property(e => e.EpisodioDetalleMontoPagadoArs)
                .HasComment("Monto que representa lo pagado por la ARS a la PSS por el servicio prestado.")
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Episodio_Detalle_Monto_Pagado_ARS");
            entity.Property(e => e.EpisodioDetalleMontoReclamado)
                .HasComment("Monto que representa el valor reclamado por la PSS a la ARS por el servicio prestado.")
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Episodio_Detalle_Monto_Reclamado");
            entity.Property(e => e.EpisodioFechaApertura)
                .HasComment("Fecha cuando la ARS apertura en sus registro,  la solicitud o autorización para la prestación del servicio de salud.")
                .HasColumnName("Episodio_Fecha_Apertura");
            entity.Property(e => e.EpisodioFechaAutorizacion)
                .HasComment("Fecha cuando la ARS autorizo a la PSS a prestar el servicio de salud.")
                .HasColumnName("Episodio_Fecha_Autorizacion");
            entity.Property(e => e.EpisodioFechaEgreso)
                .HasComment("Fecha cuando se culmino la prestación del servicio de salud (De Alta/Egreso).")
                .HasColumnName("Episodio_Fecha_Egreso");
            entity.Property(e => e.EpisodioNumero)
                .HasComment("Número de Episodio,  es un número único que representa y agrupa el conjunto de todos los servicios prestado en una misma atención de salud. \r\n")
                .HasColumnName("Episodio_Numero");
            entity.Property(e => e.EpisodioRecienNacido)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Episodio_Recien_Nacido");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Código único de la versión del Plan de servicios de Salud (PDSS) al cual pertenece el Subgrupo.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.ServicioTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del Tipo de servicio, especifica si el servicio fue prestado bajo el área de  Hospitalización,  Prevención y Promoción,  Emergencia y Ambulatorio.")
                .HasColumnName("Servicio_Tipo_Codigo");
            entity.Property(e => e.SubGrupoCodigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("Código creado a partir de la combinación de numero de grupo con el numero del subgrupo separados por un punto (.). ")
                .HasColumnName("SubGrupo_Codigo");
        });

        modelBuilder.Entity<EpisodiosTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.PrestadoraNumero, e.AfiliadoNss, e.EpisodioFechaRealizacion, e.EpisodioFechaPago, e.EpisodioDetalleSecuencia }).HasName("PK_Episodios_Trans_N");

            entity.ToTable("Episodios_Trans");

            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.PrestadoraNumero).HasColumnName("Prestadora_Numero");
            entity.Property(e => e.AfiliadoNss).HasColumnName("Afiliado_NSS");
            entity.Property(e => e.EpisodioFechaRealizacion).HasColumnName("Episodio_Fecha_Realizacion");
            entity.Property(e => e.EpisodioFechaPago).HasColumnName("Episodio_Fecha_Pago");
            entity.Property(e => e.EpisodioDetalleSecuencia).HasColumnName("Episodio_Detalle_Secuencia");
            entity.Property(e => e.AfiliadoNumeroUnico).HasColumnName("Afiliado_Numero_Unico");
            entity.Property(e => e.AtencionTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Atencion_Tipo_Codigo");
            entity.Property(e => e.CoberturaNumero).HasColumnName("Cobertura_Numero");
            entity.Property(e => e.EgresoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Egreso_Tipo_Codigo");
            entity.Property(e => e.EpisodioAutorizacionNumero)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Episodio_Autorizacion_Numero");
            entity.Property(e => e.EpisodioDetalleMontoPagadoAfiliado)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Episodio_Detalle_Monto_Pagado_Afiliado");
            entity.Property(e => e.EpisodioDetalleMontoPagadoArs)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Episodio_Detalle_Monto_Pagado_ARS");
            entity.Property(e => e.EpisodioDetalleMontoReclamado)
                .HasColumnType("decimal(9, 2)")
                .HasColumnName("Episodio_Detalle_Monto_Reclamado");
            entity.Property(e => e.EpisodioFechaApertura).HasColumnName("Episodio_Fecha_Apertura");
            entity.Property(e => e.EpisodioFechaAutorizacion).HasColumnName("Episodio_Fecha_Autorizacion");
            entity.Property(e => e.EpisodioFechaEgreso).HasColumnName("Episodio_Fecha_Egreso");
            entity.Property(e => e.EpisodioNumero).HasColumnName("Episodio_Numero");
            entity.Property(e => e.EpisodioRecienNacido)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Episodio_Recien_Nacido");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ServicioTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Servicio_Tipo_Codigo");
            entity.Property(e => e.SubGrupoCodigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("SubGrupo_Codigo");

            entity.HasOne(d => d.AfiliadoNssNavigation).WithMany(p => p.EpisodiosTrans)
                .HasForeignKey(d => d.AfiliadoNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Trans_N_TSS_Ciudadanos_Master");

            entity.HasOne(d => d.AtencionTipoCodigoNavigation).WithMany(p => p.EpisodiosTrans)
                .HasForeignKey(d => d.AtencionTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Trans_N_Episodios_Atenciones_Tipo_Cata");

            entity.HasOne(d => d.CoberturaNumeroNavigation).WithMany(p => p.EpisodiosTrans)
                .HasForeignKey(d => d.CoberturaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Trans_N_Coberturas_Master");

            entity.HasOne(d => d.EgresoTipoCodigoNavigation).WithMany(p => p.EpisodiosTrans)
                .HasForeignKey(d => d.EgresoTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Trans_N_Episodios_Egresos_Tipo_Cata");

            entity.HasOne(d => d.PrestadoraNumeroNavigation).WithMany(p => p.EpisodiosTrans)
                .HasForeignKey(d => d.PrestadoraNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Trans_N_Prestadoras_Master");

            entity.HasOne(d => d.ServicioTipoCodigoNavigation).WithMany(p => p.EpisodiosTrans)
                .HasForeignKey(d => d.ServicioTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Trans_N_Episodios_Servicios_Tipo_Cata");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.EpisodiosTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Episodios_Trans_N_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<EpisodiosVacunasDosisCatum>(entity =>
        {
            entity.HasKey(e => e.VacunaDosisCodigo);

            entity.ToTable("Episodios_Vacunas_Dosis_Cata");

            entity.Property(e => e.VacunaDosisCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Número que representa la Dosis de Vacuna.")
                .HasColumnName("Vacuna_Dosis_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.VacunaDosisDescripcion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Descripción de la Dosis de Vacuna, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Vacuna_Dosis_Descripcion");
            entity.Property(e => e.VacunaDosisExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('NE')")
                .HasComment("Explicación de la Dosis de Vacuna, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Vacuna_Dosis_Explicacion");
        });

        modelBuilder.Entity<EvaluadoresNuctTran>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Evaluadores_Nuct_Trans");

            entity.Property(e => e.EmpleadoNumero).HasColumnName("Empleado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TraspasoSolicitudTipoNumero).HasColumnName("Traspaso_Solicitud_Tipo_Numero");
        });

        modelBuilder.Entity<FinancierosBalanceComprobacionRecargasTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.SeguimientoCodigo, e.SeguimientoLote, e.CuentaCodigo });

            entity.ToTable("Financieros_Balance_Comprobacion_Recargas_Trans");

            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.CuentaCodigo).HasColumnName("Cuenta_Codigo");
            entity.Property(e => e.BalanceActual)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Balance_Actual");
            entity.Property(e => e.BalanceAnterior)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Balance_Anterior");
            entity.Property(e => e.BalanceCredito)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Balance_Credito");
            entity.Property(e => e.BalanceDebito)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Balance_Debito");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroFechaBaja)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Baja");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<FinancierosBalanceComprobacionTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.SeguimientoCodigo, e.SeguimientoLote, e.CuentaCodigo });

            entity.ToTable("Financieros_Balance_Comprobacion_Temporal_Trans");

            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.CuentaCodigo).HasColumnName("Cuenta_Codigo");
            entity.Property(e => e.BalanceActual)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("Balance_Actual");
            entity.Property(e => e.BalanceAnterior)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("Balance_Anterior");
            entity.Property(e => e.BalanceCredito)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("Balance_Credito");
            entity.Property(e => e.BalanceDebito)
                .HasColumnType("decimal(19, 2)")
                .HasColumnName("Balance_Debito");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<FinancierosBalanceComprobacionTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.SeguimientoCodigo, e.SeguimientoLote, e.CuentaCodigo }).HasName("PK_Financieros_Balance_Comprobacion_Trans_1");

            entity.ToTable("Financieros_Balance_Comprobacion_Trans", tb => tb.HasComment("Es una tabla transaccional, que contiene los detalles de los balances de las cuentas de la balanza de comprobación reportados por las ARS y la ARL,  su fuente de datos es el esquema 05 procesado por el Robot Simon. "));

            entity.HasIndex(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.CuentaCodigo }, "IX_Financieros_Balance_Comprobacion_Trans").IsUnique();

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.CuentaCodigo)
                .HasComment("Es el código único que representa cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Codigo");
            entity.Property(e => e.BalanceActual)
                .HasComment("Es el balance actual que tiene la cuenta para el periodo reportado en el esquema 5, en el cual se informa la Balanza de comprobación.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Balance_Actual");
            entity.Property(e => e.BalanceAnterior)
                .HasComment("Es el balance anterior que tiene la cuenta para el periodo reportado en el esquema 5, en el cual se informa la Balanza de comprobación.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Balance_Anterior");
            entity.Property(e => e.BalanceCredito)
                .HasComment("Es el balance en la columna de los créditos que tienen  la cuenta para el período reportado en el esquema 5, en el cual se informa la Balanza de comprobación.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Balance_Credito");
            entity.Property(e => e.BalanceDebito)
                .HasComment("Es el balance en la columna de los Débitos que tienen  la cuenta para el período reportado en el esquema 5, en el cual se informa la Balanza de comprobación.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Balance_Debito");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CuentaCodigoNavigation).WithMany(p => p.FinancierosBalanceComprobacionTrans)
                .HasForeignKey(d => d.CuentaCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Balance_Comprobacion_Trans_Financieros_Cuentas_Cata");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.FinancierosBalanceComprobacionTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Balance_Comprobacion_Trans_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<FinancierosBalanceGeneralDetallado2009Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoPeriodo, e.ArsNumero, e.PlanGrupoNumero, e.DetalladoMonto });

            entity.ToTable("Financieros_Balance_General_Detallado_2009_Trans");

            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ArsNumero).HasColumnName("Ars_Numero");
            entity.Property(e => e.PlanGrupoNumero).HasColumnName("Plan_Grupo_Numero");
            entity.Property(e => e.DetalladoMonto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Detallado_Monto");
            entity.Property(e => e.ArsCategoriaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARS_Categoria_Codigo");
            entity.Property(e => e.ArsCategoriaDescripcion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Ars_Categoria_Descripcion");
            entity.Property(e => e.ArsNombre)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Ars_Nombre");
            entity.Property(e => e.BeneficioEjercicio)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Beneficio_Ejercicio");
            entity.Property(e => e.BeneficioSobreIngresoSalud)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Beneficio_Sobre_Ingreso_Salud");
            entity.Property(e => e.GastoEnSalud)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Gasto_En_Salud");
            entity.Property(e => e.GastosGeneralesAdministrativos)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Gastos_Generales_Administrativos");
            entity.Property(e => e.ImpuestosReservas)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Impuestos_Reservas");
            entity.Property(e => e.IngresoSalud)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Ingreso_Salud");
            entity.Property(e => e.OtrosGastos)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Otros_Gastos");
            entity.Property(e => e.OtrosIngreso)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Otros_Ingreso");
            entity.Property(e => e.OtrosIngresoGastos)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Otros_Ingreso_Gastos");
            entity.Property(e => e.PlanGrupoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PLan_Grupo_Descripcion");
            entity.Property(e => e.Siniestralidad).HasColumnType("decimal(16, 2)");
        });

        modelBuilder.Entity<FinancierosBalanceGeneralDetalladoVistaHistorico>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoPeriodo, e.ArsNumero, e.PlanGrupoNumero, e.DetalladoMonto, e.RegistroFechaHistorico });

            entity.ToTable("Financieros_Balance_General_Detallado_Vista_Historico", tb => tb.HasComment("Es una tabla transaccional, que contiene el resumen de los balances generales de las cuentas de la balanza de comprobación reportados por las ARS y la ARL,  su fuente de datos es el esquema 05 procesado por el Robot Simon."));

            entity.Property(e => e.SeguimientoPeriodo)
                .HasComment("Periodo (Año y Mes) correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.PlanGrupoNumero)
                .HasComment("Es el número único asignado para identificar cuales Planes de Salud son del PDSS o son de los demás planes (Voluntarios, Complementarios, Especiales, etc.), esta columna actualmente solo se utiliza en los estados de resultados de los estados financieros.")
                .HasColumnName("Plan_Grupo_Numero");
            entity.Property(e => e.DetalladoMonto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si los montos de los estados financieros, a partir del balance de comprobación se publicarán detallados o no (S = Si, N = No).")
                .HasColumnName("Detallado_Monto");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.ArsCategoriaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código único que representa la calsificación de las ARS en Públicas, Privadas y Auto gestionada.")
                .HasColumnName("ARS_Categoria_Codigo");
            entity.Property(e => e.ArsCategoriaDescripcion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Descripción que clasifica las ARS en Públicas, Privadas y Auto gestionada.")
                .HasColumnName("Ars_Categoria_Descripcion");
            entity.Property(e => e.ArsNombre)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Nombre de la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Nombre");
            entity.Property(e => e.BeneficioEjercicio)
                .HasComment("Indicador de los estados financieros, a partir del balance de comprobación cargados en el esquema 5")
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Beneficio_Ejercicio");
            entity.Property(e => e.BeneficioSobreIngresoSalud)
                .HasComment("Indicador de los estados financieros, a partir del balance de comprobación cargados en el esquema 5")
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Beneficio_Sobre_Ingreso_Salud");
            entity.Property(e => e.GastoEnSalud)
                .HasComment("Indicador de los estados financieros, a partir del balance de comprobación cargados en el esquema 5")
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Gasto_En_Salud");
            entity.Property(e => e.GastosGeneralesAdministrativos)
                .HasComment("Indicador de los estados financieros, a partir del balance de comprobación cargados en el esquema 5")
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Gastos_Generales_Administrativos");
            entity.Property(e => e.ImpuestosReservas)
                .HasComment("Indicador de los estados financieros, a partir del balance de comprobación cargados en el esquema 5")
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Impuestos_Reservas");
            entity.Property(e => e.IngresoSalud)
                .HasComment("Indicador de los estados financieros, a partir del balance de comprobación cargados en el esquema 5")
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Ingreso_Salud");
            entity.Property(e => e.OtrosGastos)
                .HasComment("Indicador de los estados financieros, a partir del balance de comprobación cargados en el esquema 5")
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Otros_Gastos");
            entity.Property(e => e.OtrosIngreso)
                .HasComment("Indicador de los estados financieros, a partir del balance de comprobación cargados en el esquema 5")
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Otros_Ingreso");
            entity.Property(e => e.OtrosIngresoGastos)
                .HasComment("Indicador de los estados financieros, a partir del balance de comprobación cargados en el esquema 5")
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Otros_Ingreso_Gastos");
            entity.Property(e => e.PlanGrupoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es la descripción que identifica cuales Planes de Salud son del PDSS o son de los demás planes (Voluntarios, Complementarios, Especiales, etc.), esta columna se utiliza en los estados de resultados de los estados financieros.")
                .HasColumnName("Plan_Grupo_Descripcion");
            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.Siniestralidad)
                .HasComment("Indicador de los estados financieros, a partir del balance de comprobación cargados en el esquema 5")
                .HasColumnType("decimal(16, 2)");
        });

        modelBuilder.Entity<FinancierosBalanceGeneralDetalladoVistum>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoPeriodo, e.ArsNumero, e.PlanGrupoNumero, e.DetalladoMonto });

            entity.ToTable("Financieros_Balance_General_Detallado_Vista");

            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ArsNumero).HasColumnName("Ars_Numero");
            entity.Property(e => e.PlanGrupoNumero).HasColumnName("Plan_Grupo_Numero");
            entity.Property(e => e.DetalladoMonto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Detallado_Monto");
            entity.Property(e => e.ArsCategoriaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARS_Categoria_Codigo");
            entity.Property(e => e.ArsCategoriaDescripcion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Ars_Categoria_Descripcion");
            entity.Property(e => e.ArsNombre)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Ars_Nombre");
            entity.Property(e => e.BeneficioEjercicio)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Beneficio_Ejercicio");
            entity.Property(e => e.BeneficioSobreIngresoSalud)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Beneficio_Sobre_Ingreso_Salud");
            entity.Property(e => e.GastoEnSalud)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Gasto_En_Salud");
            entity.Property(e => e.GastosGeneralesAdministrativos)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Gastos_Generales_Administrativos");
            entity.Property(e => e.ImpuestosReservas)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Impuestos_Reservas");
            entity.Property(e => e.IngresoSalud)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Ingreso_Salud");
            entity.Property(e => e.OtrosGastos)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Otros_Gastos");
            entity.Property(e => e.OtrosIngreso)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Otros_Ingreso");
            entity.Property(e => e.OtrosIngresoGastos)
                .HasColumnType("decimal(16, 2)")
                .HasColumnName("Otros_Ingreso_Gastos");
            entity.Property(e => e.PlanGrupoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PLan_Grupo_Descripcion");
            entity.Property(e => e.Siniestralidad).HasColumnType("decimal(16, 2)");
        });

        modelBuilder.Entity<FinancierosBalanceGeneralVistum>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.SeguimientoPeriodo, e.ResultadoNumero, e.CuentaNumero }).HasName("PK_Intermedia_Estado_Resultado_Resumenes");

            entity.ToTable("Financieros_Balance_General_Vista");

            entity.Property(e => e.ArsNumero)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ResultadoNumero).HasColumnName("Resultado_Numero");
            entity.Property(e => e.CuentaNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Cuenta_Numero");
            entity.Property(e => e.ArsCategoriaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARS_Categoria_Codigo");
            entity.Property(e => e.ArsCategoriaDescripcion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ARS_Categoria_Descripcion");
            entity.Property(e => e.ArsNombre)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Ars_Nombre");
            entity.Property(e => e.BalanceActual)
                .HasColumnType("decimal(20, 2)")
                .HasColumnName("Balance_Actual");
            entity.Property(e => e.CuentaNombre)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Cuenta_Nombre");
            entity.Property(e => e.PlanGrupoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PLan_Grupo_Descripcion");
            entity.Property(e => e.PlanGrupoNumero).HasColumnName("Plan_Grupo_Numero");
            entity.Property(e => e.ResultadoDetalleOrden).HasColumnName("Resultado_Detalle_Orden");
            entity.Property(e => e.ResultadoNegrita)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Resultado_Negrita");
            entity.Property(e => e.ResultadoNivel).HasColumnName("Resultado_Nivel");
        });

        modelBuilder.Entity<FinancierosCuentasCatum>(entity =>
        {
            entity.HasKey(e => e.CuentaCodigo);

            entity.ToTable("Financieros_Cuentas_Cata", tb =>
                {
                    tb.HasComment("Es un catálogo que contiene los detalles del Catálogo de cuenta contables oficial para las ARS y la ARL, es la base de reporte del esquema 05, su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Financieros_Cuentas_Cata_Delete");
                    tb.HasTrigger("Financieros_Cuentas_Cata_Update");
                });

            entity.Property(e => e.CuentaCodigo)
                .ValueGeneratedNever()
                .HasComment("Es el código único que representa cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Codigo");
            entity.Property(e => e.CuentaBalanceCero)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si la cuenta debe ser reportada en el mes de enero con balance en cero en el esquema 5.")
                .HasColumnName("Cuenta_Balance_Cero");
            entity.Property(e => e.CuentaControlCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es código único  de la cuenta contable padre de cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Control_Codigo");
            entity.Property(e => e.CuentaEneroCero)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si la cuenta debe ser reportada en el mes de enero con balance en cero en el esquema 5.")
                .HasColumnName("Cuenta_Enero_Cero");
            entity.Property(e => e.CuentaMovimiento)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("Indica si la cuenta contable puede recibir o no operaciones.")
                .HasColumnName("Cuenta_Movimiento");
            entity.Property(e => e.CuentaNivel)
                .HasComment("Indica el nivel de la cuenta contable, a más bajo nivel  la cuenta tiene mayor nivel de agrupamiento.")
                .HasColumnName("Cuenta_Nivel");
            entity.Property(e => e.CuentaNombre)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Nombre de la cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Nombre");
            entity.Property(e => e.CuentaOrigenCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código que representa el origen de la cuenta contable.")
                .HasColumnName("Cuenta_Origen_Codigo");
            entity.Property(e => e.CuentaTipoNumero)
                .HasComment("Tipifica las cuentas contables según las cuentas mayores.")
                .HasColumnName("Cuenta_Tipo_Numero");
            entity.Property(e => e.CuentaValidaAfiliadosIngresos)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Cuenta_Valida_Afiliados_Ingresos");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoPeriodoCarga)
                .HasDefaultValueSql("((201301))")
                .HasComment("Periodo (Año y Mes) correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Periodo_Carga");

            entity.HasOne(d => d.CuentaOrigenCodigoNavigation).WithMany(p => p.FinancierosCuentasCata)
                .HasForeignKey(d => d.CuentaOrigenCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Cuentas_Cata_Financieros_Cuentas_Origen_Cata");

            entity.HasOne(d => d.CuentaTipoNumeroNavigation).WithMany(p => p.FinancierosCuentasCata)
                .HasForeignKey(d => d.CuentaTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Cuentas_Cata_Financieros_Cuentas_Tipo_Cata");
        });

        modelBuilder.Entity<FinancierosCuentasOrigenCatum>(entity =>
        {
            entity.HasKey(e => e.CuentaOrigenCodigo);

            entity.ToTable("Financieros_Cuentas_Origen_Cata", tb =>
                {
                    tb.HasComment("Es un catálogo que contiene los orígenes tipo de cuentas contables,  identifica el origen del  catálogo de cuentas contables, su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Financieros_Cuentas_Origen_Cata_Delete");
                    tb.HasTrigger("Financieros_Cuentas_Origen_Cata_Update");
                });

            entity.Property(e => e.CuentaOrigenCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código que representa el origen de la cuenta contable.")
                .HasColumnName("Cuenta_Origen_Codigo");
            entity.Property(e => e.CuentaOrigenDescripcion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Descripción del origen de la cuenta contable en el catálogo de cuentas")
                .HasColumnName("Cuenta_Origen_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<FinancierosCuentasProporcionesCatum>(entity =>
        {
            entity.HasKey(e => new { e.CuentaCodigo, e.CuentaProporcionCodigo, e.CuentaProporcionCodigo2, e.CuentaControlProporcionCodigo, e.CuentaControlProporcionCodigo2 }).HasName("PK_Financieros_Cuentas_Proporciones_Cata_1");

            entity.ToTable("Financieros_Cuentas_Proporciones_Cata", tb => tb.HasComment("Tabla catálogo que contiene las cuentas del Catálogo de cuentas y las cuentas proporcionales de la misma, su fuente es el catálogo de cuentas de la SISALRIL."));

            entity.Property(e => e.CuentaCodigo)
                .HasComment("Es el código único que representa cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Codigo");
            entity.Property(e => e.CuentaProporcionCodigo)
                .HasComment("Es el código único que representa cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Proporcion_Codigo");
            entity.Property(e => e.CuentaProporcionCodigo2)
                .HasComment("Es el código único que representa cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Proporcion_Codigo_2");
            entity.Property(e => e.CuentaControlProporcionCodigo)
                .HasComment("Es código único  de la cuenta contable padre de cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Control_Proporcion_Codigo");
            entity.Property(e => e.CuentaControlProporcionCodigo2)
                .HasComment("Es código único  de la cuenta contable padre de cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Control_Proporcion_Codigo_2");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CuentaCodigoNavigation).WithMany(p => p.FinancierosCuentasProporcionesCata)
                .HasForeignKey(d => d.CuentaCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Cuentas_Proporciones_Cata_Financieros_Cuentas_Cata");
        });

        modelBuilder.Entity<FinancierosCuentasTipoCatum>(entity =>
        {
            entity.HasKey(e => e.CuentaTipoNumero);

            entity.ToTable("Financieros_Cuentas_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene los tipo de cuentas contables (cuentas mayores),  clasifica el catálogo de cuentas contables, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.CuentaTipoNumero)
                .HasComment("Tipifica las cuentas contables según las cuentas mayores.")
                .HasColumnName("Cuenta_Tipo_Numero");
            entity.Property(e => e.CuentaTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Tipifica las cuentas contables según las cuentas mayores.")
                .HasColumnName("Cuenta_Tipo_Codigo");
            entity.Property(e => e.CuentaTipoDescripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de las cuentas contables en el catálogo de cuentas según las cuentas mayores.")
                .HasColumnName("Cuenta_Tipo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<FinancierosDocumentosPagoTipoCatum>(entity =>
        {
            entity.HasKey(e => e.DocumentoPagoTipoNumero);

            entity.ToTable("Financieros_Documentos_Pago_Tipo_Cata");

            entity.Property(e => e.DocumentoPagoTipoNumero)
                .HasComment("s el número de Cheque o transacción bancaria con la cual la ARS realizó el último pago a la PSS, por cada autorización reportada. Al corte del período correspondiente.")
                .HasColumnName("Documento_Pago_Tipo_Numero");
            entity.Property(e => e.DocumentoPagoTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("s el tipo de documento Cheque = CK o transacción bancaria = TR con el cual la ARS realizó el último pago a la PSS, por cada autorización reportada. Al corte del período correspondiente.")
                .HasColumnName("Documento_Pago_Tipo_Codigo");
            entity.Property(e => e.DocumentoPagoTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de documento Cheque = CK o transacción bancaria = TR con el cual la ARS realizó el último pago a la PSS, por cada autorización reportada. Al corte del período correspondiente.")
                .HasColumnName("Documento_Pago_Tipo_Descripcion");
            entity.Property(e => e.DocumentoPagoTipoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Explicació del tipo de documento Cheque = CK o transacción bancaria = TR con el cual la ARS realizó el último pago a la PSS, por cada autorización reportada. Al corte del período correspondiente.")
                .HasColumnName("Documento_Pago_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<FinancierosEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.EstadoFinancieroNumero);

            entity.ToTable("Financieros_Estados_Cata");

            entity.Property(e => e.EstadoFinancieroNumero).HasColumnName("Estado_Financiero_Numero");
            entity.Property(e => e.EstadoFinancieroDescripcion)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("Estado_Financiero_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<FinancierosEstadosCuentasCatum>(entity =>
        {
            entity.HasKey(e => new { e.EstadoFinancieroNumero, e.EstadoResultadoNumero });

            entity.ToTable("Financieros_Estados_Cuentas_Cata");

            entity.Property(e => e.EstadoFinancieroNumero).HasColumnName("Estado_Financiero_Numero");
            entity.Property(e => e.EstadoResultadoNumero).HasColumnName("Estado_Resultado_Numero");
            entity.Property(e => e.EstadoResultadoNegrita)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Estado_Resultado_Negrita");
            entity.Property(e => e.EstadoResultadoNivel).HasColumnName("Estado_Resultado_Nivel");
            entity.Property(e => e.EstadoResultadoTitulo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Estado_Resultado_Titulo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<FinancierosEstadosCuentasDetallesCatum>(entity =>
        {
            entity.HasKey(e => new { e.EstadoFinancieroNumero, e.EstadoResultadoNumero, e.CuentaCodigo });

            entity.ToTable("Financieros_Estados_Cuentas_Detalles_Cata", tb => tb.HasComment("Tabla que contiene el catálogo con los detalles de los estados de cuentas para calcular los estados finaneros de la balanza de comprobación."));

            entity.Property(e => e.EstadoFinancieroNumero)
                .HasComment("Número único que identifica cada uno de los estados financieros.")
                .HasColumnName("Estado_Financiero_Numero");
            entity.Property(e => e.EstadoResultadoNumero)
                .HasComment("Es el número único que identifica una cuenta o resultado en los reporte financieros.")
                .HasColumnName("Estado_Resultado_Numero");
            entity.Property(e => e.CuentaCodigo)
                .HasComment("Es el código único que representa cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Codigo");
            entity.Property(e => e.EstadoResultadoDetalleOrden)
                .HasComment("Indica el orden en que se presentará  cuenta o resultado en los reporte financieros.")
                .HasColumnName("Estado_Resultado_Detalle_Orden");
            entity.Property(e => e.EstadoResultadoDetalleTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si un resultado en los reporte financieros es un titulo o cuenta de cálculo.")
                .HasColumnName("Estado_Resultado_Detalle_Tipo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.EstadoResultadoDetalleTipoNavigation).WithMany(p => p.FinancierosEstadosCuentasDetallesCata)
                .HasForeignKey(d => d.EstadoResultadoDetalleTipo)
                .HasConstraintName("FK_Financieros_Estados_Cuentas_Detalles_Cata_Financieros_Estados_Detalles_Tipo_Cata");
        });

        modelBuilder.Entity<FinancierosEstadosCuentasReportesCatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Financieros_Estados_Cuentas_Reportes_Cata", tb => tb.HasComment("Tabla que contiene el catálogo con los reportes de los estados de cuentas para calcular los estados finaneros de la balanza de comprobación."));

            entity.Property(e => e.ConsolidadoGeneral)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si la cuenta o resultado se utilizara para el consolidado general de los reporte financieros.")
                .HasColumnName("Consolidado_General");
            entity.Property(e => e.CuentaCodigo)
                .HasComment("Es el código único que representa cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Codigo");
            entity.Property(e => e.CuentaConsolidadoGeneral)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Indica si la cuenta o resultado se utilizara para el consolidado general de los reporte financieros.")
                .HasColumnName("Cuenta_Consolidado_General");
            entity.Property(e => e.CuentaControlNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es código único  de la cuenta contable padre de cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Control_Numero");
            entity.Property(e => e.CuentaGeneral)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si la cuenta o resultado se utilizará para el consolidado general de los reportes financieros.")
                .HasColumnName("Cuenta_General");
            entity.Property(e => e.CuentaMovimiento)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("Indica si la cuenta contable puede recibir o no operaciones.")
                .HasColumnName("Cuenta_Movimiento");
            entity.Property(e => e.CuentaNivel)
                .HasComment("Indica el nivel de la cuenta contable, a más bajo nivel  la cuenta tiene mayor nivel de agrupamiento.")
                .HasColumnName("Cuenta_Nivel");
            entity.Property(e => e.CuentaNombre)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Nombre de la cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Nombre");
            entity.Property(e => e.CuentaOrden)
                .HasComment("Indica el orden en que se presentará  cuenta o resultado en los reporte financieros.")
                .HasColumnName("Cuenta_Orden");
            entity.Property(e => e.CuentaOrigen)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Código que representa el origen de la cuenta contable.")
                .HasColumnName("Cuenta_Origen");
            entity.Property(e => e.CuentaTipo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de las cuentas contables en el catálogo de cuentas según las cuentas mayores.")
                .HasColumnName("Cuenta_Tipo");
            entity.Property(e => e.PlanCuentaNumero)
                .HasComment("Es el número único de cada tipo de planes relacionados con los reportes de los estados financieros")
                .HasColumnName("Plan_Cuenta_Numero");
        });

        modelBuilder.Entity<FinancierosEstadosDetallesTipoCatum>(entity =>
        {
            entity.HasKey(e => e.EstadoDetalleTipoCodigo);

            entity.ToTable("Financieros_Estados_Detalles_Tipo_Cata");

            entity.Property(e => e.EstadoDetalleTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Estado_Detalle_Tipo_Codigo");
            entity.Property(e => e.EstadoDetalleTipoDescripcion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Estado_Detalle_Tipo_Descripcion");
            entity.Property(e => e.EstadoDetalleTipoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Estado_Detalle_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<FinancierosEstadosTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.SeguimientoPeriodo, e.PlanCuentaNumero, e.EstadoFinancieroNumero, e.EstadoResultadoNumero, e.CuentaCodigo });

            entity.ToTable("Financieros_Estados_Trans", tb => tb.HasComment("Tabla transaccional que contiene los estados financieros de las ARS, obtenido a partir de la Balanza de Comprobación."));

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.SeguimientoPeriodo)
                .HasComment("Periodo (Año y Mes) correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.PlanCuentaNumero)
                .HasComment("Es el número único de cada tipo de planes relacionados con los reportes de los estados financieros")
                .HasColumnName("Plan_Cuenta_Numero");
            entity.Property(e => e.EstadoFinancieroNumero)
                .HasComment("Número único que identifica cada uno de los estados financieros.")
                .HasColumnName("Estado_Financiero_Numero");
            entity.Property(e => e.EstadoResultadoNumero)
                .HasComment("Es el número único que identifica una cuenta o resultado en los reporte financieros.")
                .HasColumnName("Estado_Resultado_Numero");
            entity.Property(e => e.CuentaCodigo)
                .HasComment("Es el código único que representa cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Codigo");
            entity.Property(e => e.BalanceActual)
                .HasComment("Es el balance actual que tiene la cuenta para el periodo reportado en el esquema 5, en el cual se informa la Balanza de comprobación.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Balance_Actual");
            entity.Property(e => e.CuentaNombre)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Nombre de la cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Nombre");
            entity.Property(e => e.CuentaTipoNumero)
                .HasComment("Tipifica las cuentas contables según las cuentas mayores.")
                .HasColumnName("Cuenta_Tipo_Numero");
            entity.Property(e => e.EstadoResultadoDetalleOrden)
                .HasComment("Indica el orden en que se presentará  cuenta o resultado en los reporte financieros.")
                .HasColumnName("Estado_Resultado_Detalle_Orden");
            entity.Property(e => e.EstadoResultadoNegrita)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si presentará en formato negrita una cuenta o resultado en los reporte financieros.")
                .HasColumnName("Estado_Resultado_Negrita");
            entity.Property(e => e.EstadoResultadoNivel)
                .HasComment("Indica el orden en que se calculará  cuenta o resultado en los reporte financieros.")
                .HasColumnName("Estado_Resultado_Nivel");
            entity.Property(e => e.PlanGrupoNumero)
                .HasComment("Es el número único asignado para identificar cuales Planes de Salud son del PDSS o son de los demás planes (Voluntarios, Complementarios, Especiales, etc.), esta columna actualmente solo se utiliza en los estados de resultados de los estados financieros.")
                .HasColumnName("Plan_Grupo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.FinancierosEstadosTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Estados_Trans_ARS_Master");

            entity.HasOne(d => d.PlanCuentaNumeroNavigation).WithMany(p => p.FinancierosEstadosTrans)
                .HasForeignKey(d => d.PlanCuentaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Estados_Trans_Financieros_Planes_Cata");

            entity.HasOne(d => d.Estado).WithMany(p => p.FinancierosEstadosTrans)
                .HasForeignKey(d => new { d.EstadoFinancieroNumero, d.EstadoResultadoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Estados_Trans_Financieros_Estados_Cuentas_Cata");
        });

        modelBuilder.Entity<FinancierosEstadosTransHistorico>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.SeguimientoPeriodo, e.PlanCuentaNumero, e.EstadoFinancieroNumero, e.EstadoResultadoNumero, e.CuentaCodigo, e.RegistroFechaHistorico });

            entity.ToTable("Financieros_Estados_Trans_Historico", tb => tb.HasComment("Tabla transaccional que contiene los estados financieros de las ARS, obtenido a partir de la Balanza de Comprobación."));

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.SeguimientoPeriodo)
                .HasComment("Periodo (Año y Mes) correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.PlanCuentaNumero)
                .HasComment("Es el número único de cada tipo de planes relacionados con los reportes de los estados financieros")
                .HasColumnName("Plan_Cuenta_Numero");
            entity.Property(e => e.EstadoFinancieroNumero)
                .HasComment("Número único que identifica cada uno de los estados financieros.")
                .HasColumnName("Estado_Financiero_Numero");
            entity.Property(e => e.EstadoResultadoNumero)
                .HasComment("Es el número único que identifica una cuenta o resultado en los reporte financieros.")
                .HasColumnName("Estado_Resultado_Numero");
            entity.Property(e => e.CuentaCodigo)
                .HasComment("Es el código único que representa cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Codigo");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.BalanceActual)
                .HasComment("Es el balance actual que tiene la cuenta para el periodo reportado en el esquema 5, en el cual se informa la Balanza de comprobación.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Balance_Actual");
            entity.Property(e => e.CuentaNombre)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Nombre de la cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Nombre");
            entity.Property(e => e.CuentaTipoNumero)
                .HasComment("Tipifica las cuentas contables según las cuentas mayores.")
                .HasColumnName("Cuenta_Tipo_Numero");
            entity.Property(e => e.EstadoResultadoDetalleOrden)
                .HasComment("Indica el orden en que se presentará  cuenta o resultado en los reporte financieros.")
                .HasColumnName("Estado_Resultado_Detalle_Orden");
            entity.Property(e => e.EstadoResultadoNegrita)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si presentará en formato negrita una cuenta o resultado en los reporte financieros.")
                .HasColumnName("Estado_Resultado_Negrita");
            entity.Property(e => e.EstadoResultadoNivel)
                .HasComment("Indica el orden en que se calculará  cuenta o resultado en los reporte financieros.")
                .HasColumnName("Estado_Resultado_Nivel");
            entity.Property(e => e.PlanGrupoNumero)
                .HasComment("Es el número único asignado para identificar cuales Planes de Salud son del PDSS o son de los demás planes (Voluntarios, Complementarios, Especiales, etc.), esta columna actualmente solo se utiliza en los estados de resultados de los estados financieros.")
                .HasColumnName("Plan_Grupo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroMotivoHistorico)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Registro_Motivo_Historico");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
        });

        modelBuilder.Entity<FinancierosPagosComisionesRecargasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.PromotorNumero, e.PlanNumero });

            entity.ToTable("Financieros_Pagos_Comisiones_Recargas_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único con el que se identifica la Administradora de Riesgos de Salud ARS.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.PromotorNumero)
                .HasComment("Número de cuenta o número único con el que se identifica de forma específica al promotor dentro del sistema de la ARS.")
                .HasColumnName("Promotor_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Número único del Tipo de Plan relacionado con el pago de las comisiones.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PagoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Pago_Estado");
            entity.Property(e => e.PagoPeriodo).HasColumnName("Pago_Periodo");
            entity.Property(e => e.PlanTipoNumero).HasColumnName("Plan_Tipo_Numero");
            entity.Property(e => e.PromotorMontoPagado)
                .HasComment("Monto total pagado por comisiones a un promotor por un tipo de plan específico.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Promotor_Monto_Pagado");
            entity.Property(e => e.PromotorRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Número de cédula o RNC del promotor a cual se realizó el pago de la comisiones.")
                .HasColumnName("Promotor_Rnc_O_Cedula");
            entity.Property(e => e.PromotorTelefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Número de teléfono de contacto de promotor.")
                .HasColumnName("Promotor_Telefono");
            entity.Property(e => e.PromotorTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Número único que Indica si el promotor es 1 = Físico = F (Persona) o 2 = Moral  = M (Empresa).")
                .HasColumnName("Promotor_Tipo_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<FinancierosPagosComisionesTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.PromotorRncOCedula, e.PlanTipoNumero, e.PlanNumero, e.PagoEstado }).HasName("PK_Financieros_Pagos_Comisiones_Temporal_Trans_1");

            entity.ToTable("Financieros_Pagos_Comisiones_Temporal_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único con el que se identifica la Administradora de Riesgos de Salud ARS.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.PromotorRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Número de cédula o RNC del promotor a cual se realizó el pago de la comisiones.")
                .HasColumnName("Promotor_Rnc_O_Cedula");
            entity.Property(e => e.PlanTipoNumero)
                .HasComment("Número único asignado a cada tipo de plan de salud.")
                .HasColumnName("Plan_Tipo_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Número único del Tipo de Plan relacionado con el pago de las comisiones.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PagoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el pago de la reclamación esta pagado (P) o cancelado (C)")
                .HasColumnName("Pago_Estado");
            entity.Property(e => e.DocumentoPagoNumero).HasColumnName("Documento_Pago_Numero");
            entity.Property(e => e.DocumentoPagoTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("('NR')")
                .IsFixedLength()
                .HasColumnName("Documento_Pago_Tipo_Codigo");
            entity.Property(e => e.PagoFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Pago_Fecha");
            entity.Property(e => e.PagoPeriodo)
                .HasComment("Indica el periodo al que corresponde el pago de la reclamación cuando su estado es (C) ")
                .HasColumnName("Pago_Periodo");
            entity.Property(e => e.PromotorMontoPagado)
                .HasComment("Monto total pagado por comisiones a un promotor por un tipo de plan específico.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Promotor_Monto_Pagado");
            entity.Property(e => e.PromotorNombre)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Nombre completo del promotor ")
                .HasColumnName("Promotor_Nombre");
            entity.Property(e => e.PromotorNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de cuenta o número único con el que se identifica de forma específica al promotor dentro del sistema de la ARS.")
                .HasColumnName("Promotor_Numero");
            entity.Property(e => e.PromotorTelefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Número de teléfono de contacto de promotor.")
                .HasColumnName("Promotor_Telefono");
            entity.Property(e => e.PromotorTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el promotor es 1 = Físico = F (Persona) o 2 = Moral  = M (Empresa).")
                .HasColumnName("Promotor_Tipo_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<FinancierosPagosComisionesTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.SeguimientoPeriodo, e.PlanTipoNumero, e.PlanNumero, e.PromotorRncOCedula, e.PagoEstado });

            entity.ToTable("Financieros_Pagos_Comisiones_Trans");

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único con el que se identifica la Administradora de Riesgos de Salud ARS.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.PlanTipoNumero).HasColumnName("Plan_Tipo_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Número único del Tipo de Plan relacionado con el pago de las comisiones.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PromotorRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Número de cédula o RNC del promotor a cual se realizó el pago de la comisiones.")
                .HasColumnName("Promotor_Rnc_O_Cedula");
            entity.Property(e => e.PagoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Pago_Estado");
            entity.Property(e => e.DocumentoPagoNumero).HasColumnName("Documento_Pago_Numero");
            entity.Property(e => e.DocumentoPagoTipoNumero)
                .HasDefaultValueSql("((3))")
                .HasColumnName("Documento_Pago_Tipo_Numero");
            entity.Property(e => e.PagoFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Pago_Fecha");
            entity.Property(e => e.PagoPeriodo).HasColumnName("Pago_Periodo");
            entity.Property(e => e.PromotorDocumentoTipoNumero)
                .HasComment("Número único que identifica el documento del promotor.")
                .HasColumnName("Promotor_Documento_Tipo_Numero");
            entity.Property(e => e.PromotorMontoPagado)
                .HasComment("Monto total pagado por comisiones a un promotor por un tipo de plan específico.")
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Promotor_Monto_Pagado");
            entity.Property(e => e.PromotorNombre)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasComment("Nombre completo del promotor ")
                .HasColumnName("Promotor_Nombre");
            entity.Property(e => e.PromotorNumero)
                .HasComment("Número de cuenta o número único con el que se identifica de forma específica al promotor dentro del sistema de la ARS.")
                .HasColumnName("Promotor_Numero");
            entity.Property(e => e.PromotorTelefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Número de teléfono de contacto de promotor.")
                .HasColumnName("Promotor_Telefono");
            entity.Property(e => e.PromotorTipoNumero)
                .HasComment("Indica si el promotor es 1 = Físico = F (Persona) o 2 = Moral  = M (Empresa).")
                .HasColumnName("Promotor_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");

            entity.HasOne(d => d.PlanNumeroNavigation).WithMany(p => p.FinancierosPagosComisionesTrans)
                .HasForeignKey(d => d.PlanNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Pagos_Comisiones_Trans_Planes_Master");

            entity.HasOne(d => d.PromotorDocumentoTipoNumeroNavigation).WithMany(p => p.FinancierosPagosComisionesTrans)
                .HasForeignKey(d => d.PromotorDocumentoTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Pagos_Comisiones_Trans_Financieros_Promotores_Tipo_Documento_Cata");

            entity.HasOne(d => d.PromotorTipoNumeroNavigation).WithMany(p => p.FinancierosPagosComisionesTrans)
                .HasForeignKey(d => d.PromotorTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Pagos_Comisiones_Trans_Financieros_Promotores_Tipo_Cata");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.FinancierosPagosComisionesTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Pagos_Comisiones_Trans_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<FinancierosPlanesCatum>(entity =>
        {
            entity.HasKey(e => e.PlanCuentaNumero).HasName("PK_Financieros_Cuentas_Planes_Cata");

            entity.ToTable("Financieros_Planes_Cata", tb => tb.HasComment("Tabla catálogo que contiene cada tipo de planes relacionados con los reportes de los estados financieros."));

            entity.Property(e => e.PlanCuentaNumero)
                .HasComment("Es el número único de cada tipo de planes relacionados con los reportes de los estados financieros")
                .HasColumnName("Plan_Cuenta_Numero");
            entity.Property(e => e.PlanCuentaDescripcion)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasComment("Es la descripción de cada tipo de planes relacionados con los reportes de los estados financieros")
                .HasColumnName("Plan_Cuenta_Descripcion");
            entity.Property(e => e.PlanCuentaPeriodo)
                .HasDefaultValueSql("((201001))")
                .HasComment("Periodo determinado para las cuentas de los estados financieros y grupos, esta columna actualmente solo se utiliza en los estados de resultados de los estados financieros.")
                .HasColumnName("Plan_Cuenta_Periodo");
            entity.Property(e => e.PlanGrupoNumero)
                .HasComment("Es el número único asignado para identificar cuales Planes de Salud son del PDSS o son de los demás planes (Voluntarios, Complementarios, Especiales, etc.), esta columna actualmente solo se utiliza en los estados de resultados de los estados financieros.")
                .HasColumnName("Plan_Grupo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PlanGrupoNumeroNavigation).WithMany(p => p.FinancierosPlanesCata)
                .HasForeignKey(d => d.PlanGrupoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Planes_Cata_Financieros_Planes_Grupos_Cata");
        });

        modelBuilder.Entity<FinancierosPlanesCuentasAfiliadosCatum>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.PeriodoFactura, e.CuentaCodigoIngreso, e.CuentaCodigo });

            entity.ToTable("Financieros_Planes_Cuentas_Afiliados_Cata", tb => tb.HasComment("Tabla catálogo que contiene el calculo por cartera de afiliados de cada tipo de planes relacionados con los reportes de los estados financieros."));

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.PeriodoFactura)
                .HasComment("Es el año y mes correspondiente al período de factura,  este período es en él se factura (Generación de NP) a los empleadores basado en sus nóminas depositadas en las TSS.")
                .HasColumnName("Periodo_Factura");
            entity.Property(e => e.CuentaCodigoIngreso)
                .HasComment("Es el código único que representa cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Codigo_Ingreso");
            entity.Property(e => e.CuentaCodigo)
                .HasComment("Es el código único que representa cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Codigo");
            entity.Property(e => e.CarteraAfiliados)
                .HasComment("Número Promedio de Afiliados Mínimos a reportar en Cartera.")
                .HasColumnName("Cartera_Afiliados");
            entity.Property(e => e.CarteraAfiliadosMiimo)
                .HasComment("Número de Afiliados Mínimos a reportar en Cartera.")
                .HasColumnName("Cartera_Afiliados_Miimo");
            entity.Property(e => e.CarteraAfiliadosPromedio)
                .HasComment("Número Promedio de Afiliados Mínimos a reportar en Cartera.")
                .HasColumnName("Cartera_Afiliados_Promedio");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<FinancierosPlanesCuentasCatum>(entity =>
        {
            entity.HasKey(e => new { e.CuentaCodigo, e.PlanCuentaNumero });

            entity.ToTable("Financieros_Planes_Cuentas_Cata");

            entity.Property(e => e.CuentaCodigo).HasColumnName("Cuenta_Codigo");
            entity.Property(e => e.PlanCuentaNumero).HasColumnName("Plan_Cuenta_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<FinancierosPlanesGruposCatum>(entity =>
        {
            entity.HasKey(e => e.PlanGrupoNumero);

            entity.ToTable("Financieros_Planes_Grupos_Cata", tb => tb.HasComment("Tabla catálogo que contiene cada grupo de planes relacionados con los reportes de los estados financieros."));

            entity.Property(e => e.PlanGrupoNumero)
                .HasComment("Es el número único asignado para identificar cuales Planes de Salud son del PDSS o son de los demás planes (Voluntarios, Complementarios, Especiales, etc.), esta columna actualmente solo se utiliza en los estados de resultados de los estados financieros.")
                .HasColumnName("Plan_Grupo_Numero");
            entity.Property(e => e.PlanGrupoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el código asignado para identificar cuales grupos Planes de Salud son del PDSS o son de los demás planes (Voluntarios, Complementarios, Especiales, etc.), esta columna actualmente solo se utiliza en los estados de resultados de los estados financieros.")
                .HasColumnName("Plan_Grupo_Codigo");
            entity.Property(e => e.PlanGrupoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es la descripción que identifica cuales Planes de Salud son del PDSS o son de los demás planes (Voluntarios, Complementarios, Especiales, etc.), esta columna se utiliza en los estados de resultados de los estados financieros.")
                .HasColumnName("PLan_Grupo_Descripcion");
            entity.Property(e => e.PlanGrupoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Es la explicación que identifica cuales Planes de Salud son del PDSS o son de los demás planes (Voluntarios, Complementarios, Especiales, etc.), esta columna se utiliza en los estados de resultados de los estados financieros.")
                .HasColumnName("PLan_Grupo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<FinancierosPromotoresDocumentosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.PromotorDocumentoTipoNumero).HasName("PK_Financieros_Promotores_Tipo_Documento_Cata");

            entity.ToTable("Financieros_Promotores_Documentos_Tipo_Cata");

            entity.Property(e => e.PromotorDocumentoTipoNumero)
                .HasComment("Número único que identifica el documento del promotor.")
                .HasColumnName("Promotor_Documento_Tipo_Numero");
            entity.Property(e => e.PromotorDocumentoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código que identifica el promotor (C = Cédula, R = RNC, P = RNC Pendiente).")
                .HasColumnName("Promotor_Documento_Tipo_Codigo");
            entity.Property(e => e.PromotorDocumentoTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de documento del promotor.")
                .HasColumnName("Promotor_Documento_Tipo_Descripcion");
            entity.Property(e => e.PromotorDocumentoTipoExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Explicación del tipo de documento del promotor.")
                .HasColumnName("Promotor_Documento_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<FinancierosPromotoresTipoCatum>(entity =>
        {
            entity.HasKey(e => e.PromotorTipoNumero).HasName("PK_Financieros_Promotores_Tipo_Cata_1");

            entity.ToTable("Financieros_Promotores_Tipo_Cata");

            entity.Property(e => e.PromotorTipoNumero)
                .HasComment("Número único que identifica el tipo de promotor.")
                .HasColumnName("Promotor_Tipo_Numero");
            entity.Property(e => e.PromotorTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código que identifica si el promotor es Físico = F (Persona) o Moral  = M (Empresa).")
                .HasColumnName("Promotor_Tipo_Codigo");
            entity.Property(e => e.PromotorTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de promotor.")
                .HasColumnName("Promotor_Tipo_Descripcion");
            entity.Property(e => e.PromotorTipoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Explicación del tipo de promotor.")
                .HasColumnName("Promotor_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<FinancierosReclamacionesArsRecargasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.ReclamacionAutorizacionNumero, e.PlanNumero });

            entity.ToTable("Financieros_Reclamaciones_ARS_Recargas_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único con el que se identifica la Administradora de Riesgos de Salud ARS.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.ReclamacionAutorizacionNumero)
                .HasComment("Número único que asigna la ARS a cada autorización de cobertura en su sistema.")
                .HasColumnName("Reclamacion_Autorizacion_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Número único del Plan relacionado con la autorización, es el número que asigna la SISALRIL a un plan de cobertura de servicios de salud en el SFS.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número de seguridad social del afiliado cuando la autorización corresponde a los planes del PDSS, Complementarios  y  de Medicina Pre-pagada.")
                .HasColumnName("Afiliado_NSS");
            entity.Property(e => e.AfiliadoNumeroUnico)
                .HasComment("Número único del afiliado con el que está registrado en el sistema de la ARS.")
                .HasColumnName("Afiliado_Numero_Unico");
            entity.Property(e => e.DocumentoPagoNumero)
                .HasComment("Es el número de Cheque o transacción bancaria con la cual la ARS realizó el último pago a la PSS, por cada autorización reportada. Al corte del período correspondiente.")
                .HasColumnName("Documento_Pago_Numero");
            entity.Property(e => e.DocumentoPagoTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el tipo de documento Cheque = CK o transacción bancaria = TR con el cual la ARS realizó el último pago a la PSS, por cada autorización reportada. Al corte del período correspondiente.")
                .HasColumnName("Documento_Pago_Tipo_Codigo");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único de la PSS, según el catálogo de Prestadoras de Servicios de Salud del SIMON.")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.ReclamacionEstadoCodigo)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Estado en que se encuentran cada una de  las autorizaciones al momento de ser reportada en el esquema. Al corte del período correspondiente.")
                .HasColumnName("Reclamacion_Estado_Codigo");
            entity.Property(e => e.ReclamacionFecha)
                .HasComment("Fecha a la que corresponde la reclamación. Formato DDMMYYYY.")
                .HasColumnName("Reclamacion_Fecha");
            entity.Property(e => e.ReclamacionFechaAutorizacion)
                .HasComment("Fecha a la que corresponde la autorización. Formato DDMMYYYY.")
                .HasColumnName("Reclamacion_Fecha_Autorizacion");
            entity.Property(e => e.ReclamacionFechaInicioServicio)
                .HasComment("Fecha es que se inicio la entrega de los servicios por parte de la PSS al Afiliado. Formato DDMMYYYY.")
                .HasColumnName("Reclamacion_Fecha_Inicio_Servicio");
            entity.Property(e => e.ReclamacionFechaUltimoPago)
                .HasComment("Fecha en que se realizo el último pago a la reclamación. Formato DDMMYYYY.")
                .HasColumnName("Reclamacion_Fecha_Ultimo_Pago");
            entity.Property(e => e.ReclamacionMontoAutorizado)
                .HasComment("Monto total aprobado por cada autorización reportada. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Reclamacion_Monto_Autorizado");
            entity.Property(e => e.ReclamacionMontoCopago)
                .HasComment("Es el monto que pago el afiliado directamente a la PSS como diferencia de cobertura no cubierta por la ARS por cada autorización reportada. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Reclamacion_Monto_Copago");
            entity.Property(e => e.ReclamacionMontoGlosado)
                .HasComment("Es el monto aclarado por la ARS partir del monto reclamado por la PSS por los servicios prestados por cada autorización reportada.")
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Reclamacion_Monto_Glosado");
            entity.Property(e => e.ReclamacionMontoPagado)
                .HasComment("Es el monto total pagado por la ARS a la PSS por cada autorización reportada. Al corte del período correspondiente.")
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Reclamacion_Monto_Pagado");
            entity.Property(e => e.ReclamacionMontoReclamado)
                .HasComment("Es el monto que reclama la PSS a la ARS por los servicios prestados por cada autorización reportada. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Reclamacion_Monto_Reclamado");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguroTipoCodigo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Seguro bajo el cual se prestaron los servicios.  (1 = SFS = FS, 2 = SRL = RL, 3 = AT = AT).")
                .HasColumnName("Seguro_Tipo_Codigo");
            entity.Property(e => e.ServicioTipoNumero)
                .HasComment("Caracterización del tipo de servicio prestado.")
                .HasColumnName("Servicio_Tipo_Numero");
        });

        modelBuilder.Entity<FinancierosReclamacionesArsTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.ReclamacionAutorizacionNumero, e.PlanNumero });

            entity.ToTable("Financieros_Reclamaciones_ARS_Temporal_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único con el que se identifica la Administradora de Riesgos de Salud ARS.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.ReclamacionAutorizacionNumero)
                .HasComment("Número único que asigna la ARS a cada autorización de cobertura en su sistema.")
                .HasColumnName("Reclamacion_Autorizacion_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Número único del Plan relacionado con la autorización, es el número que asigna la SISALRIL a un plan de cobertura de servicios de salud en el SFS.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número de seguridad social del afiliado cuando la autorización corresponde a los planes del PDSS, Complementarios  y  de Medicina Pre-pagada.")
                .HasColumnName("Afiliado_NSS");
            entity.Property(e => e.AfiliadoNumeroUnico)
                .HasComment("Número único del afiliado con el que está registrado en el sistema de la ARS.")
                .HasColumnName("Afiliado_Numero_Unico");
            entity.Property(e => e.DocumentoPagoNumero)
                .HasComment("Es el número de Cheque o transacción bancaria con la cual la ARS realizó el último pago a la PSS, por cada autorización reportada. Al corte del período correspondiente.")
                .HasColumnName("Documento_Pago_Numero");
            entity.Property(e => e.DocumentoPagoTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el tipo de documento Cheque = CK o transacción bancaria = TR con el cual la ARS realizó el último pago a la PSS, por cada autorización reportada. Al corte del período correspondiente.")
                .HasColumnName("Documento_Pago_Tipo_Codigo");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único de la PSS, según el catálogo de Prestadoras de Servicios de Salud del SIMON.")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.ReclamacionEstadoNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Estado en que se encuentran cada una de  las autorizaciones al momento de ser reportada en el esquema. Al corte del período correspondiente.")
                .HasColumnName("Reclamacion_Estado_Numero");
            entity.Property(e => e.ReclamacionFecha)
                .HasComment("Fecha a la que corresponde la reclamación. Formato DDMMYYYY.")
                .HasColumnName("Reclamacion_Fecha");
            entity.Property(e => e.ReclamacionFechaAutorizacion)
                .HasComment("Fecha a la que corresponde la autorización. Formato DDMMYYYY.")
                .HasColumnName("Reclamacion_Fecha_Autorizacion");
            entity.Property(e => e.ReclamacionFechaInicioServicio)
                .HasComment("Fecha es que se inicio la entrega de los servicios por parte de la PSS al Afiliado. Formato DDMMYYYY.")
                .HasColumnName("Reclamacion_Fecha_Inicio_Servicio");
            entity.Property(e => e.ReclamacionFechaUltimoPago)
                .HasComment("Fecha en que se realizo el último pago a la reclamación. Formato DDMMYYYY.")
                .HasColumnName("Reclamacion_Fecha_Ultimo_Pago");
            entity.Property(e => e.ReclamacionMontoAutorizado)
                .HasComment("Monto total aprobado por cada autorización reportada. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Reclamacion_Monto_Autorizado");
            entity.Property(e => e.ReclamacionMontoCopago)
                .HasComment("Es el monto que pago el afiliado directamente a la PSS como diferencia de cobertura no cubierta por la ARS por cada autorización reportada. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Reclamacion_Monto_Copago");
            entity.Property(e => e.ReclamacionMontoGlosado)
                .HasComment("Es el monto aclarado por la ARS partir del monto reclamado por la PSS por los servicios prestados por cada autorización reportada.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Reclamacion_Monto_Glosado");
            entity.Property(e => e.ReclamacionMontoPagado)
                .HasComment("Es el monto total pagado por la ARS a la PSS por cada autorización reportada. Al corte del período correspondiente.")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Reclamacion_Monto_Pagado");
            entity.Property(e => e.ReclamacionMontoReclamado)
                .HasComment("Es el monto que reclama la PSS a la ARS por los servicios prestados por cada autorización reportada. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Reclamacion_Monto_Reclamado");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguroTipoCodigo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Seguro bajo el cual se prestaron los servicios.  (1 = SFS = FS, 2 = SRL = RL, 3 = AT = AT).")
                .HasColumnName("Seguro_Tipo_Codigo");
            entity.Property(e => e.ServicioTipoNumero)
                .HasComment("Caracterización del tipo de servicio prestado.")
                .HasColumnName("Servicio_Tipo_Numero");
        });

        modelBuilder.Entity<FinancierosReclamacionesArsTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.SeguimientoPeriodo, e.ReclamacionAutorizacionNumero, e.ReclamacionEstadoNumero, e.PlanNumero });

            entity.ToTable("Financieros_Reclamaciones_ARS_Trans");

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único con el que se identifica la Administradora de Riesgos de Salud ARS.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.SeguimientoPeriodo)
                .HasComment("Periodo al que corresponde la carga realizada por la ARS.")
                .HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ReclamacionAutorizacionNumero)
                .HasComment("Número único que asigna la ARS a cada autorización de cobertura en su sistema.")
                .HasColumnName("Reclamacion_Autorizacion_Numero");
            entity.Property(e => e.ReclamacionEstadoNumero)
                .HasComment("Estado en que se encuentran cada una de  las autorizaciones al momento de ser reportada en el esquema. Al corte del período correspondiente.")
                .HasColumnName("Reclamacion_Estado_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Número único del Plan relacionado con la autorización, es el número que asigna la SISALRIL a un plan de cobertura de servicios de salud en el SFS.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número de seguridad social del afiliado cuando la autorización corresponde a los planes del PDSS, Complementarios  y  de Medicina Pre-pagada.")
                .HasColumnName("Afiliado_NSS");
            entity.Property(e => e.AfiliadoNumeroUnico)
                .HasComment("Número único del afiliado con el que está registrado en el sistema de la ARS.")
                .HasColumnName("Afiliado_Numero_Unico");
            entity.Property(e => e.DocumentoPagoNumero)
                .HasComment("Es el número de Cheque o transacción bancaria con la cual la ARS realizó el último pago a la PSS, por cada autorización reportada. Al corte del período correspondiente.")
                .HasColumnName("Documento_Pago_Numero");
            entity.Property(e => e.DocumentoPagoTipoNumero)
                .HasComment("Es el tipo de documento Cheque = CK o transacción bancaria = TR con el cual la ARS realizó el último pago a la PSS, por cada autorización reportada. Al corte del período correspondiente.")
                .HasColumnName("Documento_Pago_Tipo_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único de la PSS, según el catálogo de Prestadoras de Servicios de Salud del SIMON.")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.ReclamacionFecha)
                .HasComment("Fecha a la que corresponde la reclamación. Formato DDMMYYYY.")
                .HasColumnName("Reclamacion_Fecha");
            entity.Property(e => e.ReclamacionFechaAutorizacion)
                .HasComment("Fecha a la que corresponde la autorización. Formato DDMMYYYY.")
                .HasColumnName("Reclamacion_Fecha_Autorizacion");
            entity.Property(e => e.ReclamacionFechaInicioServicio)
                .HasComment("Fecha es que se inicio la entrega de los servicios por parte de la PSS al Afiliado. Formato DDMMYYYY.")
                .HasColumnName("Reclamacion_Fecha_Inicio_Servicio");
            entity.Property(e => e.ReclamacionFechaUltimoPago)
                .HasComment("Fecha en que se realizo el último pago a la reclamación. Formato DDMMYYYY.")
                .HasColumnName("Reclamacion_Fecha_Ultimo_Pago");
            entity.Property(e => e.ReclamacionMontoAutorizado)
                .HasComment("Monto total aprobado por cada autorización reportada. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Reclamacion_Monto_Autorizado");
            entity.Property(e => e.ReclamacionMontoCopago)
                .HasComment("Es el monto que pago el afiliado directamente a la PSS como diferencia de cobertura no cubierta por la ARS por cada autorización reportada. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Reclamacion_Monto_Copago");
            entity.Property(e => e.ReclamacionMontoGlosado)
                .HasComment("Es el monto aclarado por la ARS partir del monto reclamado por la PSS por los servicios prestados por cada autorización reportada.")
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Reclamacion_Monto_Glosado");
            entity.Property(e => e.ReclamacionMontoPagado)
                .HasComment("Es el monto total pagado por la ARS a la PSS por cada autorización reportada. Al corte del período correspondiente.")
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Reclamacion_Monto_Pagado");
            entity.Property(e => e.ReclamacionMontoReclamado)
                .HasComment("Es el monto que reclama la PSS a la ARS por los servicios prestados por cada autorización reportada. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Reclamacion_Monto_Reclamado");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.SeguroTipoNumero)
                .HasComment("Seguro bajo el cual se prestaron los servicios.  (1 = SFS = FS, 2 = SRL = RL, 3 = AT = AT).")
                .HasColumnName("Seguro_Tipo_Numero");
            entity.Property(e => e.ServicioTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Caracterización del tipo de servicio prestado.")
                .HasColumnName("Servicio_Tipo_Codigo");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.FinancierosReclamacionesArsTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Reclamaciones_ARS_Trans_ARS_Master");

            entity.HasOne(d => d.DocumentoPagoTipoNumeroNavigation).WithMany(p => p.FinancierosReclamacionesArsTrans)
                .HasForeignKey(d => d.DocumentoPagoTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Reclamaciones_ARS_Trans_Financieros_Documentos_Pago_Tipo_Cata");

            entity.HasOne(d => d.PlanNumeroNavigation).WithMany(p => p.FinancierosReclamacionesArsTrans)
                .HasForeignKey(d => d.PlanNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Reclamaciones_ARS_Trans_Planes_Master");

            entity.HasOne(d => d.PrestadoraNumeroNavigation).WithMany(p => p.FinancierosReclamacionesArsTrans)
                .HasForeignKey(d => d.PrestadoraNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Reclamaciones_ARS_Trans_Prestadoras_Master");

            entity.HasOne(d => d.ReclamacionEstadoNumeroNavigation).WithMany(p => p.FinancierosReclamacionesArsTrans)
                .HasForeignKey(d => d.ReclamacionEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Reclamaciones_ARS_Trans_Financieros_Reclamaciones_Autorizaciones_Estados_Cata");

            entity.HasOne(d => d.SeguroTipoNumeroNavigation).WithMany(p => p.FinancierosReclamacionesArsTrans)
                .HasForeignKey(d => d.SeguroTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Reclamaciones_ARS_Trans_Financieros_Seguros_Tipo_Cata");

            entity.HasOne(d => d.ServicioTipoCodigoNavigation).WithMany(p => p.FinancierosReclamacionesArsTrans)
                .HasForeignKey(d => d.ServicioTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Reclamaciones_ARS_Trans_Episodios_Servicios_Tipo_Cata");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.FinancierosReclamacionesArsTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Financieros_Reclamaciones_ARS_Trans_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<FinancierosReclamacionesEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.ReclamacionEstadoNumero).HasName("PK_Financieros_Autorizaciones_Estados_Cata");

            entity.ToTable("Financieros_Reclamaciones_Estados_Cata", tb => tb.HasComment("Es una tabla catálogo que contiene los estados de las reclamaciones o autorizaciones al momento de ser reportada."));

            entity.Property(e => e.ReclamacionEstadoNumero)
                .HasComment("Estado en que se encuentran cada una de  las autorizaciones al momento de ser reportada en el esquema. Al corte del período correspondiente.")
                .HasColumnName("Reclamacion_Estado_Numero");
            entity.Property(e => e.CuentaCodigo)
                .HasDefaultValueSql("('')")
                .HasComment("Es el código único que representa cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Codigo");
            entity.Property(e => e.CuentaCodigoBalance)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Es el código único que representa cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Codigo_Balance");
            entity.Property(e => e.ReclamacionEstadoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("Código que representa el estado de la reclamación o autorización al momento de ser reportada y estas pueden ser: 01:AU (Autorizadas) , 02:RE (Reclamada) 03:PA (Pagada), 04:RP (Reaperturada) ,05:NU (Nula) .")
                .HasColumnName("Reclamacion_Estado_Codigo");
            entity.Property(e => e.ReclamacionEstadoDescripcion)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasComment("Descripción del estado de la reclamación reportada.")
                .HasColumnName("Reclamacion_Estado_Descripcion");
            entity.Property(e => e.ReclamacionEstadoExplicacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Explicación del estado de la reclamación reportada.")
                .HasColumnName("Reclamacion_Estado_Explicacion");
            entity.Property(e => e.ReclamacionEstadoValidarPss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasComment("Indica si estado si de la reclamación se validará el número de Prestadora de Servicios de Salud.")
                .HasColumnName("Reclamacion_Estado_Validar_PSS");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<FinancierosSegurosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.SeguroTipoNumero);

            entity.ToTable("Financieros_Seguros_Tipo_Cata");

            entity.Property(e => e.SeguroTipoNumero)
                .HasComment("Número único que identifica el Seguro bajo el cual se prestaron los servicios.  (SFS=FS, SRL=RL, AT=AT).")
                .HasColumnName("Seguro_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguroTipoCodigo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Código del Seguro bajo el cual se prestaron los servicios.  (SFS=FS, SRL=RL, AT=AT).")
                .HasColumnName("Seguro_Tipo_Codigo");
            entity.Property(e => e.SeguroTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del Seguro bajo el cual se prestaron los servicios.  (SFS=FS, SRL=RL, AT=AT).")
                .HasColumnName("Seguro_Tipo_Descripcion");
            entity.Property(e => e.SeguroTipoSiglas)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Siglas del Seguro bajo el cual se prestaron los servicios.  (SFS=FS, SRL=RL, AT=AT).")
                .HasColumnName("Seguro_Tipo_Siglas");
        });

        modelBuilder.Entity<GruposExplicacion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Grupos_Explicacion");

            entity.Property(e => e.Servicio).HasMaxLength(255);
        });

        modelBuilder.Entity<Hoja1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Hoja1$");

            entity.Property(e => e.CuentaBanco)
                .HasMaxLength(255)
                .HasColumnName("CUENTA_BANCO");
            entity.Property(e => e.Monto).HasColumnName("MONTO");
            entity.Property(e => e.Motivo)
                .HasMaxLength(255)
                .HasColumnName("MOTIVO");
            entity.Property(e => e.Nombre)
                .HasMaxLength(255)
                .HasColumnName("NOMBRE");
            entity.Property(e => e.NumeroRastreo)
                .HasMaxLength(255)
                .HasColumnName("NUMERO_RASTREO");
            entity.Property(e => e.Rnc)
                .HasMaxLength(255)
                .HasColumnName("RNC");
        });

        modelBuilder.Entity<IndicadoresPssSubTemasCatum>(entity =>
        {
            entity.HasKey(e => e.IndicadorSubTemaNumero);

            entity.ToTable("Indicadores_PSS_SubTemas_Cata", tb =>
                {
                    tb.HasComment("Es un catálogo que contiene los detalles  de los sub temas relacionados con los indicadores  (Preguntas realizadas en las visitas de evaluación de las PSS contratadas por las ARS) según temas, su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Indicadores_PSS_SubTemas_Cata_Delete");
                    tb.HasTrigger("Indicadores_PSS_SubTemas_Cata_Update");
                });

            entity.Property(e => e.IndicadorSubTemaNumero)
                .ValueGeneratedOnAdd()
                .HasComment("Es el número único de cada uno de los subtemas que agrupan las preguntas (Indicadores) que se utiliza en los procesos de visitas de supervisión que se realizan a las prestadoras  de servicios de salud de categoría institucional.")
                .HasColumnName("Indicador_SubTema_Numero");
            entity.Property(e => e.IndicadorSubTemaDescripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("Es la descripción de cada uno de los subtemas que agrupan las preguntas (Indicadores) que se utiliza en los procesos de visitas de supervisión que se realizan a las prestadoras  de servicios de salud de categoría institucional.")
                .HasColumnName("Indicador_SubTema_Descripcion");
            entity.Property(e => e.IndicadorTemaNumero)
                .HasComment("Es el número único de cada tema que agrupan las preguntas (Indicadores) que se utiliza en los procesos de visitas de supervisión que se realizan a las prestadoras  de servicios de salud de categoría institucional.")
                .HasColumnName("Indicador_Tema_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.IndicadorTemaNumeroNavigation).WithMany(p => p.IndicadoresPssSubTemasCata)
                .HasForeignKey(d => d.IndicadorTemaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Indicadores_PSS_SubTemas_Cata_Indicadores_PSS_Temas_Cata");
        });

        modelBuilder.Entity<IndicadoresPssSubTemasPreguntasCatum>(entity =>
        {
            entity.HasKey(e => e.IndicadorNumero);

            entity.ToTable("Indicadores_PSS_SubTemas_Preguntas_Cata", tb =>
                {
                    tb.HasComment("Es un catálogo que contiene los detalles  los indicadores  (Preguntas realizadas en las visitas de evaluación de las PSS contratadas por las ARS) según subtemas, su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Indicadores_PSS_SubTemas_Preguntas_Cata_Delete");
                    tb.HasTrigger("Indicadores_PSS_SubTemas_Preguntas_Cata_Update");
                });

            entity.Property(e => e.IndicadorNumero)
                .HasComment("Número único de cada pregunta (Indicador) que se utiliza en los procesos de visitas de supervisión que se realiza a una  prestadora  de servicio de salud de categoría institucional.")
                .HasColumnName("Indicador_Numero");
            entity.Property(e => e.IndicadorDependencia)
                .HasComment("Indica de cual indicador depende, tomado del levantamiento realizado por la DARS.")
                .HasColumnName("Indicador_Dependencia");
            entity.Property(e => e.IndicadorDescripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Es el detalle de las preguntas (Indicadores) que se utiliza en los procesos de visitas de supervisión que se realizan a las prestadoras  de servicios de salud de categoría institucional.")
                .HasColumnName("Indicador_Descripcion");
            entity.Property(e => e.IndicadorReferenciaPadre)
                .HasComment("Indica de cual indicador es el padre (Referencia Única),  tomado del levantamiento realizado por la DARS.")
                .HasColumnName("Indicador_Referencia_Padre");
            entity.Property(e => e.IndicadorReferenciaUnico)
                .HasComment("Indica cual es la referencia única del indicador, tomado del levantamiento realizado por la DARS.")
                .HasColumnName("Indicador_Referencia_Unico");
            entity.Property(e => e.IndicadorSubTemaNumero)
                .HasComment("Es el número único de cada uno de los subtemas que agrupan las preguntas (Indicadores) que se utiliza en los procesos de visitas de supervisión que se realizan a las prestadoras  de servicios de salud de categoría institucional.")
                .HasColumnName("Indicador_SubTema_Numero");
            entity.Property(e => e.IndicadorTipoNumero)
                .HasComment("Es el tipo de preguntas (Indicadores) que se utiliza en los procesos de visitas de supervisión que se realizan a las prestadoras  de servicios de salud de categoría institucional, CT = Cuantitativo, Cl=Cualitativo y DS=Desarrollo.")
                .HasColumnName("Indicador_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.IndicadorSubTemaNumeroNavigation).WithMany(p => p.IndicadoresPssSubTemasPreguntasCata)
                .HasForeignKey(d => d.IndicadorSubTemaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Indicadores_PSS_SubTemas_Preguntas_Cata_Indicadores_PSS_SubTemas_Cata");

            entity.HasOne(d => d.IndicadorTipoNumeroNavigation).WithMany(p => p.IndicadoresPssSubTemasPreguntasCata)
                .HasForeignKey(d => d.IndicadorTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Indicadores_PSS_SubTemas_Preguntas_Cata_Indicadores_Tipo_Cata");
        });

        modelBuilder.Entity<IndicadoresPssTemasCatum>(entity =>
        {
            entity.HasKey(e => e.IndicadorTemaNumero);

            entity.ToTable("Indicadores_PSS_Temas_Cata", tb =>
                {
                    tb.HasComment("Es un catálogo que contiene los detalles  de los temas relacionados con los indicadores  (Preguntas realizadas en las visitas de evaluación de las PSS contratadas por las ARS), su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Indicadores_PSS_Temas_Cata_Delete");
                    tb.HasTrigger("Indicadores_PSS_Temas_Cata_Update");
                });

            entity.Property(e => e.IndicadorTemaNumero)
                .ValueGeneratedOnAdd()
                .HasComment("Es el número único de cada tema que agrupan las preguntas (Indicadores) que se utiliza en los procesos de visitas de supervisión que se realizan a las prestadoras  de servicios de salud de categoría institucional.")
                .HasColumnName("Indicador_Tema_Numero");
            entity.Property(e => e.IndicadorTemaDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es la descripción de los temas que agrupan las preguntas (Indicadores) que se utiliza en los procesos de visitas de supervisión que se realizan a las prestadoras  de servicios de salud de categoría institucional.")
                .HasColumnName("Indicador_Tema_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<IndicadoresPssTipoCatum>(entity =>
        {
            entity.HasKey(e => e.IndicadorTipoNumero).HasName("PK_Indicador_Tipo_Cata");

            entity.ToTable("Indicadores_PSS_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene los  tipo de indicadores  (Preguntas realizadas en las visitas de evaluación de las PSS contratadas por las ARS), los clasifican en función del valor que pueden recibir, su fuente de datos son los sistemas internos de la SISAL"));

            entity.Property(e => e.IndicadorTipoNumero)
                .HasComment("Es el tipo de preguntas (Indicadores) que se utiliza en los procesos de visitas de supervisión que se realizan a las prestadoras  de servicios de salud de categoría institucional, CT = Cuantitativo, Cl=Cualitativo y DS=Desarrollo.")
                .HasColumnName("Indicador_Tipo_Numero");
            entity.Property(e => e.IndicadorTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el tipo de preguntas (Indicadores) que se utiliza en los procesos de visitas de supervisión que se realizan a las prestadoras  de servicios de salud de categoría institucional, CT = Cuantitativo, Cl=Cualitativo y DS=Desarrollo.")
                .HasColumnName("Indicador_Tipo_Codigo");
            entity.Property(e => e.IndicadorTipoDescripcion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Es la descripcióon del tipo de preguntas (Indicadores) que se utiliza en los procesos de visitas de supervisión que se realizan a las prestadoras  de servicios de salud de categoría institucional, CT = Cuantitativo, Cl=Cualitativo y DS=Desarrollo.")
                .HasColumnName("Indicador_Tipo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<IndicadoresPssTipoPreguntasCatum>(entity =>
        {
            entity.HasKey(e => new { e.PrestadoraTipoNumero, e.IndicadorVersionNumero, e.IndicadorNumero });

            entity.ToTable("Indicadores_PSS_Tipo_Preguntas_Cata", tb => tb.HasComment("Es un catálogo que contiene los indicadores  (Preguntas realizadas en las visitas de evaluación de las PSS) según el Tipo de prestadora de Salud PSS, estos conforman una versión de formulario de visitas, su fuente son los sistemas internos de la SISALRIL"));

            entity.Property(e => e.PrestadoraTipoNumero)
                .HasComment("Es un número único que identifica el tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Prestadora_Tipo_Numero");
            entity.Property(e => e.IndicadorVersionNumero)
                .HasComment("Numero de versión de los formularios generados con las preguntas (Indicadores) que se utilizan en los procesos de visitas de supervisión que se realiza a una  prestadora  de servicio de salud de categoría institucional.")
                .HasColumnName("Indicador_Version_Numero");
            entity.Property(e => e.IndicadorNumero)
                .HasComment("Número único de cada pregunta (Indicador) que se utiliza en los procesos de visitas de supervisión que se realiza a una  prestadora  de servicio de salud de categoría institucional.")
                .HasColumnName("Indicador_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.IndicadorNumeroNavigation).WithMany(p => p.IndicadoresPssTipoPreguntasCata)
                .HasForeignKey(d => d.IndicadorNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Indicadores_PSS_Tipo_Preguntas_Cata_Indicadores_PSS_SubTemas_Preguntas_Cata");
        });

        modelBuilder.Entity<IndicadoresPssTipoVersionesCatum>(entity =>
        {
            entity.HasKey(e => new { e.PrestadoraTipoNumero, e.IndicadorVersionNumero, e.RegimenNumero }).HasName("PK_Indicadores_PSS_Tipo_Versiones_Cata_1");

            entity.ToTable("Indicadores_PSS_Tipo_Versiones_Cata", tb => tb.HasComment("Es un catálogo que contiene las versiones de los formulario de visitas (grupo de preguntas definidos para un tipo de PSS), su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.HasIndex(e => new { e.PrestadoraTipoNumero, e.IndicadorVersionNumero, e.RegimenNumero }, "DF_Prestadora_Tipo_Version_Regimen").IsUnique();

            entity.Property(e => e.PrestadoraTipoNumero)
                .HasComment("Es un número único que identifica el tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Prestadora_Tipo_Numero");
            entity.Property(e => e.IndicadorVersionNumero)
                .HasComment("Numero de versión de los formularios generados con las preguntas (Indicadores) que se utilizan en los procesos de visitas de supervisión que se realiza a una  prestadora  de servicio de salud de categoría institucional.")
                .HasColumnName("Indicador_Version_Numero");
            entity.Property(e => e.RegimenNumero)
                .HasComment("Número único que identifica cada uno de los regímenes definidos en la ley 87-01, (Contributivo, Subsidiado y Contributivo Subsidiado).")
                .HasColumnName("Regimen_Numero");
            entity.Property(e => e.IndicadorVersionEstadoNumero)
                .HasComment("Es el número que representa el estado de si la versión del formulario de visitas está abierta o finalizada.")
                .HasColumnName("Indicador_Version_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.IndicadorVersionEstadoNumeroNavigation).WithMany(p => p.IndicadoresPssTipoVersionesCata)
                .HasForeignKey(d => d.IndicadorVersionEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Indicadores_PSS_Tipo_Versiones_Cata_Indicadores_PSS_Tipo_Versiones_Estado_Cata");
        });

        modelBuilder.Entity<IndicadoresPssTipoVersionesEstadoCatum>(entity =>
        {
            entity.HasKey(e => e.IndicadorVersionEstadoNumero);

            entity.ToTable("Indicadores_PSS_Tipo_Versiones_Estado_Cata", tb => tb.HasComment("Es un catálogo que contiene las estados en que puedes estar las versiones de los formulario de visitas (grupo de preguntas definidos para un tipo de PSS), su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.IndicadorVersionEstadoNumero)
                .HasComment("Es el número que representa el estado de si la versión del formulario de visitas está abierta o finalizada.")
                .HasColumnName("Indicador_Version_Estado_Numero");
            entity.Property(e => e.IndicadorVersionEstadoDescripcion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Es la descripción del estado, que indica si la versión del formulario de visitas está abierta o finalizada.")
                .HasColumnName("Indicador_Version_Estado_Descripcion");
            entity.Property(e => e.IndicadorVersionEstadoExplicacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Es una breve explicación de la descripción del estado, que indica si la versión del formulario de visitas está abierta o finalizada.")
                .HasColumnName("Indicador_Version_Estado_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<IndicadoresPssVisitasDetalleTran>(entity =>
        {
            entity.HasKey(e => new { e.VisitaNumero, e.PrestadoraNumero, e.PrestadoraTipoNumero, e.IndicadorVersionNumero, e.IndicadorNumero, e.RegimenNumero });

            entity.ToTable("Indicadores_PSS_Visitas_Detalle_Trans", tb =>
                {
                    tb.HasComment("Es una tabla transaccional que contiene los  indicadores  (Preguntas realizadas en las visitas de evaluación de las PSS contratadas por las ARS) con sus repuestas levantadas en una visita realizada,  su fuente de datos los sistemas internos de la SISALRI");
                    tb.HasTrigger("Indicadores_PSS_Visitas_Detalle_Trans_Delete");
                    tb.HasTrigger("Indicadores_PSS_Visitas_Detalle_Trans_Update");
                });

            entity.Property(e => e.VisitaNumero)
                .HasComment("Número único asignado automáticamente por el sistema por cada visita que se registra a una  prestadora  de servicio de salud de categoría institucional. Por cada prestadora este número se incrementa de 1 a N.")
                .HasColumnName("Visita_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PrestadoraTipoNumero)
                .HasComment("Es un número único que identifica el tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Prestadora_Tipo_Numero");
            entity.Property(e => e.IndicadorVersionNumero)
                .HasComment("Numero de versión de los formularios generados con las preguntas (Indicadores) que se utilizan en los procesos de visitas de supervisión que se realiza a una  prestadora  de servicio de salud de categoría institucional.")
                .HasColumnName("Indicador_Version_Numero");
            entity.Property(e => e.IndicadorNumero)
                .HasComment("Número único de cada pregunta (Indicador) que se utiliza en los procesos de visitas de supervisión que se realiza a una  prestadora  de servicio de salud de categoría institucional.")
                .HasColumnName("Indicador_Numero");
            entity.Property(e => e.RegimenNumero)
                .HasDefaultValueSql("((2))")
                .HasComment("Número único que identifica cada uno de los regímenes definidos en la ley 87-01, (Contributivo, Subsidiado y Contributivo Subsidiado).")
                .HasColumnName("Regimen_Numero");
            entity.Property(e => e.IndicadorRespuestaEntrevistadoCargo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'N/E')")
                .HasComment("Descripción del cargo de la persona (Contacto) que participo de parte de la prestadora  en una visita de supervisión a la prestadora de servicio de  salud institucional.")
                .HasColumnName("Indicador_Respuesta_Entrevistado_Cargo");
            entity.Property(e => e.IndicadorRespuestaEntrevistadoNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(N'N/E')")
                .HasComment("Nombre de la persona (Contacto) que participo de parte de la prestadora  en una visita de supervisión a la prestadora de servicio de  salud institucional.")
                .HasColumnName("Indicador_Respuesta_Entrevistado_Nombre");
            entity.Property(e => e.IndicadorRespuestaFechaLlenado)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Es la fecha en que se lleno el formulario de visitas.")
                .HasColumnType("datetime")
                .HasColumnName("Indicador_Respuesta_Fecha_llenado");
            entity.Property(e => e.IndicadorRespuestaObservaciones)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/N')")
                .HasComment("Detalle de las observaciones que se registraron a partir de un proceso de una visita de supervisión a la prestadora de servicio de salud institucional, para una pregunta (indicador) específico.")
                .HasColumnName("Indicador_Respuesta_Observaciones");
            entity.Property(e => e.IndicadorRespuestaSiNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength()
                .HasComment("Nos indica si una pregunta  (Indicador) es cerrada solo acepta (S/N) como respuesta, en los formularios de las visitas de supervisión a la prestadora de servicio de salud institucional es cerrado.")
                .HasColumnName("Indicador_Respuesta_Si_No");
            entity.Property(e => e.IndicadorRespuestaValor)
                .HasDefaultValueSql("((0))")
                .HasComment("Nos indica si una pregunta  (Indicador) acepta un valor numérico  como respuesta,  en los formularios de las visitas de supervisión a la prestadora de servicio de salud institucional es cerrado.")
                .HasColumnName("Indicador_Respuesta_Valor");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.IndicadoresPssTipoPreguntasCatum).WithMany(p => p.IndicadoresPssVisitasDetalleTrans)
                .HasForeignKey(d => new { d.PrestadoraTipoNumero, d.IndicadorVersionNumero, d.IndicadorNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Indicadores_PSS_Visita_Detalle_Trans_Indicadores_PSS_Tipo_Preguntas_Cata");

            entity.HasOne(d => d.IndicadoresPssVisitasMaster).WithMany(p => p.IndicadoresPssVisitasDetalleTrans)
                .HasForeignKey(d => new { d.VisitaNumero, d.PrestadoraNumero, d.RegimenNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Indicadores_PSS_Visitas_Detalle_Trans_Indicadores_PSS_Visitas_Master");
        });

        modelBuilder.Entity<IndicadoresPssVisitasEstadoCatum>(entity =>
        {
            entity.HasKey(e => e.VisitaEstadoNumero);

            entity.ToTable("Indicadores_PSS_Visitas_Estado_Cata", tb => tb.HasComment("Es un catálogo que contiene los estados de procesos de las visitas de evaluación realizadas a las PSS, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.VisitaEstadoNumero)
                .HasComment("Número único que identifica el estado del proceso de captura de datos del formulario de visitas a las PSS.")
                .HasColumnName("Visita_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.VisitaEstadoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el código único que identifica el estado del proceso de captura de datos del formulario de visitas a las PSS.")
                .HasColumnName("Visita_Estado_Codigo");
            entity.Property(e => e.VisitaEstadoDescripcion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Es la descripción del código único que identifica el estado del proceso de captura de datos del formulario de visitas a las PSS.")
                .HasColumnName("Visita_Estado_Descripcion");
            entity.Property(e => e.VisitaEstadoExplicacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Es una breve explicación de la descripción que identifica el estado del proceso de captura de datos del formulario de visitas a las PSS.")
                .HasColumnName("Visita_Estado_Explicacion");
        });

        modelBuilder.Entity<IndicadoresPssVisitasMaster>(entity =>
        {
            entity.HasKey(e => new { e.VisitaNumero, e.PrestadoraNumero, e.RegimenNumero }).HasName("PK_PSS_Prestadoras_Visita_Master");

            entity.ToTable("Indicadores_PSS_Visitas_Master", tb =>
                {
                    tb.HasComment("Es un maestro que contiene las informaciones generales de las visitas de evaluación realizadas de las PSS, su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Indicadores_PSS_Visitas_Master_Delete");
                    tb.HasTrigger("Indicadores_PSS_Visitas_Master_Update");
                    tb.HasTrigger("SimonPSS_Del");
                    tb.HasTrigger("SimonPSS_Update");
                });

            entity.Property(e => e.VisitaNumero)
                .HasComment("Número único asignado automáticamente por el sistema por cada visita que se registra a una  prestadora  de servicio de salud de categoría institucional. Por cada prestadora este número se incrementa de 1 a N.")
                .HasColumnName("Visita_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.RegimenNumero)
                .HasDefaultValueSql("((2))")
                .HasComment("Número único que identifica cada uno de los regímenes definidos en la ley 87-01, (Contributivo, Subsidiado y Contributivo Subsidiado).")
                .HasColumnName("Regimen_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.VisitaCargo)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción del cargo de la persona (Contacto) que participo de parte de la prestadora  en una visita de supervisión a la prestadora de servicio de  salud institucional.")
                .HasColumnName("Visita_Cargo");
            entity.Property(e => e.VisitaContacto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre de la persona (Contacto) que participo de parte de la prestadora  en una visita de supervisión a la prestadora de servicio de  salud institucional.")
                .HasColumnName("Visita_Contacto");
            entity.Property(e => e.VisitaEstadoNumero)
                .HasComment("Número único que identifica el estado del proceso de captura de datos del formulario de visitas a las PSS.")
                .HasColumnName("Visita_Estado_Numero");
            entity.Property(e => e.VisitaHoraFinal)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Hora en que finalizo una visita de supervisión a la prestadora de servicio de  salud institucional.")
                .HasColumnType("datetime")
                .HasColumnName("Visita_Hora_Final");
            entity.Property(e => e.VisitaHoraInicio)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Hora en que inicio una visita de supervisión a la prestadora de servicio de  salud institucional.")
                .HasColumnType("datetime")
                .HasColumnName("Visita_Hora_Inicio");
            entity.Property(e => e.VisitaObservaciones)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasComment("Detalle de las observaciones que se registraron a partir de un proceso de una visita de supervisión a la prestadora de servicio de salud institucional.")
                .HasColumnName("Visita_Observaciones");

            entity.HasOne(d => d.PrestadoraNumeroNavigation).WithMany(p => p.IndicadoresPssVisitasMasters)
                .HasForeignKey(d => d.PrestadoraNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Indicadores_PSS_Visitas_Master_Prestadoras_Institucionales_Master");

            entity.HasOne(d => d.RegimenNumeroNavigation).WithMany(p => p.IndicadoresPssVisitasMasters)
                .HasForeignKey(d => d.RegimenNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Indicadores_PSS_Visitas_Master_Comunes_Regimenes_Cata");

            entity.HasOne(d => d.VisitaEstadoNumeroNavigation).WithMany(p => p.IndicadoresPssVisitasMasters)
                .HasForeignKey(d => d.VisitaEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Indicadores_PSS_Visitas_Master_Indicadores_PSS_Visitas_Estado_Cata");
        });

        modelBuilder.Entity<InstitucionesMaster>(entity =>
        {
            entity.HasKey(e => e.InstitucionNumero).HasName("PK_RefInstituciones");

            entity.ToTable("Instituciones_Master", tb =>
                {
                    tb.HasComment("Es un maestro que contiene las informaciones de cada una de las instituciones relacionadas con el SDSS, está estrechamente ligada a la tabla ARS Máster su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Instituciones_Master_Delete");
                    tb.HasTrigger("Instituciones_Master_Update");
                });

            entity.Property(e => e.InstitucionNumero)
                .ValueGeneratedNever()
                .HasComment("Número de la institución que es o a la que pertenece la ARS.")
                .HasColumnName("Institucion_Numero");
            entity.Property(e => e.EmpresaTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código que representa el Tipo de empresa según el sector al que pertenece (Pública centralizada, Pública No Centralizada, Privada y Mixta).")
                .HasColumnName("Empresa_Tipo_Codigo");
            entity.Property(e => e.InstitucionDireccion)
                .HasMaxLength(200)
                .HasComment("Dirección de la institución.")
                .HasColumnName("Institucion_Direccion");
            entity.Property(e => e.InstitucionEntidadNumero)
                .HasComment("Número único de la ENTIDAD (ARS , ARL, PSS, Empleador, etc. ) que esta relacionado con la institución.")
                .HasColumnName("Institucion_Entidad_Numero");
            entity.Property(e => e.InstitucionFax)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de fax de la institución.")
                .HasColumnName("Institucion_Fax");
            entity.Property(e => e.InstitucionNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Es la razón social registrada por el prestador de servicios de salud   en la DGII, y que utiliza la Tesorería de la Seguridad Social en su registro de empleadores. Representa el nombre oficial de cada empresa o institución en el país.")
                .HasColumnName("Institucion_Nombre");
            entity.Property(e => e.InstitucionNombreComercial)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nombre comercial de la institución.")
                .HasColumnName("Institucion_Nombre_Comercial");
            entity.Property(e => e.InstitucionRnc)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("RNC (Registro Nacional Contribuyente) de la institución.")
                .HasColumnName("Institucion_RNC");
            entity.Property(e => e.InstitucionTelefono)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número telefónico de la institución.")
                .HasColumnName("Institucion_Telefono");
            entity.Property(e => e.InstitucionTipoNumero)
                .HasComment("Tipificación del número de la institución (3 = Administradora de Riesgos de Salud).")
                .HasColumnName("Institucion_Tipo_Numero");
            entity.Property(e => e.InstitucionWebSite)
                .HasMaxLength(100)
                .HasComment("Website de la institución.")
                .HasColumnName("Institucion_WebSite");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.EmpresaTipoCodigoNavigation).WithMany(p => p.InstitucionesMasters)
                .HasForeignKey(d => d.EmpresaTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Instituciones_Master_Comunes_Empresas_Tipo_Cata");

            entity.HasOne(d => d.InstitucionTipoNumeroNavigation).WithMany(p => p.InstitucionesMasters)
                .HasForeignKey(d => d.InstitucionTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Instituciones_Cata_Institucion_Tipo_Cata");
        });

        modelBuilder.Entity<InstitucionesTipoCatum>(entity =>
        {
            entity.HasKey(e => e.InstitucionTipoNumero).HasName("PK_Institucion_Tipo_Cata");

            entity.ToTable("Instituciones_Tipo_Cata", tb => tb.HasComment("Es un catalogo con los tipos de instituciones que participan en el SDSS, su fuente de datos son los sistemas internos de la SISALRIL a partir del estándar del SUIR."));

            entity.Property(e => e.InstitucionTipoNumero)
                .HasComment("Tipificación del número de la institución (3 = Administradora de Riesgos de Salud).")
                .HasColumnName("Institucion_Tipo_Numero");
            entity.Property(e => e.InstitucionTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de institución. (Para este caso es 3 = Administradora de Riesgos de Salud).")
                .HasColumnName("Institucion_Tipo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosCoberturasCata12062018>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Medicamentos_Coberturas_Cata_12062018");

            entity.Property(e => e.CoberturaDescripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Cobertura_Descripcion");
            entity.Property(e => e.CoberturaNumero).HasColumnName("Cobertura_Numero");
            entity.Property(e => e.MedicamentoSecuencia).HasColumnName("Medicamento_Secuencia");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosCoberturasCataBk12062018>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Medicamentos_Coberturas_Cata_BK_12062018");

            entity.Property(e => e.CoberturaDescripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Cobertura_Descripcion");
            entity.Property(e => e.CoberturaNumero).HasColumnName("Cobertura_Numero");
            entity.Property(e => e.MedicamentoSecuencia).HasColumnName("Medicamento_Secuencia");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosCoberturasCatum>(entity =>
        {
            entity.HasKey(e => new { e.MedicamentoSecuencia, e.CoberturaNumero });

            entity.ToTable("Medicamentos_Coberturas_Cata");

            entity.HasIndex(e => e.CoberturaDescripcion, "Idx_Medicamentos_Coberturas_Descripcion");

            entity.Property(e => e.MedicamentoSecuencia).HasColumnName("Medicamento_Secuencia");
            entity.Property(e => e.CoberturaNumero)
                .HasComment("Numero único de cobertura que representa un  insumo, procedimiento médico, material, fármaco,  servicio  general que fue o puede ser prestado.")
                .HasColumnName("Cobertura_Numero");
            entity.Property(e => e.CoberturaDescripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Cobertura_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosDiana>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Medicamentos_Diana");

            entity.Property(e => e.CoberturaNumero).HasColumnName("Cobertura_Numero");
            entity.Property(e => e.MedicamentoDescripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Descripcion");
            entity.Property(e => e.Observacion)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MedicamentosMaster>(entity =>
        {
            entity.HasKey(e => e.MedicamentoSecuencia).HasName("PK_Medicamentos_Master_1");

            entity.ToTable("Medicamentos_Master");

            entity.HasIndex(e => e.MedicamentoProducto, "Idx_Medicamentos_Master_Producto");

            entity.Property(e => e.MedicamentoSecuencia).HasColumnName("Medicamento_Secuencia");
            entity.Property(e => e.MedicamentoConcentracion)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Concentracion");
            entity.Property(e => e.MedicamentoEnvase)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Envase");
            entity.Property(e => e.MedicamentoFormaFarmaceutica)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Forma_Farmaceutica");
            entity.Property(e => e.MedicamentoPdss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Medicamento_PDSS");
            entity.Property(e => e.MedicamentoPrincipiosActivos)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Principios_Activos");
            entity.Property(e => e.MedicamentoProducto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Producto");
            entity.Property(e => e.MedicamentoRegistroEstatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Estatus");
            entity.Property(e => e.MedicamentoRegistroSanitario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Sanitario");
            entity.Property(e => e.MedicamentoRegistroVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("Medicamento_Registro_Vencimiento");
            entity.Property(e => e.MedicamentoRepresentante)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Representante");
            entity.Property(e => e.MedicamentoTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Tipo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosMaster11122017>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Medicamentos_Master_11122017");

            entity.Property(e => e.MedicamentoConcentracion)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Concentracion");
            entity.Property(e => e.MedicamentoEnvase)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Envase");
            entity.Property(e => e.MedicamentoFormaFarmaceutica)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Forma_Farmaceutica");
            entity.Property(e => e.MedicamentoPdss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Medicamento_PDSS");
            entity.Property(e => e.MedicamentoPrincipiosActivos)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Principios_Activos");
            entity.Property(e => e.MedicamentoProducto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Producto");
            entity.Property(e => e.MedicamentoRegistroEstatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Estatus");
            entity.Property(e => e.MedicamentoRegistroSanitario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Sanitario");
            entity.Property(e => e.MedicamentoRegistroVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("Medicamento_Registro_Vencimiento");
            entity.Property(e => e.MedicamentoRepresentante)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Representante");
            entity.Property(e => e.MedicamentoSecuencia)
                .ValueGeneratedOnAdd()
                .HasColumnName("Medicamento_Secuencia");
            entity.Property(e => e.MedicamentoTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Tipo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosMaster12062018>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Medicamentos_Master_12062018");

            entity.Property(e => e.MedicamentoConcentracion)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Concentracion");
            entity.Property(e => e.MedicamentoEnvase)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Envase");
            entity.Property(e => e.MedicamentoFormaFarmaceutica)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Forma_Farmaceutica");
            entity.Property(e => e.MedicamentoPdss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Medicamento_PDSS");
            entity.Property(e => e.MedicamentoPrincipiosActivos)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Principios_Activos");
            entity.Property(e => e.MedicamentoProducto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Producto");
            entity.Property(e => e.MedicamentoRegistroEstatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Estatus");
            entity.Property(e => e.MedicamentoRegistroSanitario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Sanitario");
            entity.Property(e => e.MedicamentoRegistroVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("Medicamento_Registro_Vencimiento");
            entity.Property(e => e.MedicamentoRepresentante)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Representante");
            entity.Property(e => e.MedicamentoSecuencia).HasColumnName("Medicamento_Secuencia");
            entity.Property(e => e.MedicamentoTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Tipo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosMasterBk07112017>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Medicamentos_Master_BK_07112017");

            entity.Property(e => e.MedicamentoConcentracion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Concentracion");
            entity.Property(e => e.MedicamentoEnvase)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Envase");
            entity.Property(e => e.MedicamentoFormaFarmaceutica)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Forma_Farmaceutica");
            entity.Property(e => e.MedicamentoPrincipiosActivos)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Principios_Activos");
            entity.Property(e => e.MedicamentoProducto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Producto");
            entity.Property(e => e.MedicamentoRegistroEstatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Estatus");
            entity.Property(e => e.MedicamentoRegistroSanitario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Sanitario");
            entity.Property(e => e.MedicamentoRegistroVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("Medicamento_Registro_Vencimiento");
            entity.Property(e => e.MedicamentoRepresentante)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Representante");
            entity.Property(e => e.MedicamentoSecuencia).HasColumnName("Medicamento_Secuencia");
            entity.Property(e => e.MedicamentoTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Tipo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosMasterEsBk04012018>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Medicamentos_Master_ES_BK_04012018");

            entity.Property(e => e.MedicamentoConcentracion)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Concentracion");
            entity.Property(e => e.MedicamentoEnvase)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Envase");
            entity.Property(e => e.MedicamentoFormaFarmaceutica)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Forma_Farmaceutica");
            entity.Property(e => e.MedicamentoPdss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Medicamento_PDSS");
            entity.Property(e => e.MedicamentoPrincipiosActivos)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Principios_Activos");
            entity.Property(e => e.MedicamentoProducto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Producto");
            entity.Property(e => e.MedicamentoRegistroEstatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Estatus");
            entity.Property(e => e.MedicamentoRegistroSanitario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Sanitario");
            entity.Property(e => e.MedicamentoRegistroVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("Medicamento_Registro_Vencimiento");
            entity.Property(e => e.MedicamentoRepresentante)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Representante");
            entity.Property(e => e.MedicamentoSecuencia)
                .ValueGeneratedOnAdd()
                .HasColumnName("Medicamento_Secuencia");
            entity.Property(e => e.MedicamentoTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Tipo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosPalabrasNoCata12062018>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Medicamentos_Palabras_NO_Cata_12062018");

            entity.Property(e => e.MedicamentoPalabra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Palabra");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosPalabrasNoCatum>(entity =>
        {
            entity.HasKey(e => e.MedicamentoPalabra);

            entity.ToTable("Medicamentos_Palabras_NO_Cata");

            entity.Property(e => e.MedicamentoPalabra)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Palabra");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosPalabrasSiCata12062018>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Medicamentos_Palabras_SI_Cata_12062018");

            entity.Property(e => e.MedicamentoPalabra)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Palabra");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosPalabrasSiCatum>(entity =>
        {
            entity.HasKey(e => new { e.MedicamentoPalabra, e.CoberturaNumero });

            entity.ToTable("Medicamentos_Palabras_SI_Cata");

            entity.Property(e => e.MedicamentoPalabra)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Palabra");
            entity.Property(e => e.CoberturaNumero).HasColumnName("Cobertura_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosTabla>(entity =>
        {
            entity.HasKey(e => e.MedicamentoSecuencia);

            entity.ToTable("Medicamentos_Tabla");

            entity.Property(e => e.MedicamentoSecuencia)
                .ValueGeneratedNever()
                .HasColumnName("Medicamento_Secuencia");
            entity.Property(e => e.MedicamentoConcentracion)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Concentracion");
            entity.Property(e => e.MedicamentoEnvase)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Envase");
            entity.Property(e => e.MedicamentoFormaFarmaceutica)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Forma_Farmaceutica");
            entity.Property(e => e.MedicamentoPdss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Medicamento_PDSS");
            entity.Property(e => e.MedicamentoPrincipiosActivos)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Principios_Activos");
            entity.Property(e => e.MedicamentoPrincipiosActivosRev)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Principios_Activos_REV");
            entity.Property(e => e.MedicamentoProducto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Producto");
            entity.Property(e => e.MedicamentoRegistroEstatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Estatus");
            entity.Property(e => e.MedicamentoRegistroSanitario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Sanitario");
            entity.Property(e => e.MedicamentoRegistroVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("Medicamento_Registro_Vencimiento");
            entity.Property(e => e.MedicamentoRepresentante)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Representante");
            entity.Property(e => e.MedicamentoTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Tipo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosTabla12062018>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Medicamentos_Tabla_12062018");

            entity.Property(e => e.MedicamentoConcentracion)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Concentracion");
            entity.Property(e => e.MedicamentoEnvase)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Envase");
            entity.Property(e => e.MedicamentoFormaFarmaceutica)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Forma_Farmaceutica");
            entity.Property(e => e.MedicamentoPdss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Medicamento_PDSS");
            entity.Property(e => e.MedicamentoPrincipiosActivos)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Principios_Activos");
            entity.Property(e => e.MedicamentoProducto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Producto");
            entity.Property(e => e.MedicamentoRegistroEstatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Estatus");
            entity.Property(e => e.MedicamentoRegistroSanitario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Sanitario");
            entity.Property(e => e.MedicamentoRegistroVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("Medicamento_Registro_Vencimiento");
            entity.Property(e => e.MedicamentoRepresentante)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Representante");
            entity.Property(e => e.MedicamentoSecuencia).HasColumnName("Medicamento_Secuencia");
            entity.Property(e => e.MedicamentoTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Tipo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosTablaBak20180123>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Medicamentos_Tabla_BAK20180123");

            entity.Property(e => e.MedicamentoConcentracion)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Concentracion");
            entity.Property(e => e.MedicamentoEnvase)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Envase");
            entity.Property(e => e.MedicamentoFormaFarmaceutica)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Forma_Farmaceutica");
            entity.Property(e => e.MedicamentoPdss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Medicamento_PDSS");
            entity.Property(e => e.MedicamentoPrincipiosActivos)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Principios_Activos");
            entity.Property(e => e.MedicamentoProducto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Producto");
            entity.Property(e => e.MedicamentoRegistroEstatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Estatus");
            entity.Property(e => e.MedicamentoRegistroSanitario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Sanitario");
            entity.Property(e => e.MedicamentoRegistroVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("Medicamento_Registro_Vencimiento");
            entity.Property(e => e.MedicamentoRepresentante)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Representante");
            entity.Property(e => e.MedicamentoSecuencia).HasColumnName("Medicamento_Secuencia");
            entity.Property(e => e.MedicamentoTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Tipo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosTablaBk01022018>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Medicamentos_Tabla_BK_01022018");

            entity.Property(e => e.MedicamentoConcentracion)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Concentracion");
            entity.Property(e => e.MedicamentoEnvase)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Envase");
            entity.Property(e => e.MedicamentoFormaFarmaceutica)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Forma_Farmaceutica");
            entity.Property(e => e.MedicamentoPdss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Medicamento_PDSS");
            entity.Property(e => e.MedicamentoPrincipiosActivos)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Principios_Activos");
            entity.Property(e => e.MedicamentoPrincipiosActivosRev)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Principios_Activos_REV");
            entity.Property(e => e.MedicamentoProducto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Producto");
            entity.Property(e => e.MedicamentoRegistroEstatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Estatus");
            entity.Property(e => e.MedicamentoRegistroSanitario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Sanitario");
            entity.Property(e => e.MedicamentoRegistroVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("Medicamento_Registro_Vencimiento");
            entity.Property(e => e.MedicamentoRepresentante)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Representante");
            entity.Property(e => e.MedicamentoSecuencia).HasColumnName("Medicamento_Secuencia");
            entity.Property(e => e.MedicamentoTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Tipo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<MedicamentosTablaEsBk04012018>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Medicamentos_Tabla_ES_BK_04012018");

            entity.Property(e => e.MedicamentoConcentracion)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Concentracion");
            entity.Property(e => e.MedicamentoEnvase)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Envase");
            entity.Property(e => e.MedicamentoFormaFarmaceutica)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Forma_Farmaceutica");
            entity.Property(e => e.MedicamentoPdss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Medicamento_PDSS");
            entity.Property(e => e.MedicamentoPrincipiosActivos)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Principios_Activos");
            entity.Property(e => e.MedicamentoProducto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Producto");
            entity.Property(e => e.MedicamentoRegistroEstatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Estatus");
            entity.Property(e => e.MedicamentoRegistroSanitario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Registro_Sanitario");
            entity.Property(e => e.MedicamentoRegistroVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("Medicamento_Registro_Vencimiento");
            entity.Property(e => e.MedicamentoRepresentante)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Representante");
            entity.Property(e => e.MedicamentoSecuencia).HasColumnName("Medicamento_Secuencia");
            entity.Property(e => e.MedicamentoTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medicamento_Tipo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<NotificacionesAfiliadosCambiosExcepcionesTran>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Notificaciones_Afiliados_Cambios_Excepciones_Trans");

            entity.Property(e => e.AfiliadoDiscapacitadoAAfiliarse)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Discapacitado_A_Afiliarse");
            entity.Property(e => e.AfiliadoEstudianteAAfiliarse)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Estudiante_A_Afiliarse");
            entity.Property(e => e.AnioActaNacimiento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Anio_Acta_Nacimiento");
            entity.Property(e => e.CedulaAfiliadoSolicitado)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Cedula_Afiliado_Solicitado");
            entity.Property(e => e.CedulaAfiliadoTitularNuevo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Cedula_Afiliado_Titular_Nuevo");
            entity.Property(e => e.FechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_Nacimiento");
            entity.Property(e => e.FolioActaNacimiento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Folio_Acta_Nacimiento");
            entity.Property(e => e.LibroActaNacimiento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Libro_Acta_Nacimiento");
            entity.Property(e => e.MotivoCambio).HasColumnName("Motivo_Cambio");
            entity.Property(e => e.Municipio)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.NssAfiliadoSolicitado).HasColumnName("NSS_Afiliado_Solicitado");
            entity.Property(e => e.NssAfiliadoTitularNuevo).HasColumnName("NSS_Afiliado_Titular_Nuevo");
            entity.Property(e => e.NumeroActaNacimiento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Numero_Acta_Nacimiento");
            entity.Property(e => e.NumeroSolicitudCambio).HasColumnName("Numero_Solicitud_Cambio");
            entity.Property(e => e.OficialiaActaNacimiento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Oficialia_Acta_Nacimiento");
            entity.Property(e => e.ParentescoAAfiliarse).HasColumnName("Parentesco_A_Afiliarse");
            entity.Property(e => e.PrimerApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Primer_Apellido");
            entity.Property(e => e.PrimerNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Primer_Nombre");
            entity.Property(e => e.Provincia)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.SeguimientoNumero).HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.SegundoApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Segundo_Apellido");
            entity.Property(e => e.SegundoNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Segundo_Nombre");
            entity.Property(e => e.Sexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TipoAfiliado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Tipo_Afiliado");
            entity.Property(e => e.TipoDependienteAAfiliarse)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Tipo_Dependiente_A_Afiliarse");
            entity.Property(e => e.TipoRegistro)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Tipo_Registro");
        });

        modelBuilder.Entity<ParametrosCatum>(entity =>
        {
            entity.HasKey(e => e.ParametroNombre).HasName("PK_Parametros_Cata_1");

            entity.ToTable("Parametros_Cata");

            entity.Property(e => e.ParametroNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Parametro_Nombre");
            entity.Property(e => e.ParametroDescripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Parametro_Descripcion");
            entity.Property(e => e.ParametroValor)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Parametro_Valor");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PlanesArsVistum>(entity =>
        {
            entity.HasKey(e => new { e.PlanNumero, e.ArsNumero });

            entity.ToTable("Planes_Ars_Vista");

            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.ArsNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Ars_Nombre");
            entity.Property(e => e.PlanDescripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("Plan_Descripcion");
            entity.Property(e => e.PlanEstadoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Plan_Estado_Codigo");
            entity.Property(e => e.PlanFechaAprobacion)
                .HasColumnType("datetime")
                .HasColumnName("Plan_Fecha_Aprobacion");
            entity.Property(e => e.PlanFechaInicioAplicacion)
                .HasColumnType("datetime")
                .HasColumnName("Plan_Fecha_Inicio_Aplicacion");
            entity.Property(e => e.PlanFechaTerminoAplicacion)
                .HasColumnType("datetime")
                .HasColumnName("Plan_Fecha_Termino_Aplicacion");
            entity.Property(e => e.PlanModalidadDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Plan_Modalidad_Descripcion");
            entity.Property(e => e.PlanModalidadNumero).HasColumnName("Plan_Modalidad_Numero");
            entity.Property(e => e.PlanNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Plan_Nombre");
            entity.Property(e => e.PlanPrimaAnual)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Plan_Prima_Anual");
            entity.Property(e => e.PlanTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Plan_Tipo_Codigo");
            entity.Property(e => e.PlanTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Plan_Tipo_Descripcion");
        });

        modelBuilder.Entity<PlanesCoberturasMaster>(entity =>
        {
            entity.HasKey(e => new { e.PlanNumero, e.GrupoNumero, e.SubGrupoNumero, e.CoberturaNumero });

            entity.ToTable("Planes_Coberturas_Master", tb =>
                {
                    tb.HasComment("Es un maestro que contiene las informaciones de las coberturas de servicios de salud, relacionados con los Planes de Servicios de Salud, según grupos y subgrupos de servicios de salud, su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Planes_Coberturas_Master_Delete");
                    tb.HasTrigger("Planes_Coberturas_Master_Update");
                });

            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Código único de la versión del Plan de servicios de Salud (PDSS) al cual pertenece el Subgrupo.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.GrupoNumero)
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubGrupoNumero)
                .HasComment("Número único asignado al subgrupo del PDSS, se incrementa de 1 a N para cada grupo del PDSS.")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.CoberturaNumero)
                .HasComment("Numero único de cobertura que representa un  insumo, procedimiento médico, material, fármaco,  servicio  general que fue o puede ser prestado.")
                .HasColumnName("Cobertura_Numero");
            entity.Property(e => e.PlanNumeroOrigen)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Identifica el número de Plan de cual se tomo la información para este plan.")
                .HasColumnName("Plan_Numero_Origen");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RevisionNumero)
                .HasComment("Número único que representa la  información (Resolución, Versión de PDSS,  Inclusiones o exclusiones, etc.  ). Relacionadas con la revisión de las cobertura para este plan.")
                .HasColumnName("Revision_Numero");

            entity.HasOne(d => d.CoberturaNumeroNavigation).WithMany(p => p.PlanesCoberturasMasters)
                .HasForeignKey(d => d.CoberturaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_Coberturas_Master_Coberturas_Master");

            entity.HasOne(d => d.RevisionNumeroNavigation).WithMany(p => p.PlanesCoberturasMasters)
                .HasForeignKey(d => d.RevisionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_Coberturas_Master_Planes_Coberturas_Revisiones_Cata");

            entity.HasOne(d => d.PlanesSubgruposMaster).WithMany(p => p.PlanesCoberturasMasters)
                .HasForeignKey(d => new { d.PlanNumero, d.GrupoNumero, d.SubGrupoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_Coberturas_Master_Planes_Subgrupos_Master");
        });

        modelBuilder.Entity<PlanesCoberturasMasterHistorico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Planes_Coberturas_Master_Historico");

            entity.Property(e => e.CoberturaNumero).HasColumnName("Cobertura_Numero");
            entity.Property(e => e.GrupoNumero).HasColumnName("Grupo_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PlanNumeroOrigen)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero_Origen");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RevisionNumero).HasColumnName("Revision_Numero");
            entity.Property(e => e.SubGrupoNumero).HasColumnName("SubGrupo_Numero");
        });

        modelBuilder.Entity<PlanesCoberturasPalabrasTran>(entity =>
        {
            entity.HasKey(e => new { e.CoberturaNumero, e.PalabraDetalle });

            entity.ToTable("Planes_Coberturas_Palabras_Trans");

            entity.HasIndex(e => e.PalabraNumero, "Idx_Planes_Coberturas_Palabras_Trans_Palabra");

            entity.Property(e => e.CoberturaNumero).HasColumnName("Cobertura_Numero");
            entity.Property(e => e.PalabraDetalle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Palabra_Detalle");
            entity.Property(e => e.PalabraNumero).HasColumnName("Palabra_Numero");
        });

        modelBuilder.Entity<PlanesCoberturasPdssCatum>(entity =>
        {
            entity.HasKey(e => new { e.PlanNumero, e.GrupoNumero, e.SubGrupoNumero, e.CoberturaNumero });

            entity.ToTable("Planes_Coberturas_PDSS_Cata", tb => tb.HasComment("Es un maestro que contiene las informaciones de las coberturas de servicios de salud, relacionados con los Planes de Servicios de Salud, según grupos y subgrupos de servicios de salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PlanNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código único de la versión del Plan de servicios de Salud (PDSS) al cual pertenece el Subgrupo.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.GrupoNumero)
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubGrupoNumero)
                .HasComment("Número único asignado al subgrupo del PDSS, se incrementa de 1 a N para cada grupo del PDSS.")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.CoberturaNumero)
                .HasComment("Numero único de cobertura que representa un  insumo, procedimiento médico, material, fármaco,  servicio  general que fue o puede ser prestado.")
                .HasColumnName("Cobertura_Numero");
            entity.Property(e => e.CoberturaCubreAfiliado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Cubre_Afiliado");
            entity.Property(e => e.CoberturaCubreArs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Cubre_ARS");
            entity.Property(e => e.CoberturaPdss)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_PDSS");
            entity.Property(e => e.GrupoExplicacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Grupo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .IsFixedLength()
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.ServicioDescripcionCorta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Servicio_Descripcion_Corta");
            entity.Property(e => e.SubGrupoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubGrupo_Descripcion");
        });

        modelBuilder.Entity<PlanesCoberturasRevisionesCatum>(entity =>
        {
            entity.HasKey(e => e.RevisionNumero);

            entity.ToTable("Planes_Coberturas_Revisiones_Cata", tb => tb.HasComment("Es un catálogo que contiene los detalles  de las revisiones (Resolución, Versión de PDSS, Inclusiones o exclusiones, etc.  ). Relacionadas con la revisión de las coberturas para un plan de servicios de salud, fuente de datos son los sistemas internos de "));

            entity.Property(e => e.RevisionNumero)
                .HasComment("Número único que representa la  información (Resolución, Versión de PDSS,  Inclusiones o exclusiones, etc.  ). Relacionadas con la revisión de las cobertura para este plan.")
                .HasColumnName("Revision_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RevisionDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es la descripción de la  información (Resolución, Versión de PDSS,  Inclusiones o exclusiones, etc.  ). Relacionadas con la revisión de las cobertura para este plan.")
                .HasColumnName("Revision_Descripcion");
        });

        modelBuilder.Entity<PlanesCoberturasRevisionesTran>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Planes_Coberturas_Revisiones_Trans");

            entity.Property(e => e.CoberturaNumero).HasColumnName("Cobertura_Numero");
            entity.Property(e => e.GrupoNumero).HasColumnName("Grupo_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PlanNumeroOrigen)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero_Origen");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RevisionNumero).HasColumnName("Revision_Numero");
            entity.Property(e => e.RevisionNumeroPropuesta).HasColumnName("Revision_Numero_Propuesta");
            entity.Property(e => e.SubGrupoNumero).HasColumnName("SubGrupo_Numero");
        });

        modelBuilder.Entity<PlanesCoberturasVistaApp>(entity =>
        {
            entity.HasKey(e => new { e.PlanNumero, e.GrupoNumero, e.SubGrupoNumero, e.CoberturaNumero });

            entity.ToTable("Planes_Coberturas_Vista_APP");

            entity.Property(e => e.PlanNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.GrupoNumero).HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubGrupoNumero).HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.CoberturaNumero).HasColumnName("Cobertura_Numero");
            entity.Property(e => e.CoberturaCubreAfiliado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Cubre_Afiliado");
            entity.Property(e => e.CoberturaCubreArs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Cubre_ARS");
            entity.Property(e => e.CoberturaDescripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Descripcion");
            entity.Property(e => e.CoberturaPdss)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_PDSS");
            entity.Property(e => e.CoberturaTexto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Texto");
            entity.Property(e => e.CoberturaTipoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Tipo_Descripcion");
            entity.Property(e => e.CoberturaTipoNumero).HasColumnName("Cobertura_Tipo_Numero");
            entity.Property(e => e.CoberturaUnico)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Unico");
            entity.Property(e => e.CupsCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CUPS_Codigo");
            entity.Property(e => e.CupsDetalle)
                .HasMaxLength(255)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CUPS_Detalle");
            entity.Property(e => e.GrupoDescripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Grupo_Descripcion");
            entity.Property(e => e.GrupoExplicacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Grupo_Explicacion");
            entity.Property(e => e.PlanNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Plan_Nombre");
            entity.Property(e => e.ProblacionDetalle)
                .HasMaxLength(21)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Problacion_Detalle");
            entity.Property(e => e.ServicioDescripcionCorta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Servicio_Descripcion_Corta");
            entity.Property(e => e.SubGrupoAreaDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubGrupo_Area_Descripcion");
            entity.Property(e => e.SubGrupoAreaNumero).HasColumnName("SubGrupo_Area_Numero");
            entity.Property(e => e.SubGrupoCoberturaTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubGrupo_Cobertura_Tipo_Descripcion");
            entity.Property(e => e.SubGrupoCoberturaTipoNumero).HasColumnName("SubGrupo_Cobertura_Tipo_Numero");
            entity.Property(e => e.SubGrupoCoberturaTope)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("SubGrupo_Cobertura_Tope");
            entity.Property(e => e.SubGrupoCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubGrupo_Codigo");
            entity.Property(e => e.SubGrupoCuotaAfiliadoFija)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("SubGrupo_Cuota_Afiliado_Fija");
            entity.Property(e => e.SubGrupoCuotaAfiliadoPorciento)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SubGrupo_Cuota_Afiliado_Porciento");
            entity.Property(e => e.SubGrupoCuotaAfiliadoTope)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("SubGrupo_Cuota_Afiliado_Tope");
            entity.Property(e => e.SubGrupoCuotaTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubGrupo_Cuota_Tipo_Descripcion");
            entity.Property(e => e.SubGrupoCuotaTipoNumero).HasColumnName("SubGrupo_Cuota_Tipo_Numero");
            entity.Property(e => e.SubGrupoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubGrupo_Descripcion");
            entity.Property(e => e.SubGrupoPoblacionDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubGrupo_Poblacion_Descripcion");
            entity.Property(e => e.SubGrupoPoblacionNumero).HasColumnName("SubGrupo_Poblacion_Numero");
            entity.Property(e => e.SubGrupoServicioDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubGrupo_Servicio_Descripcion");
            entity.Property(e => e.SubGrupoServicioNumero).HasColumnName("SubGrupo_Servicio_Numero");
            entity.Property(e => e.SubgrupoCuotaArsPorciento)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Subgrupo_Cuota_Ars_Porciento");
            entity.Property(e => e.SubgrupoExplicacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Subgrupo_Explicacion");
        });

        modelBuilder.Entity<PlanesCoberturasVistaApp12122017>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Planes_Coberturas_Vista_APP_12122017");

            entity.Property(e => e.CoberturaCubreAfiliado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Cubre_Afiliado");
            entity.Property(e => e.CoberturaCubreArs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Cubre_ARS");
            entity.Property(e => e.CoberturaDescripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Descripcion");
            entity.Property(e => e.CoberturaNumero).HasColumnName("Cobertura_Numero");
            entity.Property(e => e.CoberturaPdss)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_PDSS");
            entity.Property(e => e.CoberturaTexto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Texto");
            entity.Property(e => e.CoberturaTipoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Tipo_Descripcion");
            entity.Property(e => e.CoberturaTipoNumero).HasColumnName("Cobertura_Tipo_Numero");
            entity.Property(e => e.CoberturaUnico)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Cobertura_Unico");
            entity.Property(e => e.CupsCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CUPS_Codigo");
            entity.Property(e => e.CupsDetalle)
                .HasMaxLength(255)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CUPS_Detalle");
            entity.Property(e => e.GrupoDescripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Grupo_Descripcion");
            entity.Property(e => e.GrupoExplicacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Grupo_Explicacion");
            entity.Property(e => e.GrupoNumero).HasColumnName("Grupo_Numero");
            entity.Property(e => e.PlanNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Plan_Nombre");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.ProblacionDetalle)
                .HasMaxLength(21)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Problacion_Detalle");
            entity.Property(e => e.ServicioDescripcionCorta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Servicio_Descripcion_Corta");
            entity.Property(e => e.SubGrupoAreaDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubGrupo_Area_Descripcion");
            entity.Property(e => e.SubGrupoAreaNumero).HasColumnName("SubGrupo_Area_Numero");
            entity.Property(e => e.SubGrupoCoberturaTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubGrupo_Cobertura_Tipo_Descripcion");
            entity.Property(e => e.SubGrupoCoberturaTipoNumero).HasColumnName("SubGrupo_Cobertura_Tipo_Numero");
            entity.Property(e => e.SubGrupoCoberturaTope)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("SubGrupo_Cobertura_Tope");
            entity.Property(e => e.SubGrupoCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubGrupo_Codigo");
            entity.Property(e => e.SubGrupoCuotaAfiliadoFija)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("SubGrupo_Cuota_Afiliado_Fija");
            entity.Property(e => e.SubGrupoCuotaAfiliadoPorciento)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SubGrupo_Cuota_Afiliado_Porciento");
            entity.Property(e => e.SubGrupoCuotaAfiliadoTope)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("SubGrupo_Cuota_Afiliado_Tope");
            entity.Property(e => e.SubGrupoCuotaTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubGrupo_Cuota_Tipo_Descripcion");
            entity.Property(e => e.SubGrupoCuotaTipoNumero).HasColumnName("SubGrupo_Cuota_Tipo_Numero");
            entity.Property(e => e.SubGrupoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubGrupo_Descripcion");
            entity.Property(e => e.SubGrupoNumero).HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.SubGrupoPoblacionDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubGrupo_Poblacion_Descripcion");
            entity.Property(e => e.SubGrupoPoblacionNumero).HasColumnName("SubGrupo_Poblacion_Numero");
            entity.Property(e => e.SubGrupoServicioDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SubGrupo_Servicio_Descripcion");
            entity.Property(e => e.SubGrupoServicioNumero).HasColumnName("SubGrupo_Servicio_Numero");
            entity.Property(e => e.SubgrupoCuotaArsPorciento)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Subgrupo_Cuota_Ars_Porciento");
            entity.Property(e => e.SubgrupoExplicacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Subgrupo_Explicacion");
        });

        modelBuilder.Entity<PlanesCoberturasVistum>(entity =>
        {
            entity.HasKey(e => new { e.PlanNumero, e.GrupoNumero, e.SubGrupoNumero, e.CoberturaNumero });

            entity.ToTable("Planes_Coberturas_Vista");

            entity.HasIndex(e => e.CoberturaNumero, "Idx_Planes_Coberturas_Vista_Cobertura");

            entity.HasIndex(e => new { e.PlanNumero, e.SubGrupoCodigo }, "Idx_Planes_Coberturas_Vista_Plan_Subgrupo");

            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.GrupoNumero).HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubGrupoNumero).HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.CoberturaNumero).HasColumnName("Cobertura_Numero");
            entity.Property(e => e.CoberturaDescripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Cobertura_Descripcion");
            entity.Property(e => e.CoberturaTipoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Cobertura_Tipo_Descripcion");
            entity.Property(e => e.CoberturaTipoNumero).HasColumnName("Cobertura_Tipo_Numero");
            entity.Property(e => e.CupsCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CUPS_Codigo");
            entity.Property(e => e.CupsDetalle)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("CUPS_Detalle");
            entity.Property(e => e.GrupoDescripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Grupo_Descripcion");
            entity.Property(e => e.PlanNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombre del Plan de Salud.")
                .HasColumnName("Plan_Nombre");
            entity.Property(e => e.ProblacionDetalle)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("Problacion_Detalle");
            entity.Property(e => e.SubGrupoAreaDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubGrupo_Area_Descripcion");
            entity.Property(e => e.SubGrupoAreaNumero).HasColumnName("SubGrupo_Area_Numero");
            entity.Property(e => e.SubGrupoCoberturaTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubGrupo_Cobertura_Tipo_Descripcion");
            entity.Property(e => e.SubGrupoCoberturaTipoNumero).HasColumnName("SubGrupo_Cobertura_Tipo_Numero");
            entity.Property(e => e.SubGrupoCoberturaTope)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("SubGrupo_Cobertura_Tope");
            entity.Property(e => e.SubGrupoCodigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("Código creado a partir de la combinación de numero de grupo con el numero del subgrupo separados por un punto (.). ")
                .HasColumnName("SubGrupo_Codigo");
            entity.Property(e => e.SubGrupoCuotaAfiliadoFija)
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("SubGrupo_Cuota_Afiliado_Fija");
            entity.Property(e => e.SubGrupoCuotaAfiliadoPorciento)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SubGrupo_Cuota_Afiliado_Porciento");
            entity.Property(e => e.SubGrupoCuotaAfiliadoTope)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("SubGrupo_Cuota_Afiliado_Tope");
            entity.Property(e => e.SubGrupoCuotaTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubGrupo_Cuota_Tipo_Descripcion");
            entity.Property(e => e.SubGrupoCuotaTipoNumero).HasColumnName("SubGrupo_Cuota_Tipo_Numero");
            entity.Property(e => e.SubGrupoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SubGrupo_Descripcion");
            entity.Property(e => e.SubGrupoPoblacionDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubGrupo_Poblacion_Descripcion");
            entity.Property(e => e.SubGrupoPoblacionNumero).HasColumnName("SubGrupo_Poblacion_Numero");
            entity.Property(e => e.SubGrupoServicioDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubGrupo_Servicio_Descripcion");
            entity.Property(e => e.SubGrupoServicioNumero).HasColumnName("SubGrupo_Servicio_Numero");
            entity.Property(e => e.SubgrupoCuotaArsPorciento)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Subgrupo_Cuota_Ars_Porciento");
            entity.Property(e => e.SubgrupoExplicacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasColumnName("Subgrupo_Explicacion");
        });

        modelBuilder.Entity<PlanesDocumentosArsVistum>(entity =>
        {
            entity.HasKey(e => new { e.PlanNumero, e.DocumentoCodigo, e.ArsNumero });

            entity.ToTable("Planes_Documentos_Ars_Vista");

            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.ArsNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Ars_Nombre");
            entity.Property(e => e.DocumentoAsunto)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Documento_Asunto");
            entity.Property(e => e.DocumentoNota)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("Documento_Nota");
            entity.Property(e => e.DocumentoPublicado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Documento_Publicado");
            entity.Property(e => e.DocumentoPublicar).HasColumnName("Documento_Publicar");
            entity.Property(e => e.DocumentoRuta)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Documento_Ruta");
            entity.Property(e => e.DocumentoTema)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Documento_Tema");
            entity.Property(e => e.PlanDescripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("Plan_Descripcion");
            entity.Property(e => e.PlanEstadoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Plan_Estado_Codigo");
            entity.Property(e => e.PlanEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Plan_Estado_Descripcion");
            entity.Property(e => e.PlanEstadoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Plan_Estado_Explicacion");
            entity.Property(e => e.PlanEstadoNumero).HasColumnName("Plan_Estado_Numero");
            entity.Property(e => e.PlanFechaAprobacion)
                .HasColumnType("datetime")
                .HasColumnName("Plan_Fecha_Aprobacion");
            entity.Property(e => e.PlanFechaInicioAplicacion)
                .HasColumnType("datetime")
                .HasColumnName("Plan_Fecha_Inicio_Aplicacion");
            entity.Property(e => e.PlanFechaTerminoAplicacion)
                .HasColumnType("datetime")
                .HasColumnName("Plan_Fecha_Termino_Aplicacion");
            entity.Property(e => e.PlanModalidadDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Plan_Modalidad_Descripcion");
            entity.Property(e => e.PlanModalidadNumero).HasColumnName("Plan_Modalidad_Numero");
            entity.Property(e => e.PlanNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Plan_Nombre");
            entity.Property(e => e.PlanPrimaAnual)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Plan_Prima_Anual");
            entity.Property(e => e.PlanPrimaColectiva)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Plan_Prima_Colectiva");
            entity.Property(e => e.PlanRangoPersonasInicio).HasColumnName("Plan_Rango_Personas_Inicio");
            entity.Property(e => e.PlanRangoPersonasTope).HasColumnName("Plan_Rango_Personas_Tope");
            entity.Property(e => e.PlanTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Plan_Tipo_Codigo");
            entity.Property(e => e.PlanTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Plan_Tipo_Descripcion");
            entity.Property(e => e.PlanTipoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Plan_Tipo_Explicacion");
            entity.Property(e => e.PlanTipoNumero).HasColumnName("Plan_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PlanesDocumentosTran>(entity =>
        {
            entity.HasKey(e => new { e.PlanNumero, e.DocumentoCodigo }).HasName("PK_Planes_Documentos_Master");

            entity.ToTable("Planes_Documentos_Trans", tb =>
                {
                    tb.HasComment("Es una tabla transaccional, que contiene los detalles de los documentos que hacen referencias a los planes registrados en el maestro de planes de servicios de salud, su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Planes_Documentos_Trans_Delete");
                    tb.HasTrigger("Planes_Documentos_Trans_Update");
                });

            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Código único de la versión del Plan de servicios de Salud (PDSS) al cual pertenece el Subgrupo.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.DocumentoNota)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasComment("Notas relacionadas con el contenido y asignación del documento.")
                .HasColumnName("Documento_Nota");
            entity.Property(e => e.DocumentoPublicado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si el documento relacionado con el plan se publicara o no hacia la WEB.")
                .HasColumnName("Documento_Publicado");
            entity.Property(e => e.DocumentoPublicar)
                .HasComment("Indica si el documento relacionado con el plan se publicara o no hacia la WEB.")
                .HasColumnName("Documento_Publicar");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.DocumentoCodigoNavigation).WithMany(p => p.PlanesDocumentosTrans)
                .HasForeignKey(d => d.DocumentoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_Documentos_Trans_Comunes_Documentos_Master");

            entity.HasOne(d => d.PlanNumeroNavigation).WithMany(p => p.PlanesDocumentosTrans)
                .HasForeignKey(d => d.PlanNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_Documentos_Master_Planes_Master");
        });

        modelBuilder.Entity<PlanesEscalaEdadesCatum>(entity =>
        {
            entity.HasKey(e => e.PlanEscalaNumero);

            entity.ToTable("Planes_Escala_Edades_Cata");

            entity.Property(e => e.PlanEscalaNumero)
                .HasComment("Número único  del estado en que se encuentra un Plan de Salud A=Activo (Puede ser vendido y cargado por la ARS), I=Inactivo (Solo puede ser cargado por la ARS) y N=Nulo (No permite actividad), para futuras conversiones hacia el DATA WAREHOUSE.")
                .HasColumnName("Plan_Escala_Numero");
            entity.Property(e => e.PlanEscalaDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del estado en que se encuentra un Plan de Salud donde A=Activo (Puede ser vendido y cargado por la ARS), I=Inactivo (Solo puede ser cargado por la ARS) y N=Nulo (No permite actividad).")
                .HasColumnName("Plan_Escala_Descripcion");
            entity.Property(e => e.PlanEscalaDesde).HasColumnName("Plan_Escala_Desde");
            entity.Property(e => e.PlanEscalaHasta).HasColumnName("Plan_Escala_Hasta");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PlanesEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.PlanEstadoNumero);

            entity.ToTable("Planes_Estados_Cata", tb => tb.HasComment("Es un catálogo que contiene los diferentes estados de situación por lo que pasa un plan de servicios de salud,  identifica además que operaciones pueden hacer las ARS con cada plan, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PlanEstadoNumero)
                .HasComment("Número único  del estado en que se encuentra un Plan de Salud A=Activo (Puede ser vendido y cargado por la ARS), I=Inactivo (Solo puede ser cargado por la ARS) y N=Nulo (No permite actividad), para futuras conversiones hacia el DATA WAREHOUSE.")
                .HasColumnName("Plan_Estado_Numero");
            entity.Property(e => e.PlanEstadoCargaAfiliados)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica con una S ó N que los planes con este estado pueden o no cargar afiliados.")
                .HasColumnName("Plan_Estado_Carga_Afiliados");
            entity.Property(e => e.PlanEstadoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del estado en que se encuentra un Plan de Salud A=Activo (Puede ser vendido y cargado por la ARS), I=Inactivo (Solo puede ser cargado por la ARS) y N=Nulo (No permite actividad).")
                .HasColumnName("Plan_Estado_Codigo");
            entity.Property(e => e.PlanEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del estado en que se encuentra un Plan de Salud donde A=Activo (Puede ser vendido y cargado por la ARS), I=Inactivo (Solo puede ser cargado por la ARS) y N=Nulo (No permite actividad).")
                .HasColumnName("Plan_Estado_Descripcion");
            entity.Property(e => e.PlanEstadoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Explicación de cada uno de los estados en que estar un Plan de Salud donde A=Activo, I=Inactivo y N=Nulo.")
                .HasColumnName("Plan_Estado_Explicacion");
            entity.Property(e => e.PlanEstadoPublicar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si un plan se encuentra en este estado si debe publicar en la WEB o no.")
                .HasColumnName("Plan_Estado_Publicar");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PlanesGruposMaster>(entity =>
        {
            entity.HasKey(e => new { e.PlanNumero, e.GrupoNumero });

            entity.ToTable("Planes_Grupos_Master", tb =>
                {
                    tb.HasComment("Es un maestro que contiene las informaciones de los grupos de servicios de salud relacionados con cada uno de los Planes de Servicios de Salud, su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Planes_Grupos_Master_Delete");
                    tb.HasTrigger("Planes_Grupos_Master_Update");
                });

            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Código único de la versión del Plan de servicios de Salud (PDSS) al cual pertenece el Subgrupo.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.GrupoNumero)
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.PlanNumeroOrigen)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Identifica el número de Plan de cual se tomo la información para este plan.")
                .HasColumnName("Plan_Numero_Origen");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.GrupoNumeroNavigation).WithMany(p => p.PlanesGruposMasters)
                .HasForeignKey(d => d.GrupoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_Grupos_Master_Grupos_Cata");

            entity.HasOne(d => d.PlanNumeroNavigation).WithMany(p => p.PlanesGruposMasters)
                .HasForeignKey(d => d.PlanNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_Grupos_Master_Planes_ARS_Master");
        });

        modelBuilder.Entity<PlanesMaster>(entity =>
        {
            entity.HasKey(e => e.PlanNumero).HasName("PK_Planes_ARS_Master");

            entity.ToTable("Planes_Master", tb =>
                {
                    tb.HasComment("Es un maestro con los detalles de los planes del PDSS y sus versiones, así como los planes alternativos de salud (Complementarios, Especiales, Voluntarios, etc.), su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Planes_Master_Delete");
                    tb.HasTrigger("Planes_Master_Update");
                });

            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Código único de la versión del Plan de servicios de Salud (PDSS) al cual pertenece el Subgrupo.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.PlanDescripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasComment("Descripción del plan de salud.")
                .HasColumnName("Plan_Descripcion");
            entity.Property(e => e.PlanEstadoNumero)
                .HasComment("Número único  del estado en que se encuentra un Plan de Salud A=Activo (Puede ser vendido y cargado por la ARS), I=Inactivo (Solo puede ser cargado por la ARS) y N=Nulo (No permite actividad), para futuras conversiones hacia el DATA WAREHOUSE.")
                .HasColumnName("Plan_Estado_Numero");
            entity.Property(e => e.PlanFechaAprobacion)
                .HasComment("Fecha en que fue aprobado el plan de salud.")
                .HasColumnType("datetime")
                .HasColumnName("Plan_Fecha_Aprobacion");
            entity.Property(e => e.PlanFechaInicioAplicacion)
                .HasComment("Fecha en que inicia la aplicación del plan de salud.")
                .HasColumnType("datetime")
                .HasColumnName("Plan_Fecha_Inicio_Aplicacion");
            entity.Property(e => e.PlanFechaTerminoAplicacion)
                .HasComment("Fecha en que termino la vigencia del plan de salud.")
                .HasColumnType("datetime")
                .HasColumnName("Plan_Fecha_Termino_Aplicacion");
            entity.Property(e => e.PlanModalidadNumero)
                .HasComment("Numero único que identifica la modalidad del plan de salud, representa si el plan es Individual o Colectivo.")
                .HasColumnName("Plan_Modalidad_Numero");
            entity.Property(e => e.PlanNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombre del Plan de Salud.")
                .HasColumnName("Plan_Nombre");
            entity.Property(e => e.PlanPrimaAnual)
                .HasComment("Monto de la Prima Anual establecida y autorizada para el plan de salud.")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Plan_Prima_Anual");
            entity.Property(e => e.PlanPrimaColectiva)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Plan_Prima_Colectiva");
            entity.Property(e => e.PlanRangoPersonasInicio).HasColumnName("Plan_Rango_Personas_Inicio");
            entity.Property(e => e.PlanRangoPersonasTope).HasColumnName("Plan_Rango_Personas_Tope");
            entity.Property(e => e.PlanTipoNumero)
                .HasComment("Número único asignado a cada tipo de plan de salud.")
                .HasColumnName("Plan_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PlanEstadoNumeroNavigation).WithMany(p => p.PlanesMasters)
                .HasForeignKey(d => d.PlanEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_ARS_Master_Planes_Estados_Cata");

            entity.HasOne(d => d.PlanModalidadNumeroNavigation).WithMany(p => p.PlanesMasters)
                .HasForeignKey(d => d.PlanModalidadNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_Master_Planes_Modalidad_Cata");
        });

        modelBuilder.Entity<PlanesModalidadCatum>(entity =>
        {
            entity.HasKey(e => e.PlanModalidadNumero);

            entity.ToTable("Planes_Modalidad_Cata", tb => tb.HasComment("Es un catálogo que contiene las diferentes modalidades que aplican para los planes de servicios de salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PlanModalidadNumero)
                .HasComment("Numero único que identifica la modalidad del plan de salud, representa si el plan es Individual o Colectivo.")
                .HasColumnName("Plan_Modalidad_Numero");
            entity.Property(e => e.PlanModalidadDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción de la modalidad del plan de salud (Individual o Colectivo).")
                .HasColumnName("Plan_Modalidad_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PlanesPrimasEdadesCatum>(entity =>
        {
            entity.HasKey(e => new { e.PlanNumero, e.PlanEscalaNumero });

            entity.ToTable("Planes_Primas_Edades_Cata");

            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Código único de la versión del Plan de servicios de Salud (PDSS) al cual pertenece el Subgrupo.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PlanEscalaNumero)
                .HasComment("Número único  del estado en que se encuentra un Plan de Salud A=Activo (Puede ser vendido y cargado por la ARS), I=Inactivo (Solo puede ser cargado por la ARS) y N=Nulo (No permite actividad), para futuras conversiones hacia el DATA WAREHOUSE.")
                .HasColumnName("Plan_Escala_Numero");
            entity.Property(e => e.PlanEscalaValor)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("Plan_Escala_Valor");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PlanEscalaNumeroNavigation).WithMany(p => p.PlanesPrimasEdadesCata)
                .HasForeignKey(d => d.PlanEscalaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_Primas_Edades_Cata_Planes_Escala_Edades_Cata");

            entity.HasOne(d => d.PlanNumeroNavigation).WithMany(p => p.PlanesPrimasEdadesCata)
                .HasForeignKey(d => d.PlanNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_Primas_Edades_Cata_Planes_Master");
        });

        modelBuilder.Entity<PlanesPrimasRangosCatum>(entity =>
        {
            entity.HasKey(e => e.PrimaRangoNumero);

            entity.ToTable("Planes_Primas_Rangos_Cata");

            entity.Property(e => e.PrimaRangoNumero)
                .HasComment("Numero único que identifica la modalidad del plan de salud, representa si el plan es Individual o Colectivo.")
                .HasColumnName("Prima_Rango_numero");
            entity.Property(e => e.PrimaRangoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción de la modalidad del plan de salud (Individual o Colectivo).")
                .HasColumnName("Prima_Rango_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PlanesPrimasTran>(entity =>
        {
            entity.HasKey(e => new { e.PlanNumero, e.PrimaRangoNumero });

            entity.ToTable("Planes_Primas_Trans");

            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Código único de la versión del Plan de servicios de Salud (PDSS) al cual pertenece el Subgrupo.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PrimaRangoNumero)
                .HasComment("Numero único que identifica la modalidad del plan de salud, representa si el plan es Individual o Colectivo.")
                .HasColumnName("Prima_Rango_Numero");
            entity.Property(e => e.PrimaRangoValor)
                .HasColumnType("decimal(10, 0)")
                .HasColumnName("Prima_Rango_Valor");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PlanNumeroNavigation).WithMany(p => p.PlanesPrimasTrans)
                .HasForeignKey(d => d.PlanNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_Primas_Trans_Planes_Master");

            entity.HasOne(d => d.PrimaRangoNumeroNavigation).WithMany(p => p.PlanesPrimasTrans)
                .HasForeignKey(d => d.PrimaRangoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_Primas_Trans_Planes_Primas_Rangos_Cata");
        });

        modelBuilder.Entity<PlanesSubGruposCoberturasTipoCatum>(entity =>
        {
            entity.HasKey(e => e.SubGrupoCoberturaTipoNumero).HasName("PK_SubGrupos_Coberturas_Tipo_Cata");

            entity.ToTable("Planes_SubGrupos_Coberturas_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene los detalles de los tipos de coberturas que aplican sobre subgrupos de servicios de salud  relacionados Planes de Servicios de Salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SubGrupoCoberturaTipoNumero)
                .HasComment("Es un número único que representa el tipo de cobertura del subgrupo, indica si el subgrupo  tiene una cobertura Gradual o Ilimitada.")
                .HasColumnName("SubGrupo_Cobertura_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SubGrupoCoberturaTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es la descripción del tipo de cobertura del subgrupo, indica si el subgrupo  tiene una cobertura Gradual o Ilimitada.")
                .HasColumnName("SubGrupo_Cobertura_Tipo_Descripcion");
            entity.Property(e => e.SubGrupoCoberturaTipoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValueSql("('No especificado')")
                .HasComment("Es una breve explicación de la descripción del tipo de cobertura del subgrupo.")
                .HasColumnName("SubGrupo_Cobertura_Tipo_Explicacion");
        });

        modelBuilder.Entity<PlanesSubGruposCuotasTipoCatum>(entity =>
        {
            entity.HasKey(e => e.SubGrupoCuotaTipoNumero).HasName("PK_SubGrupos_Cuotas_Tipo_Cata");

            entity.ToTable("Planes_SubGrupos_Cuotas_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene los detalles de los tipos de cuotas que aplican sobre los subgrupos de servicios de salud  relacionados Planes de Servicios de Salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SubGrupoCuotaTipoNumero)
                .HasComment("Número único del Tipo de Cuota que aplica sobre el Subgrupo del PDSS, especifica si la cuota a aplicar es Moderadora Fija, Moderadora Variable, Copago  y No (No aplica cuota).  ")
                .HasColumnName("SubGrupo_Cuota_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SubGrupoCuotaTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del Tipo de Cuota que aplica sobre el Subgrupo del PDSS, especifica si la cuota a aplicar es Moderadora Fija, Moderadora Variable, Copago  y No (No aplica cuota).  ")
                .HasColumnName("SubGrupo_Cuota_Tipo_Descripcion");
            entity.Property(e => e.SubGrupoCuotaTipoReporte)
                .HasComment("Es utilizado en los reportes para el formato y ubicación de la descripción del tipo de cuota de  los subgrupos.")
                .HasColumnName("SubGrupo_Cuota_Tipo_Reporte");
        });

        modelBuilder.Entity<PlanesSubgruposMaster>(entity =>
        {
            entity.HasKey(e => new { e.PlanNumero, e.GrupoNumero, e.SubGrupoNumero });

            entity.ToTable("Planes_Subgrupos_Master", tb =>
                {
                    tb.HasComment("Es un maestro que contiene las informaciones de los subgrupos de servicios de salud relacionados con cada uno de los Planes de Servicios de Salud según grupos, su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Planes_Subgrupos_Master_Delete");
                    tb.HasTrigger("Planes_Subgrupos_Master_Update");
                });

            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Código único de la versión del Plan de servicios de Salud (PDSS) al cual pertenece el Subgrupo.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.GrupoNumero)
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubGrupoNumero)
                .HasComment("Número único asignado al subgrupo del PDSS, se incrementa de 1 a N para cada grupo del PDSS.")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.PlanNumeroOrigen)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Identifica el número de Plan de cual se tomo la información para este plan.")
                .HasColumnName("Plan_Numero_Origen");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SubGrupoCoberturaTipoNumero)
                .HasComment("Es un número único que representa el tipo de cobertura del subgrupo, indica si el subgrupo  tiene una cobertura Gradual o Ilimitada.")
                .HasColumnName("SubGrupo_Cobertura_Tipo_Numero");
            entity.Property(e => e.SubGrupoCoberturaTope)
                .HasComment("Monto del Tope de consumo que aplica sobre el Subgrupo del PDSS.  ")
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("SubGrupo_Cobertura_Tope");
            entity.Property(e => e.SubGrupoCuotaAfiliadoFija)
                .HasComment("Monto fijo a pagar que debe ser cubierto por el Afiliado para el Subgrupo del PDSS.")
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("SubGrupo_Cuota_Afiliado_Fija");
            entity.Property(e => e.SubGrupoCuotaAfiliadoPorciento)
                .HasComment("Porcentaje del monto a pagar que debe ser cubierto por el Afiliado para el Subgrupo del PDSS.")
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SubGrupo_Cuota_Afiliado_Porciento");
            entity.Property(e => e.SubGrupoCuotaAfiliadoTope)
                .HasComment("Monto Máximo a pagar que debe ser cubierto por el Afiliado para el Subgrupo del PDSS.")
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("SubGrupo_Cuota_Afiliado_Tope");
            entity.Property(e => e.SubGrupoCuotaTipoNumero)
                .HasComment("Número único del Tipo de Cuota que aplica sobre el Subgrupo del PDSS, especifica si la cuota a aplicar es Moderadora Fija, Moderadora Variable, Copago  y No (No aplica cuota).  ")
                .HasColumnName("SubGrupo_Cuota_Tipo_Numero");
            entity.Property(e => e.SubgrupoCuotaArsPorciento)
                .HasComment("Porcentaje del monto a pagar que debe ser cubierto por la ARS para el Subgrupo del PDSS.")
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Subgrupo_Cuota_Ars_Porciento");

            entity.HasOne(d => d.PlanNumeroNavigation).WithMany(p => p.PlanesSubgruposMasters)
                .HasForeignKey(d => d.PlanNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_Subgrupos_Master_Planes_ARS_Master");

            entity.HasOne(d => d.SubGrupoCoberturaTipoNumeroNavigation).WithMany(p => p.PlanesSubgruposMasters)
                .HasForeignKey(d => d.SubGrupoCoberturaTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_Subgrupos_Master_SubGrupos_Coberturas_Tipo_Cata");

            entity.HasOne(d => d.SubGrupoCuotaTipoNumeroNavigation).WithMany(p => p.PlanesSubgruposMasters)
                .HasForeignKey(d => d.SubGrupoCuotaTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_Subgrupos_Master_SubGrupos_Cuotas_Tipo_Cata");

            entity.HasOne(d => d.SubGruposCatum).WithMany(p => p.PlanesSubgruposMasters)
                .HasForeignKey(d => new { d.GrupoNumero, d.SubGrupoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Planes_Subgrupos_Master_SubGrupos_Cata");
        });

        modelBuilder.Entity<PlanesTipoCatum>(entity =>
        {
            entity.HasKey(e => e.PlanTipoNumero);

            entity.ToTable("Planes_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene los tipos de planes de servicios de salud,  identifica el tipo de plan en el Maestro de Planes, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PlanTipoNumero)
                .HasComment("Número único asignado a cada tipo de plan de salud.")
                .HasColumnName("Plan_Tipo_Numero");
            entity.Property(e => e.PlanTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Numero único del tipo de plan de salud, representa si el plan es PDSS, Complementario, Voluntario, Especia etc.")
                .HasColumnName("Plan_Tipo_Codigo");
            entity.Property(e => e.PlanTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de plan de salud (PDSS, Complementario, Voluntario, Especia etc.).")
                .HasColumnName("Plan_Tipo_Descripcion");
            entity.Property(e => e.PlanTipoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValueSql("('No especificado')")
                .HasComment("Breve explicación de la descripción del tipo de plan de salud (PDSS, Complementario, Voluntario, Especia etc.).")
                .HasColumnName("Plan_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasCategoriaCatum>(entity =>
        {
            entity.HasKey(e => e.PrestadoraCategoriaNumero);

            entity.ToTable("Prestadoras_Categoria_Cata", tb => tb.HasComment("Es un catálogo que contiene las categoría de PSS, clasifica el maestro de PSS, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PrestadoraCategoriaNumero)
                .HasComment("Es  un número único que representa  la categoría  de los prestadores de servicio de salud (PSS),    Prestadora Institucional  o  Médico Independiente),  su objetivo es ser utilizados en futuras conversiones hacia el DATA WAREHOUSE.")
                .HasColumnName("Prestadora_Categoria_Numero");
            entity.Property(e => e.PrestadoraCategoriaCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es un código que nos indica si prestador de servicio de salud (PSS) es un  P = Prestadora Institucional (Hospital, Laboratorio, centro Diagnósticos,  etc.) o es un M = Médico Independiente.")
                .HasColumnName("Prestadora_Categoria_Codigo");
            entity.Property(e => e.PrestadoraCategoriaDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es la descripción de la categoría que nos indica si el prestador de servicio de salud (PSS) es un  P = Prestadora Institucional (Hospital, Laboratorio, centro Diagnósticos,  etc.) o es un M = Médico Independiente.")
                .HasColumnName("Prestadora_Categoria_Descripcion");
            entity.Property(e => e.PrestadoraCategoriaExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Breve explicación de la descripción de la categoría que nos indica si el prestador de servicio de salud (PSS) es un P = Prestadora Institucional (Hospital, Laboratorio, centro Diagnósticos,  etc.) o es un M = Médico Independiente.")
                .HasColumnName("Prestadora_Categoria_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasClaseCatum>(entity =>
        {
            entity.HasKey(e => e.PrestadoraClaseNumero).HasName("PK_PSS_Prestadoras_Clase_Cata");

            entity.ToTable("Prestadoras_Clase_Cata", tb => tb.HasComment("Es un catálogo que contiene la clases de PSS, clasifican los tipos de Prestadoras de Servicios de Salud (PSS), su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PrestadoraClaseNumero)
                .HasComment("Es un número único que identifica la clase a la cual pertenece el tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos, Centro Ambulatorio, Hospitales, etc.).")
                .HasColumnName("Prestadora_Clase_Numero");
            entity.Property(e => e.PrestadoraClaseDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es la descripción de la clase a la cual pertenece el tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos, Centro Ambulatorio, Hospitales, etc.).")
                .HasColumnName("Prestadora_Clase_Descripcion");
            entity.Property(e => e.PrestadoraClaseExplicacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Es la explicación del la clase a la cual pertenece el tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos, Centro Ambulatorio, Hospitales, etc.).")
                .HasColumnName("Prestadora_Clase_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasEspecialidadesCatum>(entity =>
        {
            entity.HasKey(e => e.EspecialidadNumero).HasName("PK_Medicos_Especialidades_Cata");

            entity.ToTable("Prestadoras_Especialidades_Cata", tb => tb.HasComment("Es un catálogo que contiene las especialidades medicas, clasifica el maestro de PSS Médicos, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.EspecialidadNumero)
                .ValueGeneratedNever()
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero");
            entity.Property(e => e.EspecialidadDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción de la especialidad médica.")
                .HasColumnName("Especialidad_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasEspecialidadesServiciosCatum>(entity =>
        {
            entity.HasKey(e => new { e.EspecialidadNumero, e.PrestadoraServicioNumero });

            entity.ToTable("Prestadoras_Especialidades_Servicios_Cata");

            entity.Property(e => e.EspecialidadNumero)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero");
            entity.Property(e => e.PrestadoraServicioNumero)
                .HasComment("Número único del servicio que pueden ser contratados por las ARS/ARL a las PSS..")
                .HasColumnName("Prestadora_Servicio_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasInstitucionalesArsServiciosTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.SeguimientoPeriodo, e.PrestadoraNumero, e.PrestadoraServicioNumero }).HasName("PK_Prestadoras_Institucionales_ARS_Servicios_Trans_Nueva");

            entity.ToTable("Prestadoras_Institucionales_ARS_Servicios_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran las Prestadoras de Servicios de Salud (PSS) institucionales y los servicios contratados por las ARS/ARL,  su fuente de datos es el esquema 26 procesado por el Robot Simon. "));

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PrestadoraServicioNumero)
                .HasComment("Número único del servicio que pueden ser contratados por las ARS/ARL a las PSS..")
                .HasColumnName("Prestadora_Servicio_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.PrestadorasInstitucionalesArsServiciosTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Institucionales_ARS_Servicios_Trans_ARS_Master");

            entity.HasOne(d => d.PrestadoraServicioNumeroNavigation).WithMany(p => p.PrestadorasInstitucionalesArsServiciosTrans)
                .HasForeignKey(d => d.PrestadoraServicioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Institucionales_ARS_Servicios_Trans_Nueva_Prestadoras_Servicios_Cata");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.PrestadorasInstitucionalesArsServiciosTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .HasConstraintName("FK_Prestadoras_Institucionales_ARS_Servicios_Trans_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<PrestadorasInstitucionalesArsTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.PrestadoraNumero });

            entity.ToTable("Prestadoras_Institucionales_ARS_Temporal_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PrestadoraContratadaPlanComplementario)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica con (S/N) si el prestador de servicio de salud (PSS) contratado por la  ARS, fue contratado para presta servicios a sus afiliados bajo los Planes Complementarios.")
                .HasColumnName("Prestadora_Contratada_Plan_Complementario");
            entity.Property(e => e.PrestadoraContratadaPlanMedicinaEspecial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica con (S/N) si el prestador de servicio de salud (PSS) contratado por la  ARS, fue contratado para presta servicios a sus afiliados bajo los Plan Especiales y de Medicina Pre pagada.")
                .HasColumnName("Prestadora_Contratada_Plan_Medicina_Especial");
            entity.Property(e => e.PrestadoraContratadaPlanPdss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica con (S/N) si el prestador de servicio de salud (PSS) contratado por la  ARS, fue contratado para presta servicios a sus afiliados bajo el Plan de Servicios de Salud (PDSS) o el PBS.")
                .HasColumnName("Prestadora_Contratada_Plan_PDSS");
            entity.Property(e => e.PrestadoraContratadaPlanPensionados)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica con (S/N) si el prestador de servicio de salud (PSS) contratado por la  ARS, fue contratado para presta servicios a sus afiliados bajo el Plan Especial de Pensionados del Ministerio de Hacienda.")
                .HasColumnName("Prestadora_Contratada_Plan_Pensionados");
            entity.Property(e => e.PrestadoraContratadaPlanVoluntario)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica con (S/N) si el prestador de servicio de salud (PSS) contratado por la  ARS, fue contratado para presta servicios a sus afiliados bajo los Planes Voluntarios.")
                .HasColumnName("Prestadora_Contratada_Plan_Voluntario");
            entity.Property(e => e.PrestadoraContratoDesde)
                .HasComment("Fecha de inicio del contrato de la ARS con la PSS.")
                .HasColumnType("datetime")
                .HasColumnName("Prestadora_Contrato_Desde");
            entity.Property(e => e.PrestadoraContratoHasta)
                .HasComment("Fecha de Termino del contrato de la ARS con la PSS.")
                .HasColumnType("datetime")
                .HasColumnName("Prestadora_Contrato_Hasta");
            entity.Property(e => e.PrestadoraEstatus)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica el Estado de la\r\nPrestadora. (A/ B/ C )")
                .HasColumnName("Prestadora_Estatus");
            entity.Property(e => e.PrestadoraMedicos)
                .HasComment("Cantidad de médicos contratados que tiene la prestadora de servicios de salud (PSS).")
                .HasColumnName("Prestadora_Medicos");
            entity.Property(e => e.PrestadoraPrimerNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 1er. Nivel de atención de salud.")
                .HasColumnName("Prestadora_Primer_Nivel");
            entity.Property(e => e.PrestadoraSegundoNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 2do. Nivel de atención de salud.")
                .HasColumnName("Prestadora_Segundo_Nivel");
            entity.Property(e => e.PrestadoraServiciosAtencionAltoCosto)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Prestadora_Servicios_Atencion_Alto_Costo");
            entity.Property(e => e.PrestadoraServiciosCirugias)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Este campo indica si la ARS tiene este servicio\r\ncontratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Prestadora_Servicios_Cirugias");
            entity.Property(e => e.PrestadoraServiciosConsultaAmbulatoria)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la\r\nPrestadora, Colocando S=SI o N=NO")
                .HasColumnName("Prestadora_Servicios_Consulta_Ambulatoria");
            entity.Property(e => e.PrestadoraServiciosEmergencias)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si la ARS tiene este servicio contratado con la Prestadora, Colocando\r\nS=SI o N=NO")
                .HasColumnName("Prestadora_Servicios_Emergencias");
            entity.Property(e => e.PrestadoraServiciosFarmacia)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Prestadora_Servicios_Farmacia");
            entity.Property(e => e.PrestadoraServiciosHospitalizacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Prestadora_Servicios_Hospitalizacion");
            entity.Property(e => e.PrestadoraServiciosImagenes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Prestadora_Servicios_Imagenes");
            entity.Property(e => e.PrestadoraServiciosLaboratorios)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Prestadora_Servicios_Laboratorios");
            entity.Property(e => e.PrestadoraServiciosOdontologicos)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la\r\nPrestadora, Colocando S=SI o N=NO")
                .HasColumnName("Prestadora_Servicios_Odontologicos");
            entity.Property(e => e.PrestadoraServiciosOptica)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Prestadora_Servicios_Optica");
            entity.Property(e => e.PrestadoraServiciosOtrosApoyosDiagnosticos)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Prestadora_Servicios_Otros_Apoyos_Diagnosticos");
            entity.Property(e => e.PrestadoraServiciosPartosCesarias)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Prestadora_Servicios_Partos_Cesarias");
            entity.Property(e => e.PrestadoraServiciosPyp)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Este campo indica si la ARS tiene este servicio\r\ncontratado con la prestadora. Colocando\r\nS=SI o N=NO.")
                .HasColumnName("Prestadora_Servicios_PYP");
            entity.Property(e => e.PrestadoraServiciosRehabilitacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Prestadora_Servicios_Rehabilitacion");
            entity.Property(e => e.PrestadoraServiciosTrasladoPacientes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Prestadora_Servicios_Traslado_Pacientes");
            entity.Property(e => e.PrestadoraServiciosUciNoQuemados)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Prestadora_Servicios_UCI_No_Quemados");
            entity.Property(e => e.PrestadoraServiciosUciQuemados)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Este campo indica si la ARS tiene este servicio\r\ncontratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Prestadora_Servicios_UCI_Quemados");
            entity.Property(e => e.PrestadoraTercerNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 3er. Nivel de atención de salud.")
                .HasColumnName("Prestadora_Tercer_Nivel");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasInstitucionalesArsTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.PlanTipoNumero, e.SeguimientoPeriodo, e.PrestadoraNumero }).HasName("PK_Prestadoras_Institucionales_ARS_Trans_Nueva_1");

            entity.ToTable("Prestadoras_Institucionales_ARS_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran las Prestadoras de Servicios de Salud (PSS) institucionales contratadas por las ARS/ARL,  su fuente de datos es el esquema 26 procesado por el Robot Simon. "));

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.PlanTipoNumero)
                .HasComment("Número único asignado a cada tipo de plan de salud.")
                .HasColumnName("Plan_Tipo_Numero");
            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PrestadoraContratoDesde)
                .HasComment("Fecha de inicio del contrato de la ARS con la PSS.")
                .HasColumnType("datetime")
                .HasColumnName("Prestadora_Contrato_Desde");
            entity.Property(e => e.PrestadoraContratoHasta)
                .HasComment("Fecha de Termino del contrato de la ARS con la PSS.")
                .HasColumnType("datetime")
                .HasColumnName("Prestadora_Contrato_Hasta");
            entity.Property(e => e.PrestadoraMedicos)
                .HasComment("Cantidad de médicos contratados que tiene la prestadora de servicios de salud (PSS).")
                .HasColumnName("Prestadora_Medicos");
            entity.Property(e => e.PrestadoraPrimerNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 1er. Nivel de atención de salud.")
                .HasColumnName("Prestadora_Primer_Nivel");
            entity.Property(e => e.PrestadoraSegundoNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 2do. Nivel de atención de salud.")
                .HasColumnName("Prestadora_Segundo_Nivel");
            entity.Property(e => e.PrestadoraTercerNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 3er. Nivel de atención de salud.")
                .HasColumnName("Prestadora_Tercer_Nivel");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.PrestadorasInstitucionalesArsTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Institucionales_ARS_Trans_Nueva_Nueva_ARS_Master");

            entity.HasOne(d => d.PlanTipoNumeroNavigation).WithMany(p => p.PrestadorasInstitucionalesArsTrans)
                .HasForeignKey(d => d.PlanTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Institucionales_ARS_Trans_Planes_Tipo_Cata");

            entity.HasOne(d => d.PrestadoraNumeroNavigation).WithMany(p => p.PrestadorasInstitucionalesArsTrans)
                .HasForeignKey(d => d.PrestadoraNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Institucionales_ARS_Trans_Nueva_Nueva_Prestadoras_Institucionales_Master");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.PrestadorasInstitucionalesArsTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Institucionales_ARS_Trans_Nueva_Nueva_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<PrestadorasInstitucionalesArsVistum>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.PrestadoraNumero, e.PlanTipoNumero });

            entity.ToTable("Prestadoras_Institucionales_ARS_Vista");

            entity.HasIndex(e => e.PlanTipoNumero, "Idx_Prestadoras_Institucionales_ARS_Vista_Plan");

            entity.Property(e => e.ArsNumero).HasColumnName("Ars_Numero");
            entity.Property(e => e.PrestadoraNumero).HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PlanTipoNumero).HasColumnName("Plan_Tipo_Numero");
            entity.Property(e => e.FechaUltimoReporte)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_Ultimo_Reporte");
            entity.Property(e => e.PrestadoraContratoDesde)
                .HasColumnType("datetime")
                .HasColumnName("Prestadora_Contrato_Desde");
            entity.Property(e => e.PrestadoraContratoHasta)
                .HasColumnType("datetime")
                .HasColumnName("Prestadora_Contrato_Hasta");
            entity.Property(e => e.PrestadoraMedicos).HasColumnName("Prestadora_Medicos");
            entity.Property(e => e.PrestadoraPrimerNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Prestadora_Primer_Nivel");
            entity.Property(e => e.PrestadoraSegundoNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Prestadora_Segundo_Nivel");
            entity.Property(e => e.PrestadoraTercerNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Prestadora_Tercer_Nivel");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
        });

        modelBuilder.Entity<PrestadorasInstitucionalesMaster>(entity =>
        {
            entity.HasKey(e => e.PrestadoraNumero).HasName("PK_PSS_Prestadoras_Salud_Master");

            entity.ToTable("Prestadoras_Institucionales_Master", tb =>
                {
                    tb.HasComment("Es un maestro con los detalles de las Prestadoras de Servicios de Salud (PSS) institucionales (Hospitales, Laboratorios, Farmacias, etc.), su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Prestadoras_Institucionales_Master_Delete");
                    tb.HasTrigger("Prestadoras_Institucionales_Master_Update");
                });

            entity.Property(e => e.PrestadoraNumero)
                .ValueGeneratedNever()
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.InstitucionNumero)
                .HasComment("Número de la institución que es o a la que pertenece la ARS.")
                .HasColumnName("Institucion_Numero");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.PrestadoraCodigoSespas)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único de habilitación que asigna el Ministerio de Salud a cada una de la  prestadora  de servicio de salud habilitada de categoría institucional.")
                .HasColumnName("Prestadora_Codigo_Sespas");
            entity.Property(e => e.PrestadoraCodigoSespasProvisional)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si el código único de habilitación que asigna el Ministerio de Salud a es provisional.")
                .HasColumnName("Prestadora_Codigo_Sespas_Provisional");
            entity.Property(e => e.PrestadoraDireccion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Dirección donde está la sede o domicilio principal del prestador de servicio de salud.")
                .HasColumnName("Prestadora_Direccion");
            entity.Property(e => e.PrestadoraEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Email del prestador de servicio de salud.")
                .HasColumnName("Prestadora_Email");
            entity.Property(e => e.PrestadoraMedicos)
                .HasComment("Cantidad de médicos contratados que tiene la prestadora de servicios de salud (PSS).")
                .HasColumnName("Prestadora_Medicos");
            entity.Property(e => e.PrestadoraNombre)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasComment("Nombre del prestador de servicio de salud (PSS) que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Nombre");
            entity.Property(e => e.PrestadoraPrimerNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 1er. Nivel de atención de salud.")
                .HasColumnName("Prestadora_Primer_Nivel");
            entity.Property(e => e.PrestadoraRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("RNC  (Registro Nacional Contribuyente) del prestador de servicio de salud.")
                .HasColumnName("Prestadora_RNC_O_Cedula");
            entity.Property(e => e.PrestadoraSedeNumero)
                .HasComment("Número único que indica si la prestadora institucional es una sede principal o una sucursal.")
                .HasColumnName("Prestadora_Sede_Numero");
            entity.Property(e => e.PrestadoraSegundoNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 2do. Nivel de atención de salud.")
                .HasColumnName("Prestadora_Segundo_Nivel");
            entity.Property(e => e.PrestadoraTelefono1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Teléfono principal del prestador de servicio de salud.")
                .HasColumnName("Prestadora_Telefono_1");
            entity.Property(e => e.PrestadoraTelefono2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/D')")
                .HasComment("Teléfono principal del prestador de servicio de salud.")
                .HasColumnName("Prestadora_Telefono_2");
            entity.Property(e => e.PrestadoraTelefono3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Teléfono principal del prestador de servicio de salud.")
                .HasColumnName("Prestadora_Telefono_3");
            entity.Property(e => e.PrestadoraTercerNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 3er. Nivel de atención de salud.")
                .HasColumnName("Prestadora_Tercer_Nivel");
            entity.Property(e => e.PrestadoraTipoNumero)
                .HasComment("Es un número único que identifica el tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Prestadora_Tipo_Numero");
            entity.Property(e => e.PrestadoraWebsite)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Website de la prestadora de salud institucional.")
                .HasColumnName("Prestadora_Website");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.InstitucionNumeroNavigation).WithMany(p => p.PrestadorasInstitucionalesMasters)
                .HasForeignKey(d => d.InstitucionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Institucionales_Master_Instituciones_Master");

            entity.HasOne(d => d.MunicipioNumeroNavigation).WithMany(p => p.PrestadorasInstitucionalesMasters)
                .HasForeignKey(d => d.MunicipioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Institucionales_Master_Comunes_Municipios_Cata");

            entity.HasOne(d => d.PrestadoraSedeNumeroNavigation).WithMany(p => p.PrestadorasInstitucionalesMasters)
                .HasForeignKey(d => d.PrestadoraSedeNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Institucionales_Master_Prestadoras_Sede_Cata");

            entity.HasOne(d => d.PrestadoraTipoNumeroNavigation).WithMany(p => p.PrestadorasInstitucionalesMasters)
                .HasForeignKey(d => d.PrestadoraTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PSS_Prestadoras_Salud_Master_PSS_Prestadoras_Tipo_Cata");
        });

        modelBuilder.Entity<PrestadorasInstitucionalesPalabrasTran>(entity =>
        {
            entity.HasKey(e => new { e.PrestadoraNumero, e.PalabraDetalle });

            entity.ToTable("Prestadoras_Institucionales_Palabras_Trans");

            entity.HasIndex(e => e.PalabraNumero, "Idx_Prestadoras_Institucionales_Palabras_Trans_Palabra");

            entity.Property(e => e.PrestadoraNumero).HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PalabraDetalle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Palabra_Detalle");
            entity.Property(e => e.PalabraNumero).HasColumnName("Palabra_Numero");
        });

        modelBuilder.Entity<PrestadorasInstitucionalesServiciosTran>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Prestadoras_Institucionales_Servicios_Trans", tb =>
                {
                    tb.HasComment("Es una tabla transaccional donde se registran las Prestadoras de Servicios de Salud (PSS) institucionales y los servicios que esta puede ofrecer a las ARS/ARL,  su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Prestadoras_Institucionales_Servicios_Trans_Delete");
                    tb.HasTrigger("Prestadoras_Institucionales_Servicios_Trans_Update");
                });

            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PrestadoraServicioNumero)
                .HasComment("Número único del servicio que pueden ser contratados por las ARS/ARL a las PSS..")
                .HasColumnName("Prestadora_Servicio_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PrestadoraNumeroNavigation).WithMany()
                .HasForeignKey(d => d.PrestadoraNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Institucionales_Servicios_Trans_Prestadoras_Institucionales_Master");

            entity.HasOne(d => d.PrestadoraServicioNumeroNavigation).WithMany()
                .HasForeignKey(d => d.PrestadoraServicioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Institucionales_Servicios_Trans_Prestadoras_Servicios_Cata");
        });

        modelBuilder.Entity<PrestadorasInstitucionalesVistum>(entity =>
        {
            entity.HasKey(e => e.PrestadoraNumero);

            entity.ToTable("Prestadoras_Institucionales_Vista");

            entity.Property(e => e.PrestadoraNumero)
                .ValueGeneratedNever()
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.InstitucionNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Institucion_Nombre");
            entity.Property(e => e.InstitucionNumero).HasColumnName("Institucion_Numero");
            entity.Property(e => e.MunicipioNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Municipio_Nombre");
            entity.Property(e => e.MunicipioNumero).HasColumnName("Municipio_Numero");
            entity.Property(e => e.PrestadoraClaseDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Clase_Descripcion");
            entity.Property(e => e.PrestadoraClaseNumero).HasColumnName("Prestadora_Clase_Numero");
            entity.Property(e => e.PrestadoraCodigoSespas)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Codigo_Sespas");
            entity.Property(e => e.PrestadoraCodigoSespasProvisional)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Prestadora_Codigo_Sespas_Provisional");
            entity.Property(e => e.PrestadoraDireccion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Direccion");
            entity.Property(e => e.PrestadoraMedicos).HasColumnName("Prestadora_Medicos");
            entity.Property(e => e.PrestadoraNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Nombre");
            entity.Property(e => e.PrestadoraPrimerNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Prestadora_Primer_Nivel");
            entity.Property(e => e.PrestadoraSegundoNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Prestadora_Segundo_Nivel");
            entity.Property(e => e.PrestadoraTelefono1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Telefono_1");
            entity.Property(e => e.PrestadoraTelefono2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Telefono_2");
            entity.Property(e => e.PrestadoraTelefono3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Telefono_3");
            entity.Property(e => e.PrestadoraTercerNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Prestadora_Tercer_Nivel");
            entity.Property(e => e.PrestadoraTipoDescripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Tipo_Descripcion");
            entity.Property(e => e.PrestadoraTipoNumero).HasColumnName("Prestadora_Tipo_Numero");
            entity.Property(e => e.PrestadoraWebsite)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Website");
            entity.Property(e => e.ProvinciaNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Provincia_Nombre");
            entity.Property(e => e.ProvinciaNumero).HasColumnName("Provincia_Numero");
            entity.Property(e => e.RegionSaludNombre)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Region_Salud_Nombre");
            entity.Property(e => e.RegionSaludNumero).HasColumnName("Region_Salud_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasMaster>(entity =>
        {
            entity.HasKey(e => e.PrestadoraNumero);

            entity.ToTable("Prestadoras_Master", tb =>
                {
                    tb.HasComment("Es un maestro con la identificación básica de las PSS institucionales y Médicos, Está directamente relacionada con las tablas PRESTADORAS_MEDICOS_MASTER y PRESTADORAS_INSTITUCIONALES_MASTER, su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Prestadoras_Master_Delete");
                    tb.HasTrigger("Prestadoras_Master_Update");
                });

            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.MedicoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Medico_Cedula");
            entity.Property(e => e.PrestadoraCategoriaNumero)
                .HasComment("Es  un número único que representa  la categoría  de los prestadores de servicio de salud (PSS),    Prestadora Institucional  o  Médico Independiente),  su objetivo es ser utilizados en futuras conversiones hacia el DATA WAREHOUSE.")
                .HasColumnName("Prestadora_Categoria_Numero");
            entity.Property(e => e.PrestadoraNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Nombre del prestador de servicio de salud (PSS) que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Nombre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasMedicosArsTemporalTran>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Prestadoras_Medicos_ARS_Temporal_Trans", tb => tb.HasComment("Es una tabla transaccional temporal con los detalles de las Prestadoras de Servicios de Salud (PSS) Médicos, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.EspecialidadNumero1)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero_1");
            entity.Property(e => e.EspecialidadNumero2)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero_2");
            entity.Property(e => e.EspecialidadNumero3)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero_3");
            entity.Property(e => e.MedicoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Medico_Cedula");
            entity.Property(e => e.MedicoContratadoPlanComplementario)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica con (S/N) si el prestador de servicio de salud (PSS) contratado por la  ARS, fue contratado para presta servicios a sus afiliados bajo los Planes Complementarios.")
                .HasColumnName("Medico_Contratado_Plan_Complementario");
            entity.Property(e => e.MedicoContratadoPlanMedicinaEspecial)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica con (S/N) si el prestador de servicio de salud (PSS) contratado por la  ARS, fue contratado para presta servicios a sus afiliados bajo los Plan Especiales y de Medicina Pre pagada.")
                .HasColumnName("Medico_Contratado_Plan_Medicina_Especial");
            entity.Property(e => e.MedicoContratadoPlanPdss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica con (S/N) si el prestador de servicio de salud (PSS) contratado por la  ARS, fue contratado para presta servicios a sus afiliados bajo el Plan de Servicios de Salud (PDSS) o el PBS.")
                .HasColumnName("Medico_Contratado_Plan_PDSS");
            entity.Property(e => e.MedicoContratadoPlanPensionados)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica con (S/N) si el prestador de servicio de salud (PSS) contratado por la  ARS, fue contratado para presta servicios a sus afiliados bajo los Plan Especiales y de Medicina Pre pagada.")
                .HasColumnName("Medico_Contratado_Plan_Pensionados");
            entity.Property(e => e.MedicoContratadoPlanVoluntario)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica con (S/N) si el prestador de servicio de salud (PSS) contratado por la  ARS, fue contratado para presta servicios a sus afiliados bajo los Planes Voluntarios.")
                .HasColumnName("Medico_Contratado_Plan_Voluntario");
            entity.Property(e => e.MedicoContratoDesde)
                .HasComment("Fecha de inicio del contrato de la ARS con la PSS.")
                .HasColumnType("datetime")
                .HasColumnName("Medico_Contrato_Desde");
            entity.Property(e => e.MedicoContratoHasta)
                .HasComment("Fecha de Termino del contrato de la ARS con la PSS.")
                .HasColumnType("datetime")
                .HasColumnName("Medico_Contrato_Hasta");
            entity.Property(e => e.MedicoTieneContrato)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica con S o N si el Médico contratado por  la ARS tiene o no contrato firmado.")
                .HasColumnName("Medico_Tiene_Contrato");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
        });

        modelBuilder.Entity<PrestadorasMedicosArsTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.PlanTipoNumero, e.SeguimientoPeriodo, e.PrestadoraNumero }).HasName("PK_Prestadoras_Medicos_ARS_Trans_Nueva");

            entity.ToTable("Prestadoras_Medicos_ARS_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran las Prestadoras de Servicios de Salud (PSS) Médicos  contratadas por las ARS/ARL,  su fuente de datos es el esquema 27 procesado por el Robot Simon. "));

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.PlanTipoNumero).HasColumnName("Plan_Tipo_Numero");
            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.EspecialidadNumero1)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero_1");
            entity.Property(e => e.EspecialidadNumero2)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero_2");
            entity.Property(e => e.EspecialidadNumero3)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero_3");
            entity.Property(e => e.MedicoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Medico_Cedula");
            entity.Property(e => e.MedicoContratoDesde)
                .HasComment("Fecha de inicio del contrato de la ARS con la PSS.")
                .HasColumnType("datetime")
                .HasColumnName("Medico_Contrato_Desde");
            entity.Property(e => e.MedicoContratoHasta)
                .HasComment("Fecha de Termino del contrato de la ARS con la PSS.")
                .HasColumnType("datetime")
                .HasColumnName("Medico_Contrato_Hasta");
            entity.Property(e => e.MedicoTieneContrato)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica con S o N si el Médico contratado por  la ARS tiene o no contrato firmado.")
                .HasColumnName("Medico_Tiene_Contrato");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.PrestadorasMedicosArsTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_ARS_Trans_Nueva_Nueva_ARS_Master");

            entity.HasOne(d => d.EspecialidadNumero1Navigation).WithMany(p => p.PrestadorasMedicosArsTranEspecialidadNumero1Navigations)
                .HasForeignKey(d => d.EspecialidadNumero1)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_ARS_Trans_Nueva_Nueva_Prestadoras_Especialidades_Cata");

            entity.HasOne(d => d.EspecialidadNumero2Navigation).WithMany(p => p.PrestadorasMedicosArsTranEspecialidadNumero2Navigations)
                .HasForeignKey(d => d.EspecialidadNumero2)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_ARS_Trans_Nueva_Nueva_Prestadoras_Especialidades_Cata1");

            entity.HasOne(d => d.EspecialidadNumero3Navigation).WithMany(p => p.PrestadorasMedicosArsTranEspecialidadNumero3Navigations)
                .HasForeignKey(d => d.EspecialidadNumero3)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_ARS_Trans_Nueva_Nueva_Prestadoras_Especialidades_Cata2");

            entity.HasOne(d => d.PlanTipoNumeroNavigation).WithMany(p => p.PrestadorasMedicosArsTrans)
                .HasForeignKey(d => d.PlanTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_ARS_Trans_Planes_Tipo_Cata");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.PrestadorasMedicosArsTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_ARS_Trans_Nueva_Nueva_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<PrestadorasMedicosArsVistum>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.PrestadoraNumero, e.PlanTipoNumero });

            entity.ToTable("Prestadoras_Medicos_ARS_Vista");

            entity.Property(e => e.ArsNumero).HasColumnName("Ars_Numero");
            entity.Property(e => e.PrestadoraNumero).HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PlanTipoNumero).HasColumnName("Plan_Tipo_Numero");
            entity.Property(e => e.EspecialidadNumero1).HasColumnName("Especialidad_Numero_1");
            entity.Property(e => e.EspecialidadNumero2).HasColumnName("Especialidad_Numero_2");
            entity.Property(e => e.EspecialidadNumero3).HasColumnName("Especialidad_Numero_3");
            entity.Property(e => e.FechaUltimoReporte)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_Ultimo_Reporte");
            entity.Property(e => e.MedicoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Medico_Cedula");
            entity.Property(e => e.MedicoContratoDesde)
                .HasColumnType("datetime")
                .HasColumnName("Medico_Contrato_Desde");
            entity.Property(e => e.MedicoContratoHasta)
                .HasColumnType("datetime")
                .HasColumnName("Medico_Contrato_Hasta");
            entity.Property(e => e.MedicoTieneContrato)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Medico_Tiene_Contrato");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
        });

        modelBuilder.Entity<PrestadorasMedicosEspecialidadesVistum>(entity =>
        {
            entity.HasKey(e => new { e.PrestadoraNumero, e.EspecialidadNumero, e.PrestadoraServicioNumero });

            entity.ToTable("Prestadoras_Medicos_Especialidades_Vista", tb => tb.HasComment("Es un maestro con los detalles de las Prestadoras de Servicios de Salud (PSS) Médicos, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.EspecialidadNumero)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero");
            entity.Property(e => e.PrestadoraServicioNumero)
                .HasComment("Número único del servicio que pueden ser contratados por las ARS/ARL a las PSS..")
                .HasColumnName("Prestadora_Servicio_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasMedicosExequaturTran>(entity =>
        {
            entity.HasKey(e => new { e.MedicoCedula, e.MedicoExequatur });

            entity.ToTable("Prestadoras_Medicos_Exequatur_Trans");

            entity.Property(e => e.MedicoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Medico_Cedula");
            entity.Property(e => e.MedicoExequatur)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasComment("Número de Exequátur del Médico.")
                .HasColumnName("Medico_Exequatur");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasMedicosMaster>(entity =>
        {
            entity.HasKey(e => e.PrestadoraNumero).HasName("PK_Prestadoras_Medicos_Master_1");

            entity.ToTable("Prestadoras_Medicos_Master", tb => tb.HasComment("Es un maestro con los detalles de las Prestadoras de Servicios de Salud (PSS) Médicos, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.HasIndex(e => e.MedicoCedula, "Idx_Prestadoras_Medicos_Master_Cedula").IsUnique();

            entity.Property(e => e.PrestadoraNumero)
                .ValueGeneratedNever()
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.EspecialidadNumero1)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero_1");
            entity.Property(e => e.EspecialidadNumero2)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero_2");
            entity.Property(e => e.EspecialidadNumero3)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero_3");
            entity.Property(e => e.MedicoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Medico_Cedula");
            entity.Property(e => e.MedicoCelular)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Teléfono móvil del prestador de servicio de salud.")
                .HasColumnName("Medico_Celular");
            entity.Property(e => e.MedicoDireccion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Dirección donde está la sede o domicilio principal del prestador de servicio de salud.")
                .HasColumnName("Medico_Direccion");
            entity.Property(e => e.MedicoExequatur)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de Exequátur del Médico.")
                .HasColumnName("Medico_Exequatur");
            entity.Property(e => e.MedicoMail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Email del prestador de servicio de salud.")
                .HasColumnName("Medico_Mail");
            entity.Property(e => e.MedicoNss).HasColumnName("Medico_NSS");
            entity.Property(e => e.MedicoTelefonoConsultorio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Teléfono del consultorio del prestador de servicio de salud.")
                .HasColumnName("Medico_Telefono_Consultorio");
            entity.Property(e => e.MedicoTelefonoExtencion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Teléfono del consultorio del prestador de servicio de salud.")
                .HasColumnName("Medico_Telefono_Extencion");
            entity.Property(e => e.MedicoTelefonoResidencia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Teléfono de la residencia del prestador de servicio de salud.")
                .HasColumnName("Medico_Telefono_Residencia");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.PrestadoraTipoNumero)
                .HasComment("Es un número único que identifica el tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Prestadora_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.EspecialidadNumero1Navigation).WithMany(p => p.PrestadorasMedicosMasterEspecialidadNumero1Navigations)
                .HasForeignKey(d => d.EspecialidadNumero1)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_Master_Prestadoras_Especialidades_Cata");

            entity.HasOne(d => d.EspecialidadNumero2Navigation).WithMany(p => p.PrestadorasMedicosMasterEspecialidadNumero2Navigations)
                .HasForeignKey(d => d.EspecialidadNumero2)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_Master_Prestadoras_Especialidades_Cata1");

            entity.HasOne(d => d.EspecialidadNumero3Navigation).WithMany(p => p.PrestadorasMedicosMasterEspecialidadNumero3Navigations)
                .HasForeignKey(d => d.EspecialidadNumero3)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_Master_Prestadoras_Especialidades_Cata2");

            entity.HasOne(d => d.MedicoNssNavigation).WithMany(p => p.PrestadorasMedicosMasters)
                .HasForeignKey(d => d.MedicoNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_Master_TSS_Ciudadanos_Master");

            entity.HasOne(d => d.MunicipioNumeroNavigation).WithMany(p => p.PrestadorasMedicosMasters)
                .HasForeignKey(d => d.MunicipioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_Master_Comunes_Municipios_Cata");

            entity.HasOne(d => d.PrestadoraTipoNumeroNavigation).WithMany(p => p.PrestadorasMedicosMasters)
                .HasForeignKey(d => d.PrestadoraTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_Master_Prestadoras_Tipo_Cata");
        });

        modelBuilder.Entity<PrestadorasMedicosPalabrasTran>(entity =>
        {
            entity.HasKey(e => new { e.PrestadoraNumero, e.PalabraDetalle });

            entity.ToTable("Prestadoras_Medicos_Palabras_Trans");

            entity.HasIndex(e => e.PalabraNumero, "Idx_Prestadoras_Medicos_Palabras_Trans_Palabra");

            entity.Property(e => e.PrestadoraNumero).HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PalabraDetalle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Palabra_Detalle");
            entity.Property(e => e.PalabraNumero).HasColumnName("Palabra_Numero");
        });

        modelBuilder.Entity<PrestadorasMedicosSolicitudesEstadosCatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Prestadoras_Medicos_Solicitudes_Estados_Cata");

            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudEstadoDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Estado_Descripcion");
            entity.Property(e => e.SolicitudEstadoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Estado_Explicacion");
            entity.Property(e => e.SolicitudEstadoMensaje)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Estado_Mensaje");
            entity.Property(e => e.SolicitudEstadoNota)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Solicitud_Estado_Nota");
            entity.Property(e => e.SolicitudEstadoNumero).HasColumnName("Solicitud_Estado_Numero");
            entity.Property(e => e.SolicitudEstadoPendiente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Solicitud_Estado_Pendiente");
        });

        modelBuilder.Entity<PrestadorasMedicosSolicitudesHistorico>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudNumero, e.RegistroFechaHistorico }).HasName("PK_Prestadoras_Medicos_Solicitudes_ARL_Historico");

            entity.ToTable("Prestadoras_Medicos_Solicitudes_Historico", tb => tb.HasComment("Es un maestro con los detalles de las Prestadoras de Servicios de Salud (PSS) Médicos, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.ArsNumero).HasColumnName("Ars_Numero");
            entity.Property(e => e.EspecialidadNumero1)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero_1");
            entity.Property(e => e.EspecialidadNumero2)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero_2");
            entity.Property(e => e.EspecialidadNumero3)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero_3");
            entity.Property(e => e.MedicoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Medico_Cedula");
            entity.Property(e => e.MedicoCelular)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Teléfono móvil del prestador de servicio de salud.")
                .HasColumnName("Medico_Celular");
            entity.Property(e => e.MedicoDireccion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Dirección donde está la sede o domicilio principal del prestador de servicio de salud.")
                .HasColumnName("Medico_Direccion");
            entity.Property(e => e.MedicoExequatur)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de Exequátur del Médico.")
                .HasColumnName("Medico_Exequatur");
            entity.Property(e => e.MedicoMail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Email del prestador de servicio de salud.")
                .HasColumnName("Medico_Mail");
            entity.Property(e => e.MedicoNombreCompleto)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medico_Nombre_Completo");
            entity.Property(e => e.MedicoTelefonoConsultorio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Teléfono del consultorio del prestador de servicio de salud.")
                .HasColumnName("Medico_Telefono_Consultorio");
            entity.Property(e => e.MedicoTelefonoExtencion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Teléfono del consultorio del prestador de servicio de salud.")
                .HasColumnName("Medico_Telefono_Extencion");
            entity.Property(e => e.MedicoTelefonoResidencia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Teléfono de la residencia del prestador de servicio de salud.")
                .HasColumnName("Medico_Telefono_Residencia");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Estado_Fecha");
            entity.Property(e => e.SolicitudEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Estado_Nota");
            entity.Property(e => e.SolicitudEstadoNumero).HasColumnName("Solicitud_Estado_Numero");
            entity.Property(e => e.SolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
            entity.Property(e => e.SolicitudUsuarioCuenta)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Usuario_Cuenta");

            entity.HasOne(d => d.SolicitudNumeroNavigation).WithMany(p => p.PrestadorasMedicosSolicitudesHistoricos)
                .HasForeignKey(d => d.SolicitudNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_Solicitudes_ARL_Historico_Prestadoras_Medicos_Solicitudes_ARL_Trans");
        });

        modelBuilder.Entity<PrestadorasMedicosSolicitudesTran>(entity =>
        {
            entity.HasKey(e => e.SolicitudNumero).HasName("PK_Prestadoras_Medicos_Solicitudes_ARL_Trans");

            entity.ToTable("Prestadoras_Medicos_Solicitudes_Trans", tb => tb.HasComment("Es un maestro con los detalles de las Prestadoras de Servicios de Salud (PSS) Médicos, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");
            entity.Property(e => e.ArsNumero).HasColumnName("Ars_Numero");
            entity.Property(e => e.EspecialidadNumero1)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero_1");
            entity.Property(e => e.EspecialidadNumero2)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero_2");
            entity.Property(e => e.EspecialidadNumero3)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero_3");
            entity.Property(e => e.MedicoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Medico_Cedula");
            entity.Property(e => e.MedicoCelular)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Teléfono móvil del prestador de servicio de salud.")
                .HasColumnName("Medico_Celular");
            entity.Property(e => e.MedicoDireccion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Dirección donde está la sede o domicilio principal del prestador de servicio de salud.")
                .HasColumnName("Medico_Direccion");
            entity.Property(e => e.MedicoExequatur)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de Exequátur del Médico.")
                .HasColumnName("Medico_Exequatur");
            entity.Property(e => e.MedicoMail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Email del prestador de servicio de salud.")
                .HasColumnName("Medico_Mail");
            entity.Property(e => e.MedicoNombreCompleto)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Medico_Nombre_Completo");
            entity.Property(e => e.MedicoTelefonoConsultorio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Teléfono del consultorio del prestador de servicio de salud.")
                .HasColumnName("Medico_Telefono_Consultorio");
            entity.Property(e => e.MedicoTelefonoExtencion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Teléfono del consultorio del prestador de servicio de salud.")
                .HasColumnName("Medico_Telefono_Extencion");
            entity.Property(e => e.MedicoTelefonoResidencia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Teléfono de la residencia del prestador de servicio de salud.")
                .HasColumnName("Medico_Telefono_Residencia");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Estado_Fecha");
            entity.Property(e => e.SolicitudEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Estado_Nota");
            entity.Property(e => e.SolicitudEstadoNumero).HasColumnName("Solicitud_Estado_Numero");
            entity.Property(e => e.SolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
            entity.Property(e => e.SolicitudUsuarioCuenta)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Usuario_Cuenta");

            entity.HasOne(d => d.EspecialidadNumero1Navigation).WithMany(p => p.PrestadorasMedicosSolicitudesTranEspecialidadNumero1Navigations)
                .HasForeignKey(d => d.EspecialidadNumero1)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_Solicitudes_ARL_Trans_Prestadoras_Especialidades_Cata");

            entity.HasOne(d => d.EspecialidadNumero2Navigation).WithMany(p => p.PrestadorasMedicosSolicitudesTranEspecialidadNumero2Navigations)
                .HasForeignKey(d => d.EspecialidadNumero2)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_Solicitudes_ARL_Trans_Prestadoras_Especialidades_Cata1");

            entity.HasOne(d => d.EspecialidadNumero3Navigation).WithMany(p => p.PrestadorasMedicosSolicitudesTranEspecialidadNumero3Navigations)
                .HasForeignKey(d => d.EspecialidadNumero3)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_Solicitudes_ARL_Trans_Prestadoras_Especialidades_Cata2");

            entity.HasOne(d => d.MunicipioNumeroNavigation).WithMany(p => p.PrestadorasMedicosSolicitudesTrans)
                .HasForeignKey(d => d.MunicipioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Medicos_Solicitudes_ARL_Trans_Comunes_Municipios_Cata");
        });

        modelBuilder.Entity<PrestadorasMedicosVistum>(entity =>
        {
            entity.HasKey(e => e.PrestadoraNumero);

            entity.ToTable("Prestadoras_Medicos_Vista");

            entity.Property(e => e.PrestadoraNumero)
                .ValueGeneratedNever()
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.Especialidad1Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Especialidad_1_Descripcion");
            entity.Property(e => e.Especialidad2Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Especialidad_2_Descripcion");
            entity.Property(e => e.Especialidad3Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Especialidad_3_Descripcion");
            entity.Property(e => e.EspecialidadNumero1).HasColumnName("Especialidad_Numero_1");
            entity.Property(e => e.EspecialidadNumero2).HasColumnName("Especialidad_Numero_2");
            entity.Property(e => e.EspecialidadNumero3).HasColumnName("Especialidad_Numero_3");
            entity.Property(e => e.Especialidades)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Localidad)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.MedicoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Medico_Cedula");
            entity.Property(e => e.MedicoCelular)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Medico_Celular");
            entity.Property(e => e.MedicoDireccion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Medico_Direccion");
            entity.Property(e => e.MedicoExequatur)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Medico_Exequatur");
            entity.Property(e => e.MedicoMail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medico_Mail");
            entity.Property(e => e.MedicoNombreCompleto)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Medico_Nombre_Completo");
            entity.Property(e => e.MedicoNombres)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Medico_Nombres");
            entity.Property(e => e.MedicoNss).HasColumnName("Medico_NSS");
            entity.Property(e => e.MedicoPrimerApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Medico_Primer_Apellido");
            entity.Property(e => e.MedicoSegundoApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Medico_Segundo_Apellido");
            entity.Property(e => e.MedicoTelefonoConsultorio)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Medico_Telefono_Consultorio");
            entity.Property(e => e.MedicoTelefonoExtencion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Medico_Telefono_Extencion");
            entity.Property(e => e.MedicoTelefonoResidencia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Medico_Telefono_Residencia");
            entity.Property(e => e.MunicipioNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Municipio_Nombre");
            entity.Property(e => e.MunicipioNumero).HasColumnName("Municipio_Numero");
            entity.Property(e => e.PrestadoraClaseDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Clase_Descripcion");
            entity.Property(e => e.PrestadoraClaseNumero).HasColumnName("Prestadora_Clase_Numero");
            entity.Property(e => e.PrestadoraTipoDescripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Tipo_Descripcion");
            entity.Property(e => e.PrestadoraTipoNumero).HasColumnName("Prestadora_Tipo_Numero");
            entity.Property(e => e.ProvinciaNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Provincia_Nombre");
            entity.Property(e => e.ProvinciaNumero).HasColumnName("Provincia_Numero");
            entity.Property(e => e.RegionSaludNombre)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Region_Salud_Nombre");
            entity.Property(e => e.RegionSaludNumero).HasColumnName("Region_Salud_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasSedeCatum>(entity =>
        {
            entity.HasKey(e => e.PrestadoraSedeNumero);

            entity.ToTable("Prestadoras_Sede_Cata", tb => tb.HasComment("Es un catálogo que contiene los tipo de Sede que aplican para el registro de una PSS Institucional, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PrestadoraSedeNumero)
                .HasComment("Número único que indica si la prestadora institucional es una sede principal o una sucursal.")
                .HasColumnName("Prestadora_Sede_Numero");
            entity.Property(e => e.PrestadoraSedeDescripcion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Descripción de la sede de la prestadora institucional, indica si es una sede principal o una sucursal.")
                .HasColumnName("Prestadora_Sede_Descripcion");
            entity.Property(e => e.PrestadoraSedeExsplicacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Breve explicación de la descripción de la sede de la prestadora institucional, indica si es una sede principal o una sucursal.")
                .HasColumnName("Prestadora_Sede_Exsplicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasServiciosCatum>(entity =>
        {
            entity.HasKey(e => e.PrestadoraServicioNumero);

            entity.ToTable("Prestadoras_Servicios_Cata", tb => tb.HasComment("Es un catálogo que contiene los tipos de servicios que pueden ser contratados por las PSS, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PrestadoraServicioNumero)
                .HasComment("Número único del servicio que pueden ser contratados por las ARS/ARL a las PSS..")
                .HasColumnName("Prestadora_Servicio_Numero");
            entity.Property(e => e.PrestadoraServicioDescripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripcion de los servicios que pueden ser contratados por las ARS/ARL a las PSS.")
                .HasColumnName("Prestadora_Servicio_Descripcion");
            entity.Property(e => e.PrestadoraServicioExplicacion)
                .HasMaxLength(350)
                .IsUnicode(false)
                .HasComment("Breve explicación de la descripcion de los servicios que pueden ser contratados por las ARS/ARL a las PSS.")
                .HasColumnName("Prestadora_Servicio_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasServiciosSaludArsPlanesTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.SeguimientoPeriodo, e.PrestadoraNumero, e.PrestadoraServicioNumero, e.PlanNumero });

            entity.ToTable("Prestadoras_Servicios_Salud_ARS_Planes_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran las Prestadoras de Servicios de Salud (PSS) institucionales y los servicios contratados por las ARS/ARL,  su fuente de datos es el esquema 26 procesado por el Robot Simon. "));

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.SeguimientoPeriodo)
                .HasComment("Periodo (Año y Mes) correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PrestadoraServicioNumero).HasColumnName("Prestadora_Servicio_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Código único de la versión del Plan de servicios de Salud (PDSS) al cual pertenece el Subgrupo.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");

            entity.HasOne(d => d.PlanNumeroNavigation).WithMany(p => p.PrestadorasServiciosSaludArsPlanesTrans)
                .HasForeignKey(d => d.PlanNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Servicios_Salud_ARS_Planes_Trans_Planes_Master");
        });

        modelBuilder.Entity<PrestadorasServiciosSaludArsRecargasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.PrestadoraNumero, e.PlanNumero, e.PrestadoraServicioNumero });

            entity.ToTable("Prestadoras_Servicios_Salud_ARS_Recargas_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasComment("Número del Plan de Servicio de Salud Plan para el cual está contratado.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PrestadoraServicioNumero)
                .HasComment("Número del Servicio para el cual está contratado para el plan en específico. Descargar Catalogo_Servicios_PSS.xls disponible en la O.V.")
                .HasColumnName("Prestadora_Servicio_Numero");
            entity.Property(e => e.PrestadoraCategoriaNumero).HasColumnName("Prestadora_Categoria_Numero");
            entity.Property(e => e.PrestadoraContratada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Especifica si la ARS tiene contrato con el medico (Especificar S o N).")
                .HasColumnName("Prestadora_Contratada");
            entity.Property(e => e.PrestadoraContratoDesdeFecha)
                .HasComment("Campo que representa fecha de inicio del contrato con la ARS en formato (DDMMYYYY).")
                .HasColumnName("Prestadora_Contrato_Desde_Fecha");
            entity.Property(e => e.PrestadoraContratoHastaFecha)
                .HasComment("Campo que representa fecha de término de contrato con la ARS en formato (DDMMYYYY).")
                .HasColumnName("Prestadora_Contrato_Hasta_Fecha");
            entity.Property(e => e.PrestadoraNumeroPrestaServicio)
                .HasComment("Número que especifica la Prestadora de Servicios de Salud.")
                .HasColumnName("Prestadora_Numero_Presta_Servicio");
            entity.Property(e => e.PrestadoraServicioPropio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Se indica con S o N, si el servicio contratado por la ARS, es propio de la PSS contratada o por lo contrario lo brinda a través de otra PSS.")
                .HasColumnName("Prestadora_Servicio_Propio");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasServiciosSaludArsTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArsNumero, e.PrestadoraNumero, e.PlanNumero, e.PrestadoraServicioNumero });

            entity.ToTable("Prestadoras_Servicios_Salud_ARS_Temporal_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasComment("Número del Plan de Servicio de Salud Plan para el cual está contratado.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PrestadoraServicioNumero)
                .HasComment("Número del Servicio para el cual está contratado para el plan en específico. Descargar Catalogo_Servicios_PSS.xls disponible en la O.V.")
                .HasColumnName("Prestadora_Servicio_Numero");
            entity.Property(e => e.PrestadoraCategoriaNumero).HasColumnName("Prestadora_Categoria_Numero");
            entity.Property(e => e.PrestadoraContratada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Especifica si la ARS tiene contrato con el medico (Especificar S o N).")
                .HasColumnName("Prestadora_Contratada");
            entity.Property(e => e.PrestadoraContratoDesdeFecha)
                .HasComment("Campo que representa fecha de inicio del contrato con la ARS en formato (DDMMYYYY).")
                .HasColumnName("Prestadora_Contrato_Desde_Fecha");
            entity.Property(e => e.PrestadoraContratoHastaFecha)
                .HasComment("Campo que representa fecha de término de contrato con la ARS en formato (DDMMYYYY).")
                .HasColumnName("Prestadora_Contrato_Hasta_Fecha");
            entity.Property(e => e.PrestadoraNumeroPrestaServicio)
                .HasComment("Número que especifica la Prestadora de Servicios de Salud.")
                .HasColumnName("Prestadora_Numero_Presta_Servicio");
            entity.Property(e => e.PrestadoraServicioPropio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Se indica con S o N, si el servicio contratado por la ARS, es propio de la PSS contratada o por lo contrario lo brinda a través de otra PSS.")
                .HasColumnName("Prestadora_Servicio_Propio");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasServiciosSaludArsTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.SeguimientoPeriodo, e.PrestadoraNumero, e.PlanNumero, e.PrestadoraServicioNumero });

            entity.ToTable("Prestadoras_Servicios_Salud_ARS_Trans", tb => tb.HasComment("Es una tabla transaccional temporal con los detalles de las Prestadoras de Servicios de Salud (PSS) Médicos, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.SeguimientoPeriodo).HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Número del Plan de Servicio de Salud Plan para el cual está contratado.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PrestadoraServicioNumero)
                .HasComment("Número del Servicio para el cual está contratado para el plan en específico. Descargar Catalogo_Servicios_PSS.xls disponible en la O.V.")
                .HasColumnName("Prestadora_Servicio_Numero");
            entity.Property(e => e.PrestadoraCategoriaNumero).HasColumnName("Prestadora_Categoria_Numero");
            entity.Property(e => e.PrestadoraContratada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Especifica si la ARS tiene contrato con el medico (Especificar S o N).")
                .HasColumnName("Prestadora_Contratada");
            entity.Property(e => e.PrestadoraContratoDesdeFecha)
                .HasComment("Campo que representa fecha de inicio del contrato con la ARS en formato (DDMMYYYY).")
                .HasColumnName("Prestadora_Contrato_Desde_Fecha");
            entity.Property(e => e.PrestadoraContratoHastaFecha)
                .HasComment("Campo que representa fecha de término de contrato con la ARS en formato (DDMMYYYY).")
                .HasColumnName("Prestadora_Contrato_Hasta_Fecha");
            entity.Property(e => e.PrestadoraNumeroPrestaServicio)
                .HasComment("Número que especifica la Prestadora de Servicios de Salud.")
                .HasColumnName("Prestadora_Numero_Presta_Servicio");
            entity.Property(e => e.PrestadoraServicioPropio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Se indica con S o N, si el servicio contratado por la ARS, es propio de la PSS contratada o por lo contrario lo brinda a través de otra PSS.")
                .HasColumnName("Prestadora_Servicio_Propio");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.PrestadorasServiciosSaludArsTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Servicios_Salud_ARS_Trans_ARS_Master");

            entity.HasOne(d => d.PlanNumeroNavigation).WithMany(p => p.PrestadorasServiciosSaludArsTrans)
                .HasForeignKey(d => d.PlanNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Servicios_Salud_ARS_Trans_Planes_Master");

            entity.HasOne(d => d.PrestadoraNumeroNavigation).WithMany(p => p.PrestadorasServiciosSaludArsTrans)
                .HasForeignKey(d => d.PrestadoraNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Servicios_Salud_ARS_Trans_Prestadoras_Master");

            entity.HasOne(d => d.PrestadoraServicioNumeroNavigation).WithMany(p => p.PrestadorasServiciosSaludArsTrans)
                .HasForeignKey(d => d.PrestadoraServicioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Servicios_Salud_ARS_Trans_Prestadoras_Servicios_Cata");
        });

        modelBuilder.Entity<PrestadorasSolicitudDocumentosTran>(entity =>
        {
            entity.HasKey(e => e.SolicitudDocumentoSecuencia);

            entity.ToTable("Prestadoras_Solicitud_Documentos_Trans");

            entity.Property(e => e.SolicitudDocumentoSecuencia).HasColumnName("Solicitud_Documento_Secuencia");
            entity.Property(e => e.DocumentoExtension)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Documento_Extension");
            entity.Property(e => e.DocumentoNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Documento_Nombre");
            entity.Property(e => e.DocumentoRuta)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Documento_Ruta");
            entity.Property(e => e.PrestadoraSolicitudNumero)
                .HasComment("Número único de la solicitud de inclusión de PSS Institucional realizado por las ARS/ARL.")
                .HasColumnName("Prestadora_Solicitud_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PrestadoraSolicitudNumeroNavigation).WithMany(p => p.PrestadorasSolicitudDocumentosTrans)
                .HasForeignKey(d => d.PrestadoraSolicitudNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Solicitud_Documentos_Trans_Prestadoras_Solicitud_Trans");
        });

        modelBuilder.Entity<PrestadorasSolicitudTran>(entity =>
        {
            entity.HasKey(e => e.PrestadoraSolicitudNumero).HasName("PK_PSS_Prestadoras_Solicitud_Trans");

            entity.ToTable("Prestadoras_Solicitud_Trans", tb =>
                {
                    tb.HasComment("Es una tabla transaccional donde se registran las solicitudes de las ARS /ARL para el registros  las Prestadoras de Servicios de Salud (PSS) institucionales,  su fuente de datos son los sistemas  de la SISALRIL.");
                    tb.HasTrigger("TRG_Prestadoras_Solicitud_Trans_Delete");
                    tb.HasTrigger("TRG_Prestadoras_Solicitud_Trans_Update");
                });

            entity.Property(e => e.PrestadoraSolicitudNumero)
                .HasComment("Número único de la solicitud de inclusión de PSS Institucional realizado por las ARS/ARL.")
                .HasColumnName("Prestadora_Solicitud_Numero");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.MispaHabilitacionVencimientoFecha)
                .HasColumnType("datetime")
                .HasColumnName("MISPA_Habilitacion_Vencimiento_Fecha");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.PrestadoraCodigoSespas)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Es el código único de habilitación que asigna el Ministerio de Salud a cada una de la  prestadora  de servicio de salud habilitada de categoría institucional.")
                .HasColumnName("Prestadora_Codigo_Sespas");
            entity.Property(e => e.PrestadoraCodigoSespasProvisional)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si el código único de habilitación que asigna el Ministerio de Salud a es provisional.")
                .HasColumnName("Prestadora_Codigo_Sespas_Provisional");
            entity.Property(e => e.PrestadoraDireccion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Dirección donde está la sede o domicilio principal del prestador de servicio de salud.")
                .HasColumnName("Prestadora_Direccion");
            entity.Property(e => e.PrestadoraEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Email del prestador de servicio de salud.")
                .HasColumnName("Prestadora_Email");
            entity.Property(e => e.PrestadoraGeolocalizacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Geolocalizacion");
            entity.Property(e => e.PrestadoraNombre)
                .HasMaxLength(120)
                .IsUnicode(false)
                .HasComment("Nombre del prestador de servicio de salud (PSS) que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Nombre");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PrestadoraNumeroSedePrincipal)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero_Sede_Principal");
            entity.Property(e => e.PrestadoraPrimerNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 1er. Nivel de atención de salud.")
                .HasColumnName("Prestadora_Primer_Nivel");
            entity.Property(e => e.PrestadoraRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("RNC  (Registro Nacional Contribuyente) del prestador de servicio de salud.")
                .HasColumnName("Prestadora_Rnc_o_Cedula");
            entity.Property(e => e.PrestadoraSegundoNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 2do. Nivel de atención de salud.")
                .HasColumnName("Prestadora_Segundo_Nivel");
            entity.Property(e => e.PrestadoraSolicitudEstadoNumero)
                .HasComment("Número único que indica el estado de proceso en que se encuentra la solicitud de inclusión de PSS Institucional realizado por las ARS/ARL")
                .HasColumnName("Prestadora_Solicitud_Estado_Numero");
            entity.Property(e => e.PrestadoraSolicitudFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de la solicitud de inclusión de PSS Institucional realizado por las ARS/ARL.")
                .HasColumnType("datetime")
                .HasColumnName("Prestadora_Solicitud_Fecha");
            entity.Property(e => e.PrestadoraSolicitudObservacionDevolucion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Observación o motivo de rechazo de  la solicitud de inclusión de PSS Institucional realizado por las ARS/ARL.")
                .HasColumnName("Prestadora_Solicitud_Observacion_Devolucion");
            entity.Property(e => e.PrestadoraSolicitudTipoNumero)
                .HasComment("Número único del tipo de solicitud de inclusión de PSS Institucional que realizan  las ARS/ARL.")
                .HasColumnName("Prestadora_Solicitud_Tipo_Numero");
            entity.Property(e => e.PrestadoraTelefono1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Teléfono principal del prestador de servicio de salud.")
                .HasColumnName("Prestadora_Telefono_1");
            entity.Property(e => e.PrestadoraTelefono2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Teléfono principal del prestador de servicio de salud.")
                .HasColumnName("Prestadora_Telefono_2");
            entity.Property(e => e.PrestadoraTelefono3)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Teléfono principal del prestador de servicio de salud.")
                .HasColumnName("Prestadora_Telefono_3");
            entity.Property(e => e.PrestadoraTercerNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 3er. Nivel de atención de salud.")
                .HasColumnName("Prestadora_Tercer_Nivel");
            entity.Property(e => e.PrestadoraTipoNumero)
                .HasComment("Es un número único que identifica el tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Prestadora_Tipo_Numero");
            entity.Property(e => e.PrestadoraWebsite)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Website de la prestadora de salud institucional.")
                .HasColumnName("Prestadora_Website");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroFechaModifica)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Modifica");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroUsuarioModifica)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(user_name())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario_Modifica");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.PrestadorasSolicitudTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Solicitud_Trans_ARS_Master");

            entity.HasOne(d => d.MunicipioNumeroNavigation).WithMany(p => p.PrestadorasSolicitudTrans)
                .HasForeignKey(d => d.MunicipioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Solicitud_Trans_Comunes_Municipios_Cata");

            entity.HasOne(d => d.PrestadoraSolicitudEstadoNumeroNavigation).WithMany(p => p.PrestadorasSolicitudTrans)
                .HasForeignKey(d => d.PrestadoraSolicitudEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Solicitud_Trans_Prestadoras_Solicitudes_Estado_Cata");

            entity.HasOne(d => d.PrestadoraSolicitudTipoNumeroNavigation).WithMany(p => p.PrestadorasSolicitudTrans)
                .HasForeignKey(d => d.PrestadoraSolicitudTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Solicitud_Trans_Prestadoras_Solicitudes_Tipo_Cata");

            entity.HasOne(d => d.PrestadoraTipoNumeroNavigation).WithMany(p => p.PrestadorasSolicitudTrans)
                .HasForeignKey(d => d.PrestadoraTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Solicitud_Trans_Prestadoras_Tipo_Cata");
        });

        modelBuilder.Entity<PrestadorasSolicitudesEstadoCatum>(entity =>
        {
            entity.HasKey(e => e.PrestadoraSolicitudEstadoNumero);

            entity.ToTable("Prestadoras_Solicitudes_Estado_Cata", tb => tb.HasComment("Es un catálogo de los estados de procesos que pude sufrir una solicitud registros  las Prestadoras de Servicios de Salud (PSS) institucionales que realizan las ARS/ARL, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PrestadoraSolicitudEstadoNumero)
                .HasComment("Número único que indica el estado de proceso en que se encuentra la solicitud de inclusión de PSS Institucional realizado por las ARS/ARL")
                .HasColumnName("Prestadora_Solicitud_Estado_Numero");
            entity.Property(e => e.PrestadoraSolicitudEstadoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código único que indica el estado de proceso en que se encuentra la solicitud de inclusión de PSS Institucional realizado por las ARS/ARL.")
                .HasColumnName("Prestadora_Solicitud_Estado_Codigo");
            entity.Property(e => e.PrestadoraSolicitudEstadoDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Descripción del estado de proceso en que se encuentra la solicitud de inclusión de PSS Institucional realizado por las ARS/ARL.")
                .HasColumnName("Prestadora_Solicitud_Estado_Descripcion");
            entity.Property(e => e.PrestadoraSolicitudEstadoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Breve explicación  de la descripción del estado de proceso en que se encuentra la solicitud de inclusión de PSS Institucional realizado por las ARS/ARL.")
                .HasColumnName("Prestadora_Solicitud_Estado_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasSolicitudesServiciosTran>(entity =>
        {
            entity.HasKey(e => new { e.PrestadoraSolicitudNumero, e.PrestadoraServicioNumero });

            entity.ToTable("Prestadoras_Solicitudes_Servicios_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran las solicitudes de las ARS /ARL para el registros  las Prestadoras de Servicios de Salud (PSS) institucionales y los servicios que esta pude ofrecer,  su fuente de datos son los sistemas  de la SISALRIL"));

            entity.Property(e => e.PrestadoraSolicitudNumero)
                .HasComment("Número único de la solicitud de inclusión de PSS Institucional realizado por las ARS/ARL.")
                .HasColumnName("Prestadora_Solicitud_Numero");
            entity.Property(e => e.PrestadoraServicioNumero)
                .HasComment("Número único del servicio que pueden ser contratados por las ARS/ARL a las PSS..")
                .HasColumnName("Prestadora_Servicio_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PrestadoraServicioNumeroNavigation).WithMany(p => p.PrestadorasSolicitudesServiciosTrans)
                .HasForeignKey(d => d.PrestadoraServicioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Solicitudes_Servicios_Trans_Prestadoras_Servicios_Cata");

            entity.HasOne(d => d.PrestadoraSolicitudNumeroNavigation).WithMany(p => p.PrestadorasSolicitudesServiciosTrans)
                .HasForeignKey(d => d.PrestadoraSolicitudNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Solicitudes_Servicios_Trans_Prestadoras_Solicitud_Trans");
        });

        modelBuilder.Entity<PrestadorasSolicitudesTipoCatum>(entity =>
        {
            entity.HasKey(e => e.PrestadoraSolicitudTipoNumero);

            entity.ToTable("Prestadoras_Solicitudes_Tipo_Cata", tb => tb.HasComment("Es un catálogo de los tipos de solicitudes que pueden hacer  las ARS/ARL para el registro de una nueva Prestadoras de Servicios de Salud (PSS) institucionales, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PrestadoraSolicitudTipoNumero)
                .HasComment("Número único del tipo de solicitud de inclusión de PSS Institucional que realizan  las ARS/ARL.")
                .HasColumnName("Prestadora_Solicitud_Tipo_Numero");
            entity.Property(e => e.PrestadoraSedeNumero)
                .HasComment("Número único que indica si la prestadora institucional es una sede principal o una sucursal.")
                .HasColumnName("Prestadora_Sede_Numero");
            entity.Property(e => e.PrestadoraSolicitudTipoDescripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Descripción  del tipo de solicitud de inclusión prestadora institucional, indica si se solicita una sede principal o una sucursal.")
                .HasColumnName("Prestadora_Solicitud_Tipo_Descripcion");
            entity.Property(e => e.PrestadoraSolicitudTipoExsplicacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Breve explicación de la descripción  del tipo de solicitud de inclusión prestadora institucional, que indica si se solicita una sede principal o una sucursal.")
                .HasColumnName("Prestadora_Solicitud_Tipo_Exsplicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PrestadoraSedeNumeroNavigation).WithMany(p => p.PrestadorasSolicitudesTipoCata)
                .HasForeignKey(d => d.PrestadoraSedeNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadoras_Solicitudes_Tipo_Cata_Prestadoras_Sede_Cata");
        });

        modelBuilder.Entity<PrestadorasTipoCatum>(entity =>
        {
            entity.HasKey(e => e.PrestadoraTipoNumero).HasName("PK_PSS_Prestadoras_Tipo_Cata");

            entity.ToTable("Prestadoras_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene los tipo de Prestadoras de Servicios de Salud (PSS), su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PrestadoraTipoNumero)
                .HasComment("Es un número único que identifica el tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Prestadora_Tipo_Numero");
            entity.Property(e => e.PrestadoraClaseNumero)
                .HasComment("Es un número único que identifica la clase a la cual pertenece el tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos, Centro Ambulatorio, Hospitales, etc.).")
                .HasColumnName("Prestadora_Clase_Numero");
            entity.Property(e => e.PrestadoraPrimerNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 1er. Nivel de atención de salud.")
                .HasColumnName("Prestadora_Primer_Nivel");
            entity.Property(e => e.PrestadoraSegundoNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 2do. Nivel de atención de salud.")
                .HasColumnName("Prestadora_Segundo_Nivel");
            entity.Property(e => e.PrestadoraTercerNivel)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura del PDSS puede ser entregada en el 3er. Nivel de atención de salud.")
                .HasColumnName("Prestadora_Tercer_Nivel");
            entity.Property(e => e.PrestadoraTipoAnteriores)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Indica los números del catálogo anterior de tipo de prestadoras,  que eran similares a este tipo de prestadora.")
                .HasColumnName("Prestadora_Tipo_Anteriores");
            entity.Property(e => e.PrestadoraTipoDescripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Es la descripción del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Prestadora_Tipo_Descripcion");
            entity.Property(e => e.PrestadoraTipoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Es la explicación del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Prestadora_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PrestadoraClaseNumeroNavigation).WithMany(p => p.PrestadorasTipoCata)
                .HasForeignKey(d => d.PrestadoraClaseNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PSS_Prestadoras_Tipo_Cata_PSS_Prestadoras_Clase_Cata");
        });

        modelBuilder.Entity<PrestadorasTipoServiciosCata99>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Prestadoras_Tipo_Servicios_Cata99");

            entity.Property(e => e.PrestadoraServicioNumero).HasColumnName("Prestadora_Servicio_Numero");
            entity.Property(e => e.PrestadoraTipoNumero).HasColumnName("Prestadora_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasTipoServiciosCatum>(entity =>
        {
            entity.HasKey(e => new { e.PrestadoraTipoNumero, e.PrestadoraServicioNumero }).HasName("PK_Prestadora_Tipo_Servicios_Cata");

            entity.ToTable("Prestadoras_Tipo_Servicios_Cata", tb => tb.HasComment("Es un catálogo que contiene los tipo de Prestadoras de Servicios de Salud (PSS) y su relación con los servicios que pueden ser contratados por estas, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PrestadoraTipoNumero)
                .HasComment("Es un número único que identifica el tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Prestadora_Tipo_Numero");
            entity.Property(e => e.PrestadoraServicioNumero)
                .HasComment("Número único del servicio que pueden ser contratados por las ARS/ARL a las PSS..")
                .HasColumnName("Prestadora_Servicio_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PrestadoraServicioNumeroNavigation).WithMany(p => p.PrestadorasTipoServiciosCata)
                .HasForeignKey(d => d.PrestadoraServicioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadora_Tipo_Servicios_Cata_Prestadoras_Servicios_Cata");

            entity.HasOne(d => d.PrestadoraTipoNumeroNavigation).WithMany(p => p.PrestadorasTipoServiciosCata)
                .HasForeignKey(d => d.PrestadoraTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Prestadora_Tipo_Servicios_Cata_Prestadoras_Tipo_Cata");
        });

        modelBuilder.Entity<PrestadorasUsuariosEstadoClaveCatum>(entity =>
        {
            entity.HasKey(e => e.EstadoClaveNumero).HasName("PK_Prestadora_Usuario_Estado_Clave_Cata");

            entity.ToTable("Prestadoras_Usuarios_Estado_Clave_Cata");

            entity.Property(e => e.EstadoClaveNumero).HasColumnName("Estado_Clave_Numero");
            entity.Property(e => e.EstadoClaveCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Estado_Clave_Codigo");
            entity.Property(e => e.EstadoClaveDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Estado_Clave_Descripcion");
            entity.Property(e => e.EstadoClaveExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Estado_Clave_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PrestadorasUsuariosResultadosConsultasTran>(entity =>
        {
            entity.HasKey(e => e.ResultadoConsultaNumero).HasName("PK_Resultados_Consultas_Trans");

            entity.ToTable("Prestadoras_Usuarios_Resultados_Consultas_Trans");

            entity.Property(e => e.ResultadoConsultaNumero).HasColumnName("Resultado_Consulta_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroIpPc)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("Registro_IP_PC");
            entity.Property(e => e.RegistroUsuario)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.ResultadoConsultaCodigoXml)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("Resultado_Consulta_Codigo_XML");
            entity.Property(e => e.ResultadoConsultaIdUnipago).HasColumnName("Resultado_Consulta_ID_UNIPAGO");
            entity.Property(e => e.ResultadoConsultaParametros)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Resultado_Consulta_Parametros");
            entity.Property(e => e.ResultadoConsultaUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Resultado_Consulta_Usuario");
        });

        modelBuilder.Entity<PrestadorasUsuariosTran>(entity =>
        {
            entity.HasKey(e => new { e.PrestadoraNumero, e.NoDocumento }).HasName("PK_Prestadoras_Usuario");

            entity.ToTable("Prestadoras_Usuarios_Trans");

            entity.Property(e => e.PrestadoraNumero).HasColumnName("Prestadora_Numero");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("No_Documento");
            entity.Property(e => e.EstadoClaveNumero).HasColumnName("Estado_Clave_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TipoNovedadNumero).HasColumnName("Tipo_Novedad_Numero");
            entity.Property(e => e.UsuarioCargo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasColumnName("Usuario_Cargo");
            entity.Property(e => e.UsuarioClave)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasColumnName("Usuario_Clave");
            entity.Property(e => e.UsuarioClaveFechaExpiracion)
                .HasColumnType("datetime")
                .HasColumnName("Usuario_Clave_Fecha_Expiracion");
            entity.Property(e => e.UsuarioExtensionOficina)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('0000')")
                .HasColumnName("Usuario_Extension_Oficina");
            entity.Property(e => e.UsuarioFechaActualizaUnipago)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Usuario_Fecha_Actualiza_UNIPAGO");
            entity.Property(e => e.UsuarioMail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasColumnName("Usuario_Mail");
            entity.Property(e => e.UsuarioMovil)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('8090000000')")
                .HasColumnName("Usuario_Movil");
            entity.Property(e => e.UsuarioNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Usuario_Nombre");
            entity.Property(e => e.UsuarioTelefonoOficina)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('8090000000')")
                .HasColumnName("Usuario_Telefono_Oficina");
        });

        modelBuilder.Entity<PrestadorasUsuariosValidacionesTran>(entity =>
        {
            entity.HasKey(e => e.PrestadoraValidacionId).HasName("PK_Prestadora_Validacion_Usuario_Trans");

            entity.ToTable("Prestadoras_Usuarios_Validaciones_Trans");

            entity.HasIndex(e => e.PrestadoraValidacionCodigo, "Const_Val_Codigo").IsUnique();

            entity.Property(e => e.PrestadoraValidacionId).HasColumnName("Prestadora_Validacion_ID");
            entity.Property(e => e.IdNss).HasColumnName("Id_Nss");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("No_Documento");
            entity.Property(e => e.PrestadoraNumero).HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PrestadoraValidacionCodigo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Validacion_Codigo");
            entity.Property(e => e.PrestadoraValidacionFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Prestadora_Validacion_Fecha");
        });

        modelBuilder.Entity<PrestadorasUsuariosWebservicesCatum>(entity =>
        {
            entity.HasKey(e => new { e.Usuario, e.ClaveAcceso }).HasName("PK_Usuarios_Webservices_Cata");

            entity.ToTable("Prestadoras_Usuarios_Webservices_Cata");

            entity.Property(e => e.Usuario)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClaveAcceso)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Clave_Acceso");
        });

        modelBuilder.Entity<ProfesionalesAplicablesCatum>(entity =>
        {
            entity.HasKey(e => e.AplicaNumero);

            entity.ToTable("Profesionales_Aplicables_Cata");

            entity.Property(e => e.AplicaNumero).HasColumnName("Aplica_Numero");
            entity.Property(e => e.AplicaDescripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Es la descripción del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Aplica_Descripcion");
            entity.Property(e => e.AplicaExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Es la explicación del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Aplica_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProfesionalesAsociacionesAsociadosEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.AsociacionAsociadoEstadoNumero);

            entity.ToTable("Profesionales_Asociaciones_Asociados_Estados_Cata");

            entity.Property(e => e.AsociacionAsociadoEstadoNumero).HasColumnName("Asociacion_Asociado_Estado_Numero");
            entity.Property(e => e.AsociacionAsociadoEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Asociado_Estado_Descripcion");
            entity.Property(e => e.AsociacionAsociadoEstadoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Asociado_Estado_Explicacion");
            entity.Property(e => e.AsociacionAsociadoEstadoMensaje)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Asociado_Estado_Mensaje");
            entity.Property(e => e.AsociacionAsociadoEstadoNota)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Asociacion_Asociado_Estado_Nota");
            entity.Property(e => e.AsociacionAsociadoEstadoPendiente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Asociacion_Asociado_Estado_Pendiente");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProfesionalesAsociacionesAsociadosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.ProfesionalNumero, e.AsociacionRegistroPatronal, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Asociaciones_Asociados_Historico");

            entity.Property(e => e.ProfesionalNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.AsociacionRegistroPatronal).HasColumnName("Asociacion_Registro_Patronal");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.ProfesionalAsociacionActivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Profesional_Asociacion_Activo");
            entity.Property(e => e.ProfesionalAsociacionCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Profesional_Asociacion_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ProfesionalesAsociacionesAsociadosTran).WithMany(p => p.ProfesionalesAsociacionesAsociadosHistoricos)
                .HasForeignKey(d => new { d.ProfesionalNumero, d.AsociacionRegistroPatronal })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Asociaciones_Asociados_Historico_Profesionales_Asociaciones_Asociados_Trans");
        });

        modelBuilder.Entity<ProfesionalesAsociacionesAsociadosTran>(entity =>
        {
            entity.HasKey(e => new { e.ProfesionalNumero, e.AsociacionRegistroPatronal }).HasName("PK_Profesionales_Asociaciones_Trans");

            entity.ToTable("Profesionales_Asociaciones_Asociados_Trans");

            entity.Property(e => e.ProfesionalNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.AsociacionRegistroPatronal).HasColumnName("Asociacion_Registro_Patronal");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.ProfesionalAsociacionActivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Profesional_Asociacion_Activo");
            entity.Property(e => e.ProfesionalAsociacionCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Profesional_Asociacion_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AsociacionRegistroPatronalNavigation).WithMany(p => p.ProfesionalesAsociacionesAsociadosTrans)
                .HasForeignKey(d => d.AsociacionRegistroPatronal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Asociaciones_Trans_Profesionales_Asociaciones_Master");

            entity.HasOne(d => d.ProfesionalNumeroNavigation).WithMany(p => p.ProfesionalesAsociacionesAsociadosTrans)
                .HasForeignKey(d => d.ProfesionalNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Asociaciones_Trans_Profesionales_Master");
        });

        modelBuilder.Entity<ProfesionalesAsociacionesEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.AsociacionEstadoNumero);

            entity.ToTable("Profesionales_Asociaciones_Estados_Cata", tb => tb.HasTrigger("Trigger_Profesionales_Asociaciones_Estados_Historico_Update"));

            entity.Property(e => e.AsociacionEstadoNumero).HasColumnName("Asociacion_Estado_Numero");
            entity.Property(e => e.AsociacionEstadoAsociadoMensaje)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Estado_Asociado_Mensaje");
            entity.Property(e => e.AsociacionEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Estado_Descripcion");
            entity.Property(e => e.AsociacionEstadoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Estado_Explicacion");
            entity.Property(e => e.AsociacionEstadoMensaje)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Estado_Mensaje");
            entity.Property(e => e.AsociacionEstadoNota)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Asociacion_Estado_Nota");
            entity.Property(e => e.AsociacionEstadoPendiente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Asociacion_Estado_Pendiente");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProfesionalesAsociacionesEstadosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.AsociacionEstadoNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Asociaciones_Estados_Historico");

            entity.Property(e => e.AsociacionEstadoNumero).HasColumnName("Asociacion_Estado_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.AsociacionEstadoAsociadoMensaje)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Estado_Asociado_Mensaje");
            entity.Property(e => e.AsociacionEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Estado_Descripcion");
            entity.Property(e => e.AsociacionEstadoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Estado_Explicacion");
            entity.Property(e => e.AsociacionEstadoMensaje)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Estado_Mensaje");
            entity.Property(e => e.AsociacionEstadoNota)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Asociacion_Estado_Nota");
            entity.Property(e => e.AsociacionEstadoPendiente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Asociacion_Estado_Pendiente");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProfesionalesAsociacionesHistorico>(entity =>
        {
            entity.HasKey(e => new { e.AsociacionRegistroPatronal, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Asociaciones_Historico");

            entity.Property(e => e.AsociacionRegistroPatronal).HasColumnName("Asociacion_Registro_Patronal");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.AsociacionEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Asociacion_Estado_Fecha");
            entity.Property(e => e.AsociacionEstadoNumero).HasColumnName("Asociacion_Estado_Numero");
            entity.Property(e => e.AsociacionFechaAcreditacion)
                .HasColumnType("datetime")
                .HasColumnName("Asociacion_Fecha_Acreditacion");
            entity.Property(e => e.AsociacionNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Nota");
            entity.Property(e => e.AsociacionRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Asociacion_RNC_o_Cedula");
            entity.Property(e => e.AsociacionSiglas)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Siglas");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AsociacionRegistroPatronalNavigation).WithMany(p => p.ProfesionalesAsociacionesHistoricos)
                .HasForeignKey(d => d.AsociacionRegistroPatronal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Asociaciones_Historico_Profesionales_Asociaciones_Master");
        });

        modelBuilder.Entity<ProfesionalesAsociacionesMaster>(entity =>
        {
            entity.HasKey(e => e.AsociacionRegistroPatronal).HasName("PK_Profesionales_Asociaciones_Master_1");

            entity.ToTable("Profesionales_Asociaciones_Master", tb => tb.HasTrigger("Trigger_Profesionales_Asociaciones_Historico_Update"));

            entity.Property(e => e.AsociacionRegistroPatronal)
                .ValueGeneratedNever()
                .HasColumnName("Asociacion_Registro_Patronal");
            entity.Property(e => e.AsociacionEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Asociacion_Estado_Fecha");
            entity.Property(e => e.AsociacionEstadoNumero).HasColumnName("Asociacion_Estado_Numero");
            entity.Property(e => e.AsociacionFechaAcreditacion)
                .HasColumnType("datetime")
                .HasColumnName("Asociacion_Fecha_Acreditacion");
            entity.Property(e => e.AsociacionNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Nota");
            entity.Property(e => e.AsociacionRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Asociacion_RNC_o_Cedula");
            entity.Property(e => e.AsociacionSiglas)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Siglas");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudAsociacionNumero).HasColumnName("Solicitud_Asociacion_Numero");

            entity.HasOne(d => d.AsociacionEstadoNumeroNavigation).WithMany(p => p.ProfesionalesAsociacionesMasters)
                .HasForeignKey(d => d.AsociacionEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Asociaciones_Master_Profesionales_Asociaciones_Estados_Cata");
        });

        modelBuilder.Entity<ProfesionalesAsociacionesRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.AsociacionRegistroPatronal, e.RequerimientoNumero }).HasName("PK_Profesionales_Asociaciones_Requerimientos_Trans_1");

            entity.ToTable("Profesionales_Asociaciones_Requerimientos_Trans");

            entity.Property(e => e.AsociacionRegistroPatronal).HasColumnName("Asociacion_Registro_Patronal");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AsociacionRegistroPatronalNavigation).WithMany(p => p.ProfesionalesAsociacionesRequerimientosTrans)
                .HasForeignKey(d => d.AsociacionRegistroPatronal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Asociaciones_Requerimientos_Trans_Profesionales_Asociaciones_Master");

            entity.HasOne(d => d.RequerimientoNumeroNavigation).WithMany(p => p.ProfesionalesAsociacionesRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Asociaciones_Requerimientos_Trans_Profesionales_Requerimientos_Cata");
        });

        modelBuilder.Entity<ProfesionalesAsociacionesSolicitudesHistorico>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudAsociacionNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Asociaciones_Solicitudes_Historico");

            entity.Property(e => e.SolicitudAsociacionNumero).HasColumnName("Solicitud_Asociacion_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.AsociacionRegistroPatronal).HasColumnName("Asociacion_Registro_Patronal");
            entity.Property(e => e.AsociacionSiglas)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Siglas");
            entity.Property(e => e.MotivoNumero).HasColumnName("Motivo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Estado_Fecha");
            entity.Property(e => e.SolicitudEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Estado_Nota");
            entity.Property(e => e.SolicitudEstadoNumero).HasColumnName("Solicitud_Estado_Numero");
            entity.Property(e => e.SolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
            entity.Property(e => e.SolicitudUsuarioCuenta)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Usuario_Cuenta");

            entity.HasOne(d => d.SolicitudAsociacionNumeroNavigation).WithMany(p => p.ProfesionalesAsociacionesSolicitudesHistoricos)
                .HasForeignKey(d => d.SolicitudAsociacionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Asociaciones_Solicitudes_Historico_Profesionales_Asociaciones_Solicitudes_Trans");
        });

        modelBuilder.Entity<ProfesionalesAsociacionesSolicitudesRequerimientosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudAsociacionNumero, e.RequerimientoNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Asociaciones_Solicitudes_Requerimientos_Historico");

            entity.Property(e => e.SolicitudAsociacionNumero).HasColumnName("Solicitud_Asociacion_Numero");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.MotivoNumero).HasColumnName("Motivo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Estado_Fecha");
            entity.Property(e => e.RequerimientoEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Nota");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.ProfesionalesAsociacionesSolicitudesRequerimientosTran).WithMany(p => p.ProfesionalesAsociacionesSolicitudesRequerimientosHistoricos)
                .HasForeignKey(d => new { d.SolicitudAsociacionNumero, d.RequerimientoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Asociaciones_Solicitudes_Requerimientos_Historico_Profesionales_Asociaciones_Solicitudes_Requerimientos_Trans");
        });

        modelBuilder.Entity<ProfesionalesAsociacionesSolicitudesRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudAsociacionNumero, e.RequerimientoNumero });

            entity.ToTable("Profesionales_Asociaciones_Solicitudes_Requerimientos_Trans");

            entity.Property(e => e.SolicitudAsociacionNumero).HasColumnName("Solicitud_Asociacion_Numero");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.MotivoNumero).HasColumnName("Motivo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Estado_Fecha");
            entity.Property(e => e.RequerimientoEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Nota");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.RequerimientoEstadoNumeroNavigation).WithMany(p => p.ProfesionalesAsociacionesSolicitudesRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Asociaciones_Solicitudes_Requerimientos_Trans_Profesionales_Requerimientos_Estados_Cata");

            entity.HasOne(d => d.RequerimientoNumeroNavigation).WithMany(p => p.ProfesionalesAsociacionesSolicitudesRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Asociaciones_Solicitudes_Requerimientos_Trans_Profesionales_Requerimientos_Cata");

            entity.HasOne(d => d.SolicitudAsociacionNumeroNavigation).WithMany(p => p.ProfesionalesAsociacionesSolicitudesRequerimientosTrans)
                .HasForeignKey(d => d.SolicitudAsociacionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Asociaciones_Solicitudes_Requerimientos_Trans_Profesionales_Asociaciones_Solicitudes_Trans");
        });

        modelBuilder.Entity<ProfesionalesAsociacionesSolicitudesTran>(entity =>
        {
            entity.HasKey(e => e.SolicitudAsociacionNumero).HasName("PK_Profesionales_Solicitudes_Asociaciones_Trans2");

            entity.ToTable("Profesionales_Asociaciones_Solicitudes_Trans");

            entity.Property(e => e.SolicitudAsociacionNumero).HasColumnName("Solicitud_Asociacion_Numero");
            entity.Property(e => e.AsociacionRegistroPatronal).HasColumnName("Asociacion_Registro_Patronal");
            entity.Property(e => e.AsociacionSiglas)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Siglas");
            entity.Property(e => e.MotivoNumero).HasColumnName("Motivo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Estado_Fecha");
            entity.Property(e => e.SolicitudEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Estado_Nota");
            entity.Property(e => e.SolicitudEstadoNumero).HasColumnName("Solicitud_Estado_Numero");
            entity.Property(e => e.SolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
            entity.Property(e => e.SolicitudUsuarioCuenta)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Usuario_Cuenta");

            entity.HasOne(d => d.SolicitudEstadoNumeroNavigation).WithMany(p => p.ProfesionalesAsociacionesSolicitudesTrans)
                .HasForeignKey(d => d.SolicitudEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Asociaciones_Solicitudes_Trans_Profesionales_Solicitudes_Estados_Cata");
        });

        modelBuilder.Entity<ProfesionalesAuditorasEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.AuditoraEstadoNumero);

            entity.ToTable("Profesionales_Auditoras_Estados_Cata");

            entity.Property(e => e.AuditoraEstadoNumero).HasColumnName("Auditora_Estado_Numero");
            entity.Property(e => e.AuditoraEstadoAuditorMensaje)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Auditora_Estado_Auditor_Mensaje");
            entity.Property(e => e.AuditoraEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Auditora_Estado_Descripcion");
            entity.Property(e => e.AuditoraEstadoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Auditora_Estado_Explicacion");
            entity.Property(e => e.AuditoraEstadoMensaje)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Auditora_Estado_Mensaje");
            entity.Property(e => e.AuditoraEstadoNota)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Auditora_Estado_Nota");
            entity.Property(e => e.AuditoraEstadoPendiente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Auditora_Estado_Pendiente");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProfesionalesAuditorasHistorico>(entity =>
        {
            entity.HasKey(e => new { e.AuditoraRegistroPatronal, e.RegistroFechaHistorico }).HasName("PK_Profesionales_Auditoras_Historico_1");

            entity.ToTable("Profesionales_Auditoras_Historico");

            entity.Property(e => e.AuditoraRegistroPatronal).HasColumnName("Auditora_Registro_Patronal");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.AuditoraEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Auditora_Estado_Fecha");
            entity.Property(e => e.AuditoraEstadoNumero).HasColumnName("Auditora_Estado_Numero");
            entity.Property(e => e.AuditoraFechaAcreditacion)
                .HasColumnType("datetime")
                .HasColumnName("Auditora_Fecha_Acreditacion");
            entity.Property(e => e.AuditoraNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Auditora_Nota");
            entity.Property(e => e.AuditoraRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Auditora_RNC_o_Cedula");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AuditoraRegistroPatronalNavigation).WithMany(p => p.ProfesionalesAuditorasHistoricos)
                .HasForeignKey(d => d.AuditoraRegistroPatronal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Auditoras_Historico_Profesionales_Auditoras_Master1");
        });

        modelBuilder.Entity<ProfesionalesAuditorasMaster>(entity =>
        {
            entity.HasKey(e => e.AuditoraRegistroPatronal).HasName("PK_Profesionales_Auditoras_Master_1");

            entity.ToTable("Profesionales_Auditoras_Master");

            entity.Property(e => e.AuditoraRegistroPatronal)
                .ValueGeneratedNever()
                .HasColumnName("Auditora_Registro_Patronal");
            entity.Property(e => e.AuditoraEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Auditora_Estado_Fecha");
            entity.Property(e => e.AuditoraEstadoNumero).HasColumnName("Auditora_Estado_Numero");
            entity.Property(e => e.AuditoraFechaAcreditacion)
                .HasColumnType("datetime")
                .HasColumnName("Auditora_Fecha_Acreditacion");
            entity.Property(e => e.AuditoraNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Auditora_Nota");
            entity.Property(e => e.AuditoraRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Auditora_RNC_o_Cedula");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AuditoraEstadoNumeroNavigation).WithMany(p => p.ProfesionalesAuditorasMasters)
                .HasForeignKey(d => d.AuditoraEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Auditoras_Master_Profesionales_Auditoras_Estados_Cata");
        });

        modelBuilder.Entity<ProfesionalesAuditorasRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.AuditoraRegistroPatronal, e.RequerimientoNumero });

            entity.ToTable("Profesionales_Auditoras_Requerimientos_Trans");

            entity.Property(e => e.AuditoraRegistroPatronal).HasColumnName("Auditora_Registro_Patronal");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AuditoraRegistroPatronalNavigation).WithMany(p => p.ProfesionalesAuditorasRequerimientosTrans)
                .HasForeignKey(d => d.AuditoraRegistroPatronal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Auditoras_Requerimientos_Trans_Profesionales_Auditoras_Master");

            entity.HasOne(d => d.RequerimientoNumeroNavigation).WithMany(p => p.ProfesionalesAuditorasRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Auditoras_Requerimientos_Trans_Profesionales_Requerimientos_Cata");
        });

        modelBuilder.Entity<ProfesionalesAuditorasSolicitudesHistorico>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudAuditoraNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Auditoras_Solicitudes_Historico");

            entity.Property(e => e.SolicitudAuditoraNumero).HasColumnName("Solicitud_Auditora_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.AuditoraRegistroPatronal).HasColumnName("Auditora_Registro_Patronal");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Estado_Fecha");
            entity.Property(e => e.SolicitudEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Estado_Nota");
            entity.Property(e => e.SolicitudEstadoNumero).HasColumnName("Solicitud_Estado_Numero");
            entity.Property(e => e.SolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
            entity.Property(e => e.SolicitudUsuarioCuenta)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Usuario_Cuenta");

            entity.HasOne(d => d.SolicitudAuditoraNumeroNavigation).WithMany(p => p.ProfesionalesAuditorasSolicitudesHistoricos)
                .HasForeignKey(d => d.SolicitudAuditoraNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Auditoras_Solicitudes_Historico_Profesionales_Auditoras_Solicitudes_Trans");
        });

        modelBuilder.Entity<ProfesionalesAuditorasSolicitudesRequerimientosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudAuditoraNumero, e.RequerimientoNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Auditoras_Solicitudes_Requerimientos_Historico");

            entity.Property(e => e.SolicitudAuditoraNumero).HasColumnName("Solicitud_Auditora_Numero");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Estado_Fecha");
            entity.Property(e => e.RequerimientoEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Nota");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.ProfesionalesAuditorasSolicitudesRequerimientosTran).WithMany(p => p.ProfesionalesAuditorasSolicitudesRequerimientosHistoricos)
                .HasForeignKey(d => new { d.SolicitudAuditoraNumero, d.RequerimientoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Auditoras_Solicitudes_Requerimientos_Historico_Profesionales_Auditoras_Solicitudes_Requerimientos_Trans");
        });

        modelBuilder.Entity<ProfesionalesAuditorasSolicitudesRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudAuditoraNumero, e.RequerimientoNumero });

            entity.ToTable("Profesionales_Auditoras_Solicitudes_Requerimientos_Trans");

            entity.Property(e => e.SolicitudAuditoraNumero).HasColumnName("Solicitud_Auditora_Numero");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Estado_Fecha");
            entity.Property(e => e.RequerimientoEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Nota");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.RequerimientoEstadoNumeroNavigation).WithMany(p => p.ProfesionalesAuditorasSolicitudesRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Auditoras_Solicitudes_Requerimientos_Trans_Profesionales_Requerimientos_Estados_Cata");

            entity.HasOne(d => d.RequerimientoNumeroNavigation).WithMany(p => p.ProfesionalesAuditorasSolicitudesRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Auditoras_Solicitudes_Requerimientos_Trans_Profesionales_Requerimientos_Cata");

            entity.HasOne(d => d.SolicitudAuditoraNumeroNavigation).WithMany(p => p.ProfesionalesAuditorasSolicitudesRequerimientosTrans)
                .HasForeignKey(d => d.SolicitudAuditoraNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Auditoras_Solicitudes_Requerimientos_Trans_Profesionales_Auditoras_Solicitudes_Trans");
        });

        modelBuilder.Entity<ProfesionalesAuditorasSolicitudesTran>(entity =>
        {
            entity.HasKey(e => e.SolicitudAuditoraNumero);

            entity.ToTable("Profesionales_Auditoras_Solicitudes_Trans");

            entity.Property(e => e.SolicitudAuditoraNumero).HasColumnName("Solicitud_Auditora_Numero");
            entity.Property(e => e.AuditoraRegistroPatronal).HasColumnName("Auditora_Registro_Patronal");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Estado_Fecha");
            entity.Property(e => e.SolicitudEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Estado_Nota");
            entity.Property(e => e.SolicitudEstadoNumero).HasColumnName("Solicitud_Estado_Numero");
            entity.Property(e => e.SolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
            entity.Property(e => e.SolicitudUsuarioCuenta)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Usuario_Cuenta");
        });

        modelBuilder.Entity<ProfesionalesAuditoresSolicitudesEmpresasTran>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudAuditorNumero, e.EmpleadorRncOCedula, e.EmpleadorLaboraDesde }).HasName("PK_Profesionales_Solicitudes_Auditores_Empresas_Trans");

            entity.ToTable("Profesionales_Auditores_Solicitudes_Empresas_Trans");

            entity.Property(e => e.SolicitudAuditorNumero).HasColumnName("Solicitud_Auditor_Numero");
            entity.Property(e => e.EmpleadorRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Empleador_RNC_o_Cedula");
            entity.Property(e => e.EmpleadorLaboraDesde).HasColumnName("Empleador_Labora_Desde");
            entity.Property(e => e.EmpleadorLabor)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Empleador_Labor");
            entity.Property(e => e.EmpleadorLaboraActualmente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Empleador_Labora_Actualmente");
            entity.Property(e => e.EmpleadorLaboraHasta).HasColumnName("Empleador_Labora_Hasta");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.SolicitudAuditorNumeroNavigation).WithMany(p => p.ProfesionalesAuditoresSolicitudesEmpresasTrans)
                .HasForeignKey(d => d.SolicitudAuditorNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Auditores_Empresas_Trans_Profesionales_Solicitudes_Auditores_Trans");
        });

        modelBuilder.Entity<ProfesionalesAuditoresSolicitudesExperienciasTran>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudAuditorNumero, e.ExperienciaTipoNumero }).HasName("PK_Profesionales_Solicitudes_Auditores_Experiencias_Trans");

            entity.ToTable("Profesionales_Auditores_Solicitudes_Experiencias_Trans");

            entity.Property(e => e.SolicitudAuditorNumero).HasColumnName("Solicitud_Auditor_Numero");
            entity.Property(e => e.ExperienciaTipoNumero).HasColumnName("Experiencia_Tipo_Numero");
            entity.Property(e => e.ExperienciaLabor)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Experiencia_Labor");
            entity.Property(e => e.ExperienciaLaborAnios).HasColumnName("Experiencia_Labor_Anios");
            entity.Property(e => e.ExperienciaLaborMeses).HasColumnName("Experiencia_Labor_Meses");
            entity.Property(e => e.ExperienciaLaboraActualmente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Experiencia_Labora_Actualmente");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ExperienciaTipoNumeroNavigation).WithMany(p => p.ProfesionalesAuditoresSolicitudesExperienciasTrans)
                .HasForeignKey(d => d.ExperienciaTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Auditores_Experiencias_Trans_Profesionales_Experiencias_Tipos_Trans");

            entity.HasOne(d => d.SolicitudAuditorNumeroNavigation).WithMany(p => p.ProfesionalesAuditoresSolicitudesExperienciasTrans)
                .HasForeignKey(d => d.SolicitudAuditorNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Auditores_Experiencias_Trans_Profesionales_Solicitudes_Auditores_Trans");
        });

        modelBuilder.Entity<ProfesionalesAuditoresSolicitudesHistorico>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudAuditorNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Auditores_Solicitudes_Historico");

            entity.Property(e => e.SolicitudAuditorNumero).HasColumnName("Solicitud_Auditor_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.ProfesionalNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Estado_Fecha");
            entity.Property(e => e.SolicitudEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Estado_Nota");
            entity.Property(e => e.SolicitudEstadoNumero).HasColumnName("Solicitud_Estado_Numero");
            entity.Property(e => e.SolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
            entity.Property(e => e.SolicitudUsuarioCuenta)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Usuario_Cuenta");

            entity.HasOne(d => d.SolicitudAuditorNumeroNavigation).WithMany(p => p.ProfesionalesAuditoresSolicitudesHistoricos)
                .HasForeignKey(d => d.SolicitudAuditorNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Auditores_Historico_Profesionales_Solicitudes_Auditores_Trans");
        });

        modelBuilder.Entity<ProfesionalesAuditoresSolicitudesRequerimientosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudAuditorNumero, e.RequerimientoNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Auditores_Solicitudes_Requerimientos_Historico");

            entity.Property(e => e.SolicitudAuditorNumero).HasColumnName("Solicitud_Auditor_Numero");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Estado_Fecha");
            entity.Property(e => e.RequerimientoEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Nota");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.ProfesionalesAuditoresSolicitudesRequerimientosTran).WithMany(p => p.ProfesionalesAuditoresSolicitudesRequerimientosHistoricos)
                .HasForeignKey(d => new { d.SolicitudAuditorNumero, d.RequerimientoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Auditores_Solicitudes_Requerimientos_Historico_Profesionales_Auditores_Solicitudes_Requerimientos_Trans");
        });

        modelBuilder.Entity<ProfesionalesAuditoresSolicitudesRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudAuditorNumero, e.RequerimientoNumero }).HasName("PK_Profesionales_Solicitudes_Auditores_Requerimientos_Trans");

            entity.ToTable("Profesionales_Auditores_Solicitudes_Requerimientos_Trans");

            entity.Property(e => e.SolicitudAuditorNumero).HasColumnName("Solicitud_Auditor_Numero");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Estado_Fecha");
            entity.Property(e => e.RequerimientoEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Nota");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.RequerimientoEstadoNumeroNavigation).WithMany(p => p.ProfesionalesAuditoresSolicitudesRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Auditores_Requerimientos_Trans_Profesionales_Requerimientos_Estados_Cata");

            entity.HasOne(d => d.RequerimientoNumeroNavigation).WithMany(p => p.ProfesionalesAuditoresSolicitudesRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Auditores_Requerimientos_Trans_Profesionales_Requerimientos_Cata");

            entity.HasOne(d => d.SolicitudAuditorNumeroNavigation).WithMany(p => p.ProfesionalesAuditoresSolicitudesRequerimientosTrans)
                .HasForeignKey(d => d.SolicitudAuditorNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Auditores_Requerimientos_Trans_Profesionales_Solicitudes_Auditores_Trans");
        });

        modelBuilder.Entity<ProfesionalesAuditoresSolicitudesTran>(entity =>
        {
            entity.HasKey(e => e.SolicitudAuditorNumero).HasName("PK_Profesionales_Solicitudes_Auditores_Trans");

            entity.ToTable("Profesionales_Auditores_Solicitudes_Trans");

            entity.Property(e => e.SolicitudAuditorNumero).HasColumnName("Solicitud_Auditor_Numero");
            entity.Property(e => e.ProfesionalNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Estado_Fecha");
            entity.Property(e => e.SolicitudEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Estado_Nota");
            entity.Property(e => e.SolicitudEstadoNumero).HasColumnName("Solicitud_Estado_Numero");
            entity.Property(e => e.SolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
            entity.Property(e => e.SolicitudUsuarioCuenta)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Usuario_Cuenta");

            entity.HasOne(d => d.ProfesionalNumeroNavigation).WithMany(p => p.ProfesionalesAuditoresSolicitudesTrans)
                .HasForeignKey(d => d.ProfesionalNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Auditores_Trans_Profesionales_Master");

            entity.HasOne(d => d.SolicitudEstadoNumeroNavigation).WithMany(p => p.ProfesionalesAuditoresSolicitudesTrans)
                .HasForeignKey(d => d.SolicitudEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Auditores_Trans_Profesionales_Solicitudes_Estados_Cata");
        });

        modelBuilder.Entity<ProfesionalesDisposicionesHistorico>(entity =>
        {
            entity.HasKey(e => new { e.DisposicionNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Disposiciones_Historico");

            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.DisposicionDetalle)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Disposicion_Detalle");
            entity.Property(e => e.DisposicionFecha)
                .HasColumnType("datetime")
                .HasColumnName("Disposicion_Fecha");
            entity.Property(e => e.DisposicionTipoNumero).HasColumnName("Disposicion_Tipo_Numero");
            entity.Property(e => e.PeriodoNumero).HasColumnName("Periodo_Numero");
            entity.Property(e => e.ProfesionalNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");

            entity.HasOne(d => d.DisposicionNumeroNavigation).WithMany(p => p.ProfesionalesDisposicionesHistoricos)
                .HasForeignKey(d => d.DisposicionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Disposiciones_Historico_Profesionales_Disposiciones_Trans");
        });

        modelBuilder.Entity<ProfesionalesDisposicionesTiposCatum>(entity =>
        {
            entity.HasKey(e => e.DisposicionTipoNumero).HasName("PK_Profesionales_Disposiciones_Tipos_Trans");

            entity.ToTable("Profesionales_Disposiciones_Tipos_Cata");

            entity.Property(e => e.DisposicionTipoNumero).HasColumnName("Disposicion_Tipo_Numero");
            entity.Property(e => e.AplicaNumero).HasColumnName("Aplica_Numero");
            entity.Property(e => e.DisposicionTipoDescripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Disposicion_Tipo_Descripcion");
            entity.Property(e => e.DisposicionTipoExamenes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Disposicion_Tipo_Examenes");
            entity.Property(e => e.DisposicionTipoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Es la explicación del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Disposicion_Tipo_Explicacion");
            entity.Property(e => e.DisposicionTipoRequerimientos)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Disposicion_Tipo_Requerimientos");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AplicaNumeroNavigation).WithMany(p => p.ProfesionalesDisposicionesTiposCata)
                .HasForeignKey(d => d.AplicaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Disposiciones_Tipos_Trans_Profesionales_Aplicables_Cata");
        });

        modelBuilder.Entity<ProfesionalesDisposicionesTran>(entity =>
        {
            entity.HasKey(e => e.DisposicionNumero);

            entity.ToTable("Profesionales_Disposiciones_Trans");

            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DisposicionDetalle)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Disposicion_Detalle");
            entity.Property(e => e.DisposicionFecha)
                .HasColumnType("datetime")
                .HasColumnName("Disposicion_Fecha");
            entity.Property(e => e.DisposicionTipoNumero).HasColumnName("Disposicion_Tipo_Numero");
            entity.Property(e => e.PeriodoNumero).HasColumnName("Periodo_Numero");
            entity.Property(e => e.ProfesionalNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");

            entity.HasOne(d => d.DisposicionTipoNumeroNavigation).WithMany(p => p.ProfesionalesDisposicionesTrans)
                .HasForeignKey(d => d.DisposicionTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Disposiciones_Trans_Profesionales_Disposiciones_Tipos_Trans");
        });

        modelBuilder.Entity<ProfesionalesEmpresasTran>(entity =>
        {
            entity.HasKey(e => new { e.ProfesionalNumero, e.EmpleadorRncOCedula, e.EmpleadorLaboraDesde });

            entity.ToTable("Profesionales_Empresas_Trans");

            entity.Property(e => e.ProfesionalNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.EmpleadorRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Empleador_RNC_o_Cedula");
            entity.Property(e => e.EmpleadorLaboraDesde).HasColumnName("Empleador_Labora_Desde");
            entity.Property(e => e.EmpleadorLabor)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Empleador_Labor");
            entity.Property(e => e.EmpleadorLaboraActualmente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Empleador_Labora_Actualmente");
            entity.Property(e => e.EmpleadorLaboraHasta).HasColumnName("Empleador_Labora_Hasta");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ProfesionalNumeroNavigation).WithMany(p => p.ProfesionalesEmpresasTrans)
                .HasForeignKey(d => d.ProfesionalNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Empresas_Trans_Profesionales_Master");
        });

        modelBuilder.Entity<ProfesionalesEspecialidadesCatum>(entity =>
        {
            entity.HasKey(e => e.EspecialidadNumero);

            entity.ToTable("Profesionales_Especialidades_Cata", tb => tb.HasComment("Es un catálogo que contiene las especialidades medicas, clasifica el maestro de PSS Médicos, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.EspecialidadNumero)
                .ValueGeneratedNever()
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero");
            entity.Property(e => e.EspecialidadDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción de la especialidad médica.")
                .HasColumnName("Especialidad_Descripcion");
            entity.Property(e => e.EspecialidadProfesionNumero).HasColumnName("Especialidad_Profesion_Numero");
            entity.Property(e => e.EspecialidadTipoNumero).HasColumnName("Especialidad_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.EspecialidadTipoNumeroNavigation).WithMany(p => p.ProfesionalesEspecialidadesCata)
                .HasForeignKey(d => d.EspecialidadTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Especialidades_Cata_Profesionales_Especialidades_Tipos_Cata");
        });

        modelBuilder.Entity<ProfesionalesEspecialidadesEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.EspecialidadEstadoNumero);

            entity.ToTable("Profesionales_Especialidades_Estados_Cata");

            entity.Property(e => e.EspecialidadEstadoNumero).HasColumnName("Especialidad_Estado_Numero");
            entity.Property(e => e.EspecialidadEstadoDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es la descripción del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Especialidad_Estado_Descripcion");
            entity.Property(e => e.EspecialidadEstadoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Es la explicación del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Especialidad_Estado_Explicacion");
            entity.Property(e => e.EspecialidadEstadoMensaje)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Especialidad_Estado_Mensaje");
            entity.Property(e => e.EspecialidadEstadoNota)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Especialidad_Estado_Nota");
            entity.Property(e => e.EspecialidadEstadoPendiente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Especialidad_Estado_Pendiente");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProfesionalesEspecialidadesEstadosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.EspecialidadEstadoNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Especialidades_Estados_Historico");

            entity.Property(e => e.EspecialidadEstadoNumero).HasColumnName("Especialidad_Estado_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.EspecialidadEstadoDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es la descripción del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Especialidad_Estado_Descripcion");
            entity.Property(e => e.EspecialidadEstadoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Es la explicación del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Especialidad_Estado_Explicacion");
            entity.Property(e => e.EspecialidadEstadoMensaje)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Especialidad_Estado_Mensaje");
            entity.Property(e => e.EspecialidadEstadoNota)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Especialidad_Estado_Nota");
            entity.Property(e => e.EspecialidadEstadoPendiente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Especialidad_Estado_Pendiente");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProfesionalesEspecialidadesHistorico>(entity =>
        {
            entity.HasKey(e => new { e.ProfesionalNumero, e.EspecialidadNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Especialidades_Historico");

            entity.Property(e => e.ProfesionalNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.EspecialidadNumero)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.EspecialidadPeriodo).HasColumnName("Especialidad_Periodo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ProfesionalesEspecialidadesTran).WithMany(p => p.ProfesionalesEspecialidadesHistoricos)
                .HasForeignKey(d => new { d.ProfesionalNumero, d.EspecialidadNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Especialidades_Historico_Profesionales_Especialidades_Trans");
        });

        modelBuilder.Entity<ProfesionalesEspecialidadesTiposCatum>(entity =>
        {
            entity.HasKey(e => e.EspecialidadTipoNumero);

            entity.ToTable("Profesionales_Especialidades_Tipos_Cata");

            entity.Property(e => e.EspecialidadTipoNumero).HasColumnName("Especialidad_Tipo_Numero");
            entity.Property(e => e.EspecialidadTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es la descripción del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Especialidad_Tipo_Descripcion");
            entity.Property(e => e.EspecialidadTipoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Es la explicación del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Especialidad_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProfesionalesEspecialidadesTran>(entity =>
        {
            entity.HasKey(e => new { e.ProfesionalNumero, e.EspecialidadNumero });

            entity.ToTable("Profesionales_Especialidades_Trans");

            entity.Property(e => e.ProfesionalNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.EspecialidadNumero)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.EspecialidadPeriodo).HasColumnName("Especialidad_Periodo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ProfesionalNumeroNavigation).WithMany(p => p.ProfesionalesEspecialidadesTrans)
                .HasForeignKey(d => d.ProfesionalNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Especialidades_Trans_Profesionales_Master1");
        });

        modelBuilder.Entity<ProfesionalesEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.ProfesionalEstadoNumero);

            entity.ToTable("Profesionales_Estados_Cata");

            entity.Property(e => e.ProfesionalEstadoNumero).HasColumnName("Profesional_Estado_Numero");
            entity.Property(e => e.ProfesionalEstadoDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es la descripción del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Profesional_Estado_Descripcion");
            entity.Property(e => e.ProfesionalEstadoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Es la explicación del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Profesional_Estado_Explicacion");
            entity.Property(e => e.ProfesionalEstadoMensaje)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Profesional_Estado_Mensaje");
            entity.Property(e => e.ProfesionalEstadoNota)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Profesional_Estado_Nota");
            entity.Property(e => e.ProfesionalEstadoPendiente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Profesional_Estado_Pendiente");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroEstado1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado1");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroFecha1)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha1");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroUsuario1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario1");
        });

        modelBuilder.Entity<ProfesionalesExamenesDetallesTran>(entity =>
        {
            entity.HasKey(e => new { e.ExamenNumero, e.PreguntaNumero, e.PreguntaRespuestaNumero });

            entity.ToTable("Profesionales_Examenes_Detalles_Trans");

            entity.Property(e => e.ExamenNumero)
                .HasComment("Número único que identifica cada examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Numero");
            entity.Property(e => e.PreguntaNumero)
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.PreguntaRespuestaNumero).HasColumnName("Pregunta_Respuesta_Numero");
            entity.Property(e => e.PreguntaDescripcion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasComment("Detalles de cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Descripcion");
            entity.Property(e => e.PreguntaOrden).HasColumnName("Pregunta_Orden");
            entity.Property(e => e.PreguntaRespuestaDescripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasComment("Es el código (Letra) con la que se puede responder una pregunta específica en un examen de evaluación en un proceso de acreditación.")
                .HasColumnName("Pregunta_Respuesta_Descripcion");
            entity.Property(e => e.PreguntaRespuestaElegida)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si fue la respuesta elegida para una pregunta específica en un examen de evaluación en un proceso de acreditación.")
                .HasColumnName("Pregunta_Respuesta_Elegida");
            entity.Property(e => e.PreguntaRespuestaLetra)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el código (Letra) con la que se representa una respueta posible de una pregunta específica en un examen de evaluación en un proceso de acreditación.")
                .HasColumnName("Pregunta_Respuesta_Letra");
            entity.Property(e => e.PreguntaRespuestaValida)
                .HasComment("Indica si fue la respuesta elegida para una pregunta específica en un examen de evaluación en un proceso de acreditación.")
                .HasColumnName("Pregunta_Respuesta_Valida");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ExamenNumeroNavigation).WithMany(p => p.ProfesionalesExamenesDetallesTrans)
                .HasForeignKey(d => d.ExamenNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Examenes_Detalles_Trans_Profesional_Examenes_Trans");

            entity.HasOne(d => d.Pregunta).WithMany(p => p.ProfesionalesExamenesDetallesTrans)
                .HasForeignKey(d => new { d.PreguntaNumero, d.PreguntaRespuestaNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Examenes_Detalles_Trans_Profesionales_Preguntas_Respuestas_Cata");
        });

        modelBuilder.Entity<ProfesionalesExamenesEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.ExamenEstadoNumero);

            entity.ToTable("Profesionales_Examenes_Estados_Cata");

            entity.Property(e => e.ExamenEstadoNumero).HasColumnName("Examen_Estado_Numero");
            entity.Property(e => e.ExamenEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Examen_Estado_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProfesionalesExamenesHistorico>(entity =>
        {
            entity.HasKey(e => new { e.ExamenNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Examenes_Historico");

            entity.Property(e => e.ExamenNumero)
                .HasComment("Número único que identifica cada examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.ExamenEstadoNumero).HasColumnName("Examen_Estado_Numero");
            entity.Property(e => e.ExamenFechaFinal)
                .HasComment("Fecha y hora en que terminó una persona  un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Examen_Fecha_Final");
            entity.Property(e => e.ExamenFechaInicio)
                .HasComment("Fecha y hora en que inició una persona  un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Examen_Fecha_Inicio");
            entity.Property(e => e.ExamenPeriodoSecuencia).HasColumnName("Examen_Periodo_Secuencia");
            entity.Property(e => e.ExamenPreguntas).HasColumnName("Examen_Preguntas");
            entity.Property(e => e.ExamenPuntuacion)
                .HasComment("Representa la puntuación obtenida por un Promotor de Saludral finalizar su exámen.")
                .HasColumnName("Examen_Puntuacion");
            entity.Property(e => e.ExamenPuntuacionMinima).HasColumnName("Examen_Puntuacion_Minima");
            entity.Property(e => e.ExamenReciboSerial)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Serial generado para un recibo de resultado de un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Recibo_Serial");
            entity.Property(e => e.ExamenTiempoMinutos)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Tiempo_Minutos");
            entity.Property(e => e.ExamenTiempoSegundos)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Tiempo_Segundos");
            entity.Property(e => e.HorarioNumero).HasColumnName("Horario_Numero");
            entity.Property(e => e.PeriodoNumero)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Periodo_Numero");
            entity.Property(e => e.ProfesionalEstadoNumero)
                .HasComment("Indica el Estatus del Promotor, solo aplica para los estados 0 = No Acreditado y 1 = Acreditado, va a depender de si el promotor aprueba o no.")
                .HasColumnName("Profesional_Estado_Numero");
            entity.Property(e => e.ProfesionalNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ExamenNumeroNavigation).WithMany(p => p.ProfesionalesExamenesHistoricos)
                .HasForeignKey(d => d.ExamenNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Examenes_Historico_Profesionales_Examenes_Trans");
        });

        modelBuilder.Entity<ProfesionalesExamenesHorariosCatum>(entity =>
        {
            entity.HasKey(e => e.HorarioNumero);

            entity.ToTable("Profesionales_Examenes_Horarios_Cata");

            entity.Property(e => e.HorarioNumero).HasColumnName("Horario_Numero");
            entity.Property(e => e.HorarioDetalle)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Horario_Detalle");
            entity.Property(e => e.HorarioInicia).HasColumnName("Horario_Inicia");
            entity.Property(e => e.HorarioTermina).HasColumnName("Horario_Termina");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProfesionalesExamenesRequerimientosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.ExamenNumero, e.RequerimientoNumero, e.RegistroFecha });

            entity.ToTable("Profesionales_Examenes_Requerimientos_Historico");

            entity.Property(e => e.ExamenNumero)
                .HasComment("Número único que identifica cada examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Numero");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
        });

        modelBuilder.Entity<ProfesionalesExamenesRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.ExamenNumero, e.RequerimientoNumero });

            entity.ToTable("Profesionales_Examenes_Requerimientos_Trans");

            entity.Property(e => e.ExamenNumero)
                .HasComment("Número único que identifica cada examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Numero");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Estado_Fecha");
            entity.Property(e => e.RequerimientoEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Nota");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoObservacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Observación de un requerimiento (Documento, Identificación, otros), presentado por una persona o entidad  para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Observacion");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.ExamenNumeroNavigation).WithMany(p => p.ProfesionalesExamenesRequerimientosTrans)
                .HasForeignKey(d => d.ExamenNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Examenes_Requerimientos_Trans_Profesional_Examenes_Trans");
        });

        modelBuilder.Entity<ProfesionalesExamenesTran>(entity =>
        {
            entity.HasKey(e => e.ExamenNumero).HasName("PK_Profesional_Examenes_Trans");

            entity.ToTable("Profesionales_Examenes_Trans");

            entity.Property(e => e.ExamenNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que identifica cada examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Numero");
            entity.Property(e => e.DisposicionNumero)
                .HasDefaultValueSql("((0))")
                .HasColumnName("Disposicion_Numero");
            entity.Property(e => e.ExamenEstadoNumero).HasColumnName("Examen_Estado_Numero");
            entity.Property(e => e.ExamenFechaFinal)
                .HasComment("Fecha y hora en que terminó una persona  un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Examen_Fecha_Final");
            entity.Property(e => e.ExamenFechaInicio)
                .HasComment("Fecha y hora en que inició una persona  un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Examen_Fecha_Inicio");
            entity.Property(e => e.ExamenPeriodoSecuencia).HasColumnName("Examen_Periodo_Secuencia");
            entity.Property(e => e.ExamenPreguntas).HasColumnName("Examen_Preguntas");
            entity.Property(e => e.ExamenPuntuacion)
                .HasComment("Representa la puntuación obtenida por un Promotor de Saludral finalizar su exámen.")
                .HasColumnName("Examen_Puntuacion");
            entity.Property(e => e.ExamenPuntuacionMinima)
                .HasDefaultValueSql("((70))")
                .HasColumnName("Examen_Puntuacion_Minima");
            entity.Property(e => e.ExamenReciboSerial)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasComment("Serial generado para un recibo de resultado de un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Recibo_Serial");
            entity.Property(e => e.ExamenTiempoMinutos)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Tiempo_Minutos");
            entity.Property(e => e.ExamenTiempoSegundos)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Tiempo_Segundos");
            entity.Property(e => e.HorarioNumero).HasColumnName("Horario_Numero");
            entity.Property(e => e.PeriodoNumero)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Periodo_Numero");
            entity.Property(e => e.ProfesionalEstadoNumero)
                .HasComment("Indica el Estatus del Promotor, solo aplica para los estados 0 = No Acreditado y 1 = Acreditado, va a depender de si el promotor aprueba o no.")
                .HasColumnName("Profesional_Estado_Numero");
            entity.Property(e => e.ProfesionalNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ExamenEstadoNumeroNavigation).WithMany(p => p.ProfesionalesExamenesTrans)
                .HasForeignKey(d => d.ExamenEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesional_Examenes_Trans_Profesionales_Examenes_Estados_Cata");

            entity.HasOne(d => d.HorarioNumeroNavigation).WithMany(p => p.ProfesionalesExamenesTrans)
                .HasForeignKey(d => d.HorarioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesional_Examenes_Trans_Profesionales_Examenes_Horarios_Cata");

            entity.HasOne(d => d.PeriodoNumeroNavigation).WithMany(p => p.ProfesionalesExamenesTrans)
                .HasForeignKey(d => d.PeriodoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesional_Examenes_Trans_Profesionales_Periodos_Master");

            entity.HasOne(d => d.ProfesionalNumeroNavigation).WithMany(p => p.ProfesionalesExamenesTrans)
                .HasForeignKey(d => d.ProfesionalNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesional_Examenes_Trans_Profesionales_Master");
        });

        modelBuilder.Entity<ProfesionalesExperienciasTiposTran>(entity =>
        {
            entity.HasKey(e => e.ExperienciaTipoNumero);

            entity.ToTable("Profesionales_Experiencias_Tipos_Trans");

            entity.Property(e => e.ExperienciaTipoNumero).HasColumnName("Experiencia_Tipo_Numero");
            entity.Property(e => e.ExperienciaTipoDescripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Es la descripción del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Experiencia_Tipo_Descripcion");
            entity.Property(e => e.ExperienciaTipoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Es la explicación del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Experiencia_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProfesionalesExperienciasTran>(entity =>
        {
            entity.HasKey(e => new { e.ProfesionalNumero, e.ExperienciaTipoNumero });

            entity.ToTable("Profesionales_Experiencias_Trans");

            entity.Property(e => e.ProfesionalNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.ExperienciaTipoNumero).HasColumnName("Experiencia_Tipo_Numero");
            entity.Property(e => e.ExperienciaLabor)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Experiencia_Labor");
            entity.Property(e => e.ExperienciaLaborAnios).HasColumnName("Experiencia_Labor_Anios");
            entity.Property(e => e.ExperienciaLaborMeses).HasColumnName("Experiencia_Labor_Meses");
            entity.Property(e => e.ExperienciaLaboraActualmente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Experiencia_Labora_Actualmente");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ExperienciaTipoNumeroNavigation).WithMany(p => p.ProfesionalesExperienciasTrans)
                .HasForeignKey(d => d.ExperienciaTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Experiencias_Trans_Profesionales_Experiencias_Tipos_Trans");

            entity.HasOne(d => d.ProfesionalNumeroNavigation).WithMany(p => p.ProfesionalesExperienciasTrans)
                .HasForeignKey(d => d.ProfesionalNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Experiencias_Trans_Profesionales_Master");
        });

        modelBuilder.Entity<ProfesionalesHistorico>(entity =>
        {
            entity.HasKey(e => new { e.ProfesionalNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Historico");

            entity.Property(e => e.ProfesionalNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.NacionalidadNumero)
                .HasComment("Número único que representa la nacionalidad de la persona o afiliado.")
                .HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.ProfesionalAcreditadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Profesional_Acreditado_Fecha");
            entity.Property(e => e.ProfesionalAuditor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Profesional_Auditor");
            entity.Property(e => e.ProfesionalAuditorAcreditadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Profesional_Auditor_Acreditado_Fecha");
            entity.Property(e => e.ProfesionalDireccion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Profesional_Direccion");
            entity.Property(e => e.ProfesionalDocumento)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Profesional_Documento");
            entity.Property(e => e.ProfesionalEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Profesional_Estado_Fecha");
            entity.Property(e => e.ProfesionalEstadoNumero).HasColumnName("Profesional_Estado_Numero");
            entity.Property(e => e.ProfesionalExequatur)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de Exequátur del Médico.")
                .HasColumnName("Profesional_Exequatur");
            entity.Property(e => e.ProfesionalMail)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Profesional_Mail");
            entity.Property(e => e.ProfesionalNombreCompleto)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Es nombre completo (Nombres  y Apellidos) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Profesional_Nombre_Completo");
            entity.Property(e => e.ProfesionalNss).HasColumnName("Profesional_NSS");
            entity.Property(e => e.ProfesionalSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sexo de la persona (Afiliado)  (F=femenino, M=masculino).")
                .HasColumnName("Profesional_Sexo");
            entity.Property(e => e.ProfesionalTelefono1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Profesional_Telefono_1");
            entity.Property(e => e.ProfesionalTelefono2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Profesional_Telefono_2");
            entity.Property(e => e.ProfesionalTelefono3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Profesional_Telefono_3");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudAuditorNumero).HasColumnName("Solicitud_Auditor_Numero");
            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");

            entity.HasOne(d => d.ProfesionalNumeroNavigation).WithMany(p => p.ProfesionalesHistoricos)
                .HasForeignKey(d => d.ProfesionalNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Historico_Profesionales_Master");
        });

        modelBuilder.Entity<ProfesionalesLocalidadesTran>(entity =>
        {
            entity.HasKey(e => new { e.ProfesionalNumero, e.ProfesionalLocalidadSecuencia });

            entity.ToTable("Profesionales_Localidades_Trans");

            entity.Property(e => e.ProfesionalNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.ProfesionalLocalidadSecuencia)
                .ValueGeneratedOnAdd()
                .HasColumnName("Profesional_Localidad_Secuencia");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.ProfesionalLocalidadDetalle)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Profesional_Localidad_Detalle");
            entity.Property(e => e.ProfesionalLocalidadDireccion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Profesional_Localidad_Direccion");
            entity.Property(e => e.ProfesionalLocalidadPrestadoraNombre)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/A')")
                .HasColumnName("Profesional_Localidad_Prestadora_Nombre");
            entity.Property(e => e.ProfesionalLocalidadTelefono1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Profesional_Localidad_Telefono_1");
            entity.Property(e => e.ProfesionalLocalidadTelefono2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Profesional_Localidad_Telefono_2");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ProfesionalNumeroNavigation).WithMany(p => p.ProfesionalesLocalidadesTrans)
                .HasForeignKey(d => d.ProfesionalNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Localidades_Trans_Profesionales_Master");
        });

        modelBuilder.Entity<ProfesionalesLocalidadesTransBak20160824>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Profesionales_Localidades_Trans_BAK20160824");

            entity.Property(e => e.MunicipioNumero).HasColumnName("Municipio_Numero");
            entity.Property(e => e.PrestadoraNumero).HasColumnName("Prestadora_Numero");
            entity.Property(e => e.ProfesionalAtencionTipoNumero).HasColumnName("Profesional_Atencion_Tipo_Numero");
            entity.Property(e => e.ProfesionalLocalidadConsultorio)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Profesional_Localidad_Consultorio");
            entity.Property(e => e.ProfesionalLocalidadDireccion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Profesional_Localidad_Direccion");
            entity.Property(e => e.ProfesionalLocalidadHorarioDomingo).HasColumnName("Profesional_Localidad_Horario_Domingo");
            entity.Property(e => e.ProfesionalLocalidadHorarioJueves).HasColumnName("Profesional_Localidad_Horario_Jueves");
            entity.Property(e => e.ProfesionalLocalidadHorarioLunes).HasColumnName("Profesional_Localidad_Horario_Lunes");
            entity.Property(e => e.ProfesionalLocalidadHorarioMartes).HasColumnName("Profesional_Localidad_Horario_Martes");
            entity.Property(e => e.ProfesionalLocalidadHorarioMiercoles).HasColumnName("Profesional_Localidad_Horario_Miercoles");
            entity.Property(e => e.ProfesionalLocalidadHorarioSabado).HasColumnName("Profesional_Localidad_Horario_Sabado");
            entity.Property(e => e.ProfesionalLocalidadHorarioViernes).HasColumnName("Profesional_Localidad_Horario_Viernes");
            entity.Property(e => e.ProfesionalLocalidadMensajes)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Profesional_Localidad_Mensajes");
            entity.Property(e => e.ProfesionalLocalidadSecuencia)
                .ValueGeneratedOnAdd()
                .HasColumnName("Profesional_Localidad_Secuencia");
            entity.Property(e => e.ProfesionalLocalidadServicios)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Profesional_Localidad_Servicios");
            entity.Property(e => e.ProfesionalLocalidadTelefono1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Profesional_Localidad_Telefono_1");
            entity.Property(e => e.ProfesionalLocalidadTelefono2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Profesional_Localidad_Telefono_2");
            entity.Property(e => e.ProfesionalNumero).HasColumnName("Profesional_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProfesionalesMaster>(entity =>
        {
            entity.HasKey(e => e.ProfesionalNumero);

            entity.ToTable("Profesionales_Master");

            entity.HasIndex(e => e.SolicitudNumero, "Idx_Profesionales_Master_Solicitud_Numero");

            entity.HasIndex(e => e.ProfesionalDocumento, "NonClusteredIndex-20160601-124457").IsUnique();

            entity.Property(e => e.ProfesionalNumero)
                .ValueGeneratedNever()
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.NacionalidadNumero)
                .HasComment("Número único que representa la nacionalidad de la persona o afiliado.")
                .HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.ProfesionalAcreditadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Profesional_Acreditado_Fecha");
            entity.Property(e => e.ProfesionalAuditor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Profesional_Auditor");
            entity.Property(e => e.ProfesionalAuditorAcreditadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Profesional_Auditor_Acreditado_Fecha");
            entity.Property(e => e.ProfesionalDireccion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Profesional_Direccion");
            entity.Property(e => e.ProfesionalDocumento)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Profesional_Documento");
            entity.Property(e => e.ProfesionalEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Profesional_Estado_Fecha");
            entity.Property(e => e.ProfesionalEstadoNumero).HasColumnName("Profesional_Estado_Numero");
            entity.Property(e => e.ProfesionalExequatur)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de Exequátur del Médico.")
                .HasColumnName("Profesional_Exequatur");
            entity.Property(e => e.ProfesionalMail)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Profesional_Mail");
            entity.Property(e => e.ProfesionalNombreCompleto)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Es nombre completo (Nombres  y Apellidos) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Profesional_Nombre_Completo");
            entity.Property(e => e.ProfesionalNss).HasColumnName("Profesional_NSS");
            entity.Property(e => e.ProfesionalSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sexo de la persona (Afiliado)  (F=femenino, M=masculino).")
                .HasColumnName("Profesional_Sexo");
            entity.Property(e => e.ProfesionalTelefono1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Profesional_Telefono_1");
            entity.Property(e => e.ProfesionalTelefono2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Profesional_Telefono_2");
            entity.Property(e => e.ProfesionalTelefono3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Profesional_Telefono_3");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudAuditorNumero).HasColumnName("Solicitud_Auditor_Numero");
            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");

            entity.HasOne(d => d.MunicipioNumeroNavigation).WithMany(p => p.ProfesionalesMasters)
                .HasForeignKey(d => d.MunicipioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Master_Comunes_Municipios_Cata");

            entity.HasOne(d => d.NacionalidadNumeroNavigation).WithMany(p => p.ProfesionalesMasters)
                .HasForeignKey(d => d.NacionalidadNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Master_TSS_Nacionalidades_Cata");

            entity.HasOne(d => d.ProfesionalEstadoNumeroNavigation).WithMany(p => p.ProfesionalesMasters)
                .HasForeignKey(d => d.ProfesionalEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Master_Profesionales_Estados_Cata");

            entity.HasOne(d => d.SolicitudAuditorNumeroNavigation).WithMany(p => p.ProfesionalesMasters)
                .HasForeignKey(d => d.SolicitudAuditorNumero)
                .HasConstraintName("FK_Profesionales_Master_Profesionales_Solicitudes_Auditores_Trans");

            entity.HasOne(d => d.SolicitudNumeroNavigation).WithMany(p => p.ProfesionalesMasters)
                .HasForeignKey(d => d.SolicitudNumero)
                .HasConstraintName("FK_Profesionales_Master_Profesionales_Solicitudes_Trans");
        });

        modelBuilder.Entity<ProfesionalesMotivosCatum>(entity =>
        {
            entity.HasKey(e => e.MotivoNumero);

            entity.ToTable("Profesionales_Motivos_Cata");

            entity.Property(e => e.MotivoNumero)
                .ValueGeneratedOnAdd()
                .HasColumnName("Motivo_Numero");
            entity.Property(e => e.MotivoAsociacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Motivo_Asociacion");
            entity.Property(e => e.MotivoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Motivo_Descripcion");
            entity.Property(e => e.MotivoEspecialidad)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Motivo_Especialidad");
            entity.Property(e => e.MotivoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Motivo_Explicacion");
            entity.Property(e => e.MotivoRequerimiento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Motivo_Requerimiento");
            entity.Property(e => e.MotivoSolicitud)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Motivo_Solicitud");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProfesionalesPeriodosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PeriodoNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Periodos_Historico");

            entity.Property(e => e.PeriodoNumero)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Periodo_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.ExamenPreguntas).HasColumnName("Examen_Preguntas");
            entity.Property(e => e.ExamenPreguntasVencidos).HasColumnName("Examen_Preguntas_Vencidos");
            entity.Property(e => e.PeriodoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Estado en el que se encuentra un período específico de exámenes en los procesos de acreditación.")
                .HasColumnName("Periodo_Estado");
            entity.Property(e => e.PeriodoFechaFinal)
                .HasComment("Fecha en la que finaliza un período específico de exámenes en los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Periodo_Fecha_Final");
            entity.Property(e => e.PeriodoFechaInicio)
                .HasComment("Fecha en la que inicia un período específico de exámenes en los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Periodo_Fecha_Inicio");
            entity.Property(e => e.PeriodoHoraInicioExamen)
                .HasComment("Hora en la que debe iniciar un período específico de exámenes en los procesos de acreditación.")
                .HasColumnName("Periodo_Hora_Inicio_Examen");
            entity.Property(e => e.PeriodoObservacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Observación sobre un período específico de exámenes en los procesos de acreditación.")
                .HasColumnName("Periodo_Observacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PeriodoNumeroNavigation).WithMany(p => p.ProfesionalesPeriodosHistoricos)
                .HasForeignKey(d => d.PeriodoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Periodos_Historico_Profesionales_Periodos_Master");
        });

        modelBuilder.Entity<ProfesionalesPeriodosMaster>(entity =>
        {
            entity.HasKey(e => e.PeriodoNumero);

            entity.ToTable("Profesionales_Periodos_Master");

            entity.Property(e => e.PeriodoNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Periodo_Numero");
            entity.Property(e => e.ExamenPreguntas).HasColumnName("Examen_Preguntas");
            entity.Property(e => e.ExamenPreguntasVencidos).HasColumnName("Examen_Preguntas_Vencidos");
            entity.Property(e => e.PeriodoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Estado en el que se encuentra un período específico de exámenes en los procesos de acreditación.")
                .HasColumnName("Periodo_Estado");
            entity.Property(e => e.PeriodoFechaFinal)
                .HasComment("Fecha en la que finaliza un período específico de exámenes en los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Periodo_Fecha_Final");
            entity.Property(e => e.PeriodoFechaInicio)
                .HasComment("Fecha en la que inicia un período específico de exámenes en los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Periodo_Fecha_Inicio");
            entity.Property(e => e.PeriodoHoraInicioExamen)
                .HasComment("Hora en la que debe iniciar un período específico de exámenes en los procesos de acreditación.")
                .HasColumnName("Periodo_Hora_Inicio_Examen");
            entity.Property(e => e.PeriodoObservacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Observación sobre un período específico de exámenes en los procesos de acreditación.")
                .HasColumnName("Periodo_Observacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProfesionalesPreguntasCatum>(entity =>
        {
            entity.HasKey(e => e.PreguntaNumero);

            entity.ToTable("Profesionales_Preguntas_Cata");

            entity.Property(e => e.PreguntaNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.PreguntaDescripcion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasComment("Detalles de cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Descripcion");
            entity.Property(e => e.PreguntaObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Observacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProfesionalesPreguntasHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PreguntaNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Preguntas_Historico");

            entity.Property(e => e.PreguntaNumero)
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.PreguntaDescripcion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasComment("Detalles de cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Descripcion");
            entity.Property(e => e.PreguntaObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Observacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PreguntaNumeroNavigation).WithMany(p => p.ProfesionalesPreguntasHistoricos)
                .HasForeignKey(d => d.PreguntaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Preguntas_Historico_Profesionales_Preguntas_Cata");
        });

        modelBuilder.Entity<ProfesionalesPreguntasRespuestasCatum>(entity =>
        {
            entity.HasKey(e => new { e.PreguntaNumero, e.PreguntaRespuestaNumero });

            entity.ToTable("Profesionales_Preguntas_Respuestas_Cata");

            entity.Property(e => e.PreguntaNumero)
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.PreguntaRespuestaNumero).HasColumnName("Pregunta_Respuesta_Numero");
            entity.Property(e => e.PreguntaRespuestaDescripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasComment("Es el código (Letra) con la que se puede responder una pregunta específica en un examen de evaluación en un proceso de acreditación.")
                .HasColumnName("Pregunta_Respuesta_Descripcion");
            entity.Property(e => e.PreguntaRespuestaObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Respuesta_Observacion");
            entity.Property(e => e.PreguntaRespuestaValida).HasColumnName("Pregunta_Respuesta_Valida");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PreguntaNumeroNavigation).WithMany(p => p.ProfesionalesPreguntasRespuestasCata)
                .HasForeignKey(d => d.PreguntaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Preguntas_Respuestas_Cata_Profesionales_Preguntas_Cata");
        });

        modelBuilder.Entity<ProfesionalesPreguntasRespuestasHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PreguntaNumero, e.PreguntaRespuestaNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Preguntas_Respuestas_Historico");

            entity.Property(e => e.PreguntaNumero)
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.PreguntaRespuestaNumero).HasColumnName("Pregunta_Respuesta_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.PreguntaRespuestaDescripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasComment("Es el código (Letra) con la que se puede responder una pregunta específica en un examen de evaluación en un proceso de acreditación.")
                .HasColumnName("Pregunta_Respuesta_Descripcion");
            entity.Property(e => e.PreguntaRespuestaObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Respuesta_Observacion");
            entity.Property(e => e.PreguntaRespuestaValida).HasColumnName("Pregunta_Respuesta_Valida");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.Pregunta).WithMany(p => p.ProfesionalesPreguntasRespuestasHistoricos)
                .HasForeignKey(d => new { d.PreguntaNumero, d.PreguntaRespuestaNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Preguntas_Respuestas_Historico_Profesionales_Preguntas_Respuestas_Cata");
        });

        modelBuilder.Entity<ProfesionalesRequerimientosCataBk14102016>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Profesionales_Requerimientos_Cata_BK_14102016");

            entity.Property(e => e.AplicaNumero).HasColumnName("Aplica_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoAplicaRenovacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Aplica_Renovacion");
            entity.Property(e => e.RequerimientoDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Descripcion");
            entity.Property(e => e.RequerimientoFechaVencimiento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Fecha_Vencimiento");
            entity.Property(e => e.RequerimientoNumero).HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.RequerimientoObligatorio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Obligatorio");
            entity.Property(e => e.RequerimientoOrden).HasColumnName("Requerimiento_Orden");
        });

        modelBuilder.Entity<ProfesionalesRequerimientosCatum>(entity =>
        {
            entity.HasKey(e => e.RequerimientoNumero);

            entity.ToTable("Profesionales_Requerimientos_Cata");

            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.AplicaNumero).HasColumnName("Aplica_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoAplicaRenovacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Requerimiento_Aplica_Renovacion");
            entity.Property(e => e.RequerimientoDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Descripción del requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Descripcion");
            entity.Property(e => e.RequerimientoFechaVencimiento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Fecha_Vencimiento");
            entity.Property(e => e.RequerimientoObligatorio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Obligatorio");
            entity.Property(e => e.RequerimientoOrden)
                .HasComment("Número de orden en que debe aparecer los requerimiento para un personas o entidades, en relación a la categoría de acreditación en un proceso de acreditación.")
                .HasColumnName("Requerimiento_Orden");

            entity.HasOne(d => d.AplicaNumeroNavigation).WithMany(p => p.ProfesionalesRequerimientosCata)
                .HasForeignKey(d => d.AplicaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Requerimientos_Cata_Profesionales_Aplicables_Cata");
        });

        modelBuilder.Entity<ProfesionalesRequerimientosEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.RequerimientoEstadoNumero).HasName("PK_Profesional_Requerimientos_Estados_Cata");

            entity.ToTable("Profesionales_Requerimientos_Estados_Cata");

            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Descripcion");
            entity.Property(e => e.RequerimientoEstadoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Explicacion");
            entity.Property(e => e.RequerimientoEstadoMensaje)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Mensaje");
            entity.Property(e => e.RequerimientoEstadoNota)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Estado_Nota");
            entity.Property(e => e.RequerimientoEstadoPendiente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Estado_Pendiente");
        });

        modelBuilder.Entity<ProfesionalesRequerimientosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.ProfesionalNumero, e.RequerimientoNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Requerimientos_Historico");

            entity.Property(e => e.ProfesionalNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");

            entity.HasOne(d => d.ProfesionalesRequerimientosTran).WithMany(p => p.ProfesionalesRequerimientosHistoricos)
                .HasForeignKey(d => new { d.ProfesionalNumero, d.RequerimientoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Requerimientos_Historico_Profesionales_Requerimientos_Trans");
        });

        modelBuilder.Entity<ProfesionalesRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.ProfesionalNumero, e.RequerimientoNumero });

            entity.ToTable("Profesionales_Requerimientos_Trans");

            entity.Property(e => e.ProfesionalNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Profesional_Numero");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");

            entity.HasOne(d => d.ProfesionalNumeroNavigation).WithMany(p => p.ProfesionalesRequerimientosTrans)
                .HasForeignKey(d => d.ProfesionalNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Requerimientos_Trans_Profesionales_Master");

            entity.HasOne(d => d.RequerimientoNumeroNavigation).WithMany(p => p.ProfesionalesRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Requerimientos_Trans_Profesionales_Requerimientos_Cata");
        });

        modelBuilder.Entity<ProfesionalesSolicitudesAsociacionesHistorico>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudNumero, e.AsociacionRegistroPatronal, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Solicitudes_Asociaciones_Historico");

            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");
            entity.Property(e => e.AsociacionRegistroPatronal).HasColumnName("Asociacion_Registro_Patronal");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.AsociacionAsociadoEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Asociacion_Asociado_Estado_Fecha");
            entity.Property(e => e.AsociacionAsociadoEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Asociado_Estado_Nota");
            entity.Property(e => e.AsociacionAsociadoEstadoNumero).HasColumnName("Asociacion_Asociado_Estado_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.MotivoNumero).HasColumnName("Motivo_Numero");
            entity.Property(e => e.ProfesionalAsociacionCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Profesional_Asociacion_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ProfesionalesSolicitudesAsociacionesTran).WithMany(p => p.ProfesionalesSolicitudesAsociacionesHistoricos)
                .HasForeignKey(d => new { d.SolicitudNumero, d.AsociacionRegistroPatronal })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Asociaciones_Historico_Profesionales_Solicitudes_Asociaciones_Trans");
        });

        modelBuilder.Entity<ProfesionalesSolicitudesAsociacionesTran>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudNumero, e.AsociacionRegistroPatronal }).HasName("PK_Profesionales_Solicitudes_Asociaciones_Trans_1");

            entity.ToTable("Profesionales_Solicitudes_Asociaciones_Trans");

            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");
            entity.Property(e => e.AsociacionRegistroPatronal).HasColumnName("Asociacion_Registro_Patronal");
            entity.Property(e => e.AsociacionAsociadoEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Asociacion_Asociado_Estado_Fecha");
            entity.Property(e => e.AsociacionAsociadoEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Asociacion_Asociado_Estado_Nota");
            entity.Property(e => e.AsociacionAsociadoEstadoNumero).HasColumnName("Asociacion_Asociado_Estado_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.MotivoNumero).HasColumnName("Motivo_Numero");
            entity.Property(e => e.ProfesionalAsociacionCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Profesional_Asociacion_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AsociacionAsociadoEstadoNumeroNavigation).WithMany(p => p.ProfesionalesSolicitudesAsociacionesTrans)
                .HasForeignKey(d => d.AsociacionAsociadoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Asociaciones_Trans_Profesionales_Asociaciones_Estados_Cata");

            entity.HasOne(d => d.AsociacionRegistroPatronalNavigation).WithMany(p => p.ProfesionalesSolicitudesAsociacionesTrans)
                .HasForeignKey(d => d.AsociacionRegistroPatronal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Asociaciones_Trans_Profesionales_Asociaciones_Master");

            entity.HasOne(d => d.SolicitudNumeroNavigation).WithMany(p => p.ProfesionalesSolicitudesAsociacionesTrans)
                .HasForeignKey(d => d.SolicitudNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Asociaciones_Trans_Profesionales_Solicitudes_Trans");
        });

        modelBuilder.Entity<ProfesionalesSolicitudesEspecialidadesHistorico>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudNumero, e.EspecialidadNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Solicitudes_Especialidades_Historico");

            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");
            entity.Property(e => e.EspecialidadNumero)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.EspecialidadEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Especialidad_Estado_Fecha");
            entity.Property(e => e.EspecialidadEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Especialidad_Estado_Nota");
            entity.Property(e => e.EspecialidadEstadoNumero).HasColumnName("Especialidad_Estado_Numero");
            entity.Property(e => e.EspecialidadPeriodo).HasColumnName("Especialidad_Periodo");
            entity.Property(e => e.MotivoNumero).HasColumnName("Motivo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ProfesionalesSolicitudesEspecialidadesTran).WithMany(p => p.ProfesionalesSolicitudesEspecialidadesHistoricos)
                .HasForeignKey(d => new { d.SolicitudNumero, d.EspecialidadNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Especialidades_Historico_Profesionales_Solicitudes_Especialidades_Trans");
        });

        modelBuilder.Entity<ProfesionalesSolicitudesEspecialidadesTran>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudNumero, e.EspecialidadNumero });

            entity.ToTable("Profesionales_Solicitudes_Especialidades_Trans");

            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");
            entity.Property(e => e.EspecialidadNumero)
                .HasComment("Numero de la especialidad médica. ")
                .HasColumnName("Especialidad_Numero");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.EspecialidadEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Especialidad_Estado_Fecha");
            entity.Property(e => e.EspecialidadEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Especialidad_Estado_Nota");
            entity.Property(e => e.EspecialidadEstadoNumero).HasColumnName("Especialidad_Estado_Numero");
            entity.Property(e => e.EspecialidadPeriodo).HasColumnName("Especialidad_Periodo");
            entity.Property(e => e.MotivoNumero).HasColumnName("Motivo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.EspecialidadEstadoNumeroNavigation).WithMany(p => p.ProfesionalesSolicitudesEspecialidadesTrans)
                .HasForeignKey(d => d.EspecialidadEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Especialidades_Trans_Profesionales_Especialidades_Estados_Cata");

            entity.HasOne(d => d.SolicitudNumeroNavigation).WithMany(p => p.ProfesionalesSolicitudesEspecialidadesTrans)
                .HasForeignKey(d => d.SolicitudNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Especialidades_Trans_Profesionales_Solicitudes_Trans");
        });

        modelBuilder.Entity<ProfesionalesSolicitudesEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.SolicitudEstadoNumero);

            entity.ToTable("Profesionales_Solicitudes_Estados_Cata");

            entity.Property(e => e.SolicitudEstadoNumero).HasColumnName("Solicitud_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudEstadoDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es la descripción del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Solicitud_Estado_Descripcion");
            entity.Property(e => e.SolicitudEstadoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Es la explicación del tipo de prestador de servicio de salud (PSS),  (Centros Diagnósticos Especializado, Centro Ambulatorio General, Hospital General, etc.).")
                .HasColumnName("Solicitud_Estado_Explicacion");
            entity.Property(e => e.SolicitudEstadoMensaje)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Estado_Mensaje");
            entity.Property(e => e.SolicitudEstadoNota)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Solicitud_Estado_Nota");
            entity.Property(e => e.SolicitudEstadoPendiente)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Solicitud_Estado_Pendiente");
        });

        modelBuilder.Entity<ProfesionalesSolicitudesHistorico>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Solicitudes_Historico");

            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.MotivoNumero).HasColumnName("Motivo_Numero");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.NacionalidadNumero)
                .HasComment("Número único que representa la nacionalidad de la persona o afiliado.")
                .HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.ProfesionalDireccion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Profesional_Direccion");
            entity.Property(e => e.ProfesionalDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Profesional_Documento");
            entity.Property(e => e.ProfesionalExequatur)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de Exequátur del Médico.")
                .HasColumnName("Profesional_Exequatur");
            entity.Property(e => e.ProfesionalMail)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Profesional_Mail");
            entity.Property(e => e.ProfesionalNombreCompleto)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Es nombre completo (Nombres  y Apellidos) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Profesional_Nombre_Completo");
            entity.Property(e => e.ProfesionalSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sexo de la persona (Afiliado)  (F=femenino, M=masculino).")
                .HasColumnName("Profesional_Sexo");
            entity.Property(e => e.ProfesionalTelefono1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Profesional_Telefono_1");
            entity.Property(e => e.ProfesionalTelefono2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Profesional_Telefono_2");
            entity.Property(e => e.ProfesionalTelefono3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Profesional_Telefono_3");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudActualizarDatos)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Solicitud_Actualizar_Datos");
            entity.Property(e => e.SolicitudCertificadoNumero)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Solicitud_Certificado_Numero");
            entity.Property(e => e.SolicitudEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Estado_Fecha");
            entity.Property(e => e.SolicitudEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Estado_Nota");
            entity.Property(e => e.SolicitudEstadoNumero).HasColumnName("Solicitud_Estado_Numero");
            entity.Property(e => e.SolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
            entity.Property(e => e.SolicitudUsuarioCuenta)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Usuario_Cuenta");

            entity.HasOne(d => d.SolicitudNumeroNavigation).WithMany(p => p.ProfesionalesSolicitudesHistoricos)
                .HasForeignKey(d => d.SolicitudNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Historico_Profesionales_Solicitudes_Trans");
        });

        modelBuilder.Entity<ProfesionalesSolicitudesLocalidadesTran>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudNumero, e.LocalidadSecuencia });

            entity.ToTable("Profesionales_Solicitudes_Localidades_Trans");

            entity.Property(e => e.SolicitudNumero)
                .HasComment("Número único de la Solicitud.")
                .HasColumnName("Solicitud_Numero");
            entity.Property(e => e.LocalidadSecuencia)
                .ValueGeneratedOnAdd()
                .HasColumnName("Localidad_Secuencia");
            entity.Property(e => e.LocalidadDetalle)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Localidad_Detalle");
            entity.Property(e => e.LocalidadDireccion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Localidad_Direccion");
            entity.Property(e => e.LocalidadPrestadoraNombre)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/A')")
                .HasColumnName("Localidad_Prestadora_Nombre");
            entity.Property(e => e.LocalidadTelefono1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Localidad_Telefono_1");
            entity.Property(e => e.LocalidadTelefono2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Localidad_Telefono_2");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProfesionalesSolicitudesRequerimientosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudNumero, e.RequerimientoNumero, e.RegistroFechaHistorico });

            entity.ToTable("Profesionales_Solicitudes_Requerimientos_Historico");

            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.MotivoNumero).HasColumnName("Motivo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Estado_Fecha");
            entity.Property(e => e.RequerimientoEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Nota");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.ProfesionalesSolicitudesRequerimientosTran).WithMany(p => p.ProfesionalesSolicitudesRequerimientosHistoricos)
                .HasForeignKey(d => new { d.SolicitudNumero, d.RequerimientoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Requerimientos_Historico_Profesionales_Solicitudes_Requerimientos_Trans");
        });

        modelBuilder.Entity<ProfesionalesSolicitudesRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudNumero, e.RequerimientoNumero });

            entity.ToTable("Profesionales_Solicitudes_Requerimientos_Trans");

            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.MotivoNumero).HasColumnName("Motivo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Estado_Fecha");
            entity.Property(e => e.RequerimientoEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Nota");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.RequerimientoEstadoNumeroNavigation).WithMany(p => p.ProfesionalesSolicitudesRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Requerimientos_Trans_Profesionales_Requerimientos_Estados_Cata");

            entity.HasOne(d => d.RequerimientoNumeroNavigation).WithMany(p => p.ProfesionalesSolicitudesRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Requerimientos_Trans_Profesionales_Requerimientos_Cata");

            entity.HasOne(d => d.SolicitudNumeroNavigation).WithMany(p => p.ProfesionalesSolicitudesRequerimientosTrans)
                .HasForeignKey(d => d.SolicitudNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Requerimientos_Trans_Profesionales_Solicitudes_Trans");
        });

        modelBuilder.Entity<ProfesionalesSolicitudesTran>(entity =>
        {
            entity.HasKey(e => e.SolicitudNumero);

            entity.ToTable("Profesionales_Solicitudes_Trans");

            entity.HasIndex(e => e.ProfesionalDocumento, "NonClusteredIndex-20160602-153621").IsUnique();

            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");
            entity.Property(e => e.AsociacionRegistroPatronal).HasColumnName("Asociacion_Registro_Patronal");
            entity.Property(e => e.MotivoNumero).HasColumnName("Motivo_Numero");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.NacionalidadNumero)
                .HasComment("Número único que representa la nacionalidad de la persona o afiliado.")
                .HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.ProfesionalDireccion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Profesional_Direccion");
            entity.Property(e => e.ProfesionalDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Profesional_Documento");
            entity.Property(e => e.ProfesionalExequatur)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de Exequátur del Médico.")
                .HasColumnName("Profesional_Exequatur");
            entity.Property(e => e.ProfesionalMail)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Profesional_Mail");
            entity.Property(e => e.ProfesionalNombreCompleto)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Es nombre completo (Nombres  y Apellidos) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Profesional_Nombre_Completo");
            entity.Property(e => e.ProfesionalSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sexo de la persona (Afiliado)  (F=femenino, M=masculino).")
                .HasColumnName("Profesional_Sexo");
            entity.Property(e => e.ProfesionalTelefono1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Profesional_Telefono_1");
            entity.Property(e => e.ProfesionalTelefono2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Profesional_Telefono_2");
            entity.Property(e => e.ProfesionalTelefono3)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Profesional_Telefono_3");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudActualizarDatos)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Solicitud_Actualizar_Datos");
            entity.Property(e => e.SolicitudCertificadoNumero)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Solicitud_Certificado_Numero");
            entity.Property(e => e.SolicitudEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Estado_Fecha");
            entity.Property(e => e.SolicitudEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Estado_Nota");
            entity.Property(e => e.SolicitudEstadoNumero).HasColumnName("Solicitud_Estado_Numero");
            entity.Property(e => e.SolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
            entity.Property(e => e.SolicitudUsuarioCuenta)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Solicitud_Usuario_Cuenta");

            entity.HasOne(d => d.MunicipioNumeroNavigation).WithMany(p => p.ProfesionalesSolicitudesTrans)
                .HasForeignKey(d => d.MunicipioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Trans_Comunes_Municipios_Cata");

            entity.HasOne(d => d.NacionalidadNumeroNavigation).WithMany(p => p.ProfesionalesSolicitudesTrans)
                .HasForeignKey(d => d.NacionalidadNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Trans_TSS_Nacionalidades_Cata");

            entity.HasOne(d => d.SolicitudEstadoNumeroNavigation).WithMany(p => p.ProfesionalesSolicitudesTrans)
                .HasForeignKey(d => d.SolicitudEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Profesionales_Solicitudes_Trans_Profesionales_Solicitudes_Estados_Cata");
        });

        modelBuilder.Entity<PromotoresAgentesTiposCatum>(entity =>
        {
            entity.HasKey(e => e.AgenteTipoNumero);

            entity.ToTable("Promotores_Agentes_Tipos_Cata");

            entity.Property(e => e.AgenteTipoNumero)
                .HasComment("Número único que identifica el tipo de agente promotor (Local, Nacional).")
                .HasColumnName("Agente_Tipo_Numero");
            entity.Property(e => e.AgenteTipoDescripcion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Descripción  del tipo de agente promotor (Local, Nacional).")
                .HasColumnName("Agente_Tipo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PromotoresAltasLotesMaster>(entity =>
        {
            entity.HasKey(e => e.LoteNumero);

            entity.ToTable("Promotores_Altas_Lotes_Master");

            entity.Property(e => e.LoteNumero)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Lote_Numero");
            entity.Property(e => e.LoteFecha)
                .HasColumnType("datetime")
                .HasColumnName("Lote_Fecha");
            entity.Property(e => e.LoteNombreArchivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Lote_Nombre_Archivo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PromotoresAltasLotesTran>(entity =>
        {
            entity.HasKey(e => new { e.LoteNumero, e.PromotorCedula });

            entity.ToTable("Promotores_Altas_Lotes_Trans");

            entity.Property(e => e.LoteNumero)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Lote_Numero");
            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.PromotorLoteFecha)
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Lote_Fecha");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PromotoresDisposicionesTiposCatum>(entity =>
        {
            entity.HasKey(e => e.DisposicionTipoNumero);

            entity.ToTable("Promotores_Disposiciones_Tipos_Cata");

            entity.Property(e => e.DisposicionTipoNumero).HasColumnName("Disposicion_Tipo_Numero");
            entity.Property(e => e.DisposicionTipoDescripcion)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Disposicion_Tipo_Descripcion");
            entity.Property(e => e.DisposicionTipoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Disposicion_Tipo_Estado");
            entity.Property(e => e.DisposicionTipoExamenes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Disposicion_Tipo_Examenes");
            entity.Property(e => e.DisposicionTipoPromotor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Disposicion_Tipo_Promotor");
            entity.Property(e => e.DisposicionTipoPromotora)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Disposicion_Tipo_Promotora");
            entity.Property(e => e.DisposicionTipoRequerimientos)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Disposicion_Tipo_Requerimientos");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PromotoresDisposicionesTran>(entity =>
        {
            entity.HasKey(e => e.DisposicionNumero);

            entity.ToTable("Promotores_Disposiciones_Trans");

            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DisposicionDetalle)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Disposicion_Detalle");
            entity.Property(e => e.DisposicionFecha)
                .HasColumnType("datetime")
                .HasColumnName("Disposicion_Fecha");
            entity.Property(e => e.DisposicionTipoNumero).HasColumnName("Disposicion_Tipo_Numero");
            entity.Property(e => e.PeriodoNumero).HasColumnName("Periodo_Numero");
            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.PromotoraRnc)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Promotora_RNC");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.DisposicionTipoNumeroNavigation).WithMany(p => p.PromotoresDisposicionesTrans)
                .HasForeignKey(d => d.DisposicionTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Disposiciones_Trans_Promotores_Disposiciones_Tipos_Cata");
        });

        modelBuilder.Entity<PromotoresEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.PromotorEstadoNumero);

            entity.ToTable("Promotores_Estados_Cata");

            entity.Property(e => e.PromotorEstadoNumero).HasColumnName("Promotor_Estado_Numero");
            entity.Property(e => e.PromotorEstadoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Promotor_Estado_Codigo");
            entity.Property(e => e.PromotorEstadoConsulta)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Promotor_Estado_Consulta");
            entity.Property(e => e.PromotorEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Promotor_Estado_Descripcion");
            entity.Property(e => e.PromotorEstadoExplicacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Promotor_Estado_Explicacion");
            entity.Property(e => e.PromotorEstadoMotivo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Promotor_Estado_Motivo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PromotoresExamenesDetallesTran>(entity =>
        {
            entity.HasKey(e => new { e.ExamenNumero, e.PreguntaNumero, e.PreguntaRespuestaNumero });

            entity.ToTable("Promotores_Examenes_Detalles_Trans");

            entity.Property(e => e.ExamenNumero)
                .HasComment("Número único que identifica cada examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Numero");
            entity.Property(e => e.PreguntaNumero)
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.PreguntaRespuestaNumero).HasColumnName("Pregunta_Respuesta_Numero");
            entity.Property(e => e.PreguntaDescripcion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasComment("Detalles de cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Descripcion");
            entity.Property(e => e.PreguntaOrden).HasColumnName("Pregunta_Orden");
            entity.Property(e => e.PreguntaRespuestaDescripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasComment("Es el código (Letra) con la que se puede responder una pregunta específica en un examen de evaluación en un proceso de acreditación.")
                .HasColumnName("Pregunta_Respuesta_Descripcion");
            entity.Property(e => e.PreguntaRespuestaElegida)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si fue la respuesta elegida para una pregunta específica en un examen de evaluación en un proceso de acreditación.")
                .HasColumnName("Pregunta_Respuesta_Elegida");
            entity.Property(e => e.PreguntaRespuestaLetra)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el código (Letra) con la que se representa una respueta posible de una pregunta específica en un examen de evaluación en un proceso de acreditación.")
                .HasColumnName("Pregunta_Respuesta_Letra");
            entity.Property(e => e.PreguntaRespuestaValida)
                .HasComment("Indica si fue la respuesta elegida para una pregunta específica en un examen de evaluación en un proceso de acreditación.")
                .HasColumnName("Pregunta_Respuesta_Valida");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ExamenNumeroNavigation).WithMany(p => p.PromotoresExamenesDetallesTrans)
                .HasForeignKey(d => d.ExamenNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Examenes_Detalles_Trans_Promotores_Examenes_Trans");

            entity.HasOne(d => d.PreguntaNumeroNavigation).WithMany(p => p.PromotoresExamenesDetallesTrans)
                .HasForeignKey(d => d.PreguntaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Examenes_Detalles_Trans_Promotores_Preguntas_Cata");
        });

        modelBuilder.Entity<PromotoresExamenesEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.ExamenEstadoNumero);

            entity.ToTable("Promotores_Examenes_Estados_Cata");

            entity.Property(e => e.ExamenEstadoNumero).HasColumnName("Examen_Estado_Numero");
            entity.Property(e => e.ExamenEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Examen_Estado_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PromotoresExamenesHorariosCatum>(entity =>
        {
            entity.HasKey(e => e.HorarioNumero);

            entity.ToTable("Promotores_Examenes_Horarios_Cata");

            entity.Property(e => e.HorarioNumero)
                .ValueGeneratedOnAdd()
                .HasColumnName("Horario_Numero");
            entity.Property(e => e.HorarioDetalle)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Horario_Detalle");
            entity.Property(e => e.HorarioInicia).HasColumnName("Horario_Inicia");
            entity.Property(e => e.HorarioTermina).HasColumnName("Horario_Termina");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PromotoresExamenesRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.ExamenNumero, e.RequerimientoNumero });

            entity.ToTable("Promotores_Examenes_Requerimientos_Trans");

            entity.Property(e => e.ExamenNumero)
                .HasComment("Número único que identifica cada examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Numero");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoObservacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Observación de un requerimiento (Documento, Identificación, otros), presentado por una persona o entidad  para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Observacion");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.ExamenNumeroNavigation).WithMany(p => p.PromotoresExamenesRequerimientosTrans)
                .HasForeignKey(d => d.ExamenNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Examenes_Requerimientos_Trans_Promotores_Examenes_Trans");
        });

        modelBuilder.Entity<PromotoresExamenesTran>(entity =>
        {
            entity.HasKey(e => e.ExamenNumero);

            entity.ToTable("Promotores_Examenes_Trans");

            entity.HasIndex(e => new { e.PromotorCedula, e.PeriodoNumero }, "CK_Promotores_Examenes_Periodo_Cedula").IsUnique();

            entity.HasIndex(e => new { e.PeriodoNumero, e.ExamenPeriodoSecuencia }, "CK_Promotores_Examenes_Periodo_Periodo_Sec").IsUnique();

            entity.Property(e => e.ExamenNumero)
                .HasComment("Número único que identifica cada examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Numero");
            entity.Property(e => e.DisposicionNumero)
                .HasDefaultValueSql("((0))")
                .HasColumnName("Disposicion_Numero");
            entity.Property(e => e.ExamenEstadoNumero).HasColumnName("Examen_Estado_Numero");
            entity.Property(e => e.ExamenFechaFinal)
                .HasComment("Fecha y hora en que terminó una persona  un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Examen_Fecha_Final");
            entity.Property(e => e.ExamenFechaInicio)
                .HasComment("Fecha y hora en que inició una persona  un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Examen_Fecha_Inicio");
            entity.Property(e => e.ExamenPeriodoSecuencia).HasColumnName("Examen_Periodo_Secuencia");
            entity.Property(e => e.ExamenPreguntas).HasColumnName("Examen_Preguntas");
            entity.Property(e => e.ExamenPuntuacion)
                .HasComment("Representa la puntuación obtenida por un Promotor de Saludral finalizar su exámen.")
                .HasColumnName("Examen_Puntuacion");
            entity.Property(e => e.ExamenPuntuacionMinima)
                .HasDefaultValueSql("((70))")
                .HasColumnName("Examen_Puntuacion_Minima");
            entity.Property(e => e.ExamenReciboSerial)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasComment("Serial generado para un recibo de resultado de un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Recibo_Serial");
            entity.Property(e => e.ExamenTiempoMinutos)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Tiempo_Minutos");
            entity.Property(e => e.ExamenTiempoSegundos)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Tiempo_Segundos");
            entity.Property(e => e.HorarioNumero).HasColumnName("Horario_Numero");
            entity.Property(e => e.PeriodoNumero)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Periodo_Numero");
            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.PromotorEstadoNumero)
                .HasComment("Indica el Estatus del Promotor, solo aplica para los estados 0 = No Acreditado y 1 = Acreditado, va a depender de si el promotor aprueba o no.")
                .HasColumnName("Promotor_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ExamenEstadoNumeroNavigation).WithMany(p => p.PromotoresExamenesTrans)
                .HasForeignKey(d => d.ExamenEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Examenes_Trans_Promotores_Examenes_Estados_Cata");

            entity.HasOne(d => d.HorarioNumeroNavigation).WithMany(p => p.PromotoresExamenesTrans)
                .HasForeignKey(d => d.HorarioNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Examenes_Trans_Promotores_Examenes_Horarios_Cata");

            entity.HasOne(d => d.PeriodoNumeroNavigation).WithMany(p => p.PromotoresExamenesTrans)
                .HasForeignKey(d => d.PeriodoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Examenes_Trans_Promotores_Periodos_Master");

            entity.HasOne(d => d.PromotorCedulaNavigation).WithMany(p => p.PromotoresExamenesTrans)
                .HasForeignKey(d => d.PromotorCedula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Examenes_Trans_Promotores_Master");
        });

        modelBuilder.Entity<PromotoresHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PromotorCedula, e.RegistroFecha });

            entity.ToTable("Promotores_Historico");

            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.ArsNumeroAutorizo).HasColumnName("ARS_Numero_Autorizo");
            entity.Property(e => e.PromotorCorreoElectronico)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Promotor_Correo_Electronico");
            entity.Property(e => e.PromotorEstadoFecha)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Estado_Fecha");
            entity.Property(e => e.PromotorEstadoNumero).HasColumnName("Promotor_Estado_Numero");
            entity.Property(e => e.PromotorObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasColumnName("Promotor_Observacion");
            entity.Property(e => e.PromotoraRnc)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Promotora_RNC");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PromotorCedulaNavigation).WithMany(p => p.PromotoresHistoricos)
                .HasForeignKey(d => d.PromotorCedula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Historico_Promotores_Master");
        });

        modelBuilder.Entity<PromotoresMaster>(entity =>
        {
            entity.HasKey(e => e.PromotorCedula);

            entity.ToTable("Promotores_Master");

            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.AgenteTipoNumero)
                .HasComment("Número único que identifica el tipo de agente promotor (Local, Nacional).")
                .HasColumnName("Agente_Tipo_Numero");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.ArsNumeroAutorizo).HasColumnName("ARS_Numero_Autorizo");
            entity.Property(e => e.DisposicionNumero)
                .HasDefaultValueSql("((0))")
                .HasColumnName("Disposicion_Numero");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.NivelAcademicoNumero)
                .HasComment("Número único que identifica el nivel académico de la persona.")
                .HasColumnName("Nivel_Academico_Numero");
            entity.Property(e => e.PromotorCelular)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Numero de teléfono celular de la persona.")
                .HasColumnName("Promotor_Celular");
            entity.Property(e => e.PromotorCorreoElectronico)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasColumnName("Promotor_Correo_Electronico");
            entity.Property(e => e.PromotorDireccion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Dirección de  residencia de la persona.")
                .HasColumnName("Promotor_Direccion");
            entity.Property(e => e.PromotorEstadoFecha)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Estado_Fecha");
            entity.Property(e => e.PromotorEstadoMotivo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasColumnName("Promotor_Estado_Motivo");
            entity.Property(e => e.PromotorEstadoNumero).HasColumnName("Promotor_Estado_Numero");
            entity.Property(e => e.PromotorFechaAcreditacion)
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Fecha_Acreditacion");
            entity.Property(e => e.PromotorFechaVencimiento)
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Fecha_Vencimiento");
            entity.Property(e => e.PromotorNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Promotor_NSS");
            entity.Property(e => e.PromotorObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasColumnName("Promotor_Observacion");
            entity.Property(e => e.PromotorTelefono)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de teléfono de la persona..")
                .HasColumnName("Promotor_Telefono");
            entity.Property(e => e.PromotoraRnc)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotora_RNC");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AgenteTipoNumeroNavigation).WithMany(p => p.PromotoresMasters)
                .HasForeignKey(d => d.AgenteTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Master_Promotores_Agentes_Tipos_Cata");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.PromotoresMasters)
                .HasForeignKey(d => d.ArsNumero)
                .HasConstraintName("FK_Promotores_Master_ARS_Master");

            entity.HasOne(d => d.NivelAcademicoNumeroNavigation).WithMany(p => p.PromotoresMasters)
                .HasForeignKey(d => d.NivelAcademicoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Master_Comunes_Niveles_Academicos_Cata");

            entity.HasOne(d => d.PromotorEstadoNumeroNavigation).WithMany(p => p.PromotoresMasters)
                .HasForeignKey(d => d.PromotorEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Master_Promotores_Estados_Cata");

            entity.HasOne(d => d.PromotorNssNavigation).WithMany(p => p.PromotoresMasters)
                .HasForeignKey(d => d.PromotorNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Master_TSS_Ciudadanos_Master");

            entity.HasOne(d => d.PromotoraRncNavigation).WithMany(p => p.PromotoresMasters)
                .HasForeignKey(d => d.PromotoraRnc)
                .HasConstraintName("FK_Promotores_Master_Promotores_Promotoras_Master");
        });

        modelBuilder.Entity<PromotoresParametrosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.ParametroNombre, e.RegistroFecha });

            entity.ToTable("Promotores_Parametros_Historico");

            entity.Property(e => e.ParametroNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Parametro_Nombre");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.ParametroDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Parametro_Descripcion");
            entity.Property(e => e.ParametroTexto)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Parametro_Texto");
            entity.Property(e => e.ParametroValor).HasColumnName("Parametro_Valor");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ParametroNombreNavigation).WithMany(p => p.PromotoresParametrosHistoricos)
                .HasForeignKey(d => d.ParametroNombre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Parametros_Historico_Promotores_Parametros_Trans");
        });

        modelBuilder.Entity<PromotoresParametrosTran>(entity =>
        {
            entity.HasKey(e => e.ParametroNombre);

            entity.ToTable("Promotores_Parametros_Trans");

            entity.Property(e => e.ParametroNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Parametro_Nombre");
            entity.Property(e => e.ParametroDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Parametro_Descripcion");
            entity.Property(e => e.ParametroTexto)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Parametro_Texto");
            entity.Property(e => e.ParametroValor).HasColumnName("Parametro_Valor");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PromotoresPeriodosMaster>(entity =>
        {
            entity.HasKey(e => e.PeriodoNumero);

            entity.ToTable("Promotores_Periodos_Master");

            entity.Property(e => e.PeriodoNumero)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Periodo_Numero");
            entity.Property(e => e.ExamenPreguntas).HasColumnName("Examen_Preguntas");
            entity.Property(e => e.ExamenPreguntasVencidos).HasColumnName("Examen_Preguntas_Vencidos");
            entity.Property(e => e.PeriodoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Estado en el que se encuentra un período específico de exámenes en los procesos de acreditación.")
                .HasColumnName("Periodo_Estado");
            entity.Property(e => e.PeriodoFechaFinal)
                .HasComment("Fecha en la que finaliza un período específico de exámenes en los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Periodo_Fecha_Final");
            entity.Property(e => e.PeriodoFechaInicio)
                .HasComment("Fecha en la que inicia un período específico de exámenes en los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Periodo_Fecha_Inicio");
            entity.Property(e => e.PeriodoHoraInicioExamen)
                .HasComment("Hora en la que debe iniciar un período específico de exámenes en los procesos de acreditación.")
                .HasColumnName("Periodo_Hora_Inicio_Examen");
            entity.Property(e => e.PeriodoObservacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Observación sobre un período específico de exámenes en los procesos de acreditación.")
                .HasColumnName("Periodo_Observacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PromotoresPreguntasCatum>(entity =>
        {
            entity.HasKey(e => e.PreguntaNumero);

            entity.ToTable("Promotores_Preguntas_Cata");

            entity.Property(e => e.PreguntaNumero)
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.PreguntaDescripcion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasComment("Detalles de cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Descripcion");
            entity.Property(e => e.PreguntaObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Observacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PromotoresPreguntasHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PreguntaNumero, e.RegistroFecha });

            entity.ToTable("Promotores_Preguntas_Historico");

            entity.Property(e => e.PreguntaNumero)
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.PreguntaDescripcion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasComment("Detalles de cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Descripcion");
            entity.Property(e => e.PreguntaObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Observacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PreguntaNumeroNavigation).WithMany(p => p.PromotoresPreguntasHistoricos)
                .HasForeignKey(d => d.PreguntaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Preguntas_Historico_Promotores_Preguntas_Cata");
        });

        modelBuilder.Entity<PromotoresPreguntasRespuestasCatum>(entity =>
        {
            entity.HasKey(e => new { e.PreguntaNumero, e.PreguntaRespuestaNumero });

            entity.ToTable("Promotores_Preguntas_Respuestas_Cata");

            entity.Property(e => e.PreguntaNumero)
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.PreguntaRespuestaNumero)
                .ValueGeneratedOnAdd()
                .HasColumnName("Pregunta_Respuesta_Numero");
            entity.Property(e => e.PreguntaRespuestaDescripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasComment("Es el código (Letra) con la que se puede responder una pregunta específica en un examen de evaluación en un proceso de acreditación.")
                .HasColumnName("Pregunta_Respuesta_Descripcion");
            entity.Property(e => e.PreguntaRespuestaObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Respuesta_Observacion");
            entity.Property(e => e.PreguntaRespuestaValida).HasColumnName("Pregunta_Respuesta_Valida");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PreguntaNumeroNavigation).WithMany(p => p.PromotoresPreguntasRespuestasCata)
                .HasForeignKey(d => d.PreguntaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Preguntas_Respuestas_Cata_Promotores_Preguntas_Cata");
        });

        modelBuilder.Entity<PromotoresPreguntasRespuestasHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PreguntaNumero, e.PreguntaRespuestaNumero, e.RegistroFecha });

            entity.ToTable("Promotores_Preguntas_Respuestas_Historico");

            entity.Property(e => e.PreguntaNumero)
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.PreguntaRespuestaNumero).HasColumnName("Pregunta_Respuesta_Numero");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.PreguntaRespuestaDescripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasComment("Es el código (Letra) con la que se puede responder una pregunta específica en un examen de evaluación en un proceso de acreditación.")
                .HasColumnName("Pregunta_Respuesta_Descripcion");
            entity.Property(e => e.PreguntaRespuestaObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Respuesta_Observacion");
            entity.Property(e => e.PreguntaRespuestaValida).HasColumnName("Pregunta_Respuesta_Valida");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.Pregunta).WithMany(p => p.PromotoresPreguntasRespuestasHistoricos)
                .HasForeignKey(d => new { d.PreguntaNumero, d.PreguntaRespuestaNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Preguntas_Respuestas_Historico_Promotores_Preguntas_Respuestas_Cata");
        });

        modelBuilder.Entity<PromotoresPreguntasRespuestasLetrasCatum>(entity =>
        {
            entity.HasKey(e => e.LetraNumero);

            entity.ToTable("Promotores_Preguntas_Respuestas_Letras_Cata");

            entity.HasIndex(e => e.LetraLetra, "Idx_Promotores_Preguntas_Respuestas_Letras_Cata_Letra").IsUnique();

            entity.Property(e => e.LetraNumero).HasColumnName("Letra_Numero");
            entity.Property(e => e.LetraLetra)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Letra_Letra");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PromotoresPromotorasHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PromotoraRnc, e.RegistroFecha });

            entity.ToTable("Promotores_Promotoras_Historico");

            entity.Property(e => e.PromotoraRnc)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotora_RNC");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.PromotorEstadoFecha)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Estado_Fecha");
            entity.Property(e => e.PromotorEstadoMotivo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Promotor_Estado_Motivo");
            entity.Property(e => e.PromotorEstadoNumero).HasColumnName("Promotor_Estado_Numero");
            entity.Property(e => e.PromotoraFechaAcreditacion)
                .HasDefaultValueSql("(((1)/(1))/(1900))")
                .HasComment("Fecha en la que se aprobó una entidad en los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Promotora_Fecha_Acreditacion");
            entity.Property(e => e.PromotoraRegistroPatronal)
                .HasComment("Es el número único que le asigna la Tesorería de la Seguridad Social a cada uno de los empleadores que se registran en dicha institución.    ")
                .HasColumnName("Promotora_Registro_Patronal");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PromotoraRncNavigation).WithMany(p => p.PromotoresPromotorasHistoricos)
                .HasForeignKey(d => d.PromotoraRnc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Promotoras_Historico_Promotores_Promotoras_Master");
        });

        modelBuilder.Entity<PromotoresPromotorasMaster>(entity =>
        {
            entity.HasKey(e => e.PromotoraRnc);

            entity.ToTable("Promotores_Promotoras_Master");

            entity.Property(e => e.PromotoraRnc)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotora_RNC");
            entity.Property(e => e.PromotorEstadoFecha)
                .HasDefaultValueSql("((0))")
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Estado_Fecha");
            entity.Property(e => e.PromotorEstadoMotivo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Promotor_Estado_Motivo");
            entity.Property(e => e.PromotorEstadoNumero).HasColumnName("Promotor_Estado_Numero");
            entity.Property(e => e.PromotoraFechaAcreditacion)
                .HasDefaultValueSql("(((1)/(1))/(1900))")
                .HasComment("Fecha en la que se aprobó una entidad en los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Promotora_Fecha_Acreditacion");
            entity.Property(e => e.PromotoraRegistroPatronal)
                .HasComment("Es el número único que le asigna la Tesorería de la Seguridad Social a cada uno de los empleadores que se registran en dicha institución.    ")
                .HasColumnName("Promotora_Registro_Patronal");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PromotorEstadoNumeroNavigation).WithMany(p => p.PromotoresPromotorasMasters)
                .HasForeignKey(d => d.PromotorEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Promotoras_Master_Promotores_Estados_Cata");

            entity.HasOne(d => d.PromotoraRegistroPatronalNavigation).WithMany(p => p.PromotoresPromotorasMasters)
                .HasForeignKey(d => d.PromotoraRegistroPatronal)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Entidades_Master_TSS_Empleadores_Master");
        });

        modelBuilder.Entity<PromotoresPromotorasRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.PromotoraRnc, e.RequerimientoNumero });

            entity.ToTable("Promotores_Promotoras_Requerimientos_Trans");

            entity.Property(e => e.PromotoraRnc)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotora_RNC");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.DocumentoRuta)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("Es la ruta del servidor y carpeta donde se encuentra almacenado el documento.")
                .HasColumnName("Documento_Ruta");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoObservacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Observación de un requerimiento (Documento, Identificación, otros), presentado por una persona o entidad  para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Observacion");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.PromotoraRncNavigation).WithMany(p => p.PromotoresPromotorasRequerimientosTrans)
                .HasForeignKey(d => d.PromotoraRnc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Promotoras_Requerimientos_Trans_Promotores_Promotoras_Master");

            entity.HasOne(d => d.RequerimientoEstadoNumeroNavigation).WithMany(p => p.PromotoresPromotorasRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Promotoras_Requerimientos_Trans_Promotores_Requerimientos_Estados_Cata");
        });

        modelBuilder.Entity<PromotoresPromotorasVistum>(entity =>
        {
            entity.HasKey(e => e.PromotorNss);

            entity.ToTable("Promotores_Promotoras_Vista", tb => tb.HasComment("Es una vista con los datos de los Promotores que participan en los procesos de Acreditación de Promotores de Salud, Sistema Promotores de Salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PromotorNss)
                .ValueGeneratedNever()
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Promotor_Nss");
            entity.Property(e => e.ArsNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nombre de la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Nombre");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.EntidadNumero)
                .HasComment("Número único que identifica cada entidad en los procesos de acreditación.")
                .HasColumnName("Entidad_Numero");
            entity.Property(e => e.ExamenFechaFinal)
                .HasComment("Fecha y hora en que terminó una persona  un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Examen_Fecha_Final");
            entity.Property(e => e.ExamenFechaInicio)
                .HasComment("Fecha y hora en que inició una persona  un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Examen_Fecha_Inicio");
            entity.Property(e => e.ExamenNumero)
                .HasComment("Número único que identifica cada examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Numero");
            entity.Property(e => e.ExamenResultado)
                .HasComment("Calificación numérica obtenido por la persona en un examen en la actividad de evaluación de los procesos de acreditación.")
                .HasColumnName("Examen_Resultado");
            entity.Property(e => e.NivelAcademicoDescripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Descripción del nivel académico de la persona.")
                .HasColumnName("Nivel_Academico_Descripcion");
            entity.Property(e => e.NivelAcademicoNumero)
                .HasComment("Número único que identifica el nivel académico de la persona.")
                .HasColumnName("Nivel_Academico_Numero");
            entity.Property(e => e.PeriodoNumero)
                .HasComment("Número único que identifica un período (Rango de fecha) en el cual se procedió a habilitar la toma de exámenes en las actividades de evaluación de los procesos de acreditación.")
                .HasColumnName("Periodo_Numero");
            entity.Property(e => e.PromotorCategoriaClaseDescripcion)
                .HasMaxLength(28)
                .IsUnicode(false)
                .HasComment("Es la descripción de la conjugación de una clase y categoría en el proceso de acreditación.")
                .HasColumnName("Promotor_Categoria_Clase_Descripcion");
            entity.Property(e => e.PromotorCategoriaDescripcion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Descripción  de la categoría de acreditación a ser otorgada (Auditor, Promotor, Promotora, Firma Auditoria etc.).")
                .HasColumnName("Promotor_Categoria_Descripcion");
            entity.Property(e => e.PromotorCategoriaNumero)
                .HasComment("Número único que identifica la categoría de acreditación a ser otorgada (Auditor, Promotor, Promotora, Firma Auditoria etc.).")
                .HasColumnName("Promotor_Categoria_Numero");
            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es la cédula de identidad y electoral del ciudadano con el formato que incluye los guiones.")
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.PromotorCedulaFormateada)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasComment("Es la cédula de identidad y electoral del ciudadano con el formato que incluye los guiones.")
                .HasColumnName("Promotor_Cedula_Formateada");
            entity.Property(e => e.PromotorClaseDescripcion)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasComment("Descripción de que quien se está acreditando es una persona o entidad.")
                .HasColumnName("Promotor_Clase_Descripcion");
            entity.Property(e => e.PromotorClaseNumero)
                .HasComment("Número único que identifica que quien se está acreditando es una persona o entidad.")
                .HasColumnName("Promotor_Clase_Numero");
            entity.Property(e => e.PromotorEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del estado en que se encuentra la licencia de un promotor o promotora de salud")
                .HasColumnName("Promotor_Estado_Descripcion");
            entity.Property(e => e.PromotorEstadoNumero)
                .HasComment("Número único que identifica cada estado en que se encuentra la licencia de un promotor o promotora de salud")
                .HasColumnName("Promotor_Estado_Numero");
            entity.Property(e => e.PromotorFechaAcreditacion)
                .HasComment("Fecha en que fue aprobada la primera licencia del promotor")
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Fecha_Acreditacion");
            entity.Property(e => e.PromotorFechaRenovacion)
                .HasComment("Fecha en que debe renovar su licencia el promotor")
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Fecha_Renovacion");
            entity.Property(e => e.PromotorFechaVencimiento)
                .HasComment("Fecha en que vence la licencia el promotor")
                .HasColumnType("datetime")
                .HasColumnName("Promotor_Fecha_Vencimiento");
            entity.Property(e => e.PromotorNombreCompleto)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Es nombre completo (Nombres  y Apellidos) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Promotor_Nombre_Completo");
            entity.Property(e => e.PromotorObservacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Observaciones realizadas en el registro de un promotor")
                .HasColumnName("Promotor_Observacion");
            entity.Property(e => e.PromotorRepresentaPromotora)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("Indica si el promotor es representante de la promotora")
                .HasColumnName("Promotor_Representa_Promotora");
            entity.Property(e => e.PromotoraFechaAcreditacion)
                .HasComment("Fecha en la que se aprobó una entidad en los procesos de acreditación.")
                .HasColumnType("datetime")
                .HasColumnName("Promotora_Fecha_Acreditacion");
            entity.Property(e => e.PromotoraNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Es la razón social registrada por el prestador de servicios de salud   en la DGII, y que utiliza la Tesorería de la Seguridad Social en su registro de empleadores. Representa el nombre oficial de cada empresa o institución en el país.")
                .HasColumnName("Promotora_Nombre");
            entity.Property(e => e.PromotoraRegistroPatronal)
                .HasComment("Es el número único que le asigna la Tesorería de la Seguridad Social a cada uno de los empleadores que se registran en dicha institución.    ")
                .HasColumnName("Promotora_Registro_Patronal");
            entity.Property(e => e.PromotoraRnc)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("RNC (Registro Nacional Contribuyente) de la institución.")
                .HasColumnName("Promotora_RNC");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PromotoresRequerimientosCatum>(entity =>
        {
            entity.HasKey(e => e.RequerimientoNumero);

            entity.ToTable("Promotores_Requerimientos_Cata");

            entity.Property(e => e.RequerimientoNumero)
                .ValueGeneratedOnAdd()
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoAplicaPromotor)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Requerimiento_Aplica_Promotor");
            entity.Property(e => e.RequerimientoAplicaPromotora)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Requerimiento_Aplica_Promotora");
            entity.Property(e => e.RequerimientoAplicaRenovacion)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Requerimiento_Aplica_Renovacion");
            entity.Property(e => e.RequerimientoDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Descripción del requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Descripcion");
            entity.Property(e => e.RequerimientoFechaVencimiento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Fecha_Vencimiento");
            entity.Property(e => e.RequerimientoObligatorio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Obligatorio");
            entity.Property(e => e.RequerimientoOrden)
                .HasComment("Número de orden en que debe aparecer los requerimiento para un personas o entidades, en relación a la categoría de acreditación en un proceso de acreditación.")
                .HasColumnName("Requerimiento_Orden");
        });

        modelBuilder.Entity<PromotoresRequerimientosEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.RequerimientoEstadoNumero);

            entity.ToTable("Promotores_Requerimientos_Estados_Cata");

            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Descripcion");
            entity.Property(e => e.RequerimientoEstadoEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Estado_Estado");
            entity.Property(e => e.RequerimientoEstadoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Explicacion");
        });

        modelBuilder.Entity<PromotoresRequerimientosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PromotorCedula, e.RequerimientoNumero, e.RegistroFecha });

            entity.ToTable("Promotores_Requerimientos_Historico");

            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoObservacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Observación de un requerimiento (Documento, Identificación, otros), presentado por una persona o entidad  para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Observacion");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.PromotorCedulaNavigation).WithMany(p => p.PromotoresRequerimientosHistoricos)
                .HasForeignKey(d => d.PromotorCedula)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Requerimientos_Historico_Promotores_Master");

            entity.HasOne(d => d.RequerimientoEstadoNumeroNavigation).WithMany(p => p.PromotoresRequerimientosHistoricos)
                .HasForeignKey(d => d.RequerimientoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Requerimientos_Historico_Promotores_Requerimientos_Estados_Cata");
        });

        modelBuilder.Entity<PromotoresRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.PromotorCedula, e.RequerimientoNumero });

            entity.ToTable("Promotores_Requerimientos_Trans");

            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.RequerimientoNumero)
                .HasComment("Número único que identifica el requerimiento (Documento, Identificación, otros), que deben presentar las personas o entidades para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DisposicionNumero).HasColumnName("Disposicion_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");
            entity.Property(e => e.RequerimientoFechaVence)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Fecha_Vence");
            entity.Property(e => e.RequerimientoObservacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Observación de un requerimiento (Documento, Identificación, otros), presentado por una persona o entidad  para un proceso de acreditación.")
                .HasColumnName("Requerimiento_Observacion");
            entity.Property(e => e.RequerimientoPresentado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requerimiento_Presentado");

            entity.HasOne(d => d.RequerimientoEstadoNumeroNavigation).WithMany(p => p.PromotoresRequerimientosTrans)
                .HasForeignKey(d => d.RequerimientoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Promotores_Requerimientos_Trans_Promotores_Requerimientos_Estados_Cata");
        });

        modelBuilder.Entity<PromotoresUsuariosBitacoraTran>(entity =>
        {
            entity.HasKey(e => e.BitacoraSecuencia);

            entity.ToTable("Promotores_Usuarios_Bitacora_Trans");

            entity.Property(e => e.BitacoraSecuencia).HasColumnName("Bitacora_Secuencia");
            entity.Property(e => e.ExamenNumero).HasColumnName("Examen_Numero");
            entity.Property(e => e.ExamenReciboSerial)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Examen_Recibo_Serial");
            entity.Property(e => e.PeriodoNumero).HasColumnName("Periodo_Numero");
            entity.Property(e => e.PromotorCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Promotor_Cedula");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.UsuarioAccion)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Usuario_Accion");
            entity.Property(e => e.UsuarioCuenta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Usuario_Cuenta");
        });

        modelBuilder.Entity<ProyectoColumnasAliasTran>(entity =>
        {
            entity.HasKey(e => new { e.ColumnaNombre, e.ColumnaNombreAlias });

            entity.ToTable("Proyecto_Columnas_Alias_Trans", tb => tb.HasComment("Es un maestro que contiene las informaciones de los alias relacionados con columnas de la mayoría de las tablas anteriores y nuevas, su fuente de datos son los procesos del proyecto de mejorar de base de datos."));

            entity.Property(e => e.ColumnaNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre de la columna (Campo, Atributo) de las tablas de datos.")
                .HasColumnName("Columna_Nombre");
            entity.Property(e => e.ColumnaNombreAlias)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Alias del nombre de la columna (Campo, Atributo) de las tablas de datos.")
                .HasColumnName("Columna_Nombre_Alias");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ColumnaNombreNavigation).WithMany(p => p.ProyectoColumnasAliasTrans)
                .HasForeignKey(d => d.ColumnaNombre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Proyecto_Columnas_Alias_Trans_Proyecto_Columnas_Master");
        });

        modelBuilder.Entity<ProyectoColumnasMaster>(entity =>
        {
            entity.HasKey(e => e.ColumnaNombre);

            entity.ToTable("Proyecto_Columnas_Master", tb => tb.HasComment("Es un maestro que contiene las informaciones de las columnas de la mayoría de las tablas anteriores y nuevas, su fuente de datos son los procesos del proyecto de mejorar de base de datos. "));

            entity.Property(e => e.ColumnaNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre de la columna (Campo, Atributo) de las tablas de datos.")
                .HasColumnName("Columna_Nombre");
            entity.Property(e => e.ColumnaDescripcion)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasComment("Descripción general de la columna (Campo, Atributo) de las tablas de datos.")
                .HasColumnName("Columna_Descripcion");
            entity.Property(e => e.ColumnaEntidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre de la entidad o proceso con la que esta relacionada el nombre de la columna (Campo, Atributo) de las tablas de datos.")
                .HasColumnName("Columna_Entidad");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<ProyectoTablasNuevasMaster>(entity =>
        {
            entity.HasKey(e => e.TablaNuevaNombre).HasName("PK_Tablas_Nuevas_Cata");

            entity.ToTable("Proyecto_Tablas_Nuevas_Master", tb => tb.HasComment("Es un maestro que contiene las informaciones de las tablas nuevas  que han sido creadas, su fuente de datos son los procesos del proyecto de mejorar de base de datos."));

            entity.Property(e => e.TablaNuevaNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nombre de la tabla (objeto).")
                .HasColumnName("Tabla_Nueva_Nombre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TablaNuevaBdd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre de la Base de Datos donde se encuentra alojada la tabla.")
                .HasColumnName("Tabla_Nueva_BDD");
            entity.Property(e => e.TablaNuevaCertificada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si la nueva tabla ha sido certificada por la gerencia de operaciones.")
                .HasColumnName("Tabla_Nueva_Certificada");
            entity.Property(e => e.TablaNuevaComentario)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Para registrar cualquier observación o comentario en relación a la tabla.")
                .HasColumnName("Tabla_Nueva_Comentario");
            entity.Property(e => e.TablaNuevaContenido)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Describe la información  contenida en la tabla y su propósito.")
                .HasColumnName("Tabla_Nueva_Contenido");
            entity.Property(e => e.TablaNuevaRegistros)
                .HasComment("Cantidad de registro con la fue que creada la tabla.")
                .HasColumnName("Tabla_Nueva_Registros");
            entity.Property(e => e.TablaNuevaServidor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre del servidor de base de datos donde se encuentra alojada la tabla.")
                .HasColumnName("Tabla_Nueva_Servidor");
        });

        modelBuilder.Entity<ProyectoTablasSustituidasMaster>(entity =>
        {
            entity.HasKey(e => new { e.TablaSustituidaNombre, e.TablaSustituidaServidor, e.TablaSustituidaBdd }).HasName("PK_Tablas_Sustituidas_Cata");

            entity.ToTable("Proyecto_Tablas_Sustituidas_Master", tb => tb.HasComment("Es un maestro que contiene las informaciones de las tablas anteriores que han sido sustituidas o descartadas, su fuente de datos son los procesos del proyecto de mejorar de base de datos. "));

            entity.Property(e => e.TablaSustituidaNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nombre de la tabla (objeto).")
                .HasColumnName("Tabla_Sustituida_Nombre");
            entity.Property(e => e.TablaSustituidaServidor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre del servidor de base de datos donde se encuentra alojada la tabla.")
                .HasColumnName("Tabla_Sustituida_Servidor");
            entity.Property(e => e.TablaSustituidaBdd)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Nombre de la Base de Datos donde se encuentra alojada la tabla.")
                .HasColumnName("Tabla_Sustituida_BDD");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TablaNuevaNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nombre de la tabla (objeto).")
                .HasColumnName("Tabla_Nueva_Nombre");
            entity.Property(e => e.TablaSustituidaComentario)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Describe la información  contenida en la tabla y su propósito.")
                .HasColumnName("Tabla_Sustituida_Comentario");
            entity.Property(e => e.TablaSustituidaEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('I')")
                .IsFixedLength()
                .HasComment("Indica si el proceso de resguardo de la tabla está  incompleto o completado.")
                .HasColumnName("Tabla_Sustituida_Estatus");
            entity.Property(e => e.TablaSustituidaFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha en que  el proceso de resguardo de la tabla fue completado.")
                .HasColumnType("datetime")
                .HasColumnName("Tabla_Sustituida_Fecha");
            entity.Property(e => e.TablaSustituidaRegistros)
                .HasComment("Cantidad de registro con la fue que creada la tabla.")
                .HasColumnName("Tabla_Sustituida_Registros");
            entity.Property(e => e.TablaSustituidaTxtData)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si el proceso de resguardo de la data en TXT   está  completado.")
                .HasColumnName("Tabla_Sustituida_TXT_Data");
            entity.Property(e => e.TablaSustituidaTxtScrip)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si el proceso de resguardo de la tabla está  incompleto o completado.")
                .HasColumnName("Tabla_Sustituida_TXT_SCRIP");

            entity.HasOne(d => d.TablaNuevaNombreNavigation).WithMany(p => p.ProyectoTablasSustituidasMasters)
                .HasForeignKey(d => d.TablaNuevaNombre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Proyecto_Tablas_Sustituidas_Master_Proyecto_Tablas_Nuevas_Master");
        });

        modelBuilder.Entity<ProyectosProcedimiento>(entity =>
        {
            entity.HasKey(e => new { e.ProyectoServidor, e.ProyectoBdd, e.ProyectoProcedimiento, e.ProyectoParam }).HasName("PK_Proyectos_Procedimientos_1");

            entity.ToTable("Proyectos_Procedimientos");

            entity.Property(e => e.ProyectoServidor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Proyecto_Servidor");
            entity.Property(e => e.ProyectoBdd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Proyecto_BDD");
            entity.Property(e => e.ProyectoProcedimiento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Proyecto_Procedimiento");
            entity.Property(e => e.ProyectoParam)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Proyecto_Param");
            entity.Property(e => e.ProyectoParamEscala).HasColumnName("Proyecto_Param_Escala");
            entity.Property(e => e.ProyectoParamLongitud).HasColumnName("Proyecto_Param_Longitud");
            entity.Property(e => e.ProyectoParamTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Proyecto_Param_Tipo");
            entity.Property(e => e.ProyectoProcedimientoLargo).HasColumnName("Proyecto_Procedimiento_Largo");
        });

        modelBuilder.Entity<ProyectosTablasCampo>(entity =>
        {
            entity.HasKey(e => new { e.ProyectoServidor, e.ProyectoBdd, e.ProyectoTabla, e.ProyectoCampo });

            entity.ToTable("Proyectos_Tablas_Campos");

            entity.Property(e => e.ProyectoServidor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Proyecto_Servidor");
            entity.Property(e => e.ProyectoBdd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Proyecto_BDD");
            entity.Property(e => e.ProyectoTabla)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Proyecto_Tabla");
            entity.Property(e => e.ProyectoCampo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Proyecto_Campo");
            entity.Property(e => e.ProyectoCampoClave)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Proyecto_Campo_Clave");
            entity.Property(e => e.ProyectoCampoDescripcion)
                .HasMaxLength(512)
                .IsUnicode(false)
                .HasColumnName("Proyecto_Campo_Descripcion");
            entity.Property(e => e.ProyectoCampoEscala).HasColumnName("Proyecto_Campo_Escala");
            entity.Property(e => e.ProyectoCampoIdentity)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Proyecto_Campo_Identity");
            entity.Property(e => e.ProyectoCampoLongitud).HasColumnName("Proyecto_Campo_Longitud");
            entity.Property(e => e.ProyectoCampoTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Proyecto_Campo_Tipo");
            entity.Property(e => e.ProyectoTablaContenido)
                .HasMaxLength(5120)
                .IsUnicode(false)
                .HasColumnName("Proyecto_Tabla_Contenido");
        });

        modelBuilder.Entity<ProyectosTablasObjeto>(entity =>
        {
            entity.HasKey(e => new { e.ProyectoServidor, e.ProyectoBdd, e.ProyectoTabla, e.ProyectoObjetos });

            entity.ToTable("Proyectos_Tablas_Objetos");

            entity.Property(e => e.ProyectoServidor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Proyecto_Servidor");
            entity.Property(e => e.ProyectoBdd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Proyecto_BDD");
            entity.Property(e => e.ProyectoTabla)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Proyecto_Tabla");
            entity.Property(e => e.ProyectoObjetos)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Proyecto_Objetos");
            entity.Property(e => e.ProyectoObjetosTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Proyecto_Objetos_Tipo");
        });

        modelBuilder.Entity<PypMetasTrimestralesMaster>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoAnio, e.TrimestreNumero, e.GrupoNumero, e.SubGrupoNumero });

            entity.ToTable("PYP_Metas_Trimestrales_Master", tb =>
                {
                    tb.HasComment("Es un catálogo de las metas por trimestre y año de las poblaciones objetivas según Grupos y Subgrupos de servicios de salud, para el seguimiento del PYP a través del esquema 40, su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("PYP_Metas_Trimestrales_Master_Delete");
                    tb.HasTrigger("PYP_Metas_Trimestrales_Master_Update");
                });

            entity.Property(e => e.SeguimientoAnio)
                .HasComment("Año correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Anio");
            entity.Property(e => e.TrimestreNumero)
                .HasComment("Corresponde al período de tres meses de un año")
                .HasColumnName("Trimestre_Numero");
            entity.Property(e => e.GrupoNumero)
                .HasDefaultValueSql("(1)")
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubGrupoNumero)
                .HasComment("Número único asignado al subgrupo del PDSS, se incrementa de 1 a N para cada grupo del PDSS.")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.MetaTrimestre)
                .HasComment("Es el porciento que se espera cubrir en un trimestre de la población proyectada anual de afiliados de una ARS, de un año y población objetiva específica.")
                .HasColumnName("Meta_Trimestre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.TrimestreNumeroNavigation).WithMany(p => p.PypMetasTrimestralesMasters)
                .HasForeignKey(d => d.TrimestreNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_Metas_Trimestrales_Master_Comunes_Trimestres_Cata");

            entity.HasOne(d => d.SubGruposCatum).WithMany(p => p.PypMetasTrimestralesMasters)
                .HasForeignKey(d => new { d.GrupoNumero, d.SubGrupoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_Metas_Trimestrales_Master_SubGrupos_Cata");
        });

        modelBuilder.Entity<PypPoblacionesAnualesTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.SeguimientoAnio, e.PoblacionObjetivaNumero });

            entity.ToTable("PYP_Poblaciones_Anuales_Trans", tb => tb.HasComment("Es un catálogo de las poblaciones estimadas por año y ARS, para calcular las metas trimestrales para el seguimiento del PYP a través del esquema 40, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.SeguimientoAnio)
                .HasComment("Año correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Anio");
            entity.Property(e => e.PoblacionObjetivaNumero)
                .HasComment("Número único de la población objetiva, la cual se agrupo por  edades y sexo enfocados en un programa de salud o que puede recibir servicios médicos (Coberturas) específicas.")
                .HasColumnName("Poblacion_Objetiva_Numero");
            entity.Property(e => e.PoblacionObjetivaAnual)
                .HasComment("Nos indica cual será la población proyectada de afiliados para una ARS, en un año y población objetiva especifica.")
                .HasColumnName("Poblacion_Objetiva_Anual");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.PypPoblacionesAnualesTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_Poblaciones_Anuales_Trans_ARS_Master");

            entity.HasOne(d => d.PoblacionObjetivaNumeroNavigation).WithMany(p => p.PypPoblacionesAnualesTrans)
                .HasForeignKey(d => d.PoblacionObjetivaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_Poblaciones_Anuales_Trans_PYP_Problaciones_Objetivas_Cata");
        });

        modelBuilder.Entity<PypProblacionesObjetivasCatum>(entity =>
        {
            entity.HasKey(e => e.PoblacionObjetivaNumero);

            entity.ToTable("PYP_Problaciones_Objetivas_Cata", tb => tb.HasComment("Es un catálogo de las poblaciones objetivas, a la cuales se da seguimiento del PYP a través del esquema 40, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.PoblacionObjetivaNumero)
                .HasComment("Número único de la población objetiva, la cual se agrupo por  edades y sexo enfocados en un programa de salud o que puede recibir servicios médicos (Coberturas) específicas.")
                .HasColumnName("Poblacion_Objetiva_Numero");
            entity.Property(e => e.PoblacionObjetivaDescripcion)
                .HasMaxLength(70)
                .IsUnicode(false)
                .HasComment("Descripción de la población objetiva, la cual se agrupo por edades y sexo enfocados en un programa de salud o que puede recibir servicios médicos (Coberturas) específicas.")
                .HasColumnName("Poblacion_Objetiva_Descripcion");
            entity.Property(e => e.PoblacionObjetivaDesde)
                .HasComment("Indica desde cual edad (Mínima) está dentro de la población objetiva.")
                .HasColumnName("Poblacion_Objetiva_Desde");
            entity.Property(e => e.PoblacionObjetivaFactor)
                .HasComment("Representa para casos especiales una tasa (Factor) a ser aplicado sobre la población total que pertenece a una población objetiva. (La tasa de maternidad del total de mujeres en edad fértil).")
                .HasColumnType("decimal(7, 4)")
                .HasColumnName("Poblacion_Objetiva_Factor");
            entity.Property(e => e.PoblacionObjetivaHasta)
                .HasComment("Indica hasta cual edad (Tope) está dentro de la población objetiva.")
                .HasColumnName("Poblacion_Objetiva_Hasta");
            entity.Property(e => e.PoblacionObjetivaMadres)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica con (S/N) si esta población objetiva aplica para las Madres.")
                .HasColumnName("Poblacion_Objetiva_Madres");
            entity.Property(e => e.PoblacionObjetivaSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si esta población objetiva aplica para el sexo F=Femenino, M=Masculino y A=Ambos (Femenino y Masculino).")
                .HasColumnName("Poblacion_Objetiva_Sexo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PypSeguimientosActividadesTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.GrupoNumero, e.SubGrupoNumero, e.SeguimientoAnio, e.CoberturaNumero, e.TrimestreNumero, e.PoblacionObjetivaNumero }).HasName("PK_PYP_Seguimiento_Actividades_Trans");

            entity.ToTable("PYP_Seguimientos_Actividades_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los datos para el seguimiento por actividades (servicios de salud)  del PYP, calculados a partir de los reportes del esquema 40 que realizan las ARS,  su fuente de datos son los sistemas  de la SISALRIL."));

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.GrupoNumero)
                .HasDefaultValueSql("(1)")
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubGrupoNumero)
                .HasComment("Número único asignado al subgrupo del PDSS, se incrementa de 1 a N para cada grupo del PDSS.")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.SeguimientoAnio)
                .HasComment("Año correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Anio");
            entity.Property(e => e.CoberturaNumero)
                .HasComment("Numero único de cobertura que representa un  insumo, procedimiento médico, material, fármaco,  servicio  general que fue o puede ser prestado.")
                .HasColumnName("Cobertura_Numero");
            entity.Property(e => e.TrimestreNumero)
                .HasComment("Corresponde al período de tres meses de un año")
                .HasColumnName("Trimestre_Numero");
            entity.Property(e => e.PoblacionObjetivaNumero)
                .HasComment("Número único de la población objetiva, la cual se agrupo por  edades y sexo enfocados en un programa de salud o que puede recibir servicios médicos (Coberturas) específicas.")
                .HasColumnName("Poblacion_Objetiva_Numero");
            entity.Property(e => e.AfiliadosProgramados)
                .HasComment("Es la cantidad de afiliados que se espera cubrir en un trimestre de la población proyectada anual de afiliados de una ARS, de un año y población objetiva específica.")
                .HasColumnName("Afiliados_Programados");
            entity.Property(e => e.AfiliadosProgramadosAcumulados)
                .HasComment("Nos indica cual será la población proyectada de afiliados para una ARS, en un año y población objetiva, acumulada hasta un trimestre específico.")
                .HasColumnName("Afiliados_Programados_Acumulados");
            entity.Property(e => e.AfiliadosReportados)
                .HasComment("Es la cantidad total de afiliados reportados por una ARS con coberturas, en un trimestre específico y para un mismo programa de salud (Subgrupo).")
                .HasColumnName("Afiliados_Reportados");
            entity.Property(e => e.AfiliadosReportadosNoArs)
                .HasComment("Es la cantidad total de afiliados reportados por una ARS con coberturas, en un trimestre específico y para un mismo programa de salud (Subgrupo), que No pertenecen a dicha ARS.")
                .HasColumnName("Afiliados_Reportados_No_Ars");
            entity.Property(e => e.AfiliadosReportadosNoProgramados)
                .HasComment("Es la cantidad total de afiliados reportados por una ARS con coberturas, en un trimestre específico y para un mismo programa de salud (Subgrupo), que pertenecen a la ARS y No a la población objetiva esperada.")
                .HasColumnName("Afiliados_Reportados_No_Programados");
            entity.Property(e => e.MetaTrimestre)
                .HasComment("Es el porciento que se espera cubrir en un trimestre de la población proyectada anual de afiliados de una ARS, de un año y población objetiva específica.")
                .HasColumnName("Meta_Trimestre");
            entity.Property(e => e.MetaTrimestreAcumulado)
                .HasComment("Nos indica cual será la población proyectada de afiliados para una ARS, en un año y población objetiva, acumulada hasta un trimestre específico.")
                .HasColumnName("Meta_Trimestre_Acumulado");
            entity.Property(e => e.NivelCumplimiento)
                .HasComment("Es la porciento de cumplimiento de afiliados reportados por una ARS con coberturas, en un trimestre específico, para un mismo programa de salud (Subgrupo) y una población objetiva esperada.")
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("Nivel_Cumplimiento");
            entity.Property(e => e.NivelCumplimientoNoArs)
                .HasComment("Es la porciento de cumplimiento de afiliados reportados por una ARS con coberturas, en un trimestre específico, para un mismo programa de salud (Subgrupo) y una población objetiva esperada.")
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("Nivel_Cumplimiento_No_Ars");
            entity.Property(e => e.NivelCumplimientoNoProgramado)
                .HasComment("Es la porciento de cumplimiento de afiliados reportados por una ARS con coberturas, en un trimestre específico, para un mismo programa de salud (Subgrupo) y una población objetiva esperada.")
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("Nivel_Cumplimiento_No_Programado");
            entity.Property(e => e.PoblacionObjetivaAnual)
                .HasComment("Nos indica cual será la población proyectada de afiliados para una ARS, en un año y población objetiva especifica.")
                .HasColumnName("Poblacion_Objetiva_Anual");
            entity.Property(e => e.PorcentajeCumplimientoPonderado)
                .HasComment("Representa el peso del valor de la actividad (Cobertura) para un programa de salud (Subgrupo).")
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("Porcentaje_Cumplimiento_Ponderado");
            entity.Property(e => e.PorcientoPonderado)
                .HasComment("Representa el peso del valor de la actividad (Cobertura) para un programa de salud (Subgrupo).")
                .HasColumnName("Porciento_Ponderado");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.ValorCumplimientoPonderado)
                .HasComment("Representa el peso del valor de la actividad (Cobertura) para un programa de salud (Subgrupo).")
                .HasColumnName("Valor_Cumplimiento_Ponderado");

            entity.HasOne(d => d.PypPoblacionesAnualesTran).WithMany(p => p.PypSeguimientosActividadesTrans)
                .HasForeignKey(d => new { d.ArsNumero, d.SeguimientoAnio, d.PoblacionObjetivaNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_Seguimientos_Actividades_Trans_PYP_Poblaciones_Anuales_Trans");
        });

        modelBuilder.Entity<PypSeguimientosMensualesTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.GrupoNumero, e.SubGrupoNumero, e.SeguimientoAnio, e.MesNumero, e.PoblacionObjetivaNumero }).HasName("PK_PYP_Seguimiento_Mensual_Trans");

            entity.ToTable("PYP_Seguimientos_Mensuales_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los datos para el seguimiento mensual del PYP, calculados a partir de los reportes del esquema 40 que realizan las ARS,  su fuente de datos son los sistemas  de la SISALRIL."));

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.GrupoNumero)
                .HasDefaultValueSql("((1))")
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubGrupoNumero)
                .HasComment("Número único asignado al subgrupo del PDSS, se incrementa de 1 a N para cada grupo del PDSS.")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.SeguimientoAnio)
                .HasComment("Año correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Anio");
            entity.Property(e => e.MesNumero)
                .HasComment("Es el número único de 1 a 12 que representa el mes de una fecha o período.")
                .HasColumnName("Mes_Numero");
            entity.Property(e => e.PoblacionObjetivaNumero)
                .HasComment("Número único de la población objetiva, la cual se agrupo por  edades y sexo enfocados en un programa de salud o que puede recibir servicios médicos (Coberturas) específicas.")
                .HasColumnName("Poblacion_Objetiva_Numero");
            entity.Property(e => e.AfiliadosReportadosAcumulados)
                .HasComment("Nos indica cual será la población proyectada de afiliados para una ARS, en un año y población objetiva, acumulada hasta un trimestre específico.")
                .HasColumnName("Afiliados_Reportados_Acumulados");
            entity.Property(e => e.AfiliadosReportadosNoArsAcumulados)
                .HasComment("Es la cantidad total de afiliados reportados por una ARS con coberturas, en un mes específico y para un mismo programa de salud (Subgrupo), que No pertenecen a dicha ARS.")
                .HasColumnName("Afiliados_Reportados_No_Ars_Acumulados");
            entity.Property(e => e.AfiliadosReportadosNoProgramadosAcumulados)
                .HasComment("Es la cantidad total de afiliados reportados por una ARS con coberturas, en un mes específico  y para un mismo programa de salud (Subgrupo), que pertenecen a la ARS y No a la población objetiva esperada.")
                .HasColumnName("Afiliados_Reportados_No_Programados_Acumulados");
            entity.Property(e => e.NivelCumplimientoAcumulado)
                .HasComment("Es la porciento de cumplimiento de afiliados reportados por una ARS con coberturas, hasta un trimestre específico, para un mismo programa de salud (Subgrupo) y una población objetiva esperada.")
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("Nivel_Cumplimiento_Acumulado");
            entity.Property(e => e.NivelCumplimientoNoArsAcumulado)
                .HasComment("Es la porciento de cumplimiento de afiliados reportados por una ARS con coberturas, en un trimestre específico, para un mismo programa de salud (Subgrupo) y una población objetiva esperada.")
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("Nivel_Cumplimiento_No_Ars_Acumulado");
            entity.Property(e => e.NivelCumplimientoNoProgramadoAcumulado)
                .HasComment("Es la porciento de cumplimiento de afiliados reportados por una ARS con coberturas, en un trimestre específico, para un mismo programa de salud (Subgrupo) y una población objetiva esperada.")
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("Nivel_Cumplimiento_No_Programado_Acumulado");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PypPoblacionesAnualesTran).WithMany(p => p.PypSeguimientosMensualesTrans)
                .HasForeignKey(d => new { d.ArsNumero, d.SeguimientoAnio, d.PoblacionObjetivaNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_Seguimiento_Mensual_Trans_PYP_Poblaciones_Anuales_Trans");
        });

        modelBuilder.Entity<PypSeguimientosTrimestralesTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.GrupoNumero, e.SubGrupoNumero, e.SeguimientoAnio, e.TrimestreNumero, e.PoblacionObjetivaNumero }).HasName("PK_PYP_Seguimiento_Trimestral_Trans");

            entity.ToTable("PYP_Seguimientos_Trimestrales_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los datos para el seguimiento trimestral del PYP, calculados a partir de los reportes del esquema 40 que realizan las ARS,  su fuente de datos son los sistemas  de la SISALRIL."));

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.GrupoNumero)
                .HasDefaultValueSql("(1)")
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubGrupoNumero)
                .HasComment("Número único asignado al subgrupo del PDSS, se incrementa de 1 a N para cada grupo del PDSS.")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.SeguimientoAnio)
                .HasComment("Año correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Anio");
            entity.Property(e => e.TrimestreNumero)
                .HasComment("Corresponde al período de tres meses de un año")
                .HasColumnName("Trimestre_Numero");
            entity.Property(e => e.PoblacionObjetivaNumero)
                .HasComment("Número único de la población objetiva, la cual se agrupo por  edades y sexo enfocados en un programa de salud o que puede recibir servicios médicos (Coberturas) específicas.")
                .HasColumnName("Poblacion_Objetiva_Numero");
            entity.Property(e => e.AfiliadosProgramados)
                .HasComment("Es la cantidad de afiliados que se espera cubrir en un trimestre de la población proyectada anual de afiliados de una ARS, de un año y población objetiva específica.")
                .HasColumnName("Afiliados_Programados");
            entity.Property(e => e.AfiliadosProgramadosAcumulados)
                .HasComment("Nos indica cual será la población proyectada de afiliados para una ARS, en un año y población objetiva, acumulada hasta un trimestre específico.")
                .HasColumnName("Afiliados_Programados_Acumulados");
            entity.Property(e => e.AfiliadosReportados)
                .HasComment("Es la cantidad total de afiliados reportados por una ARS con coberturas, en un trimestre específico y para un mismo programa de salud (Subgrupo).")
                .HasColumnName("Afiliados_Reportados");
            entity.Property(e => e.AfiliadosReportadosAcumulados)
                .HasComment("Nos indica cual será la población proyectada de afiliados para una ARS, en un año y población objetiva, acumulada hasta un trimestre específico.")
                .HasColumnName("Afiliados_Reportados_Acumulados");
            entity.Property(e => e.AfiliadosReportadosNoArs)
                .HasComment("Es la cantidad total de afiliados reportados por una ARS con coberturas, en un trimestre específico y para un mismo programa de salud (Subgrupo), que No pertenecen a dicha ARS.")
                .HasColumnName("Afiliados_Reportados_No_Ars");
            entity.Property(e => e.AfiliadosReportadosNoArsAcumulados)
                .HasComment("Es la cantidad total de afiliados reportados por una ARS con coberturas, en un mes específico y para un mismo programa de salud (Subgrupo), que No pertenecen a dicha ARS.")
                .HasColumnName("Afiliados_Reportados_No_Ars_Acumulados");
            entity.Property(e => e.AfiliadosReportadosNoProgramados)
                .HasComment("Es la cantidad total de afiliados reportados por una ARS con coberturas, en un trimestre específico y para un mismo programa de salud (Subgrupo), que pertenecen a la ARS y No a la población objetiva esperada.")
                .HasColumnName("Afiliados_Reportados_No_Programados");
            entity.Property(e => e.AfiliadosReportadosNoProgramadosAcumulados)
                .HasComment("Es la cantidad total de afiliados reportados por una ARS con coberturas, en un mes específico  y para un mismo programa de salud (Subgrupo), que pertenecen a la ARS y No a la población objetiva esperada.")
                .HasColumnName("Afiliados_Reportados_No_Programados_Acumulados");
            entity.Property(e => e.MetaTrimestre)
                .HasComment("Es el porciento que se espera cubrir en un trimestre de la población proyectada anual de afiliados de una ARS, de un año y población objetiva específica.")
                .HasColumnName("Meta_Trimestre");
            entity.Property(e => e.MetaTrimestreAcumulado)
                .HasComment("Nos indica cual será la población proyectada de afiliados para una ARS, en un año y población objetiva, acumulada hasta un trimestre específico.")
                .HasColumnName("Meta_Trimestre_Acumulado");
            entity.Property(e => e.NivelCumplimiento)
                .HasComment("Es la porciento de cumplimiento de afiliados reportados por una ARS con coberturas, en un trimestre específico, para un mismo programa de salud (Subgrupo) y una población objetiva esperada.")
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("Nivel_Cumplimiento");
            entity.Property(e => e.NivelCumplimientoAcumulado)
                .HasComment("Es la porciento de cumplimiento de afiliados reportados por una ARS con coberturas, hasta un trimestre específico, para un mismo programa de salud (Subgrupo) y una población objetiva esperada.")
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("Nivel_Cumplimiento_Acumulado");
            entity.Property(e => e.NivelCumplimientoNoArs)
                .HasComment("Es la porciento de cumplimiento de afiliados reportados por una ARS con coberturas, en un trimestre específico, para un mismo programa de salud (Subgrupo) y una población objetiva esperada.")
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("Nivel_Cumplimiento_No_Ars");
            entity.Property(e => e.NivelCumplimientoNoArsAcumulado)
                .HasComment("Es la porciento de cumplimiento de afiliados reportados por una ARS con coberturas, en un trimestre específico, para un mismo programa de salud (Subgrupo) y una población objetiva esperada.")
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("Nivel_Cumplimiento_No_Ars_Acumulado");
            entity.Property(e => e.NivelCumplimientoNoProgramado)
                .HasComment("Es la porciento de cumplimiento de afiliados reportados por una ARS con coberturas, en un trimestre específico, para un mismo programa de salud (Subgrupo) y una población objetiva esperada.")
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("Nivel_Cumplimiento_No_Programado");
            entity.Property(e => e.NivelCumplimientoNoProgramadoAcumulado)
                .HasComment("Es la porciento de cumplimiento de afiliados reportados por una ARS con coberturas, en un trimestre específico, para un mismo programa de salud (Subgrupo) y una población objetiva esperada.")
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("Nivel_Cumplimiento_No_Programado_Acumulado");
            entity.Property(e => e.PoblacionObjetivaAnual)
                .HasComment("Nos indica cual será la población proyectada de afiliados para una ARS, en un año y población objetiva especifica.")
                .HasColumnName("Poblacion_Objetiva_Anual");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PypPoblacionesAnualesTran).WithMany(p => p.PypSeguimientosTrimestralesTrans)
                .HasForeignKey(d => new { d.ArsNumero, d.SeguimientoAnio, d.PoblacionObjetivaNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_Seguimiento_Trimestral_Trans_PYP_Poblaciones_Anuales_Trans");
        });

        modelBuilder.Entity<PypServiciosTemporalTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.PrestadoraNumero, e.AfiliadoNss, e.EventoNumero, e.GrupoNumero, e.SubGrupoNumero, e.CoberturaNumero, e.FechaRealizacion, e.SeguimientoCodigo, e.SeguimientoLote });

            entity.ToTable("PYP_Servicios_Temporal_Trans");

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_NSS");
            entity.Property(e => e.EventoNumero)
                .HasComment("Identifica un evento único de actividad de prevención y promoción en la cual pueden participar de 1 a N afiliados.")
                .HasColumnName("Evento_Numero");
            entity.Property(e => e.GrupoNumero)
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubGrupoNumero)
                .HasComment("Número único asignado al subgrupo del PDSS, se incrementa de 1 a N para cada grupo del PDSS.")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.CoberturaNumero)
                .HasComment("Numero único de cobertura que representa un  insumo, procedimiento médico, material, fármaco,  servicio  general que fue o puede ser prestado.")
                .HasColumnName("Cobertura_Numero");
            entity.Property(e => e.FechaRealizacion)
                .HasComment("Fecha en que se inicio la entrega del servicio de salud (Ingreso/Admisión).")
                .HasColumnName("Fecha_Realizacion");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.MontoEvento)
                .HasComment("Representa el costo de un evento único de actividad de prevención y promoción reportado por las ARS. Dicho costo se considera único para todos afiliados reportados en dicho evento.")
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Monto_Evento");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<PypServiciosTran>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.PrestadoraNumero, e.AfiliadoNss, e.EventoNumero, e.GrupoNumero, e.SubGrupoNumero, e.CoberturaNumero, e.FechaRealizacion }).HasName("PK_PYP_Servicios_Trans_1");

            entity.ToTable("PYP_Servicios_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran las prestaciones de los servicios de salud de Previsión y Promoción de la Salud (PYP) reportados pro las ARS,  su fuente de datos es el esquema 40 procesado por el Robot Simon."));

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasComment("Número único del prestador de servicio de salud que entrego los servicio (Institucional o Médico).")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_NSS");
            entity.Property(e => e.EventoNumero)
                .HasComment("Identifica un evento único de actividad de prevención y promoción en la cual pueden participar de 1 a N afiliados.")
                .HasColumnName("Evento_Numero");
            entity.Property(e => e.GrupoNumero)
                .HasDefaultValueSql("((1))")
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubGrupoNumero)
                .HasComment("Número único asignado al subgrupo del PDSS, se incrementa de 1 a N para cada grupo del PDSS.")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.CoberturaNumero)
                .HasComment("Numero único de cobertura que representa un  insumo, procedimiento médico, material, fármaco,  servicio  general que fue o puede ser prestado.")
                .HasColumnName("Cobertura_Numero");
            entity.Property(e => e.FechaRealizacion)
                .HasComment("Fecha en que se inicio la entrega del servicio de salud (Ingreso/Admisión).")
                .HasColumnName("Fecha_Realizacion");
            entity.Property(e => e.MontoEvento)
                .HasComment("Representa el costo de un evento único de actividad de prevención y promoción reportado por las ARS. Dicho costo se considera único para todos afiliados reportados en dicho evento.")
                .HasColumnType("decimal(12, 2)")
                .HasColumnName("Monto_Evento");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");

            entity.HasOne(d => d.AfiliadoNssNavigation).WithMany(p => p.PypServiciosTrans)
                .HasForeignKey(d => d.AfiliadoNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_Servicios_Trans_TSS_Ciudadanos_Master");

            entity.HasOne(d => d.ArsNumeroNavigation).WithMany(p => p.PypServiciosTrans)
                .HasForeignKey(d => d.ArsNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_Servicios_Trans_ARS_Master");

            entity.HasOne(d => d.CoberturaNumeroNavigation).WithMany(p => p.PypServiciosTrans)
                .HasForeignKey(d => d.CoberturaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_Servicios_Trans_Coberturas_Master");

            entity.HasOne(d => d.PrestadoraNumeroNavigation).WithMany(p => p.PypServiciosTrans)
                .HasForeignKey(d => d.PrestadoraNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_Servicios_Trans_Prestadoras_Master");

            entity.HasOne(d => d.SubGruposCatum).WithMany(p => p.PypServiciosTrans)
                .HasForeignKey(d => new { d.GrupoNumero, d.SubGrupoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_Servicios_Trans_SubGrupos_Cata");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.PypServiciosTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_Servicios_Trans_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<PypSubGruposCoberturasMaster>(entity =>
        {
            entity.HasKey(e => new { e.GrupoNumero, e.SubGrupoNumero, e.SeguimientoAnio, e.CoberturaNumero });

            entity.ToTable("PYP_SubGrupos_Coberturas_Master", tb =>
                {
                    tb.HasComment("Es un maestro que contiene las informaciones de las coberturas de servicios de salud relacionados la Previsión y Promoción de la Salud (PYP) según subgrupos, su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("PYP_SubGrupos_Coberturas_Master_Delete");
                    tb.HasTrigger("PYP_SubGrupos_Coberturas_Master_Update");
                });

            entity.Property(e => e.GrupoNumero)
                .HasDefaultValueSql("(1)")
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubGrupoNumero)
                .HasComment("Número único asignado al subgrupo del PDSS, se incrementa de 1 a N para cada grupo del PDSS.")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.SeguimientoAnio)
                .HasComment("Año correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Anio");
            entity.Property(e => e.CoberturaNumero)
                .HasComment("Numero único de cobertura que representa un  insumo, procedimiento médico, material, fármaco,  servicio  general que fue o puede ser prestado.")
                .HasColumnName("Cobertura_Numero");
            entity.Property(e => e.CoberturaOrden)
                .HasComment("Nos indica en cual orden debe presentarse una actividad (Cobertura) para un programa de salud (Subgrupo).")
                .HasColumnName("Cobertura_Orden");
            entity.Property(e => e.PorcientoPonderado)
                .HasComment("Representa el peso del valor de la actividad (Cobertura) para un programa de salud (Subgrupo).")
                .HasColumnName("Porciento_Ponderado");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CoberturaNumeroNavigation).WithMany(p => p.PypSubGruposCoberturasMasters)
                .HasForeignKey(d => d.CoberturaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_SubGrupos_Coberturas_Master_Coberturas_Master");

            entity.HasOne(d => d.SubGruposCatum).WithMany(p => p.PypSubGruposCoberturasMasters)
                .HasForeignKey(d => new { d.GrupoNumero, d.SubGrupoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_SubGrupos_Coberturas_Master_SubGrupos_Cata");
        });

        modelBuilder.Entity<PypSubGruposPoblacionesCatum>(entity =>
        {
            entity.HasKey(e => new { e.GrupoNumero, e.SubgrupoNumero, e.PoblacionObjetivaNumero }).HasName("PK_PYP_SubGrupos_Poblaciones_Master");

            entity.ToTable("PYP_SubGrupos_Poblaciones_Cata", tb => tb.HasComment("Es un catálogo de las poblaciones objetivas según Grupos y Subgrupos de servicios de salud, para el seguimiento del PYP a través del esquema 40, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.GrupoNumero)
                .HasDefaultValueSql("(1)")
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubgrupoNumero)
                .HasComment("Número único asignado al subgrupo del PDSS, se incrementa de 1 a N para cada grupo del PDSS.")
                .HasColumnName("Subgrupo_Numero");
            entity.Property(e => e.PoblacionObjetivaNumero)
                .HasComment("Número único de la población objetiva, la cual se agrupo por  edades y sexo enfocados en un programa de salud o que puede recibir servicios médicos (Coberturas) específicas.")
                .HasColumnName("Poblacion_Objetiva_Numero");
            entity.Property(e => e.PoblacionReferencia)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Nos indica con (S/N) cuando una población objetiva es utilizada como un valor de referencia en relación a otras poblaciones objetivas. ")
                .HasColumnName("Poblacion_Referencia");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PoblacionObjetivaNumeroNavigation).WithMany(p => p.PypSubGruposPoblacionesCata)
                .HasForeignKey(d => d.PoblacionObjetivaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_SubGrupos_Poblaciones_Master_PYP_Problaciones_Objetivas_Cata");

            entity.HasOne(d => d.SubGruposCatum).WithMany(p => p.PypSubGruposPoblacionesCata)
                .HasForeignKey(d => new { d.GrupoNumero, d.SubgrupoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PYP_SubGrupos_Poblaciones_Master_SubGrupos_Cata");
        });

        modelBuilder.Entity<SearchTmp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SearchTMP");

            entity.Property(e => e.PosicionLesionadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Posicion_Lesionado_Descripcion");
            entity.Property(e => e.PosicionLesionadoExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Posicion_Lesionado_Explicacion");
            entity.Property(e => e.PosicionLesionadoNumero).HasColumnName("Posicion_Lesionado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SeguimientosCifradosLlavesTran>(entity =>
        {
            entity.HasKey(e => e.CifradoLlavesNumero).HasName("PK_Cifrado_Llaves_Trans");

            entity.ToTable("Seguimientos_Cifrados_Llaves_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los códigos de cifrado para las carga de esquemas de las  ARS/ARL, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.CifradoLlavesNumero)
                .ValueGeneratedNever()
                .HasComment("Número único del registro de la llave del cifrado.")
                .HasColumnName("Cifrado_Llaves_Numero");
            entity.Property(e => e.CifradoLlaveFechaBaja)
                .HasComment("Fecha en que fue dada de baja la llave de cifrado.")
                .HasColumnType("datetime")
                .HasColumnName("Cifrado_Llave_Fecha_Baja");
            entity.Property(e => e.CifradoLlaveFechaCaduca)
                .HasDefaultValueSql("(getdate()+(90))")
                .HasComment("Fecha en que caduca la llave de cifrado.")
                .HasColumnType("datetime")
                .HasColumnName("Cifrado_Llave_Fecha_Caduca");
            entity.Property(e => e.CifradoLlaveFechaCreacion)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha en que fue creada la llave de cifrado.")
                .HasColumnType("datetime")
                .HasColumnName("Cifrado_Llave_Fecha_Creacion");
            entity.Property(e => e.CifradoLlaveUsuarioCreacion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Usuario que genero la llave de cifrado.")
                .HasColumnName("Cifrado_Llave_Usuario_Creacion");
            entity.Property(e => e.CifradoLlaves1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Primera parte de la llave de cifrado.")
                .HasColumnName("Cifrado_Llaves_1");
            entity.Property(e => e.CifradoLlaves2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Segunda parte de la llave de cifrado.")
                .HasColumnName("Cifrado_Llaves_2");
            entity.Property(e => e.InstitucionNumero)
                .HasComment("Número de la institución que es o a la que pertenece la ARS.")
                .HasColumnName("Institucion_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.InstitucionNumeroNavigation).WithMany(p => p.SeguimientosCifradosLlavesTrans)
                .HasForeignKey(d => d.InstitucionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Cifrados_Llaves_Trans_Instituciones_Cata");
        });

        modelBuilder.Entity<SeguimientosEsquemas05Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Esquema_05_Trans");

            entity.ToTable("Seguimientos_Esquemas_05_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Código del seguimiento de la carga")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número de seguimiento del lote de carga")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número que indetifica la lineas de errores del archivo")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.BalanceActual)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .HasComment("Indica el Balance Actual a la Fecha en la cuenta (Balance Anterior + Debito - Crédito). (Debe enviarse los montos con formato en decimal. Así : 00000000000000000.00 y en caso que el monto se negativo debe enviar así: -0000000000000000.00 ).")
                .HasColumnName("Balance_Actual");
            entity.Property(e => e.BalanceAnterior)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .HasComment("Indica el Balance de la  fecha  anterior a la actual en la cuenta. (Debe enviarse los montos con formato en decimal. Así : 00000000000000000.00 y en caso que el monto se negativo debe enviar así: -0000000000000000.00) .")
                .HasColumnName("Balance_Anterior");
            entity.Property(e => e.BalanceCredito)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .HasComment("Indica el monto a la Fecha en la cuenta, lado Crédito. (Debe enviarse los montos con formato en decimal. Así : 00000000000000000.00).")
                .HasColumnName("Balance_Credito");
            entity.Property(e => e.BalanceDebito)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .HasComment("Indica el monto a la Fecha en la cuenta, lado Debito. (Debe enviarse los montos con formato en decimal. Así : 00000000000000000.00).")
                .HasColumnName("Balance_Debito");
            entity.Property(e => e.CuentaCodigo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Indica el Numero de la Cuenta Contable.")
                .HasColumnName("Cuenta_Codigo");
            entity.Property(e => e.InstitucionNumero)
                .HasComment("Número de seguimiento del lote de carga")
                .HasColumnName("Institucion_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifica los posibles errores reportados")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("OK = Activo, RE = Rechazado.")
                .HasColumnName("Registro_Validacion_Estado");
        });

        modelBuilder.Entity<SeguimientosEsquemas06Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea });

            entity.ToTable("Seguimientos_Esquemas_06_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea).HasColumnName("Archivo_Linea");
            entity.Property(e => e.CedulaORncPromotor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Cedula_O_RNC_Promotor");
            entity.Property(e => e.FechaPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Indica el periodo al que corresponde el pago de la reclamación cuando su estado es (C) ")
                .HasColumnName("Fecha_Pago");
            entity.Property(e => e.InstitucionNumero).HasColumnName("Institucion_Numero");
            entity.Property(e => e.MontoPagado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Monto_Pagado");
            entity.Property(e => e.NombrePromotor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Nombre_Promotor");
            entity.Property(e => e.NumeroDocumentoPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Indica el periodo al que corresponde el pago de la reclamación cuando su estado es (C) ")
                .HasColumnName("Numero_Documento_Pago");
            entity.Property(e => e.NumeroTelefono)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Numero_Telefono");
            entity.Property(e => e.PagoEstado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Pago_Estado");
            entity.Property(e => e.PagoPeriodo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Pago_Periodo");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PlanTipoNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Plan_Tipo_Numero");
            entity.Property(e => e.PromotorNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Promotor_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.TipoDocumentoPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Indica el periodo al que corresponde el pago de la reclamación cuando su estado es (C) ")
                .HasColumnName("Tipo_Documento_Pago");
            entity.Property(e => e.TipoPromotor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Tipo_Promotor");
        });

        modelBuilder.Entity<SeguimientosEsquemas07Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea });

            entity.ToTable("Seguimientos_Esquemas_07_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea).HasColumnName("Archivo_Linea");
            entity.Property(e => e.EstadoAutorizacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Estado_Autorizacion");
            entity.Property(e => e.FechaAutorizacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Autorizacion");
            entity.Property(e => e.FechaInicioServicio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha es que se inicio la entrega de los servicios por parte de la PSS al Afiliado. Formato DDMMYYYY.")
                .HasColumnName("Fecha_Inicio_Servicio");
            entity.Property(e => e.FechaReclamacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Reclamacion");
            entity.Property(e => e.FechaUltimoPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Ultimo_Pago");
            entity.Property(e => e.InstitucionNumero).HasColumnName("Institucion_Numero");
            entity.Property(e => e.MontoAutorizado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Monto_Autorizado");
            entity.Property(e => e.MontoCopago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Monto_Copago");
            entity.Property(e => e.MontoGlosado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Monto_Glosado");
            entity.Property(e => e.MontoPagado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Monto_Pagado");
            entity.Property(e => e.MontoReclamado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Monto_Reclamado");
            entity.Property(e => e.NssAfiliado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NSS_Afiliado");
            entity.Property(e => e.NumeroAutorizacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Numero_Autorizacion");
            entity.Property(e => e.NumeroDocumentoPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Numero_Documento_Pago");
            entity.Property(e => e.NumeroUnicoAfiliado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Numero_Unico_Afiliado");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PssNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PSS_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.TipoDocumentoPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Tipo_Documento_Pago");
            entity.Property(e => e.TipoSeguro)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Tipo_Seguro");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Tipo_Servicio");
        });

        modelBuilder.Entity<SeguimientosEsquemas26Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Esquema_26_Trans");

            entity.ToTable("Seguimientos_Esquemas_26_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Código del seguimiento de la carga")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número de seguimiento del lote de carga")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número que indetifica la lineas de errores del archivo")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.ArsNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.AtencionAltoCosto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Atencion_Alto_Costo");
            entity.Property(e => e.Cirugias)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio\r\ncontratado con la Prestadora, Colocando S=SI o N=NO");
            entity.Property(e => e.ConsultaAmbulatoria)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la\r\nPrestadora, Colocando S=SI o N=NO")
                .HasColumnName("Consulta_Ambulatoria");
            entity.Property(e => e.ContratadaPdss)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Contratada_PDSS");
            entity.Property(e => e.ContratadaPlanesComplementarios)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Contratada_Planes_Complementarios");
            entity.Property(e => e.ContratadaPlanesPrepagadosOMedicinaEspecial)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Contratada_Planes_Prepagados_O_Medicina_Especial");
            entity.Property(e => e.ContratadaPlanesVoluntarios)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Contratada_Planes_Voluntarios");
            entity.Property(e => e.ContratoDesde)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha Inicial del contrato ")
                .HasColumnName("Contrato_Desde");
            entity.Property(e => e.ContratoHasta)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha final del contrato")
                .HasColumnName("Contrato_Hasta");
            entity.Property(e => e.Emergencias)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Indica si la ARS tiene este servicio contratado con la Prestadora, Colocando\r\nS=SI o N=NO");
            entity.Property(e => e.Estatus)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Indica el Estado de la\r\nPrestadora. (A/ B/ C )");
            entity.Property(e => e.Farmacia)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO");
            entity.Property(e => e.Hospitalizacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO");
            entity.Property(e => e.Imagenes)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO");
            entity.Property(e => e.InstitucionNumero)
                .HasComment("Número que identifica la ARS")
                .HasColumnName("Institucion_Numero");
            entity.Property(e => e.Laboratorios)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO");
            entity.Property(e => e.NumeroMedicos)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo contendrá la cantidad de médicos\r\nque posee la prestadora")
                .HasColumnName("Numero_Medicos");
            entity.Property(e => e.Optica)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO");
            entity.Property(e => e.OtrosApoyosDiagnosticos)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Otros_Apoyos_Diagnosticos");
            entity.Property(e => e.PartosCesarias)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Partos_Cesarias");
            entity.Property(e => e.PrestadoraNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número de la prestadora de servicios de salud")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PrevencionYPromocion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio\r\ncontratado con la prestadora. Colocando\r\nS=SI o N=NO.")
                .HasColumnName("Prevencion_Y_Promocion");
            entity.Property(e => e.PrimerNivelAtencion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Primer_Nivel_Atencion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifican  los errores del del archivo de carga ")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("OK= Activo , RE=Rechazado")
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.Rehabilitacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO");
            entity.Property(e => e.SegundoNivelAtencion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Segundo_Nivel_Atencion");
            entity.Property(e => e.ServiciosOdontologicos)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la\r\nPrestadora, Colocando S=SI o N=NO")
                .HasColumnName("Servicios_Odontologicos");
            entity.Property(e => e.TercerNivelAtencion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Tercer_Nivel_Atencion");
            entity.Property(e => e.TrasladoPacientes)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Traslado_Pacientes");
            entity.Property(e => e.UnidadCuidadosIntensivos)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio contratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Unidad_Cuidados_Intensivos");
            entity.Property(e => e.UnidadCuidadosIntensivosQuemados)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo indica si la ARS tiene este servicio\r\ncontratado con la Prestadora, Colocando S=SI o N=NO")
                .HasColumnName("Unidad_Cuidados_Intensivos_Quemados");
        });

        modelBuilder.Entity<SeguimientosEsquemas27Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Esquema_27_Trans");

            entity.ToTable("Seguimientos_Esquemas_27_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Código del seguimiento de la carga")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número de seguimiento del lote de carga")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número que indetifica la lineas de errores del archivo")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.Contratado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Especifica si la ARS tiene contrato con el medico (Especificar S o N).");
            entity.Property(e => e.ContratoDesde)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Campo que representa fecha de inicio del contrado (DDMMYYYY).")
                .HasColumnName("Contrato_Desde");
            entity.Property(e => e.ContratoHasta)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Campo que representa fecha de término de contrato (DDMMYYYY).")
                .HasColumnName("Contrato_Hasta");
            entity.Property(e => e.ContratoPlanComplementario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Especifica si la ARS tiene contrato con el medico para Planes Complementarios. (Especificar S o N).")
                .HasColumnName("Contrato_Plan_Complementario");
            entity.Property(e => e.ContratoPlanEpeciales)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Especifica si la ARS tiene contrato con el medico para Planes Especiales. (Especificar S o N).")
                .HasColumnName("Contrato_Plan_Epeciales");
            entity.Property(e => e.ContratoPlanPdss)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Especifica si la ARS tiene contrato con el medico para el Plan PDSS. (Especificar S o N).")
                .HasColumnName("Contrato_Plan_PDSS");
            entity.Property(e => e.ContratoPlanVoluntario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Especifica si la ARS tiene contrato con el medico para Planes Voluntarios. (Especificar S o N).")
                .HasColumnName("Contrato_Plan_Voluntario");
            entity.Property(e => e.Especialidad1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .HasComment("Numero de Especialidad Principal del Medico.")
                .HasColumnName("Especialidad_1");
            entity.Property(e => e.Especialidad2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .HasComment("Numero de la 2da Especialidad del Medico.")
                .HasColumnName("Especialidad_2");
            entity.Property(e => e.Especialidad3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .HasComment("Numero de la 3ra Especialidad del Medico.")
                .HasColumnName("Especialidad_3");
            entity.Property(e => e.InstitucionesNumero)
                .HasComment("Número que representa el código de la entidad emisora")
                .HasColumnName("Instituciones_Numero");
            entity.Property(e => e.MedicoCedula)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número de documento de indetidad electoral del medico.")
                .HasColumnName("Medico_Cedula");
            entity.Property(e => e.PrestadorEstado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Estado del presdor de servicios")
                .HasColumnName("Prestador_Estado");
            entity.Property(e => e.PrestadoraNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que especifica la Prestadora de Servicios de Salud.")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifica los posibles errores reportados")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("OK = Activo, RE = Rechazado.")
                .HasColumnName("Registro_Validacion_Estado");
        });

        modelBuilder.Entity<SeguimientosEsquemas28Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea });

            entity.ToTable("Seguimientos_Esquemas_28_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Código del seguimiento de la carga")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número de seguimiento del lote de carga")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número que indetifica la lineas de errores del archivo")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.FechaContratoInicia)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Campo que representa fecha de inicio del contrato con la ARS en formato (DDMMYYYY).")
                .HasColumnName("Fecha_Contrato_Inicia");
            entity.Property(e => e.FechaContratoTermina)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Campo que representa fecha de término de contrato con la ARS en formato (DDMMYYYY).")
                .HasColumnName("Fecha_Contrato_Termina");
            entity.Property(e => e.InstitucionNumero)
                .HasComment("Número que representa el código de la entidad emisora")
                .HasColumnName("Institucion_Numero");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número del Plan de Servicio de Salud Plan para el cual está contratado.")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PrestadorContratado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Especifica si la ARS tiene contrato con el medico (Especificar S o N).")
                .HasColumnName("Prestador_Contratado");
            entity.Property(e => e.PrestadorDondePrestaServicio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que especifica la Prestadora de Servicios de Salud.")
                .HasColumnName("Prestador_Donde_Presta_Servicio");
            entity.Property(e => e.PrestadorNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que especifica la Prestadora de Servicios de Salud.")
                .HasColumnName("Prestador_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifica los posibles errores reportados")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("Número único que identifica al Prestador de Servicio de Salud Institucional en el SIMON, donde el Profesional de la Salud presta los servicios específicos y para lo cual está contratado para un plan en específico. En caso de ser N = reportar cero (0).")
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.ServicioNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número del Servicio para el cual está contratado para el plan en específico. Descargar Catalogo_Servicios_PSS.xls disponible en la O.V.")
                .HasColumnName("Servicio_Numero");
            entity.Property(e => e.ServicioPropioPss)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Se indica con S o N, si el servicio contratado por la ARS, es propio de la PSS contratada o por lo contrario lo brinda a través de otra PSS.")
                .HasColumnName("Servicio_Propio_PSS");
            entity.Property(e => e.TipoPrestador)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Tipo_Prestador");
        });

        modelBuilder.Entity<SeguimientosEsquemas31Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Esquema_31_Trans");

            entity.ToTable("Seguimientos_Esquemas_31_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Código del seguimiento de la carga")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número de seguimiento del lote de carga")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número que indetifica la lineas de errores del archivo")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.ClaveAgentePromotor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Clave_Agente_Promotor");
            entity.Property(e => e.Estado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Estado del Afiliado relacionado al Plan (Alta/Baja)");
            entity.Property(e => e.FechaUltimoPagoFactura)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Ultimo_Pago_Factura");
            entity.Property(e => e.InicioVigencia)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Inicio_Vigencia");
            entity.Property(e => e.InstitucionNumero).HasColumnName("Institucion_Numero");
            entity.Property(e => e.ModalidadPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Modalidad_Pago");
            entity.Property(e => e.NssDependiente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número de Seguridad Social del dependiente\r\nreportado.")
                .HasColumnName("NSS_Dependiente");
            entity.Property(e => e.NssTitular)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número de Seguridad Social del titular reportado. ")
                .HasColumnName("NSS_Titular");
            entity.Property(e => e.Parentesco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Relación familiar del afiliado reportado. Ver catalogo de\r\nparentesco. ");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Numero único para cada plan asignado por la\r\nSISALRIL a su ARS. ")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PolizaNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Poliza_Numero");
            entity.Property(e => e.PrimaComercialMensual)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifican  los errores del del archivo de carga ")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("OK= Activo , RE=Rechazado")
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.TipoAfiliado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Identifica el tipo de afiliado,especificando T=Titular,\r\nD= Dependiente, A=Adicional")
                .HasColumnName("Tipo_Afiliado");
        });

        modelBuilder.Entity<SeguimientosEsquemas32Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Esquema_32_Trans");

            entity.ToTable("Seguimientos_Esquemas_32_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea).HasColumnName("Archivo_Linea");
            entity.Property(e => e.ClaveAgentePromotor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Clave_Agente_Promotor");
            entity.Property(e => e.Discapacitado)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Estado)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FechaNacimiento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Nacimiento");
            entity.Property(e => e.FechaUltimoPagoFactura)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Ultimo_Pago_Factura");
            entity.Property(e => e.InicioVigencia)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Inicio_Vigencia");
            entity.Property(e => e.InstitucionNumero).HasColumnName("Institucion_Numero");
            entity.Property(e => e.ModalidadPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Modalidad_Pago");
            entity.Property(e => e.NacionalidadNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.NumeroAfiliado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Numero_Afiliado");
            entity.Property(e => e.NumeroDocumentoProbatorioDependiente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Numero_Documento_Probatorio_Dependiente");
            entity.Property(e => e.NumeroDocumentoProbatorioTitular)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Numero_Documento_Probatorio_Titular");
            entity.Property(e => e.Parentesco)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PolizaTitularNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Poliza_Titular_Numero");
            entity.Property(e => e.PrimaComercialMensual)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.PrimerApellido)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Primer_Apellido");
            entity.Property(e => e.PrimerNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Primer_Nombre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.SegundoApellido)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Segundo_Apellido");
            entity.Property(e => e.SegundoNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Segundo_Nombre");
            entity.Property(e => e.Sexo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TipoAfiliado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Tipo_Afiliado");
            entity.Property(e => e.TipoDependiente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Tipo_Dependiente");
        });

        modelBuilder.Entity<SeguimientosEsquemas33Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Esquema_33_Trans");

            entity.ToTable("Seguimientos_Esquemas_33_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Código del seguimiento de la carga")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número de seguimiento del lote de carga")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número que indetifica la lineas de errores del archivo")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.CedulaTitular)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Número de Cédula asignada por la Junta Central Electoral.")
                .HasColumnName("Cedula_Titular");
            entity.Property(e => e.ClaveAgentePromotor)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("(La cédula o RNC del promotor será su clave ) ")
                .HasColumnName("Clave_Agente_Promotor");
            entity.Property(e => e.Estado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FechaUltimoPagoFactura)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Fecha_Ultimo_Pago_Factura");
            entity.Property(e => e.InicioVigencia)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Inicio_Vigencia");
            entity.Property(e => e.InstitucionNumero).HasColumnName("Institucion_Numero");
            entity.Property(e => e.ModalidadPago)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Modalidad_Pago");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Numero único del Plan que el afiliado tiene contratado con la ARS. (Asignado por la SISALRIL) \r\n(SIMON\\Consultas).")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PolizaTitularNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Poliza_Titular_Numero");
            entity.Property(e => e.PrimaComercialMensual)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifican  los errores del del archivo de carga ")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("OK= Activo , RE=Rechazado")
                .HasColumnName("Registro_Validacion_Estado");
        });

        modelBuilder.Entity<SeguimientosEsquemas34Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Esquema_34_Trans_Nueva");

            entity.ToTable("Seguimientos_Esquemas_34_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Código del seguimiento de la carga")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número de seguimiento del lote de carga")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número que indetifica la lineas de errores del archivo")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.CedulaTitular)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número de Cédula asignada por la Junta Central\r\nElectoral")
                .HasColumnName("Cedula_Titular");
            entity.Property(e => e.ClaveAgentePromotor)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Clave_Agente_Promotor");
            entity.Property(e => e.ClaveTipoDocumentoProbatorio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Clave del tipo de documento que comprueba la nacionalidad del trabajador.")
                .HasColumnName("Clave_Tipo_Documento_Probatorio");
            entity.Property(e => e.Discapacitado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Indica si el dependiente es o no discapacitado.\r\nS = SI y N = NO.");
            entity.Property(e => e.DocumentoDependiente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número de Cédula asignada por la Junta Central Electoral, en caso de\r\nque el dependiente sea mayor de edad")
                .HasColumnName("Documento_Dependiente");
            entity.Property(e => e.Estado)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FechaUltimoPagoFactura)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Ultimo_Pago_Factura");
            entity.Property(e => e.InicioVigencia)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Inicio_Vigencia");
            entity.Property(e => e.InstitucionNumero).HasColumnName("Institucion_Numero");
            entity.Property(e => e.ModalidadPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Modalidad_Pago");
            entity.Property(e => e.Parentesco)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Clave del catalogo de parentescos. ");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PolizaTitularNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Poliza_Titular_Numero");
            entity.Property(e => e.PrimaComercialMensual)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Prima_Comercial_Mensual");
            entity.Property(e => e.PrimerApellido)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Primer Apellido del dependiente.")
                .HasColumnName("Primer_Apellido");
            entity.Property(e => e.PrimerNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Primer nombre del dependiente")
                .HasColumnName("Primer_Nombre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifican  los errores del del archivo de carga ")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("OK= Activo , RE=Rechazado")
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.SegundoApellido)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Segundo Apellido del dependiente.")
                .HasColumnName("Segundo_Apellido");
            entity.Property(e => e.SegundoNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Segundo nombre del dependiente")
                .HasColumnName("Segundo_Nombre");
            entity.Property(e => e.Sexo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Sexo del dependiente. M = Masculino F = Femenino");
            entity.Property(e => e.TipoDependiente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("D/A Indica si el dependiente es directo o adicional")
                .HasColumnName("Tipo_Dependiente");
        });

        modelBuilder.Entity<SeguimientosEsquemas35SubTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Esquema_35_Sub_Trans");

            entity.ToTable("Seguimientos_Esquemas_35_Sub_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Código del seguimiento de la carga")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número de seguimiento del lote de carga")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número que indetifica la lineas de errores del archivo")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.ArsNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.CircunstanciaEgreso)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Solo sera llenado cuando el tipo de servicio coresponda a una hospitalización medica o quirulgica")
                .HasColumnName("Circunstancia_Egreso");
            entity.Property(e => e.CoberturaNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Son los procedimiento servicios y medicamentos previstos o analizado al afiliado.")
                .HasColumnName("Cobertura_Numero");
            entity.Property(e => e.EpisodioNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número unico para una relación de procedimiento realizado a un afiliado")
                .HasColumnName("Episodio_Numero");
            entity.Property(e => e.FechaApertura)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha en la que la RAS registra la autorizacion  en su sistema(DDMMAAAA)")
                .HasColumnName("Fecha_Apertura");
            entity.Property(e => e.FechaAutorizacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha a la que el PDSS solicta la atencion de prestacion de servicio a la ARS.")
                .HasColumnName("Fecha_Autorizacion");
            entity.Property(e => e.FechaEgreso)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Solo sera llenado cuando el tipo de servicio coresponda a una hospitalización medica o quirulgica")
                .HasColumnName("Fecha_Egreso");
            entity.Property(e => e.FechaPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha en que la ARS paga a la PSS por el servicio prestado (DDMMAAAA)")
                .HasColumnName("Fecha_Pago");
            entity.Property(e => e.FechaRealizacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha en la que el PSS presta servicio al afiliado.")
                .HasColumnName("Fecha_Realizacion");
            entity.Property(e => e.InstitucionNumero)
                .HasComment("Número unico asignado a cada ARS")
                .HasColumnName("Institucion_Numero");
            entity.Property(e => e.MontoPagado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Monto pagado por la ARS a la PSS")
                .HasColumnName("Monto_Pagado");
            entity.Property(e => e.MontoPagadoAfiliado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Monto pagado por el afiliado como copago")
                .HasColumnName("Monto_Pagado_Afiliado");
            entity.Property(e => e.MontoReclamado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Monto reclamado por la PSS a la ARS")
                .HasColumnName("Monto_Reclamado");
            entity.Property(e => e.Nss)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número de seguridad social del afiliado")
                .HasColumnName("NSS");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número único del plan que el afiliado tiene contratado con la ARS ")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número unico asignado a cada PSS\r\nSalud.")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifican  los errores del del archivo de carga ")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("OK= Activo , RE=Rechazado")
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.SubGrupoNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número del subgrupo del servicio  del PDSS  bajo el cual se presto la atencion al afiliado del PDSS")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.TipoAtencion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para indicar el tipo de atención del afiliado")
                .HasColumnName("Tipo_Atencion");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Caracterizacion del servicio prestado")
                .HasColumnName("Tipo_Servicio");
        });

        modelBuilder.Entity<SeguimientosEsquemas35Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Esquema_35_Trans");

            entity.ToTable("Seguimientos_Esquemas_35_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Código del seguimiento de la carga")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número de seguimiento del lote de carga")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número que indetifica la lineas de errores del archivo")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.ArsNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.CircunstanciaEgreso)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Solo sera llenado cuando el tipo de servicio coresponda a una hospitalización medica o quirulgica")
                .HasColumnName("Circunstancia_Egreso");
            entity.Property(e => e.CoberturaNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Son los procedimiento servicios y medicamentos previstos o analizado al afiliado.")
                .HasColumnName("Cobertura_Numero");
            entity.Property(e => e.EpisodioNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número unico para una relación de procedimiento realizado a un afiliado")
                .HasColumnName("Episodio_Numero");
            entity.Property(e => e.FechaApertura)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha en la que la RAS registra la autorizacion  en su sistema(DDMMAAAA)")
                .HasColumnName("Fecha_Apertura");
            entity.Property(e => e.FechaAutorizacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha a la que el PDSS solicta la atencion de prestacion de servicio a la ARS.")
                .HasColumnName("Fecha_Autorizacion");
            entity.Property(e => e.FechaEgreso)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Solo sera llenado cuando el tipo de servicio coresponda a una hospitalización medica o quirulgica")
                .HasColumnName("Fecha_Egreso");
            entity.Property(e => e.FechaPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha en que la ARS paga a la PSS por el servicio prestado (DDMMAAAA)")
                .HasColumnName("Fecha_Pago");
            entity.Property(e => e.FechaRealizacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha en la que el PSS presta servicio al afiliado.")
                .HasColumnName("Fecha_Realizacion");
            entity.Property(e => e.InstitucionNumero)
                .HasComment("Número unico asignado a cada ARS")
                .HasColumnName("Institucion_Numero");
            entity.Property(e => e.MontoPagado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Monto pagado por la ARS a la PSS")
                .HasColumnName("Monto_Pagado");
            entity.Property(e => e.MontoPagadoAfiliado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Monto pagado por el afiliado como copago")
                .HasColumnName("Monto_Pagado_Afiliado");
            entity.Property(e => e.MontoReclamado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Monto reclamado por la PSS a la ARS")
                .HasColumnName("Monto_Reclamado");
            entity.Property(e => e.Nss)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número de seguridad social del afiliado")
                .HasColumnName("NSS");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número único del plan que el afiliado tiene contratado con la ARS ")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número unico asignado a cada PSS\r\nSalud.")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifican  los errores del del archivo de carga ")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("OK= Activo , RE=Rechazado")
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.SubGrupoNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número del subgrupo del servicio  del PDSS  bajo el cual se presto la atencion al afiliado del PDSS")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.TipoAtencion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para indicar el tipo de atención del afiliado")
                .HasColumnName("Tipo_Atencion");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Caracterizacion del servicio prestado")
                .HasColumnName("Tipo_Servicio");
        });

        modelBuilder.Entity<SeguimientosEsquemas35ValidacionesCatum>(entity =>
        {
            entity.HasKey(e => new { e.ArsNumero, e.PlanTipoNumero, e.SubGrupoCodigo, e.AtencionTipoCodigo, e.CuentaCodigo });

            entity.ToTable("Seguimientos_Esquemas_35_Validaciones_Cata", tb => tb.HasComment("Es una tabla catálogo de validaciones para el esquema 0035 para seguimiento de las cuentas contenidas en este por parte del área técnica."));

            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.PlanTipoNumero)
                .HasComment("Número único asignado a cada tipo de plan de salud.")
                .HasColumnName("Plan_Tipo_Numero");
            entity.Property(e => e.SubGrupoCodigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("Código creado a partir de la combinación de numero de grupo con el numero del subgrupo separados por un punto (.). ")
                .HasColumnName("SubGrupo_Codigo");
            entity.Property(e => e.AtencionTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del Tipo de Atención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Atencion_Tipo_Codigo");
            entity.Property(e => e.CuentaCodigo)
                .HasComment("Es el código único que representa cada cuenta contable en el catálogo de cuentas.")
                .HasColumnName("Cuenta_Codigo");
            entity.Property(e => e.GrupoNumero)
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SubGrupoNumero)
                .HasComment("Número único asignado al subgrupo del PDSS, se incrementa de 1 a N para cada grupo del PDSS.")
                .HasColumnName("SubGrupo_Numero");

            entity.HasOne(d => d.AtencionTipoCodigoNavigation).WithMany(p => p.SeguimientosEsquemas35ValidacionesCata)
                .HasForeignKey(d => d.AtencionTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Esquemas_35_Validaciones_Cata_Episodios_Atenciones_Tipo_Cata1");

            entity.HasOne(d => d.CuentaCodigoNavigation).WithMany(p => p.SeguimientosEsquemas35ValidacionesCata)
                .HasForeignKey(d => d.CuentaCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Esquemas_35_Validacion_Cata_Financieros_Cuentas_Cata");

            entity.HasOne(d => d.PlanTipoNumeroNavigation).WithMany(p => p.SeguimientosEsquemas35ValidacionesCata)
                .HasForeignKey(d => d.PlanTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Esquemas_35_Validaciones_Cata_Planes_Tipo_Cata");

            entity.HasOne(d => d.SubGruposCatum).WithMany(p => p.SeguimientosEsquemas35ValidacionesCata)
                .HasForeignKey(d => new { d.GrupoNumero, d.SubGrupoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Esquemas_35_Validaciones_Cata_SubGrupos_Cata");
        });

        modelBuilder.Entity<SeguimientosEsquemas36Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Esquema_36_Trans");

            entity.ToTable("Seguimientos_Esquemas_36_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Código del seguimiento de la carga")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número de seguimiento del lote de carga")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número que indetifica la lineas de errores del archivo")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.CausaMuerteRecienNacido)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo se completará en caso de ser registrado un recién nacido muerto con la causa principal de muerte del mismo. Ver Códigos CIE-10; esto solo cuando el campo Recién Nacido Muerto, contenga información.")
                .HasColumnName("Causa_Muerte_Recien_Nacido");
            entity.Property(e => e.CircunstanciaEgreso)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Solo sera llenado cuando el tipo de servicio coresponda a una hospitalización medica o quirulgica")
                .HasColumnName("Circunstancia_Egreso");
            entity.Property(e => e.Complicaciones)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo debe ser llenado en caso de ocurrir un evento o padecimiento inesperado ya sea clínico o quirúrgico. Se validará que el diagnóstico asignado se encuentre contenido en el Catálogo del CIE-10.");
            entity.Property(e => e.DiagnosticoPrincipal)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo es para ser completado con el diagnóstico dado al padecimiento del asegurado, el cual será seleccionado del Catálogo anexo del CIE 10.")
                .HasColumnName("Diagnostico_Principal");
            entity.Property(e => e.DiagnosticoSecundario1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo es para ser completado con el diagnóstico dado al padecimiento del asegurado, el cual será seleccionado del Catálogo anexo del CIE 10.")
                .HasColumnName("Diagnostico_Secundario_1");
            entity.Property(e => e.DiagnosticoSecundario2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo es para ser completado con el diagnóstico dado al padecimiento del asegurado, el cual será seleccionado del Catálogo anexo del CIE 10.")
                .HasColumnName("Diagnostico_Secundario_2");
            entity.Property(e => e.EpisodioNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número unico para una relación de procedimiento realizado a un afiliado")
                .HasColumnName("Episodio_Numero");
            entity.Property(e => e.Fallecimiento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Este campo debe ser completado en caso que se produzca el deceso  o muerte del asegurado. Ver Códigos CIE-10. Esta fecha deberá ser menor o igual a la Fecha de realización.");
            entity.Property(e => e.FechaEgreso)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Solo sera llenado cuando el tipo de servicio coresponda a una hospitalización medica o quirulgica")
                .HasColumnName("Fecha_Egreso");
            entity.Property(e => e.FechaRealizacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha en la que el PSS presta servicio al afiliado.")
                .HasColumnName("Fecha_Realizacion");
            entity.Property(e => e.InstitucionNumero)
                .HasComment("Número unico asignado a cada ARS")
                .HasColumnName("Institucion_Numero");
            entity.Property(e => e.Menor01AnioNoRegistrado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("En este campo debe ser obligatorio su llenado en caso de que la atención corresponda a menores de 0-1 año no registrado como asegurado. Se consignará para este campo la letra M de Menor, de lo contrario A de Asegurado.")
                .HasColumnName("Menor_0_1_Anio_No_Registrado");
            entity.Property(e => e.Nss)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número de seguridad social del afiliado")
                .HasColumnName("NSS");
            entity.Property(e => e.PlanNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número único del plan que el afiliado tiene contratado con la ARS ")
                .HasColumnName("Plan_Numero");
            entity.Property(e => e.PrestadoraNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número unico asignado a cada PSS\r\nSalud.")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.RecienNacidoMuerto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("En este campo se consignará obligatoriamente el número de recién nacidos muertos, en caso de ocurrir este evento.")
                .HasColumnName("Recien_Nacido_Muerto");
            entity.Property(e => e.RecienNacidoVivo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("En este campo se consignará obligatoriamente el número de nacidos vivos, en caso de ocurrir este evento.")
                .HasColumnName("Recien_Nacido_Vivo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifican  los errores del del archivo de carga ")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("OK = Activo , RE = Rechazado")
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.SubGrupoNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número del subgrupo del servicio  del PDSS  bajo el cual se presto la atencion al afiliado del PDSS")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.TipoAtencion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para indicar el tipo de atención del afiliado")
                .HasColumnName("Tipo_Atencion");
            entity.Property(e => e.TipoServicio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Caracterizacion del servicio prestado")
                .HasColumnName("Tipo_Servicio");
        });

        modelBuilder.Entity<SeguimientosEsquemas37Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea });

            entity.ToTable("Seguimientos_Esquemas_37_Trans", tb => tb.HasComment("Es una tabla transaccional, de los Reporte de Accidentes de Tránsitos no Laborales cubierto por la ARS, loa cuales son registrados de las ARS, con los datos que durante la validación dieron errores, su fuente de datos es el Esquema 37 procesado por el Robot Simon."));

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico.")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número único asignado a cada registro del archivo temporal de una carga de esquema especifica (Seguimiento + Lote).")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.AccidenteFecha)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha del Accidente.")
                .HasColumnName("Accidente_Fecha");
            entity.Property(e => e.AccidenteHora)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Hora del Accidente.")
                .HasColumnName("Accidente_Hora");
            entity.Property(e => e.DiagnosticoFinalCodigo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Diagnóstico Final (código CIE).")
                .HasColumnName("Diagnostico_Final_Codigo");
            entity.Property(e => e.DiagnosticoInicialCodigo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Diagnóstico Inicial (código CIE).")
                .HasColumnName("Diagnostico_Inicial_Codigo");
            entity.Property(e => e.FechaActualizacionOrigen)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha en que se actualizó el origen del Accidente. ")
                .HasColumnName("Fecha_Actualizacion_Origen");
            entity.Property(e => e.InstitucionNumero)
                .HasComment("Número de la institución que es o a la que pertenece la ARS.")
                .HasColumnName("Institucion_Numero");
            entity.Property(e => e.MunicipioNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Municipio donde ocurrió el Accidente.")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.NssAfiliado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Nss_Afiliado");
            entity.Property(e => e.NuevoOrigen)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Cambio del Origen del Accidente.")
                .HasColumnName("Nuevo_Origen");
            entity.Property(e => e.NumeroAutorizacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número único que asigna la ARS a cada autorización de cobertura en su sistema.")
                .HasColumnName("Numero_Autorizacion");
            entity.Property(e => e.OrigenNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Origen del Accidente.")
                .HasColumnName("Origen_Numero");
            entity.Property(e => e.PosicionLesionadoNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Posición del lesionado en el Accidente.")
                .HasColumnName("Posicion_Lesionado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifica los errores del archivo de carga.")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Representa el estado en que se encuentra un registro en una tabla de validación del Esquema (OK=Activo, RE=Rechazado).")
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.TipoColisionNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Con que Colisionó el Afiliado.")
                .HasColumnName("Tipo_Colision_Numero");
            entity.Property(e => e.TipoVehiculoNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Tipo de Vehículo en el cual ocurrió el Accidente.")
                .HasColumnName("Tipo_Vehiculo_Numero");
        });

        modelBuilder.Entity<SeguimientosEsquemas40Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Esquema_40_Trans");

            entity.ToTable("Seguimientos_Esquemas_40_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Código del seguimiento de la carga")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número de seguimiento del lote de carga")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número que indetifica la lineas de errores del archivo")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.ArsNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número unico asignado a cada ARS")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.CoberturaNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Son las actividades o servicios provistos o realizados al afiliado")
                .HasColumnName("Cobertura_Numero");
            entity.Property(e => e.EventoNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número único para una relación de actividades/servicios realizados, el cual se repite para cada afiliado que participa en el evento")
                .HasColumnName("Evento_Numero");
            entity.Property(e => e.FechaRealizacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha en la que la PSS presta el servicio al afiliado. (DDMMAAAA)")
                .HasColumnName("Fecha_Realizacion");
            entity.Property(e => e.InstitucionNumero).HasColumnName("Institucion_Numero");
            entity.Property(e => e.MontoEvento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .HasComment("Monto pagado por evento.")
                .HasColumnName("Monto_Evento");
            entity.Property(e => e.MunicipioNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Zona donde fue brindado la actividad o servicio al afiliado.")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.Nss)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número de seguridad social del afiliado")
                .HasColumnName("NSS");
            entity.Property(e => e.PrestadoraNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número unico asignado a cada PSS")
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifican  los errores del del archivo de carga ")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("OK= Activo , RE=Rechazado")
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.SubGrupoNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Esto solo aplica para los Subgrupos del Grupo 1 del Catalogo de Prestaciones del PDSS.")
                .HasColumnName("SubGrupo_Numero");
        });

        modelBuilder.Entity<SeguimientosEsquemas41Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Seguimientos_Esquemas_0041");

            entity.ToTable("Seguimientos_Esquemas_41_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea).HasColumnName("Archivo_Linea");
            entity.Property(e => e.CausaReferencia)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Causa_Referencia");
            entity.Property(e => e.Cobertura)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CodigoDiagnosticoPrincipal)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Codigo_Diagnostico_Principal");
            entity.Property(e => e.CodigoIntervencion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Codigo_Intervencion");
            entity.Property(e => e.EpisodioNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Episodio_Numero");
            entity.Property(e => e.FechaAtencion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Atencion");
            entity.Property(e => e.FechaFactura)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Factura");
            entity.Property(e => e.FechaNacimientoRecienNacido)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Nacimiento_Recien_Nacido");
            entity.Property(e => e.FechaPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Pago");
            entity.Property(e => e.Frecuencia)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HistoriaClinicaNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Historia_Clinica_Numero");
            entity.Property(e => e.InstitucionNumero).HasColumnName("Institucion_Numero");
            entity.Property(e => e.Nss)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NSS");
            entity.Property(e => e.NumeroFacturaSrs)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Numero_Factura_SRS");
            entity.Property(e => e.NumeroFichaFamiliar)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Numero_Ficha_Familiar");
            entity.Property(e => e.PrestadoraNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.PrestadoraNumeroReferido)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Numero_Referido");
            entity.Property(e => e.PrestadoraNumeroSrs)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Numero_SRS");
            entity.Property(e => e.RecienNacidos)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Recien_Nacidos");
            entity.Property(e => e.RecurrenciaDiagnostico)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Recurrencia_Diagnostico");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.TipoAtencion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Tipo_Atencion");
            entity.Property(e => e.TipoPersonalPrestaServicio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Tipo_Personal_Presta_Servicio");
            entity.Property(e => e.TipoReferencia)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Tipo_Referencia");
            entity.Property(e => e.VacunaDosisORefuerzo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Vacuna_Dosis_O_Refuerzo");
            entity.Property(e => e.ValorPagado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Valor_Pagado");
            entity.Property(e => e.ValorReclamado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Valor_Reclamado");
        });

        modelBuilder.Entity<SeguimientosEsquemas50Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Esquema_0050");

            entity.ToTable("Seguimientos_Esquemas_50_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea).HasColumnName("Archivo_Linea");
            entity.Property(e => e.MontoReclamado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Monto_Reclamado");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("No_Documento");
            entity.Property(e => e.ReclamacionFecha)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Reclamacion_Fecha");
            entity.Property(e => e.ReclamacionNotificacionTipoNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Reclamacion_Notificacion_Tipo_Numero");
            entity.Property(e => e.ReclamacionNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Reclamacion_Numero");
            entity.Property(e => e.ReclamanteTipoNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Reclamante_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Estado");
        });

        modelBuilder.Entity<SeguimientosEsquemas51Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Esquema_0051");

            entity.ToTable("Seguimientos_Esquemas_51_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea).HasColumnName("Archivo_Linea");
            entity.Property(e => e.CantidadHijos)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .HasColumnName("Cantidad_Hijos");
            entity.Property(e => e.CiioCodigo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CIIO_Codigo");
            entity.Property(e => e.CodigoCie10)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Codigo_CIE10");
            entity.Property(e => e.ContingenciaTipoNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Contingencia_Tipo_Numero");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.FechaAccidenteTrabajo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Accidente_Trabajo");
            entity.Property(e => e.FechaAltaPrestadora)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Alta_Prestadora");
            entity.Property(e => e.FechaNotificacionAt)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Notificacion_AT");
            entity.Property(e => e.HoraAt)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Hora_AT");
            entity.Property(e => e.HoraDejoTrabajar)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Hora_Dejo_Trabajar");
            entity.Property(e => e.MunicipioNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("No_Documento");
            entity.Property(e => e.PrestadoraNumeroPrimeraAtencion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Numero_Primera_Atencion");
            entity.Property(e => e.PrestadoraNumeroSegundaAtencion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Numero_Segunda_Atencion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.RncOCedula)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Rnc_O_Cedula");
            entity.Property(e => e.Salario)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SeveridadLesionTipoNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Severidad_Lesion_Tipo_Numero");
        });

        modelBuilder.Entity<SeguimientosEsquemas52Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Esquema_0052");

            entity.ToTable("Seguimientos_Esquemas_52_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea).HasColumnName("Archivo_Linea");
            entity.Property(e => e.CiioCodigo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CIIO_Codigo");
            entity.Property(e => e.CodigoCie10)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Codigo_CIE10");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.FechaDiagnostico)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Fecha_Diagnostico");
            entity.Property(e => e.FechaNotificacionEp)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Notificacion_EP");
            entity.Property(e => e.MedicoCedula)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Medico_Cedula");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("No_Documento");
            entity.Property(e => e.PrestadoraNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Prestadora_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.ResgistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Resgistro_Usuario");
            entity.Property(e => e.RncOCedula)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Rnc_O_Cedula");
            entity.Property(e => e.TiempoActividadLaboralAnioEp)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Tiempo_Actividad_Laboral_Anio_EP");
            entity.Property(e => e.TiempoActividadLaboralMesEp)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Tiempo_Actividad_Laboral_Mes_EP");
        });

        modelBuilder.Entity<SeguimientosEsquemas53Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Esquema_0053");

            entity.ToTable("Seguimientos_Esquemas_53_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea).HasColumnName("Archivo_Linea");
            entity.Property(e => e.CantidadPagosRetroactivosAcum)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Cantidad_Pagos_Retroactivos_Acum");
            entity.Property(e => e.ExpedienteArlNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Expediente_ARL_Numero");
            entity.Property(e => e.FechaInicioPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Inicio_Pago");
            entity.Property(e => e.FechaUltimoPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Ultimo_Pago");
            entity.Property(e => e.InstitucionCodigo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Institucion_Codigo");
            entity.Property(e => e.MontoCalculadoPrestacionEconomica)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Monto_Calculado_Prestacion_Economica");
            entity.Property(e => e.MontoPrimerPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Monto_Primer_Pago");
            entity.Property(e => e.MontoRetroactivo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Monto_Retroactivo");
            entity.Property(e => e.NoDocumentoBeneficiario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("No_Documento_Beneficiario");
            entity.Property(e => e.NoDocumentoTrabajador)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("No_Documento_Trabajador");
            entity.Property(e => e.PrestacionTipoNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Prestacion_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.RncOCedula)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Rnc_O_Cedula");
            entity.Property(e => e.SalarioNotificadoSuirCalculado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Salario_Notificado_SUIR_Calculado");
        });

        modelBuilder.Entity<SeguimientosEsquemas54Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }).HasName("PK_Esquema_0054");

            entity.ToTable("Seguimientos_Esquemas_54_Trans");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea).HasColumnName("Archivo_Linea");
            entity.Property(e => e.CoberturaTipoNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Cobertura_Tipo_Numero");
            entity.Property(e => e.CodigoCie9)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Codigo_CIE9");
            entity.Property(e => e.FechaPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Fecha_Pago");
            entity.Property(e => e.MontoPagadoProcedimiento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Monto_Pagado_Procedimiento");
            entity.Property(e => e.MontoReclamadoProcedimiento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Monto_Reclamado_Procedimiento");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("No_Documento");
            entity.Property(e => e.PagoTipoNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Pago_Tipo_Numero");
            entity.Property(e => e.ReclamacionFecha)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Reclamacion_Fecha");
            entity.Property(e => e.ReclamacionNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Reclamacion_Numero");
            entity.Property(e => e.ReclamanteTipoNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Reclamante_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Registro_Validacion_Estado");
        });

        modelBuilder.Entity<SeguimientosEsquemas61Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea });

            entity.ToTable("Seguimientos_Esquemas_61_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número único asignado a cada registro del archivo temporal de una carga de esquema especifica (Seguimiento + Lote).")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.CedulaTrabajador)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número de Cédula del trabajador asignada por la Junta Central Electoral.")
                .HasColumnName("Cedula_Trabajador");
            entity.Property(e => e.FechaAccidente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha del Accidente Reportado. Debe contener el siguiente formato DDMMYYYY.  Solo aplica cuando el tipo notificación es 1 en caso reportar en blanco.")
                .HasColumnName("Fecha_Accidente");
            entity.Property(e => e.FechaIngreso)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha en la Ingreso a la  Empresa. Debe contener el siguiente formato DDMMYYYY.")
                .HasColumnName("Fecha_Ingreso");
            entity.Property(e => e.FechaNotificacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha de notificación del Accidente de Trabajo / Enfermedad Profesional. Debe contener el siguiente formato DDMMYYYY.")
                .HasColumnName("Fecha_Notificacion");
            entity.Property(e => e.HoraAccidente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Hora del accidente, contendrá el siguiente formato HH:MM, hora marina. Solo aplica cuando el tipo notificación es 1 en caso reportar en blanco.")
                .HasColumnName("Hora_Accidente");
            entity.Property(e => e.IdentificoPss)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para especificar si se tiene identificado la PSS de atención,  indicar S o N.")
                .HasColumnName("Identifico_PSS");
            entity.Property(e => e.LugarAtencion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Indica número de PSS donde se le brindo la atención al trabajador. Sera validada la PSS cuando el tipo de notificación sea  1, en caso contrario deberá ser reportado en 0.")
                .HasColumnName("Lugar_Atencion");
            entity.Property(e => e.MunicipioNumero)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número del municipio donde sucedió el accidente.")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.NumeroExpedienteArl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar el número de expediente dado por la ARL SS.")
                .HasColumnName("Numero_Expediente_ARL");
            entity.Property(e => e.OcupacionTrabajador)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Código de Ocupación, según clasificación internacional de ocupaciones CIUO 88.")
                .HasColumnName("Ocupacion_Trabajador");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifica los posibles errores reportados.")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("OK = Activo, RE = Rechazado.")
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.RncEmpresa)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Registro Nacional de Contribuyente de la Empresa que reportó al trabajador.")
                .HasColumnName("RNC_Empresa");
            entity.Property(e => e.TipoNotificacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para identificar el tipo de notificación 1 .Notificación AT y 2. Notificación E.P.")
                .HasColumnName("Tipo_Notificacion");
        });

        modelBuilder.Entity<SeguimientosEsquemas62Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea });

            entity.ToTable("Seguimientos_Esquemas_62_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número único asignado a cada registro del archivo temporal de una carga de esquema especifica (Seguimiento + Lote).")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.Diagnostico)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Código del diagnostico, Según codificación CIE-10.");
            entity.Property(e => e.EstadoCalificacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("1= Aprobado, 2 = Declinado. Si el estado de la calificación = 2, reportar grado de lesión 5 y tipo contingencia = 0.")
                .HasColumnName("Estado_Calificacion");
            entity.Property(e => e.FechaCalificacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha de Calificación del AT /EP, contendrá el siguiente formato DDMMYYYY.")
                .HasColumnName("Fecha_Calificacion");
            entity.Property(e => e.FechaDejoTrabajar)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha en la salió de sus labores previo a el  accidente de trabajo contendrá el siguiente  formato DDMMYYYY. Esto solo aplica para el tipo de notificación 1, caso contrario en blanco.")
                .HasColumnName("Fecha_Dejo_Trabajar");
            entity.Property(e => e.FechaEvento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha en la que sucedió el  AT o Diagnostico de EP. Contendrá el siguiente formato DDMMYYYY.")
                .HasColumnName("Fecha_Evento");
            entity.Property(e => e.GradoLesion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Código valido para reportar  el  tipo de lesión de acuerdo al accidente reportado.")
                .HasColumnName("Grado_Lesion");
            entity.Property(e => e.HoraAccidente)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Hora en la que sucedió el accidente contendrá el siguiente formato hh:mm, hora marina, será válido para el tipo de notificación 1. Caso contrario en blanco.")
                .HasColumnName("Hora_Accidente");
            entity.Property(e => e.IdentificoPss)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para especificar si se tiene identificado la PSS de atención,  indicar S o N.")
                .HasColumnName("Identifico_PSS");
            entity.Property(e => e.LugarAtencion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Indica número de PSS donde se le brindo la atención al trabajador. Sera validada la PSS cuando el tipo de notificación sea  1, en caso contrario deberá ser reportado en 0.")
                .HasColumnName("Lugar_Atencion");
            entity.Property(e => e.NumeroExpedienteArl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar el número de expediente dado por la ARL SS.")
                .HasColumnName("Numero_Expediente_ARL");
            entity.Property(e => e.PssMedicoTratante)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Identifica el número único asignado de PSS al Medico en el SIMON. Ver Catálogo de PSS (SIMON).")
                .HasColumnName("PSS_Medico_Tratante");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifica los posibles errores reportados.")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("OK = Activo, RE = Rechazado.")
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.TipoContingencia)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Código valido para reportar el tipo de contingencia de acuerdo al accidente reportado.")
                .HasColumnName("Tipo_Contingencia");
            entity.Property(e => e.TipoNotificacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para identificar el tipo de notificación 1 .Notificación AT y 2. Notificación E.P.")
                .HasColumnName("Tipo_Notificacion");
            entity.Property(e => e.TipoProceso)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Tipo de proceso en el cual se encuentra la solicitud AT /EP. Ver catálogo Tipo Proceso.")
                .HasColumnName("Tipo_Proceso");
        });

        modelBuilder.Entity<SeguimientosEsquemas63Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea });

            entity.ToTable("Seguimientos_Esquemas_63_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número único asignado a cada registro del archivo temporal de una carga de esquema especifica (Seguimiento + Lote).")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.FechaReclamacio)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar la fecha en que se realizo la reclamación a la ARLSS. Contendrá el siguiente formato DDMMYYYY.")
                .HasColumnName("Fecha_Reclamacio");
            entity.Property(e => e.MontoReclamado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar el monto reclamado  a la ARLSS, (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales). En caso de subsidio por Incapacidad Temporal, el campo monto reclamado será igual a cero. Cuando el tipo de reclamación sea por incapacidad  temporal (código 05), reportar en 0 ejemplo: 00000000.00.")
                .HasColumnName("Monto_Reclamado");
            entity.Property(e => e.NumeroExpedienteArl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar el número de expediente dado por la ARL SS.")
                .HasColumnName("Numero_Expediente_ARL");
            entity.Property(e => e.NumeroReclamacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar el número de reclamación asignado por la ARLSS.")
                .HasColumnName("Numero_Reclamacion");
            entity.Property(e => e.ReclamanteDocumento)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Es el número de documento o identificación que aplica  según el tipo de reclamante. Ver Tabla Tipo de Reclamante.")
                .HasColumnName("Reclamante_Documento");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifica los posibles errores reportados.")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("OK = Activo, RE = Rechazado.")
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.SalarioPromedioTss)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar el salario del trabajador accidentado acorde con lo registrado en TSS. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales). Cuando el tipo de reclamación sea por prestaciones en especie (Gastos en Salud)  (código 10), reportar en 0 ejemplo: 00000000.00.")
                .HasColumnName("Salario_Promedio_TSS");
            entity.Property(e => e.TipoReclamacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Código valido para reportar el tipo de reclamación o notificación. Ver Tabla de tipo de reclamación o notificación.")
                .HasColumnName("Tipo_Reclamacion");
            entity.Property(e => e.TipoReclamante)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Código valido para reportar el tipo de reclamante que realizo la reclamación a la ARLSS.  Ver Tabla Tipo de Reclamante.")
                .HasColumnName("Tipo_Reclamante");
        });

        modelBuilder.Entity<SeguimientosEsquemas64Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea });

            entity.ToTable("Seguimientos_Esquemas_64_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número único asignado a cada registro del archivo temporal de una carga de esquema especifica (Seguimiento + Lote).")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.FechaPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar la fecha en que se realizo el pago. Contendrá el siguiente formato DDMMYYYY.")
                .HasColumnName("Fecha_Pago");
            entity.Property(e => e.MontoPagado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Monto pagado por la ARL al beneficiario. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales). ")
                .HasColumnName("Monto_Pagado");
            entity.Property(e => e.NumeroDocumentoPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número de identificación de la transacción del pago. En caso de que la vía de pago  sea igual a CK, será requerido Número de Cheque, caso contrario reporta en cero.")
                .HasColumnName("Numero_Documento_Pago");
            entity.Property(e => e.NumeroExpedienteArl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar el número de expediente dado por la ARL SS.")
                .HasColumnName("Numero_Expediente_ARL");
            entity.Property(e => e.NumeroReclamacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar el número de reclamación asignado por la ARLSS.")
                .HasColumnName("Numero_Reclamacion");
            entity.Property(e => e.NumeroSolicitudPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número único asignado por la ARL a cada solicitud de pago. Reportar en cero en caso de no tenerlo.")
                .HasColumnName("Numero_Solicitud_Pago");
            entity.Property(e => e.ProcedimientoMedicoPagado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Código del procedimiento Medico, Según codificación CIE-09, en caso de no tener la información, reportar en cero, Ej.: 0000000000.")
                .HasColumnName("Procedimiento_Medico_Pagado");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifica los posibles errores reportados.")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("OK = Activo, RE = Rechazado.")
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.ViaPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para especificar si el pago fue TB = Transferencia Bancaria o CK = Cheque.")
                .HasColumnName("Via_Pago");
        });

        modelBuilder.Entity<SeguimientosEsquemas65Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea });

            entity.ToTable("Seguimientos_Esquemas_65_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número único asignado a cada registro del archivo temporal de una carga de esquema especifica (Seguimiento + Lote).")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.FechaPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar la fecha en que se realizo el pago. Contendrá el siguiente formato DDMMYYYY.")
                .HasColumnName("Fecha_Pago");
            entity.Property(e => e.FechaSolicitud)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar la fecha en que se realizo solicitud de la evaluación de la discapacidad formato  DDMMYYYY.")
                .HasColumnName("Fecha_Solicitud");
            entity.Property(e => e.MontoPrestacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar el monto calculado de la prestación económica por mes que  se le va a pagar al trabajador. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnName("Monto_Prestacion");
            entity.Property(e => e.NumeroDocumentoPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número de identificación de la transacción del pago. En caso de que la vía de pago  sea igual a CK, será requerido Número de Cheque, caso contrario reporta en cero.")
                .HasColumnName("Numero_Documento_Pago");
            entity.Property(e => e.NumeroExpedienteArl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar el número de expediente dado por la ARL SS.")
                .HasColumnName("Numero_Expediente_ARL");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifica los posibles errores reportados.")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("OK = Activo, RE = Rechazado.")
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.TipoPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para especificar si el pago es 1= Retroactivo, 2 = Único, 3 =Pensión.")
                .HasColumnName("Tipo_Pago");
            entity.Property(e => e.TipoPrestacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Código valido para reportar  el  tipo de Prestación. Solo reportar 2 = Indemnización y  3 = Pensión por  Discapacidad.")
                .HasColumnName("Tipo_Prestacion");
            entity.Property(e => e.ViaPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para especificar si el pago fue TB = Transferencia Bancaria o CK = Cheque.")
                .HasColumnName("Via_Pago");
        });

        modelBuilder.Entity<SeguimientosEsquemas66Tran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea });

            entity.ToTable("Seguimientos_Esquemas_66_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número único asignado a cada registro del archivo temporal de una carga de esquema especifica (Seguimiento + Lote).")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.CantidadBeneficiarios)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Reportar la cantidad de beneficiarios.")
                .HasColumnName("Cantidad_Beneficiarios");
            entity.Property(e => e.CedulaBeneficiario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar número de identificación y electoral del beneficiario.")
                .HasColumnName("Cedula_Beneficiario");
            entity.Property(e => e.FechaPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Fecha en que se realizo el pago   Debe ser la fecha correspondiente al periodo reportado y contener el siguiente formato: DDMMYYYY.")
                .HasColumnName("Fecha_Pago");
            entity.Property(e => e.FechaSolicitud)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar la fecha en que se realizo solicitud de la evaluación de la discapacidad formato  DDMMYYYY.")
                .HasColumnName("Fecha_Solicitud");
            entity.Property(e => e.MontoPrestacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar el monto calculado de la prestación económica por mes que  se le va a pagar al trabajador. (Utilice 9999999.99 para cuando tenga decimales y/o 9999999.00 cuando no tenga decimales).")
                .HasColumnName("Monto_Prestacion");
            entity.Property(e => e.NumeroDocumentoPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número de identificación de la transacción del pago. En caso de que la vía de pago  sea igual a CK, será requerido Número de Cheque, caso contrario reporta en cero.")
                .HasColumnName("Numero_Documento_Pago");
            entity.Property(e => e.NumeroExpedienteArl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para reportar el número de expediente dado por la ARL SS.")
                .HasColumnName("Numero_Expediente_ARL");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroValidacionErrores)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Número que identifica los posibles errores reportados.")
                .HasColumnName("Registro_Validacion_Errores");
            entity.Property(e => e.RegistroValidacionEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("OK = Activo, RE = Rechazado.")
                .HasColumnName("Registro_Validacion_Estado");
            entity.Property(e => e.TipoBeneficiario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("1 = Conyugue, 2 =Tutor, 3 = Hijo Mayor.")
                .HasColumnName("Tipo_Beneficiario");
            entity.Property(e => e.TipoPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para especificar si el pago es 1= Retroactivo, 2 = Único, 3 =Pensión.")
                .HasColumnName("Tipo_Pago");
            entity.Property(e => e.TipoPrestacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Código valido para reportar  el  tipo de Prestación. Solo reportar 4= Pensión Viudez. Y  5 = Pensión Orfandad.")
                .HasColumnName("Tipo_Prestacion");
            entity.Property(e => e.ViaPago)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Para especificar si el pago fue TB = Transferencia Bancaria o CK = Cheque.")
                .HasColumnName("Via_Pago");
        });

        modelBuilder.Entity<SeguimientosEsquemasCatum>(entity =>
        {
            entity.HasKey(e => e.EsquemaNumero).HasName("PK_Informe");

            entity.ToTable("Seguimientos_Esquemas_Cata", tb => tb.HasComment("Es un catálogo de los tipos de esquemas  que deben cargar las ARS/ARL para su supervisión y seguimiento, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.EsquemaNumero)
                .HasComment("Número único que representa cada  esquema.")
                .HasColumnName("Esquema_Numero");
            entity.Property(e => e.EsquemaCierrePeriodo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Esquema_Cierre_Periodo");
            entity.Property(e => e.EsquemaDescripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Descripción del esquema.")
                .HasColumnName("Esquema_Descripcion");
            entity.Property(e => e.EsquemaDiaDebeEnviarlo)
                .HasComment("Día del mes en que debe iniciar el envió  (Carga) del esquema.")
                .HasColumnName("Esquema_Dia_Debe_Enviarlo");
            entity.Property(e => e.EsquemaDiasParaEnvio)
                .HasDefaultValueSql("((5))")
                .HasComment("Día que de que dispone la ARS/ARL para el envió  (Carga) del esquema.")
                .HasColumnName("Esquema_Dias_Para_Envio");
            entity.Property(e => e.EsquemaExplicacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasDefaultValueSql("('Defineme ')")
                .HasComment("Breve explicación de la descripción del esquema.")
                .HasColumnName("Esquema_Explicacion");
            entity.Property(e => e.EsquemaFrecuente)
                .HasComment("Indica si el esquema es de envío periódico u ocasional.")
                .HasColumnName("Esquema_Frecuente");
            entity.Property(e => e.EsquemaImagenUrl)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/A')")
                .HasComment("Dirección de la carpeta donde se encuentra ubicado el archivo de la imagen (JPG) del esquema.")
                .HasColumnName("Esquema_Imagen_URL");
            entity.Property(e => e.EsquemaTabla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Tabla (Objeto) donde se guardan las informaciones de cada  esquema.")
                .HasColumnName("Esquema_Tabla");
            entity.Property(e => e.EsquemaUltimoDiaEnvio)
                .HasComment("Ultimo día del mes hasta el cual puede ser enviada la carga del esquema por las ARS/ARL.")
                .HasColumnName("Esquema_Ultimo_Dia_Envio");
            entity.Property(e => e.GrupoSeguridadNumero)
                .HasComment("Número único del grupo de seguridad al que pertenecen los usuarios de los sistemas de información.")
                .HasColumnName("Grupo_Seguridad_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.GrupoSeguridadNumeroNavigation).WithMany(p => p.SeguimientosEsquemasCata)
                .HasForeignKey(d => d.GrupoSeguridadNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Esquemas_Cata_Seguridad_Grupos_Cata");
        });

        modelBuilder.Entity<SeguimientosEsquemasEstructurasCatum>(entity =>
        {
            entity.HasKey(e => new { e.EsquemaNumero, e.EstructuraSecuencia });

            entity.ToTable("Seguimientos_Esquemas_Estructuras_Cata", tb => tb.HasComment("Es un catálogo de los estructuras (Columnas) de los archivos de los esquemas  que deben cargar las ARS/ARL para su supervisión y seguimiento, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.EsquemaNumero)
                .HasComment("Número único que representa cada  esquema.")
                .HasColumnName("Esquema_Numero");
            entity.Property(e => e.EstructuraSecuencia)
                .HasComment("Secuencia de la columna (Campo) dentro de la estructura de datos del esquema.")
                .HasColumnName("Estructura_Secuencia");
            entity.Property(e => e.EstructuraColumna)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre de la columna (Campo) de la estructura de datos del esquema.")
                .HasColumnName("Estructura_Columna");
            entity.Property(e => e.EstructuraLongitud)
                .HasComment("Longitud de la columna (Campo) de la estructura de datos del esquema.")
                .HasColumnName("Estructura_Longitud");
            entity.Property(e => e.EstructuraObservacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Observaciones sobre la columna (Campo) de la estructura de datos del esquema.")
                .HasColumnName("Estructura_Observacion");
            entity.Property(e => e.EstructuraPosicionFinal)
                .HasComment("Posición final de la columna (Campo) de la estructura de datos del esquema.")
                .HasColumnName("Estructura_Posicion_Final");
            entity.Property(e => e.EstructuraPosicionInicial)
                .HasComment("Posición inicial de la columna (Campo) de la estructura de datos del esquema.")
                .HasColumnName("Estructura_Posicion_Inicial");
            entity.Property(e => e.EstructuraRequerido)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si la columna (Campo) de la estructura de datos del esquema es obligatoria.")
                .HasColumnName("Estructura_Requerido");
            entity.Property(e => e.EstructuraTipoDatos)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Tipo de datos de la columna (Campo) de la estructura de datos del esquema.")
                .HasColumnName("Estructura_Tipo_Datos");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.EsquemaNumeroNavigation).WithMany(p => p.SeguimientosEsquemasEstructurasCata)
                .HasForeignKey(d => d.EsquemaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Esquemas_Estructuras_Cata_Seguimientos_Esquemas_Cata");
        });

        modelBuilder.Entity<SeguimientosEsquemasInstitucionesTipoCatum>(entity =>
        {
            entity.HasKey(e => new { e.InstitucionTipoNumero, e.EsquemaNumero }).HasName("PK_Esquema_Institucion_Tipo1");

            entity.ToTable("Seguimientos_Esquemas_Instituciones_Tipo_Cata", tb => tb.HasComment("Es un catálogo de los tipos de esquemas  que deben cargar las ARS/ARL para su supervisión y seguimiento y su relación con tipo de institución, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.InstitucionTipoNumero)
                .HasComment("Tipificación del número de la institución (3 = Administradora de Riesgos de Salud).")
                .HasColumnName("Institucion_Tipo_Numero");
            entity.Property(e => e.EsquemaNumero)
                .HasComment("Número único que representa cada  esquema.")
                .HasColumnName("Esquema_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.EsquemaNumeroNavigation).WithMany(p => p.SeguimientosEsquemasInstitucionesTipoCata)
                .HasForeignKey(d => d.EsquemaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Esquema_Institucion_Tipo_Esquemas_Cata1");

            entity.HasOne(d => d.InstitucionTipoNumeroNavigation).WithMany(p => p.SeguimientosEsquemasInstitucionesTipoCata)
                .HasForeignKey(d => d.InstitucionTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Esquema_Institucion_Tipo_Institucion_Tipo_Cata");
        });

        modelBuilder.Entity<SeguimientosEsquemasInstitucionesTran>(entity =>
        {
            entity.HasKey(e => new { e.InstitucionNumero, e.EsquemaNumero }).HasName("PK_Esquema_Institucion_Tipo");

            entity.ToTable("Seguimientos_Esquemas_Instituciones_Trans", tb => tb.HasComment("Es un catálogo de los tipos de esquemas  que deben cargar las ARS/ARL para su supervisión y seguimiento y su relación con tipo de institución, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.InstitucionNumero)
                .HasComment("Tipificación del número de la institución (3 = Administradora de Riesgos de Salud).")
                .HasColumnName("Institucion_Numero");
            entity.Property(e => e.EsquemaNumero)
                .HasComment("Número único que representa cada  esquema.")
                .HasColumnName("Esquema_Numero");
            entity.Property(e => e.EsquemaInstitucionNota)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasColumnName("Esquema_institucion_Nota");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.EsquemaNumeroNavigation).WithMany(p => p.SeguimientosEsquemasInstitucionesTrans)
                .HasForeignKey(d => d.EsquemaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Esquema_Institucion_Tipo_Esquemas_Cata");

            entity.HasOne(d => d.InstitucionNumeroNavigation).WithMany(p => p.SeguimientosEsquemasInstitucionesTrans)
                .HasForeignKey(d => d.InstitucionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Esquemas_Instituciones_Trans_Instituciones_Master");
        });

        modelBuilder.Entity<SeguimientosEsquemasLinkCatum>(entity =>
        {
            entity.HasKey(e => e.EsquemaCodigo);

            entity.ToTable("Seguimientos_Esquemas_Link_Cata");

            entity.Property(e => e.EsquemaCodigo)
                .ValueGeneratedNever()
                .HasColumnName("Esquema_Codigo");
            entity.Property(e => e.EsquemaAcceso)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Esquema_Acceso");
            entity.Property(e => e.EsquemaDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Esquema_Descripcion");
            entity.Property(e => e.EsquemaLink)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Esquema_Link");
            entity.Property(e => e.EsquemaNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Esquema_Nombre");
            entity.Property(e => e.EsquemaNumero).HasColumnName("Esquema_Numero");
            entity.Property(e => e.GrupoSeguridadNumero).HasColumnName("Grupo_Seguridad_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SeguimientosEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.SeguimientoEstadoNumero);

            entity.ToTable("Seguimientos_Estados_Cata", tb => tb.HasComment("Es un catálogo de los estados en que puede estar un seguimiento  de carga de esquema de una ARS/ARL durante  los procesos de las cargas de los esquemas, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SeguimientoEstadoNumero)
                .HasComment("Es un número que representa el estado de procesamiento en que se encuentra un seguimiento de carga de esquema.")
                .HasColumnName("Seguimiento_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoEstadoDescripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Es la descripción del estado de procesamiento en que se encuentra un seguimiento de carga de esquema.")
                .HasColumnName("Seguimiento_Estado_Descripcion");
            entity.Property(e => e.SeguimientoEstadoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Breve explicación de la descripción del estado de procesamiento en que se encuentra un seguimiento de carga de esquema.")
                .HasColumnName("Seguimiento_Estado_Explicacion");
            entity.Property(e => e.SeguimientoEstadoGeneraLote)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Seguimiento_Estado_Genera_Lote");
            entity.Property(e => e.SeguimientoEstadoGrupo)
                .HasComment("Agrupa los estados de carga de los esquemas en función de un estado principal.")
                .HasColumnName("Seguimiento_Estado_Grupo");
            entity.Property(e => e.SeguimientoEstadoImagenUrl)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/A')")
                .HasComment("Dirección de la carpeta donde se encuentra ubicado el archivo de la imagen (JPG) del estado de carga de los esquemas.")
                .HasColumnName("Seguimiento_Estado_Imagen_Url");
            entity.Property(e => e.SeguimientoEstadoIndicaActividadRobot)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si este estado es una de las actividades del ROBOT")
                .HasColumnName("Seguimiento_Estado_Indica_Actividad_Robot");
            entity.Property(e => e.SeguimientoEstadoVisualizaExternos)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si este estado lo pueden visualizar las entidades externas a la SISALRIL")
                .HasColumnName("Seguimiento_Estado_Visualiza_Externos");
        });

        modelBuilder.Entity<SeguimientosLotesErroresCatum>(entity =>
        {
            entity.HasKey(e => e.ErrorNumero).HasName("PK_Tipo_Errores");

            entity.ToTable("Seguimientos_Lotes_Errores_Cata", tb => tb.HasComment("Es un catálogo de los errores relacionados con cada uno de los pasos y actividades que se ejecutan en los procedimientos de los procesos de las cargas de los esquemas, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ErrorNumero)
                .ValueGeneratedNever()
                .HasComment("Número único del error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema.")
                .HasColumnName("Error_Numero");
            entity.Property(e => e.ErrorDescripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Descripción del error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema.")
                .HasColumnName("Error_Descripcion");
            entity.Property(e => e.ErrorProcesoNumero)
                .HasDefaultValueSql("((2))")
                .HasComment("Número único del proceso con el cual se relaciona un número de error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema.")
                .HasColumnName("Error_Proceso_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ErrorProcesoNumeroNavigation).WithMany(p => p.SeguimientosLotesErroresCata)
                .HasForeignKey(d => d.ErrorProcesoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Lotes_Errores_Cata_Seguimientos_Lotes_Errores_Procesos_Cata");
        });

        modelBuilder.Entity<SeguimientosLotesErroresEsquemasCatum>(entity =>
        {
            entity.HasKey(e => new { e.EsquemaNumero, e.EsquemaCampo, e.ErrorNumero });

            entity.ToTable("Seguimientos_Lotes_Errores_Esquemas_Cata");

            entity.Property(e => e.EsquemaNumero).HasColumnName("Esquema_Numero");
            entity.Property(e => e.EsquemaCampo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Esquema_Campo");
            entity.Property(e => e.ErrorNumero).HasColumnName("Error_Numero");
            entity.Property(e => e.ErrorDescripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Error_Descripcion");
            entity.Property(e => e.ErrorExplicacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasColumnName("Error_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SeguimientosLotesErroresHistorico>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.EventoSecuencia, e.ErrorSecuencia });

            entity.ToTable("Seguimientos_Lotes_Errores_Historico");

            entity.Property(e => e.SeguimientoCodigo).HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.EventoSecuencia).HasColumnName("Evento_Secuencia");
            entity.Property(e => e.ErrorSecuencia).HasColumnName("Error_Secuencia");
            entity.Property(e => e.ArchivoLinea).HasColumnName("Archivo_Linea");
            entity.Property(e => e.ErrorNumero).HasColumnName("Error_Numero");
            entity.Property(e => e.EventoCampoError)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Evento_Campo_Error");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SeguimientosLotesErroresProcesosCatum>(entity =>
        {
            entity.HasKey(e => e.ErrorProcesoNumero);

            entity.ToTable("Seguimientos_Lotes_Errores_Procesos_Cata", tb => tb.HasComment("Es un catálogo de los procesos donde se generan los  errores relacionados con cada uno de los pasos y actividades que se ejecutan en  los procesos de las cargas de los esquemas, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ErrorProcesoNumero)
                .HasComment("Número único del proceso con el cual se relaciona un número de error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema.")
                .HasColumnName("Error_Proceso_Numero");
            entity.Property(e => e.ErrorProcesoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del proceso con el cual se relaciona un número de error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema.")
                .HasColumnName("Error_Proceso_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SeguimientosLotesErroresResumenesTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ErrorNumero, e.ErrorDescripcion, e.EventoCampoError });

            entity.ToTable("Seguimientos_Lotes_Errores_Resumenes_Trans", tb => tb.HasComment("Es una tabla transaccional, donde se almacenan los resumenes de errores de los esquemas de las ARS arrojados durante la validación, los cuales son procesado por el Robot Simon"));

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ErrorNumero)
                .HasComment("Número único del error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema o de la solicitud de un traspaso.")
                .HasColumnName("Error_Numero");
            entity.Property(e => e.ErrorDescripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("Descripción del error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema o de la solicitud de un traspaso.")
                .HasColumnName("Error_Descripcion");
            entity.Property(e => e.EventoCampoError)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Detalle relacionado con la columna (Campo) de la estructura de datos del esquema o el proceso, donde  se encontró un error,  en un proceso de carga de esquema.")
                .HasColumnName("Evento_Campo_Error");
            entity.Property(e => e.CantidadErrores)
                .HasComment("Cantidad de Errores encontrados en la carga realizada por las ARS.")
                .HasColumnName("Cantidad_Errores");
        });

        modelBuilder.Entity<SeguimientosLotesErroresSistemasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ErrorSistemaSecuencia });

            entity.ToTable("Seguimientos_Lotes_Errores_Sistemas_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los errores de sistemas relacionados con cada con los procesos de las cargas de los esquemas, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.ErrorSistemaSecuencia)
                .HasComment("Secuencia para identifica cuando en una Línea del sistema (Aplicación) relacionada con  el error de sistema generado en un proceso de carga de esquema, se producen más de un error.")
                .HasColumnName("Error_Sistema_Secuencia");
            entity.Property(e => e.ErrorSistemaDetalle)
                .HasMaxLength(1500)
                .IsUnicode(false)
                .HasComment("Describe el detalle de error de sistema generado en un proceso de carga de esquema.")
                .HasColumnName("Error_Sistema_Detalle");
            entity.Property(e => e.ErrorSistemaFecha)
                .HasComment("Fecha en que sucedió el error de sistema generado en un proceso de carga de esquema.")
                .HasColumnType("datetime")
                .HasColumnName("Error_Sistema_Fecha");
            entity.Property(e => e.ErrorSistemaLinea)
                .HasComment("Línea del sistema (Aplicación) relacionada con  el error de sistema generado en un proceso de carga de esquema.")
                .HasColumnName("Error_Sistema_Linea");
            entity.Property(e => e.ErrorSistemaTipo)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/D')")
                .HasComment("Detalle que clasifica la tipología del  error de sistema generado en un proceso de carga de esquema.")
                .HasColumnName("Error_Sistema_Tipo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.SeguimientosLotesErroresSistemasTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Lotes_Errores_Sistemas_Trans_Seguimientos_Lotes_Trans");
        });

        modelBuilder.Entity<SeguimientosLotesErroresTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.EventoSecuencia, e.ErrorSecuencia });

            entity.ToTable("Seguimientos_Lotes_Errores_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los datos  los  errores relacionados con cada uno de los pasos y actividades que se ejecutan en  los procesos de las cargas de los esquemas, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.HasIndex(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.ArchivoLinea }, "IX_Seguimientos_Lotes_Errores_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.EventoSecuencia)
                .HasComment("Es la secuencia del evento de carga de un esquema donde se encontró el error.")
                .HasColumnName("Evento_Secuencia");
            entity.Property(e => e.ErrorSecuencia)
                .ValueGeneratedOnAdd()
                .HasComment("Es una secuencia única para identificar la transacción con el objetivo de optimizar las funcionalidades de la tabla.")
                .HasColumnName("Error_Secuencia");
            entity.Property(e => e.ArchivoLinea)
                .HasComment("Número único asignado a cada registro del archivo temporal de una carga de esquema especifica (Seguimiento + Lote).")
                .HasColumnName("Archivo_Linea");
            entity.Property(e => e.ErrorNumero)
                .HasComment("Número único del error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema.")
                .HasColumnName("Error_Numero");
            entity.Property(e => e.EventoCampoError)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Detalle relacionado con la columna (Campo) de la estructura de datos del esquema o el proceso, donde  se encontró un error,  en un proceso de carga de esquema.")
                .HasColumnName("Evento_Campo_Error");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SeguimientosLotesEsquemasTran>(entity =>
        {
            entity.HasKey(e => new { e.EsquemaNumero, e.SeguimientoCodigo, e.SeguimientoLote, e.SeguimientoPeriodo });

            entity.ToTable("Seguimientos_Lotes_Esquemas_Trans", tb => tb.HasComment("Es una tabla transaccional, donde se almacenan los detalle de errores de los esquemas de las ARS arrojados durante la validación, los cuales son procesado por el Robot Simon"));

            entity.Property(e => e.EsquemaNumero)
                .HasComment("Número único que representa cada  esquema.")
                .HasColumnName("Esquema_Numero");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.SeguimientoPeriodo)
                .HasComment("Periodo (Año y Mes) correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Periodo");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.SeguimientoLoteEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica el estado del Seguimiento Lote (OK = Procesado, NU = Nuevos, AC = Actualizar) de las cargas procesados de los esquemas cargados por las ARS.")
                .HasColumnName("Seguimiento_Lote_Estado");
            entity.Property(e => e.SeguimientoLoteRegistros)
                .HasComment("Cantidad de registros (líneas) procesados en un  proceso de una carga de esquema de un lote.")
                .HasColumnName("Seguimiento_Lote_Registros");
        });

        modelBuilder.Entity<SeguimientosLotesEventosIndicadoresTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.SeguimientoPeriodoMes, e.EsquemaNumero, e.EventoSecuencia, e.EventoTipoNumero }).HasName("PK_Seguimientos_Lotes_Indicadores_Trans");

            entity.ToTable("Seguimientos_Lotes_Eventos_Indicadores_Trans", tb => tb.HasComment("Es una tabla transaccional, donde se almacenan los eventos de las cargas realizadas por los esquemas de las ARS, donde se calcula cantidad de registros y duracion de cada carga en sus diferentes eventos, estas cargas son procesado por el Robot Simon"));

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.SeguimientoPeriodoMes)
                .HasComment("Mes correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Periodo_Mes");
            entity.Property(e => e.EsquemaNumero)
                .HasComment("Número único que representa cada  esquema.")
                .HasColumnName("Esquema_Numero");
            entity.Property(e => e.EventoSecuencia)
                .HasComment("Es la secuencia del evento de carga de un esquema donde se encontró el error.")
                .HasColumnName("Evento_Secuencia");
            entity.Property(e => e.EventoTipoNumero)
                .HasComment("Número único que representa cada evento que forma parte del proceso de una carga de esquema.")
                .HasColumnName("Evento_Tipo_Numero");
            entity.Property(e => e.EventoFechaFin)
                .HasComment("Fecha en la que finalizo un evento en el proceso de una carga de esquema.")
                .HasColumnType("datetime")
                .HasColumnName("Evento_Fecha_Fin");
            entity.Property(e => e.EventoFechaInicio)
                .HasComment("Fecha en la que inicio un evento en el proceso de una carga de esquema.")
                .HasColumnType("datetime")
                .HasColumnName("Evento_Fecha_Inicio");
            entity.Property(e => e.EventoInicioAno)
                .HasComment("Año en que inició el un evento en el proceso de una carga de esquema.")
                .HasColumnName("Evento_Inicio_Ano");
            entity.Property(e => e.EventoInicioMes)
                .HasComment("Mes en que inició el un evento en el proceso de una carga de esquema.")
                .HasColumnName("Evento_Inicio_Mes");
            entity.Property(e => e.EventoMinutos)
                .HasComment("Cantidad total de Minutos durante el evento en el proceso de una carga de esquema.")
                .HasColumnName("Evento_Minutos");
            entity.Property(e => e.EventoTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción de  cada evento que forma parte del proceso de una carga de esquema.")
                .HasColumnName("Evento_Tipo_Descripcion");
            entity.Property(e => e.SeguimientoLoteRegistros)
                .HasComment("Cantidad de registros (líneas) procesados en un  proceso de una carga de esquema de un lote.")
                .HasColumnName("Seguimiento_Lote_Registros");
        });

        modelBuilder.Entity<SeguimientosLotesEventosProcedimientosTran>(entity =>
        {
            entity.HasKey(e => e.EventoProcedimientoNumero);

            entity.ToTable("Seguimientos_Lotes_Eventos_Procedimientos_Trans");

            entity.Property(e => e.EventoProcedimientoNumero)
                .ValueGeneratedNever()
                .HasColumnName("Evento_Procedimiento_Numero");
            entity.Property(e => e.EsquemaNumero)
                .HasComment("Número único que representa cada  esquema.")
                .HasColumnName("Esquema_Numero");
            entity.Property(e => e.EventoProcedimientoNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Evento_Procedimiento_Nombre");
            entity.Property(e => e.EventoProcedimientoOrden).HasColumnName("Evento_Procedimiento_Orden");
            entity.Property(e => e.EventoTipoNumero)
                .HasComment("Número único que representa cada evento que forma parte del proceso de una carga de esquema.")
                .HasColumnName("Evento_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.EsquemaNumeroNavigation).WithMany(p => p.SeguimientosLotesEventosProcedimientosTrans)
                .HasForeignKey(d => d.EsquemaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Lotes_Eventos_Procedimientos_Trans_Seguimientos_Esquemas_Cata");

            entity.HasOne(d => d.EventoTipoNumeroNavigation).WithMany(p => p.SeguimientosLotesEventosProcedimientosTrans)
                .HasForeignKey(d => d.EventoTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Lotes_Eventos_Procedimientos_Trans_Seguimientos_Lotes_Eventos_Tipo_Cata");
        });

        modelBuilder.Entity<SeguimientosLotesEventosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.EventoTipoNumero).HasName("PK_Eventos_Tipo_Cata");

            entity.ToTable("Seguimientos_Lotes_Eventos_Tipo_Cata", tb => tb.HasComment("Es un catálogo de los tipos de eventos que se ejecutan para un Lote de un seguimiento  de carga de esquema de una ARS/ARL durante el proceso de carga, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.EventoTipoNumero)
                .HasComment("Número único que representa cada evento que forma parte del proceso de una carga de esquema.")
                .HasColumnName("Evento_Tipo_Numero");
            entity.Property(e => e.EventoTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Descripción de  cada evento que forma parte del proceso de una carga de esquema.")
                .HasColumnName("Evento_Tipo_Descripcion");
            entity.Property(e => e.EventoTipoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Breve explicación de la descripción de  cada evento que forma parte del proceso de una carga de esquema.")
                .HasColumnName("Evento_Tipo_Explicacion");
            entity.Property(e => e.EventoVisualizacionExterna)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Evento_Visualizacion_Externa");
            entity.Property(e => e.EventoVisualizacionOrden).HasColumnName("Evento_Visualizacion_Orden");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoEstadoEventoError)
                .HasDefaultValueSql("((0))")
                .HasColumnName("Seguimiento_Estado_Evento_Error");
            entity.Property(e => e.SeguimientoEstadoEventoInicia)
                .HasDefaultValueSql("((0))")
                .HasColumnName("Seguimiento_Estado_Evento_Inicia");
            entity.Property(e => e.SeguimientoEstadoEventoTermina)
                .HasDefaultValueSql("((0))")
                .HasColumnName("Seguimiento_Estado_Evento_Termina");
            entity.Property(e => e.SeguimientoEstadoNumero)
                .HasComment("Es un número que representa el estado de procesamiento en que se encuentra un seguimiento de carga de esquema.")
                .HasColumnName("Seguimiento_Estado_Numero");
            entity.Property(e => e.SeguimientoEstadoNumeroError)
                .HasComment("Es un número que representa el estado de procesamiento en que se encuentra un seguimiento de carga de esquema.")
                .HasColumnName("Seguimiento_Estado_Numero_Error");

            entity.HasOne(d => d.SeguimientoEstadoNumeroNavigation).WithMany(p => p.SeguimientosLotesEventosTipoCatumSeguimientoEstadoNumeroNavigations)
                .HasForeignKey(d => d.SeguimientoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Lotes_Eventos_Tipo_Cata_Seguimientos_Estados_Cata");

            entity.HasOne(d => d.SeguimientoEstadoNumeroErrorNavigation).WithMany(p => p.SeguimientosLotesEventosTipoCatumSeguimientoEstadoNumeroErrorNavigations)
                .HasForeignKey(d => d.SeguimientoEstadoNumeroError)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Lotes_Eventos_Tipo_Cata_Seguimientos_Estados_Cata1");
        });

        modelBuilder.Entity<SeguimientosLotesEventosTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote, e.EventoSecuencia }).HasName("PK_Eventos_Trans");

            entity.ToTable("Seguimientos_Lotes_Eventos_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los eventos que se ejecutan para un Lote de un seguimiento de carga de esquema de una ARS/ARL durante el proceso de carga, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.EventoSecuencia)
                .HasComment("Es la secuencia del evento de carga de un esquema donde se encontró el error.")
                .HasColumnName("Evento_Secuencia");
            entity.Property(e => e.EventoComentario)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasColumnName("Evento_Comentario");
            entity.Property(e => e.EventoFechaFin)
                .HasComment("Fecha en la que finalizo un evento en el proceso de una carga de esquema.")
                .HasColumnType("datetime")
                .HasColumnName("Evento_Fecha_Fin");
            entity.Property(e => e.EventoFechaInicio)
                .HasComment("Fecha en la que inicio un evento en el proceso de una carga de esquema.")
                .HasColumnType("datetime")
                .HasColumnName("Evento_Fecha_Inicio");
            entity.Property(e => e.EventoTipoNumero)
                .HasComment("Número único que representa cada evento que forma parte del proceso de una carga de esquema.")
                .HasColumnName("Evento_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.EventoTipoNumeroNavigation).WithMany(p => p.SeguimientosLotesEventosTrans)
                .HasForeignKey(d => d.EventoTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Eventos_Trans_Eventos_Tipo_Cata");

            entity.HasOne(d => d.Seguimiento).WithMany(p => p.SeguimientosLotesEventosTrans)
                .HasForeignKey(d => new { d.SeguimientoCodigo, d.SeguimientoLote })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Eventos_Trans_Seguimiento_Lote_Trans");
        });

        modelBuilder.Entity<SeguimientosLotesTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote }).HasName("PK_Control_Carga_Esquemas_Trans");

            entity.ToTable("Seguimientos_Lotes_Trans", tb =>
                {
                    tb.HasComment("Es una tabla transaccional que contiene los detalles de cada uno de los lotes que se generan para un seguimiento de carga, su fuente de datos es el proceso de carga del Robot Simon. ");
                    tb.HasTrigger("Trigger_Estado_Lote_Seguimiento_Insert_Update");
                });

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoEstadoNumero)
                .HasComment("Es un número que representa el estado de procesamiento en que se encuentra un seguimiento de carga de esquema.")
                .HasColumnName("Seguimiento_Estado_Numero");
            entity.Property(e => e.SeguimientoLoteFechaFin)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha en la que finalizó un  proceso de una carga de esquema de un lote específico.")
                .HasColumnType("datetime")
                .HasColumnName("Seguimiento_Lote_Fecha_Fin");
            entity.Property(e => e.SeguimientoLoteFechaInicio)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha en la que inició un  proceso de una carga de esquema de un lote específico.")
                .HasColumnType("datetime")
                .HasColumnName("Seguimiento_Lote_Fecha_Inicio");
            entity.Property(e => e.SeguimientoLoteNombreArchivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Nombre de archivo físico remitido por las ARS/ARL  para un  proceso de una carga de esquema de un lote específico.")
                .HasColumnName("Seguimiento_Lote_Nombre_Archivo");
            entity.Property(e => e.SeguimientoLoteRegistros)
                .HasComment("Cantidad de registros (líneas) procesados en un  proceso de una carga de esquema de un lote.")
                .HasColumnName("Seguimiento_Lote_Registros");
            entity.Property(e => e.SeguimientoLoteUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Usuario que  remitió el archivo desde  la ARS/ARL,  para un  proceso de una carga de esquema de un lote específico.")
                .HasColumnName("Seguimiento_Lote_Usuario");

            entity.HasOne(d => d.SeguimientoCodigoNavigation).WithMany(p => p.SeguimientosLotesTrans)
                .HasForeignKey(d => d.SeguimientoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimiento_Lote_Trans_Seguimientos_Trans");

            entity.HasOne(d => d.SeguimientoEstadoNumeroNavigation).WithMany(p => p.SeguimientosLotesTrans)
                .HasForeignKey(d => d.SeguimientoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Lotes_Trans_Seguimientos_Estados_Cata");
        });

        modelBuilder.Entity<SeguimientosMaster>(entity =>
        {
            entity.HasKey(e => e.SeguimientoCodigo).HasName("PK_Seguimiento");

            entity.ToTable("Seguimientos_Master", tb => tb.HasComment("Es un maestro  que contiene los detalles de cada uno de los seguimientos  que se generan para un período de carga de un esquema de cada ARS/ARL, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.HasIndex(e => new { e.SeguimientoPeriodoAno, e.SeguimientoPeriodoMes, e.InstitucionNumero, e.EsquemaNumero }, "Idx_Seguimientos_Master_PeriodoInstitucionEsquema");

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.EsquemaNumero)
                .HasComment("Número único que representa cada  esquema.")
                .HasColumnName("Esquema_Numero");
            entity.Property(e => e.InstitucionNumero)
                .HasComment("Número de la institución que es o a la que pertenece la ARS.")
                .HasColumnName("Institucion_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoEstadoNumero)
                .HasComment("Es un número que representa el estado de procesamiento en que se encuentra un seguimiento de carga de esquema.")
                .HasColumnName("Seguimiento_Estado_Numero");
            entity.Property(e => e.SeguimientoFechaEnvioHasta)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha limite que tienen la ARS para realizar la carga de un esquema para un periodo especifico (Seguimiento).")
                .HasColumnType("datetime")
                .HasColumnName("Seguimiento_Fecha_Envio_Hasta");
            entity.Property(e => e.SeguimientoPeriodoAno)
                .HasComment("Año correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Periodo_Ano");
            entity.Property(e => e.SeguimientoPeriodoMes)
                .HasComment("Mes correspondiente a la información o hechos que deben ser reportados mediante una carga de informe (Esquema) para un número de seguimiento específico.")
                .HasColumnName("Seguimiento_Periodo_Mes");

            entity.HasOne(d => d.EsquemaNumeroNavigation).WithMany(p => p.SeguimientosMasters)
                .HasForeignKey(d => d.EsquemaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Trans_Informes_Cata");

            entity.HasOne(d => d.InstitucionNumeroNavigation).WithMany(p => p.SeguimientosMasters)
                .HasForeignKey(d => d.InstitucionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Master_Instituciones_Master");

            entity.HasOne(d => d.SeguimientoEstadoNumeroNavigation).WithMany(p => p.SeguimientosMasters)
                .HasForeignKey(d => d.SeguimientoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Trans_Seguimientos_Estados_Cata");
        });

        modelBuilder.Entity<SeguimientosProcedimientosLogTran>(entity =>
        {
            entity.HasKey(e => e.LogSecuencia).HasName("PK_Seguimientos_Validaciones_Log_Trans");

            entity.ToTable("Seguimientos_Procedimientos_Log_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los datos de cada uno de los pasos y actividades que se ejecutan en los procedimientos de los procesos de las cargas de los esquemas, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.LogSecuencia)
                .HasComment("Secuencia única asignada a cada log generado por la actividad de un procedimiento.")
                .HasColumnName("Log_Secuencia");
            entity.Property(e => e.ErrorNumero)
                .HasComment("Número único del error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema.")
                .HasColumnName("Error_Numero");
            entity.Property(e => e.EventoSecuencia)
                .HasComment("Es la secuencia del evento de carga de un esquema donde se encontró el error.")
                .HasColumnName("Evento_Secuencia");
            entity.Property(e => e.LogFechaFin)
                .HasComment("Fecha en que termino la actividad del procedimiento que generó el log.")
                .HasColumnType("datetime")
                .HasColumnName("Log_Fecha_Fin");
            entity.Property(e => e.LogFechaInicio)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha en que inicio la actividad del procedimiento que generó el log.")
                .HasColumnType("datetime")
                .HasColumnName("Log_Fecha_Inicio");
            entity.Property(e => e.LogMinutos)
                .HasComment("Duración en minutos de la actividad del procedimiento que generó el log.")
                .HasColumnName("Log_Minutos");
            entity.Property(e => e.LogObservacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Detalles relacionados con las especificaciones (Campo, Paso) de la actividad del procedimiento que generó el log.")
                .HasColumnName("Log_Observacion");
            entity.Property(e => e.LogProcedimiento)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Nombre del procedimiento donde se ejecuta la actividad que generó el log.")
                .HasColumnName("Log_Procedimiento");
            entity.Property(e => e.LogSegundos)
                .HasComment("Duración en segundos de la actividad del procedimiento que generó el log.")
                .HasColumnName("Log_Segundos");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote)
                .HasComment("Número único que se genera cada vez que se procesa un seguimiento de la carga de informe (esquemas), que debe realizar cada ARS/ARL, para un mismo seguimiento podrán existir de 1 a N lotes.")
                .HasColumnName("Seguimiento_Lote");

            entity.HasOne(d => d.ErrorNumeroNavigation).WithMany(p => p.SeguimientosProcedimientosLogTrans)
                .HasForeignKey(d => d.ErrorNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Validaciones_Log_Trans_Seguimientos_Lotes_Errores_Cata");
        });

        modelBuilder.Entity<SeguimientosProrrogasTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoProrrogaNumero });

            entity.ToTable("Seguimientos_Prorrogas_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran las autorizaciones de prorrogas que se otorgan a las ARS/ARL cuando su fecha de carga de esquemas esta vencida, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SeguimientoCodigo)
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico")
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoProrrogaNumero)
                .HasDefaultValueSql("((1))")
                .HasComment("Número único de una  prorroga otorgada a la ARS/ARL para la carga de un esquema de un periodo (Año y Mes) específico (Seguimiento).")
                .HasColumnName("Seguimiento_Prorroga_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoProrrogaComentario)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .HasComment("Indica si está o no vencida una  prorroga otorgada a la ARS/ARL para la carga de un esquema de un periodo (Año y Mes) específico (Seguimiento).")
                .HasColumnName("Seguimiento_Prorroga_Comentario");
            entity.Property(e => e.SeguimientoProrrogaHasta)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha en que termina la prorroga otorgada a la ARS/ARL para la carga de un esquema de un periodo (Año y Mes) específico (Seguimiento).")
                .HasColumnType("datetime")
                .HasColumnName("Seguimiento_Prorroga_Hasta");
            entity.Property(e => e.SeguimientoProrrogaVencida)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si está o no vencida una  prorroga otorgada a la ARS/ARL para la carga de un esquema de un periodo (Año y Mes) específico (Seguimiento).")
                .HasColumnName("Seguimiento_Prorroga_vencida");

            entity.HasOne(d => d.SeguimientoCodigoNavigation).WithMany(p => p.SeguimientosProrrogasTrans)
                .HasForeignKey(d => d.SeguimientoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguimientos_Prorrogas_Trans_Seguimientos_Master");
        });

        modelBuilder.Entity<SeguimientosRobotInstanciasConfig>(entity =>
        {
            entity.HasKey(e => e.RobotInstanciasNumero);

            entity.ToTable("Seguimientos_Robot_Instancias_Config", tb => tb.HasComment("Es una tabla de configuración donde se registran la cantidad de instancias del ROBOT SIMON que pueden ser ejecutadas a la mima vez,  su fuente de datos son los sistemas  de la SISALRIL."));

            entity.Property(e => e.RobotInstanciasNumero)
                .HasComment("Número de instancia del robot que esta ejecutándose en un mismo momento.")
                .HasColumnName("Robot_Instancias_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RobotInstanciasMaxima)
                .HasComment("Número máximo de instancia del robot que pueden estar ejecutándose en un mismo momento.")
                .HasColumnName("Robot_Instancias_Maxima");
            entity.Property(e => e.RobotInstanciasOperando)
                .HasComment("Número de instancia del robot que se  están  ejecutándose en este momento.")
                .HasColumnName("Robot_Instancias_Operando");
        });

        modelBuilder.Entity<SeguridadConsultaCiudadanosIntranetLogTran>(entity =>
        {
            entity.HasKey(e => e.LogSecuencia).HasName("PK_Seguridad_Consulta_Ciudadano_Log");

            entity.ToTable("Seguridad_Consulta_Ciudadanos_Intranet_Log_Trans");

            entity.Property(e => e.LogSecuencia).HasColumnName("Log_Secuencia");
            entity.Property(e => e.ConsultaFecha)
                .HasColumnType("datetime")
                .HasColumnName("Consulta_Fecha");
            entity.Property(e => e.EmpleadoNombreCompleto)
                .HasMaxLength(90)
                .IsUnicode(false)
                .HasColumnName("Empleado_Nombre_Completo");
            entity.Property(e => e.EmpleadoNumero).HasColumnName("Empleado_Numero");
            entity.Property(e => e.NssOrCedulaConsultada)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NSS_OR_CEDULA_CONSULTADA");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.Resultado)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.TipoConsulta)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Tipo_Consulta");
        });

        modelBuilder.Entity<SeguridadConsultasCatum>(entity =>
        {
            entity.HasKey(e => new { e.SistemaNumero, e.ConsultaNumero }).HasName("PK_Seguridad_Consultas_Cata_1");

            entity.ToTable("Seguridad_Consultas_Cata", tb => tb.HasComment("Es un catálogo de las consultas que están disponibles en los sistemas de información que requerirán control de seguridad  adicional, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SistemaNumero)
                .HasComment("Número único del sistema de información.")
                .HasColumnName("Sistema_Numero");
            entity.Property(e => e.ConsultaNumero)
                .ValueGeneratedOnAdd()
                .HasComment("Número único que representa la consulta.")
                .HasColumnName("Consulta_Numero");
            entity.Property(e => e.ConsultaDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción la información principal que se presenta en la consulta.")
                .HasColumnName("Consulta_Descripcion");
            entity.Property(e => e.ConsultaExplicacion)
                .HasMaxLength(4000)
                .HasComment("Breve explicación Descripción la información principal que se presenta en la consulta.")
                .HasColumnName("Consulta_Explicacion");
            entity.Property(e => e.ConsultaFuenteDatos)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasComment("Especifica las tablas, vistas o procedimiento almacenado (PROC)  de donde se obtendrá la información de la consulta.")
                .HasColumnName("Consulta_Fuente_Datos");
            entity.Property(e => e.ConsultaOrden)
                .HasComment("Orden en que debe ser desplegada la consulta, en el visor para seleccionar la consulta a utilizar.")
                .HasColumnName("Consulta_Orden");
            entity.Property(e => e.ConsultaProcedimiento)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Procedimiento que genera y provee la información al reporte de la consulta.")
                .HasColumnName("Consulta_Procedimiento");
            entity.Property(e => e.ConsultaReporteRuta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Ubicación de la carpeta donde se encuentra almacenado el archivo físico del reporte de la consulta.")
                .HasColumnName("Consulta_Reporte_Ruta");
            entity.Property(e => e.ConsultaTema)
                .HasComment("Tema con el cual se relaciona la consulta.")
                .HasColumnName("Consulta_Tema");
            entity.Property(e => e.ConsultaTitulo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Titulo principal de la consulta una vez esta generada.")
                .HasColumnName("Consulta_Titulo");
            entity.Property(e => e.ConsultaUrl)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Ubicación de la carpeta donde se encuentra almacenado el archivo físico del ejecutable de la consulta.")
                .HasColumnName("Consulta_Url");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SeguridadEventosLogsTipoCatum>(entity =>
        {
            entity.HasKey(e => e.EventoLogTipoNumero).HasName("PK_Sistema_Eventos_Tipo_Cata");

            entity.ToTable("Seguridad_Eventos_Logs_Tipo_Cata", tb => tb.HasComment("Es un catálogo de los tipo de eventos para los LOGS de accedo y ejecuciones de los usuarios  que utilizan los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.EventoLogTipoNumero)
                .HasComment("Número único del  tipo eventos log  que se ejecuta en el sistema.")
                .HasColumnName("Evento_Log_Tipo_Numero");
            entity.Property(e => e.EventoLogTipoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción del  tipo eventos log  que se ejecuta en el sistema.")
                .HasColumnName("Evento_Log_Tipo_Descripcion");
            entity.Property(e => e.EventoLogTipoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Breve explicación de la descripción del  tipo eventos log  que se ejecuta en el sistema.")
                .HasColumnName("Evento_Log_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SeguridadEventosLogsTran>(entity =>
        {
            entity.HasKey(e => e.EventoLogNumero).HasName("PK_Sistema_Eventos_Log_Trans");

            entity.ToTable("Seguridad_Eventos_Logs_Trans", tb => tb.HasComment("Es un tabla transaccional donde se los LOGS de accedo y ejecuciones de los usuarios  que utilizan los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.EventoLogNumero)
                .ValueGeneratedNever()
                .HasComment("Número único  del registro log del sistema.")
                .HasColumnName("Evento_Log_Numero");
            entity.Property(e => e.EventoLogObservacion)
                .HasMaxLength(4000)
                .HasComment("Observación sobre la  operación del evento que genero el registro log del sistema.")
                .HasColumnName("Evento_Log_Observacion");
            entity.Property(e => e.EventoLogTipoNumero)
                .HasComment("Número único del  tipo eventos log  que se ejecuta en el sistema.")
                .HasColumnName("Evento_Log_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.UsuarioUsuarioNombre)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Nombre el usuario que origino la operación del evento que genero el registro log del sistema.")
                .HasColumnName("Usuario_Usuario_Nombre");

            entity.HasOne(d => d.EventoLogTipoNumeroNavigation).WithMany(p => p.SeguridadEventosLogsTrans)
                .HasForeignKey(d => d.EventoLogTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistema_Eventos_Log_Trans_Sistema_Eventos_Tipo_Cata");

            entity.HasOne(d => d.UsuarioUsuarioNombreNavigation).WithMany(p => p.SeguridadEventosLogsTrans)
                .HasForeignKey(d => d.UsuarioUsuarioNombre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistema_Eventos_Log_Trans_Seguridad_Usuario_Master");
        });

        modelBuilder.Entity<SeguridadGruposCatum>(entity =>
        {
            entity.HasKey(e => e.GrupoSeguridadNumero);

            entity.ToTable("Seguridad_Grupos_Cata", tb => tb.HasComment("Es un catálogo de los grupos de acceso de seguridad, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.GrupoSeguridadNumero)
                .ValueGeneratedOnAdd()
                .HasComment("Número único del grupo de seguridad al que pertenecen los usuarios de los sistemas de información.")
                .HasColumnName("Grupo_Seguridad_Numero");
            entity.Property(e => e.GrupoSeguridadDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción del grupo de seguridad al que pertenecen los usuarios de los sistemas de información.")
                .HasColumnName("Grupo_Seguridad_Descripcion");
            entity.Property(e => e.GrupoSeguridadExplicacion)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasComment("Breve explicación de la descripción del grupo de seguridad al que pertenecen los usuarios de los sistemas de información.")
                .HasColumnName("Grupo_Seguridad_Explicacion");
            entity.Property(e => e.GrupoSeguridadUsuarioExterno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el grupo de seguridad permite la inclusión de usuarios externos.")
                .HasColumnName("Grupo_Seguridad_Usuario_Externo");
            entity.Property(e => e.GrupoSeguridadUsuarioInterno)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el grupo de seguridad permite la inclusión de usuarios internos.")
                .HasColumnName("Grupo_Seguridad_Usuario_Interno");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SistemaNumero)
                .HasComment("Número único del sistema de información.")
                .HasColumnName("Sistema_Numero");

            entity.HasOne(d => d.SistemaNumeroNavigation).WithMany(p => p.SeguridadGruposCata)
                .HasForeignKey(d => d.SistemaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguridad_Grupos_Cata_Sistemas_Master");
        });

        modelBuilder.Entity<SeguridadGruposConsultasTran>(entity =>
        {
            entity.HasKey(e => new { e.GrupoSeguridadNumero, e.SistemaNumero, e.ConsultaNumero });

            entity.ToTable("Seguridad_Grupos_Consultas_Trans", tb => tb.HasComment("Es un tabla transaccional de los grupos de acceso a los que están relacionados las consultas que están disponibles en los sistemas de información que requerirán control de seguridad  adicional, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.GrupoSeguridadNumero)
                .HasComment("Número único del grupo de seguridad al que pertenecen los usuarios de los sistemas de información.")
                .HasColumnName("Grupo_Seguridad_Numero");
            entity.Property(e => e.SistemaNumero)
                .HasComment("Número único del sistema de información.")
                .HasColumnName("Sistema_Numero");
            entity.Property(e => e.ConsultaNumero)
                .HasComment("Número único que representa la consulta.")
                .HasColumnName("Consulta_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.GrupoSeguridadNumeroNavigation).WithMany(p => p.SeguridadGruposConsultasTrans)
                .HasForeignKey(d => d.GrupoSeguridadNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguridad_Grupos_Consultas_Trans_Seguridad_Grupos_Cata1");

            entity.HasOne(d => d.SeguridadConsultasCatum).WithMany(p => p.SeguridadGruposConsultasTrans)
                .HasForeignKey(d => new { d.SistemaNumero, d.ConsultaNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguridad_Grupos_Consultas_Trans_Seguridad_Consultas_Cata1");
        });

        modelBuilder.Entity<SeguridadGruposFuncionesTran>(entity =>
        {
            entity.HasKey(e => new { e.SistemaNumero, e.ModuloNumero, e.ModuloFuncionNumero, e.ControlNumero, e.GrupoSeguridadNumero });

            entity.ToTable("Seguridad_Grupos_Funciones_Trans", tb => tb.HasComment("Es un tabla transaccional de los grupos de acceso y su relación con las funcionalidades de los controles de los módulos de los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SistemaNumero)
                .HasComment("Número único del sistema de información.")
                .HasColumnName("Sistema_Numero");
            entity.Property(e => e.ModuloNumero)
                .HasComment("Número único de modulo del sistema de información.")
                .HasColumnName("Modulo_Numero");
            entity.Property(e => e.ModuloFuncionNumero)
                .HasComment("Número único de la funcionalidad del modulo del sistema de información.")
                .HasColumnName("Modulo_Funcion_Numero");
            entity.Property(e => e.ControlNumero)
                .HasComment("Número único del control del sistema de información.")
                .HasColumnName("Control_Numero");
            entity.Property(e => e.GrupoSeguridadNumero)
                .HasComment("Número único del grupo de seguridad al que pertenecen los usuarios de los sistemas de información.")
                .HasColumnName("Grupo_Seguridad_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.GrupoSeguridadNumeroNavigation).WithMany(p => p.SeguridadGruposFuncionesTrans)
                .HasForeignKey(d => d.GrupoSeguridadNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguridad_Grupos_Funciones_Trans_Seguridad_Grupos_Cata");

            entity.HasOne(d => d.SistemasModulosControlesTran).WithMany(p => p.SeguridadGruposFuncionesTrans)
                .HasForeignKey(d => new { d.SistemaNumero, d.ModuloNumero, d.ModuloFuncionNumero, d.ControlNumero })
                .HasConstraintName("FK_Seguridad_Grupos_Funciones_Trans_Sistema_Modulo_Controles_Trans");
        });

        modelBuilder.Entity<SeguridadGruposPermisosTran>(entity =>
        {
            entity.HasKey(e => new { e.GrupoSeguridadNumero, e.SistemaNumero, e.PermisoNumero });

            entity.ToTable("Seguridad_Grupos_Permisos_Trans");

            entity.Property(e => e.GrupoSeguridadNumero)
                .HasComment("Número único del grupo de seguridad al que pertenecen los usuarios de los sistemas de información.")
                .HasColumnName("Grupo_Seguridad_Numero");
            entity.Property(e => e.SistemaNumero)
                .HasComment("Número único del sistema de información.")
                .HasColumnName("Sistema_Numero");
            entity.Property(e => e.PermisoNumero).HasColumnName("Permiso_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.GrupoSeguridadNumeroNavigation).WithMany(p => p.SeguridadGruposPermisosTrans)
                .HasForeignKey(d => d.GrupoSeguridadNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguridad_Grupos_Permisos_Trans_Seguridad_Grupos_Cata");

            entity.HasOne(d => d.SeguridadPermisosCatum).WithMany(p => p.SeguridadGruposPermisosTrans)
                .HasForeignKey(d => new { d.SistemaNumero, d.PermisoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguridad_Grupos_Permisos_Trans_Seguridad_Permisos_Cata1");
        });

        modelBuilder.Entity<SeguridadGruposProcesosTran>(entity =>
        {
            entity.HasKey(e => new { e.GrupoSeguridadNumero, e.ProcesoNombre });

            entity.ToTable("Seguridad_Grupos_Procesos_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los procedimientos de BDD los sistemas  y los grupos de usuarios que pueden ejecutarlos, su fuente de datos los sistemas internos de la SISALRIL."));

            entity.Property(e => e.GrupoSeguridadNumero)
                .HasComment("Número único del grupo de seguridad al que pertenecen los usuarios de los sistemas de información.")
                .HasColumnName("Grupo_Seguridad_Numero");
            entity.Property(e => e.ProcesoNombre)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Nombre del procedimiento de BDD.")
                .HasColumnName("Proceso_Nombre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ProcesoNombreNavigation).WithMany(p => p.SeguridadGruposProcesosTrans)
                .HasForeignKey(d => d.ProcesoNombre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguridad_Grupos_Procesos_Trans_Sistemas_Webservice_Procesos_Master");
        });

        modelBuilder.Entity<SeguridadPermisosCatum>(entity =>
        {
            entity.HasKey(e => new { e.SistemaNumero, e.PermisoNumero });

            entity.ToTable("Seguridad_Permisos_Cata");

            entity.Property(e => e.SistemaNumero).HasColumnName("Sistema_Numero");
            entity.Property(e => e.PermisoNumero)
                .ValueGeneratedOnAdd()
                .HasColumnName("Permiso_Numero");
            entity.Property(e => e.PermisoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Permiso_Descripcion");
            entity.Property(e => e.PermisoExplicacion)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Permiso_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SeguridadUsuariosContactosTran>(entity =>
        {
            entity.HasKey(e => e.UsuarioContactoNumero).HasName("PK_Seguridad_Usuario_Contacto_Trans");

            entity.ToTable("Seguridad_Usuarios_Contactos_Trans", tb => tb.HasComment("Es un tabla transaccional donde se registran los contactos de los usuarios registrados para el uso de los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.UsuarioContactoNumero)
                .HasComment("Numero del medio de contacto del usuario.")
                .HasColumnName("Usuario_Contacto_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.UsuarioContactoDato)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Información de medio de contacto del usuario.")
                .HasColumnName("Usuario_Contacto_Dato");
            entity.Property(e => e.UsuarioContactoNota)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/A')")
                .HasComment("Nota sobre el  medio de contacto del usuario.")
                .HasColumnName("Usuario_Contacto_Nota");
            entity.Property(e => e.UsuarioContactoTipo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Tipo de medio del contacto registrado para el usuario.")
                .HasColumnName("Usuario_Contacto_Tipo");
            entity.Property(e => e.UsuarioContactoTipoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción del Tipo de medio del contacto registrado para el usuario.")
                .HasColumnName("Usuario_Contacto_Tipo_Descripcion");
            entity.Property(e => e.UsuarioUsuarioNombre)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Nombre el usuario que origino la operación del evento que genero el registro log del sistema.")
                .HasColumnName("Usuario_Usuario_Nombre");

            entity.HasOne(d => d.UsuarioUsuarioNombreNavigation).WithMany(p => p.SeguridadUsuariosContactosTrans)
                .HasForeignKey(d => d.UsuarioUsuarioNombre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguridad_Usuario_Contacto_Trans_Seguridad_Usuario_Master");
        });

        modelBuilder.Entity<SeguridadUsuariosDocumentosTran>(entity =>
        {
            entity.HasKey(e => new { e.UsuarioUsuarioNombre, e.DocumentoCodigo });

            entity.ToTable("Seguridad_Usuarios_Documentos_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los documentos asociados a los registros y cambios de los usuarios registrados para el uso de los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.UsuarioUsuarioNombre)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Nombre de usuario de la persona registrado como usuario en el sistema.")
                .HasColumnName("Usuario_Usuario_Nombre");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.DocumentoObservacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Observación sobre el documento relacionado con el usuario.")
                .HasColumnName("Documento_Observacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.DocumentoCodigoNavigation).WithMany(p => p.SeguridadUsuariosDocumentosTrans)
                .HasForeignKey(d => d.DocumentoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguridad_Usuarios_Documentos_Trans_Comunes_Documentos_Master");

            entity.HasOne(d => d.UsuarioUsuarioNombreNavigation).WithMany(p => p.SeguridadUsuariosDocumentosTrans)
                .HasForeignKey(d => d.UsuarioUsuarioNombre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguridad_Usuarios_Documentos_Trans_Seguridad_Usuarios_Master");
        });

        modelBuilder.Entity<SeguridadUsuariosEstadoClaveCatum>(entity =>
        {
            entity.HasKey(e => e.EstadoClaveCodigo);

            entity.ToTable("Seguridad_Usuarios_Estado_Clave_Cata", tb => tb.HasComment("Es un catálogo que contiene los tipo de estados en que puede estar una clave de usuario en cualquiera de los sistemas, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.EstadoClaveCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código único que representa el estado de situación de la clave de usuario de PSS para la consulta de afiliados.")
                .HasColumnName("Estado_Clave_Codigo");
            entity.Property(e => e.EstadoClaveDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Descripción del código único que representa el estado de situación de la clave de usuario de PSS para la consulta de afiliados.")
                .HasColumnName("Estado_Clave_Descripcion");
            entity.Property(e => e.EstadoClaveExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicación de la descripción del código único que representa el estado de situación de la clave de usuario de PSS para la consulta de afiliados.")
                .HasColumnName("Estado_Clave_Explicacion");
            entity.Property(e => e.EstadoClaveRegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el estado del registro de la clave que debe asignarle en relación al Estado de la Clave.")
                .HasColumnName("Estado_Clave_Registro_Estado");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TipoNovedadNumero)
                .HasComment("Número  único que representa la novedad sobre el registro de usuarios.")
                .HasColumnName("Tipo_Novedad_Numero");

            entity.HasOne(d => d.TipoNovedadNumeroNavigation).WithMany(p => p.SeguridadUsuariosEstadoClaveCata)
                .HasForeignKey(d => d.TipoNovedadNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguridad_Usuarios_Estado_Clave_Cata_Seguridad_Usuarios_Novedad_Tipo_Cata");
        });

        modelBuilder.Entity<SeguridadUsuariosGruposTran>(entity =>
        {
            entity.HasKey(e => new { e.UsuarioUsuarioNombre, e.GrupoSeguridadNumero }).HasName("PK_Seguridad_Usuarios_Grupos_Trans_1");

            entity.ToTable("Seguridad_Usuarios_Grupos_Trans", tb => tb.HasComment("Es un tabla transaccional de los grupos de acceso y su relación con los usuarios que están incluidos en ellos, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.UsuarioUsuarioNombre)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Nombre de usuario de la persona registrado como usuario en el sistema.")
                .HasColumnName("Usuario_Usuario_Nombre");
            entity.Property(e => e.GrupoSeguridadNumero)
                .HasComment("Número único del grupo de seguridad al que pertenecen los usuarios de los sistemas de información.")
                .HasColumnName("Grupo_Seguridad_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.GrupoSeguridadNumeroNavigation).WithMany(p => p.SeguridadUsuariosGruposTrans)
                .HasForeignKey(d => d.GrupoSeguridadNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguridad_Usuarios_Grupos_Trans_Seguridad_Grupos_Cata");

            entity.HasOne(d => d.UsuarioUsuarioNombreNavigation).WithMany(p => p.SeguridadUsuariosGruposTrans)
                .HasForeignKey(d => d.UsuarioUsuarioNombre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguridad_Usuarios_Grupos_Trans_Seguridad_Usuarios_Master");
        });

        modelBuilder.Entity<SeguridadUsuariosMaster>(entity =>
        {
            entity.HasKey(e => e.UsuarioUsuarioNombre).HasName("PK_Seguridad_Usuario_Externos");

            entity.ToTable("Seguridad_Usuarios_Master", tb =>
                {
                    tb.HasComment("Es un maestro donde se registran los usuarios para el uso de los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Seguridad_Usuarios_Master_Delete");
                    tb.HasTrigger("Seguridad_Usuarios_Master_Update");
                });

            entity.Property(e => e.UsuarioUsuarioNombre)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Nombre de usuario de la persona registrado como usuario en el sistema.")
                .HasColumnName("Usuario_Usuario_Nombre");
            entity.Property(e => e.EmpleadoNumero).HasColumnName("Empleado_Numero");
            entity.Property(e => e.EstadoClaveCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Número  único que representa el estado de situación de la clave de usuario de PSS para la consulta de afiliados.")
                .HasColumnName("Estado_Clave_Codigo");
            entity.Property(e => e.InstitucionNumero)
                .HasComment("Número de la institución que es o a la que pertenece la ARS.")
                .HasColumnName("Institucion_Numero");
            entity.Property(e => e.RegimenNumero)
                .HasDefaultValueSql("((2))")
                .HasComment("Número único que identifica cada uno de los regímenes definidos en la ley 87-01, (Contributivo, Subsidiado y Contributivo Subsidiado).")
                .HasColumnName("Regimen_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TipoNovedadNumero)
                .HasComment("Número  único que representa la novedad sobre el registro de usuarios.")
                .HasColumnName("Tipo_Novedad_Numero");
            entity.Property(e => e.UsuarioCargo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Cargo que desempeña el usuario.")
                .HasColumnName("Usuario_Cargo");
            entity.Property(e => e.UsuarioClave)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Clave de acceso del usuario.")
                .HasColumnName("Usuario_Clave");
            entity.Property(e => e.UsuarioClaveFechaActiva)
                .HasComment("Fecha en que fue activada la clave del usuario.")
                .HasColumnType("datetime")
                .HasColumnName("Usuario_Clave_Fecha_Activa");
            entity.Property(e => e.UsuarioClaveFechaAviso)
                .HasComment("Fecha en que aviso la activación de la clave al usuario.")
                .HasColumnType("datetime")
                .HasColumnName("Usuario_Clave_Fecha_Aviso");
            entity.Property(e => e.UsuarioDocumentoClave)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Clave del documento donde se solcito la activación de la clave para el usuario.")
                .HasColumnName("Usuario_Documento_Clave");
            entity.Property(e => e.UsuarioDocumentoNumero)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Número del documento (ARCHI) donde se solcito la activación de la clave para el usuario.")
                .HasColumnName("Usuario_Documento_Numero");
            entity.Property(e => e.UsuarioNotas)
                .HasMaxLength(4000)
                .HasDefaultValueSql("(N'N/A')")
                .HasComment("Observaciones sobre el registro de la clave de usuario.")
                .HasColumnName("Usuario_Notas");
            entity.Property(e => e.UsuarioPersonaApellidos)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Apellidos de la persona que fue registrada como usuario.")
                .HasColumnName("Usuario_Persona_Apellidos");
            entity.Property(e => e.UsuarioPersonaCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Número de Cédula de la persona que fue registrada como usuario.")
                .HasColumnName("Usuario_Persona_Cedula");
            entity.Property(e => e.UsuarioPersonaNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombres de la persona que fue registrada como usuario.")
                .HasColumnName("Usuario_Persona_Nombre");
            entity.Property(e => e.UsuarioPersonaNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Usuario_Persona_NSS");

            entity.HasOne(d => d.EstadoClaveCodigoNavigation).WithMany(p => p.SeguridadUsuariosMasters)
                .HasForeignKey(d => d.EstadoClaveCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguridad_Usuarios_Master_Seguridad_Usuarios_Estado_Clave_Cata");

            entity.HasOne(d => d.TipoNovedadNumeroNavigation).WithMany(p => p.SeguridadUsuariosMasters)
                .HasForeignKey(d => d.TipoNovedadNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguridad_Usuarios_Master_Seguridad_Usuarios_Novedad_Tipo_Cata");

            entity.HasOne(d => d.UsuarioPersonaNssNavigation).WithMany(p => p.SeguridadUsuariosMasters)
                .HasForeignKey(d => d.UsuarioPersonaNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Seguridad_Usuarios_Master_TSS_Ciudadanos_Master");
        });

        modelBuilder.Entity<SeguridadUsuariosNovedadTipoCatum>(entity =>
        {
            entity.HasKey(e => e.TipoNovedadNumero).HasName("PK_Prestadoras_Usuarios_Motivos_Tipo_Cata");

            entity.ToTable("Seguridad_Usuarios_Novedad_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene los tipo de novedades que pueden aplicar a un registro de usuarios  en cualquiera de los sistemas, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.TipoNovedadNumero)
                .HasComment("Número  único que representa la novedad sobre el registro de usuarios.")
                .HasColumnName("Tipo_Novedad_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TipoNovedadDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción de la novedad del registro de usuarios.")
                .HasColumnName("Tipo_Novedad_Descripcion");
        });

        modelBuilder.Entity<Selec>(entity =>
        {
            entity.HasKey(e => new { e.PreguntaSecuencia, e.PreguntaNumero, e.PreguntaRespuestaCodigo }).HasName("PK_Acreditaciones_Preguntas_Respuestas_Trans");

            entity.ToTable("selec", tb =>
                {
                    tb.HasComment("Es un catálogo donde se registran la posible respuesta verdadera o falsa, con la que se relaciona unas preguntas de los exámenes en las actividades de evaluación de los procesos de acreditación, su fuente de datos sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Acreditaciones_Preguntas_Respuestas_Cata_Delete");
                    tb.HasTrigger("Acreditaciones_Preguntas_Respuestas_Cata_Update");
                });

            entity.Property(e => e.PreguntaSecuencia)
                .ValueGeneratedOnAdd()
                .HasColumnName("Pregunta_Secuencia");
            entity.Property(e => e.PreguntaNumero)
                .HasComment("Número único que identifica cada pregunta del banco de preguntas que puede ser utilizado en los exámenes  de acreditación.")
                .HasColumnName("Pregunta_Numero");
            entity.Property(e => e.PreguntaRespuestaCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el código (Letra) con la que se puede responder una pregunta específica en un examen de evaluación en un proceso de acreditación.")
                .HasColumnName("Pregunta_Respuesta_Codigo");
            entity.Property(e => e.PreguntaRespuestaDescripcion)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasComment("Es el código (Letra) con la que se puede responder una pregunta específica en un examen de evaluación en un proceso de acreditación.")
                .HasColumnName("Pregunta_Respuesta_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SisalrilVt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SISALRIL_VT");

            entity.Property(e => e.ArsSolicitante).HasColumnName("ARS_SOLICITANTE");
            entity.Property(e => e.CargadoEnTss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("CARGADO_EN_TSS");
            entity.Property(e => e.CodigoParentesco).HasColumnName("CODIGO_PARENTESCO");
            entity.Property(e => e.FechaRegistro)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO");
            entity.Property(e => e.FechaRespuestaTss)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RESPUESTA_TSS");
            entity.Property(e => e.IdArs).HasColumnName("ID_ARS");
            entity.Property(e => e.IdError)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .HasColumnName("ID_ERROR");
            entity.Property(e => e.LoteNumero).HasColumnName("LOTE_NUMERO");
            entity.Property(e => e.NIdRegistro).HasColumnName("N_ID_REGISTRO");
            entity.Property(e => e.NNumControl).HasColumnName("N_NUM_CONTROL");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NO_DOCUMENTO");
            entity.Property(e => e.NssTitular).HasColumnName("NSS_TITULAR");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("('PE')")
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TIPO_DOCUMENTO");
            entity.Property(e => e.UltFechaAct)
                .HasColumnType("datetime")
                .HasColumnName("ULT_FECHA_ACT");
            entity.Property(e => e.Usuario)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("USUARIO");
            entity.Property(e => e.UsuarioSolicita)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('G.DELRIO')")
                .HasColumnName("USUARIO_SOLICITA");
        });

        modelBuilder.Entity<SisalrilVt2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SISALRIL_VT_2");

            entity.Property(e => e.ArsSolicitante).HasColumnName("ARS_SOLICITANTE");
            entity.Property(e => e.CargadoEnTss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("CARGADO_EN_TSS");
            entity.Property(e => e.CodigoParentesco).HasColumnName("CODIGO_PARENTESCO");
            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO");
            entity.Property(e => e.FechaRespuestaTss)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RESPUESTA_TSS");
            entity.Property(e => e.IdArs).HasColumnName("ID_ARS");
            entity.Property(e => e.IdError)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_ERROR");
            entity.Property(e => e.LoteNumero).HasColumnName("LOTE_NUMERO");
            entity.Property(e => e.NIdRegistro).HasColumnName("N_ID_REGISTRO");
            entity.Property(e => e.NNumControl).HasColumnName("N_NUM_CONTROL");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NO_DOCUMENTO");
            entity.Property(e => e.NssTitular).HasColumnName("NSS_TITULAR");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TIPO_DOCUMENTO");
            entity.Property(e => e.UltFechaAct)
                .HasColumnType("datetime")
                .HasColumnName("ULT_FECHA_ACT");
            entity.Property(e => e.Usuario)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("USUARIO");
            entity.Property(e => e.UsuarioSolicita)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('G.DELRIO')")
                .HasColumnName("USUARIO_SOLICITA");
        });

        modelBuilder.Entity<SisalrilVtHistorico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SISALRIL_VT_HISTORICO");

            entity.Property(e => e.ArsSolicitante).HasColumnName("ARS_SOLICITANTE");
            entity.Property(e => e.CargadoEnTss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CARGADO_EN_TSS");
            entity.Property(e => e.CodigoParentesco).HasColumnName("CODIGO_PARENTESCO");
            entity.Property(e => e.FechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("FECHA_HISTORICO");
            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_REGISTRO");
            entity.Property(e => e.FechaRespuestaTss)
                .HasColumnType("datetime")
                .HasColumnName("FECHA_RESPUESTA_TSS");
            entity.Property(e => e.IdArs).HasColumnName("ID_ARS");
            entity.Property(e => e.IdError)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("ID_ERROR");
            entity.Property(e => e.LoteNumero).HasColumnName("LOTE_NUMERO");
            entity.Property(e => e.NIdRegistro).HasColumnName("N_ID_REGISTRO");
            entity.Property(e => e.NNumControl).HasColumnName("N_NUM_CONTROL");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NO_DOCUMENTO");
            entity.Property(e => e.NssTitular).HasColumnName("NSS_TITULAR");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TIPO_DOCUMENTO");
            entity.Property(e => e.UltFechaAct)
                .HasColumnType("datetime")
                .HasColumnName("ULT_FECHA_ACT");
            entity.Property(e => e.Usuario)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("USUARIO");
            entity.Property(e => e.UsuarioSolicita)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("USUARIO_SOLICITA");
        });

        modelBuilder.Entity<SisalrilVtLote>(entity =>
        {
            entity.HasKey(e => e.LoteNumero);

            entity.ToTable("SISALRIL_VT_LOTES");

            entity.Property(e => e.LoteNumero).HasColumnName("LOTE_NUMERO");
            entity.Property(e => e.LoteFechaCarga)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("LOTE_FECHA_CARGA");
            entity.Property(e => e.LoteFechaValidacion)
                .HasColumnType("datetime")
                .HasColumnName("LOTE_FECHA_VALIDACION");
            entity.Property(e => e.LoteRegistrosSisalril).HasColumnName("LOTE_REGISTROS_SISALRIL");
            entity.Property(e => e.LoteRegistrosTss).HasColumnName("LOTE_REGISTROS_TSS");
            entity.Property(e => e.LoteUsaurio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LOTE_USAURIO");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("('PE')")
                .IsFixedLength()
                .HasColumnName("REGISTRO_ESTADO");
        });

        modelBuilder.Entity<SisalrilVtStatus>(entity =>
        {
            entity.HasKey(e => e.StatusCodigo);

            entity.ToTable("SISALRIL_VT_STATUS");

            entity.Property(e => e.StatusCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Status_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.StatusDescripcion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Status_Descripcion");
            entity.Property(e => e.StatusExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Status_Explicacion");
        });

        modelBuilder.Entity<SistemasAlertasFrecuenciasCatum>(entity =>
        {
            entity.HasKey(e => new { e.AlertaNumero, e.TiempoIntervaloNumero, e.AlertaFrecuenciaNumero });

            entity.ToTable("Sistemas_Alertas_Frecuencias_Cata");

            entity.Property(e => e.AlertaNumero).HasColumnName("Alerta_Numero");
            entity.Property(e => e.TiempoIntervaloNumero).HasColumnName("Tiempo_Intervalo_Numero");
            entity.Property(e => e.AlertaFrecuenciaNumero).HasColumnName("Alerta_Frecuencia_Numero");
            entity.Property(e => e.AlertaFrecuenciaDatoCuantitativoMaximo).HasColumnName("Alerta_Frecuencia_Dato_Cuantitativo_Maximo");
            entity.Property(e => e.AlertaFrecuenciaDatosTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Alerta_Frecuencia_Datos_Tipo");
            entity.Property(e => e.AlertaFrecuenciaDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Alerta_Frecuencia_Descripcion");
            entity.Property(e => e.AlertaFrecuenciaExplicacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Alerta_Frecuencia_Explicacion");
            entity.Property(e => e.CatalogoTabla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Catalogo_Tabla");
            entity.Property(e => e.CatalogoTablaColumna)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Catalogo_Tabla_Columna");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AlertaNumeroNavigation).WithMany(p => p.SistemasAlertasFrecuenciasCata)
                .HasForeignKey(d => d.AlertaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Alertas_Frecuencias_Cata_Sistemas_Alertas_Master");

            entity.HasOne(d => d.TiempoIntervaloNumeroNavigation).WithMany(p => p.SistemasAlertasFrecuenciasCata)
                .HasForeignKey(d => d.TiempoIntervaloNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Alertas_Frecuencias_Cata_Sistemas_Alertas_Tiempos_Intervalos_Cata");

            entity.HasOne(d => d.SistemasAlertasFrecuenciasTran).WithOne(p => p.SistemasAlertasFrecuenciasCatum)
                .HasForeignKey<SistemasAlertasFrecuenciasCatum>(d => new { d.AlertaNumero, d.TiempoIntervaloNumero, d.AlertaFrecuenciaNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Alertas_Frecuencias_Cata_Sistemas_Alertas_Frecuencias_Trans");
        });

        modelBuilder.Entity<SistemasAlertasFrecuenciasTran>(entity =>
        {
            entity.HasKey(e => new { e.AlertaNumero, e.TiempoIntervaloNumero, e.AlertaFrecuenciaNumero });

            entity.ToTable("Sistemas_Alertas_Frecuencias_Trans");

            entity.Property(e => e.AlertaNumero).HasColumnName("Alerta_Numero");
            entity.Property(e => e.TiempoIntervaloNumero).HasColumnName("Tiempo_Intervalo_Numero");
            entity.Property(e => e.AlertaFrecuenciaNumero).HasColumnName("Alerta_Frecuencia_Numero");
            entity.Property(e => e.AlertaFrecuenciaValor)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Alerta_Frecuencia_Valor");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SistemasAlertasMaster>(entity =>
        {
            entity.HasKey(e => e.AlertaNumero);

            entity.ToTable("Sistemas_Alertas_Master");

            entity.Property(e => e.AlertaNumero)
                .ValueGeneratedNever()
                .HasColumnName("Alerta_Numero");
            entity.Property(e => e.AlertaDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Alerta_Descripcion");
            entity.Property(e => e.AlertaEnviaCorreo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Alerta_Envia_Correo");
            entity.Property(e => e.AlertaExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Alerta_Explicacion");
            entity.Property(e => e.AlertaMensaje)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Alerta_Mensaje");
            entity.Property(e => e.AlertaProximaCorridaFecha)
                .HasColumnType("datetime")
                .HasColumnName("Alerta_Proxima_Corrida_Fecha");
            entity.Property(e => e.AlertaUltimaCorridaFecha)
                .HasColumnType("datetime")
                .HasColumnName("Alerta_Ultima_Corrida_Fecha");
            entity.Property(e => e.CorreoPlantillaNumero).HasColumnName("Correo_Plantilla_Numero");
            entity.Property(e => e.GrupoSeguridadNumero).HasColumnName("Grupo_Seguridad_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AlertaNumeroNavigation).WithOne(p => p.SistemasAlertasMaster)
                .HasForeignKey<SistemasAlertasMaster>(d => d.AlertaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Alertas_Master_Sistemas_Alertas_Periodicidad_Trans");

            entity.HasOne(d => d.CorreoPlantillaNumeroNavigation).WithMany(p => p.SistemasAlertasMasters)
                .HasForeignKey(d => d.CorreoPlantillaNumero)
                .HasConstraintName("FK_Sistemas_Alertas_Master_Sistemas_Correos_Plantillas_Cata");
        });

        modelBuilder.Entity<SistemasAlertasPeriodicidadesTran>(entity =>
        {
            entity.HasKey(e => e.AlertaNumero).HasName("PK_Sistemas_Alertas_Periodicidad_Trans");

            entity.ToTable("Sistemas_Alertas_Periodicidades_Trans");

            entity.Property(e => e.AlertaNumero)
                .ValueGeneratedNever()
                .HasColumnName("Alerta_Numero");
            entity.Property(e => e.PeriodicidadFinFecha)
                .HasColumnType("datetime")
                .HasColumnName("Periodicidad_Fin_Fecha");
            entity.Property(e => e.PeriodicidadFinHora)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Periodicidad_Fin_Hora");
            entity.Property(e => e.PeriodicidadGenerada)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Periodicidad_Generada");
            entity.Property(e => e.PeriodicidadInicioFecha)
                .HasColumnType("datetime")
                .HasColumnName("Periodicidad_Inicio_Fecha");
            entity.Property(e => e.PeriodicidadInicioHora)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Periodicidad_Inicio_Hora");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SistemasAlertasTiemposIntervalosCatum>(entity =>
        {
            entity.HasKey(e => e.TiempoIntervaloNumero);

            entity.ToTable("Sistemas_Alertas_Tiempos_Intervalos_Cata");

            entity.Property(e => e.TiempoIntervaloNumero).HasColumnName("Tiempo_Intervalo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TiempoIntervaloCantidadHoras).HasColumnName("Tiempo_Intervalo_Cantidad_Horas");
            entity.Property(e => e.TiempoIntervaloExplicacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Tiempo_Intervalo_Explicacion");
            entity.Property(e => e.TiempoIntervaloNombre)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Tiempo_Intervalo_Nombre");
        });

        modelBuilder.Entity<SistemasAlertasTran>(entity =>
        {
            entity.HasKey(e => new { e.AlertaNumero, e.AlertaSecuencia });

            entity.ToTable("Sistemas_Alertas_Trans");

            entity.Property(e => e.AlertaNumero).HasColumnName("Alerta_Numero");
            entity.Property(e => e.AlertaSecuencia).HasColumnName("Alerta_Secuencia");
            entity.Property(e => e.AlertaFecha)
                .HasColumnType("datetime")
                .HasColumnName("Alerta_Fecha");
            entity.Property(e => e.AlertaMensaje)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Alerta_Mensaje");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AlertaNumeroNavigation).WithMany(p => p.SistemasAlertasTrans)
                .HasForeignKey(d => d.AlertaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Alertas_Trans_Sistemas_Alertas_Master");
        });

        modelBuilder.Entity<SistemasAlertasVisualizacionesTran>(entity =>
        {
            entity.HasKey(e => new { e.AlertaNumero, e.AlertaSecuencia, e.GrupoSeguridadNumero, e.UsuarioUsuarioNombre }).HasName("PK_Sistemas_Alertas_Visualizacion_Trans");

            entity.ToTable("Sistemas_Alertas_Visualizaciones_Trans");

            entity.Property(e => e.AlertaNumero).HasColumnName("Alerta_Numero");
            entity.Property(e => e.AlertaSecuencia).HasColumnName("Alerta_Secuencia");
            entity.Property(e => e.GrupoSeguridadNumero).HasColumnName("Grupo_Seguridad_Numero");
            entity.Property(e => e.UsuarioUsuarioNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre de usuario de la persona registrado como usuario en el sistema.")
                .HasColumnName("Usuario_Usuario_Nombre");
            entity.Property(e => e.AlertaVisualizacionFecha)
                .HasColumnType("datetime")
                .HasColumnName("Alerta_Visualizacion_Fecha");
            entity.Property(e => e.AlertaVisualizacionUsuario)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Alerta_Visualizacion_Usuario");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.Alerta).WithMany(p => p.SistemasAlertasVisualizacionesTrans)
                .HasForeignKey(d => new { d.AlertaNumero, d.AlertaSecuencia })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Alertas_Visualizacion_Trans_Sistemas_Alertas_Trans");
        });

        modelBuilder.Entity<SistemasArchivosCatum>(entity =>
        {
            entity.HasKey(e => e.ArchivoNumero);

            entity.ToTable("Sistemas_Archivos_Cata");

            entity.Property(e => e.ArchivoNumero)
                .ValueGeneratedNever()
                .HasColumnName("Archivo_Numero");
            entity.Property(e => e.ArchivoDescripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Archivo_Descripcion");
            entity.Property(e => e.ArchivoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Archivo_Explicacion");
            entity.Property(e => e.ArchivoLineasLongitud).HasColumnName("Archivo_Lineas_Longitud");
            entity.Property(e => e.ArchivoNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Archivo_Nombre");
            entity.Property(e => e.InstitucionEnviaNumero).HasColumnName("Institucion_Envia_Numero");
            entity.Property(e => e.InstitucionRecibeNumero).HasColumnName("Institucion_Recibe_Numero");
            entity.Property(e => e.ProcesoNumero).HasColumnName("Proceso_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ProcesoNumeroNavigation).WithMany(p => p.SistemasArchivosCata)
                .HasForeignKey(d => d.ProcesoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Archivos_Cata_Sistemas_Procesos_Cata");
        });

        modelBuilder.Entity<SistemasArchivosEstructurasCatum>(entity =>
        {
            entity.HasKey(e => new { e.ArchivoNumero, e.EstructuraSecuencia });

            entity.ToTable("Sistemas_Archivos_Estructuras_Cata");

            entity.Property(e => e.ArchivoNumero).HasColumnName("Archivo_Numero");
            entity.Property(e => e.EstructuraSecuencia).HasColumnName("Estructura_Secuencia");
            entity.Property(e => e.EsctructuraColumna)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre de la columna (Campo) de la estructura de datos del esquema.")
                .HasColumnName("Esctructura_Columna");
            entity.Property(e => e.EsctructuraTipoDatos)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Tipo de datos de la columna (Campo) de la estructura de datos del esquema.")
                .HasColumnName("Esctructura_Tipo_Datos");
            entity.Property(e => e.EstructuraEspaciosFaltantes)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Estructura_Espacios_Faltantes");
            entity.Property(e => e.EstructuraLoguitud)
                .HasComment("Longitud de la columna (Campo) de la estructura de datos del esquema.")
                .HasColumnName("Estructura_Loguitud");
            entity.Property(e => e.EstructuraObservacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Observaciones sobre la columna (Campo) de la estructura de datos del esquema.")
                .HasColumnName("Estructura_Observacion");
            entity.Property(e => e.EstructuraOrden).HasColumnName("Estructura_Orden");
            entity.Property(e => e.EstructuraPosicionFinal)
                .HasComment("Posición final de la columna (Campo) de la estructura de datos del esquema.")
                .HasColumnName("Estructura_Posicion_Final");
            entity.Property(e => e.EstructuraPosicionInicial)
                .HasComment("Posición inicial de la columna (Campo) de la estructura de datos del esquema.")
                .HasColumnName("Estructura_Posicion_Inicial");
            entity.Property(e => e.EstructuraRequerido)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si la columna (Campo) de la estructura de datos del esquema es obligatoria.")
                .HasColumnName("Estructura_Requerido");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ArchivoNumeroNavigation).WithMany(p => p.SistemasArchivosEstructurasCata)
                .HasForeignKey(d => d.ArchivoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Archivos_Estructuras_Cata_Sistemas_Archivos_Cata");
        });

        modelBuilder.Entity<SistemasAyudasConfig>(entity =>
        {
            entity.HasKey(e => e.AyudaControlId).HasName("PK_Sistema_Ayuda_Cata");

            entity.ToTable("Sistemas_Ayudas_Config", tb => tb.HasComment("Es una tabla de configuración donde se registran los objetos de las ayudas de los módulos de los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL en el proceso de desarrollo."));

            entity.Property(e => e.AyudaControlId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Numero único de control de la ayuda de la interface u operación del sistema de información.")
                .HasColumnName("Ayuda_Control_Id");
            entity.Property(e => e.AyudaImagenUrl)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Dirección y nombre de la imagen de la ayuda de la interface u operación del sistema de información.")
                .HasColumnName("Ayuda_Imagen_Url");
            entity.Property(e => e.AyudaMensajeCorto)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasComment("Mensaje corto de la ayuda de la interface u operación del sistema de información.")
                .HasColumnName("Ayuda_Mensaje_Corto");
            entity.Property(e => e.AyudaMensajeLargo)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasComment("Mensaje largo de la ayuda de la interface u operación del sistema de información.")
                .HasColumnName("Ayuda_Mensaje_Largo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SistemasControlesCatum>(entity =>
        {
            entity.HasKey(e => e.ControlNumero).HasName("PK_Sistema_Controles_Cata");

            entity.ToTable("Sistemas_Controles_Cata", tb => tb.HasComment("Es un catálogo de los controles utilizados en los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL  en el proceso de desarrollo."));

            entity.Property(e => e.ControlNumero)
                .HasComment("Número único del control del sistema de información.")
                .HasColumnName("Control_Numero");
            entity.Property(e => e.ControlCauseValidation)
                .HasComment("Indica si el botón validará algún dato introducido por el usuario antes de realizar la función principal del control (Generalmente un Botón).")
                .HasColumnName("Control_CauseValidation");
            entity.Property(e => e.ControlCss)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Indica el nombre del estilo contenido en el archivo de CSS (Archivo de estilo HTML) el cual se aplicara al Control. (Generalmente un Botón)")
                .HasColumnName("Control_Css");
            entity.Property(e => e.ControlEventoNavegacionUrl)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Evento que se ejecutará cuando el usuario navegue sobre el control,  los controles  control (Generalmente un Botón) que representan las operaciones que se utilizan en la interface  de los sistemas de información.")
                .HasColumnName("Control_Evento_Navegacion_Url");
            entity.Property(e => e.ControlEventoOnClick)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Evento que se ejecutará cuando el usuario de un clic al control,  los controles  control (Generalmente un Botón) que representan las operaciones que se utilizan en la interface  de los sistemas de información.")
                .HasColumnName("Control_Evento_OnClick");
            entity.Property(e => e.ControlExplicacion)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasComment("Breve explicación de la operación que realiza el control (Generalmente un Botón) que representan las operaciones que se utilizan en la interface  de los sistemas de información.")
                .HasColumnName("Control_Explicacion");
            entity.Property(e => e.ControlImagenUrl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Dirección de la imagen que se despliega en el objeto (Generalmente un Botón), que representan las operaciones que se utilizan en la interface  de los sistemas de información.")
                .HasColumnName("Control_Imagen_Url");
            entity.Property(e => e.ControlMostrarPopup)
                .HasComment("Indica si la interface a la cual hace referencia el Botón se mostrara un POPUP.")
                .HasColumnName("Control_Mostrar_Popup");
            entity.Property(e => e.ControlMostrarToolbar)
                .HasComment("Indica si el control (Generalmente un Botón) se va a mostrar en una TOOL BAR.")
                .HasColumnName("Control_Mostrar_Toolbar");
            entity.Property(e => e.ControlNombreInterno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre interno del control (Generalmente un Botón) que representan las operaciones que se utilizan en la interface  de los sistemas de información.")
                .HasColumnName("Control_Nombre_Interno");
            entity.Property(e => e.ControlNombrePublico)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre público del control (Generalmente un Botón) que representan las operaciones que se utilizan en la interface  de los sistemas de información.")
                .HasColumnName("Control_Nombre_Publico");
            entity.Property(e => e.ControlPopupAlto)
                .HasComment("Indica la altura del POPUP donde se va a mostrar la interface a la cual hace referencia el botón.")
                .HasColumnName("Control_Popup_Alto");
            entity.Property(e => e.ControlPopupAncho)
                .HasComment("Indica el ancho del POPUP donde se va a mostrar la interface a la cual hace referencia el botón.")
                .HasColumnName("Control_Popup_Ancho");
            entity.Property(e => e.ControlTipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Tipifica el control en el tipo de objeto que se instanciara para su uso,  los controles  control (Generalmente un Botón) que representan las operaciones que se utilizan en la interface  de los sistemas de información.")
                .HasColumnName("Control_Tipo");
            entity.Property(e => e.OperacionTipoNumero)
                .HasComment("Número único del tipo de operación que se utilizan en la interface de los sistemas de información, La cual hace referencia generalmente a Insertar, Actualizar, Borrar.")
                .HasColumnName("Operacion_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.OperacionTipoNumeroNavigation).WithMany(p => p.SistemasControlesCata)
                .HasForeignKey(d => d.OperacionTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistema_Controles_Cata_Sistema_Operacion_Tipo");
        });

        modelBuilder.Entity<SistemasControlesNombresPublicosConfig>(entity =>
        {
            entity.HasKey(e => new { e.NombrePublicoPagina, e.NombrePublicoNombrePrivado }).HasName("PK_Sistema_Controles_Nombre_Publicos");

            entity.ToTable("Sistemas_Controles_Nombres_Publicos_Config", tb => tb.HasComment("Es una tabla de configuración donde se registran los controles y sus nombres públicos para ser utilizados por los módulos de los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL en el proceso de desarrollo."));

            entity.Property(e => e.NombrePublicoPagina)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombre de la interface a la cual se hace referencia.")
                .HasColumnName("Nombre_Publico_Pagina");
            entity.Property(e => e.NombrePublicoNombrePrivado)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombre interno del objeto (Generalmente un Botón). al cual se hace referencia en el registro.")
                .HasColumnName("Nombre_Publico_Nombre_Privado");
            entity.Property(e => e.NombrePublicoBusquedaMostrar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si se mostrara un control de búsqueda en la interface.")
                .HasColumnName("Nombre_Publico_Busqueda_Mostrar");
            entity.Property(e => e.NombrePublicoImagenUrl)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/A')")
                .HasComment("Imagen que mostrara el objeto(Generalmente un Botón).")
                .HasColumnName("Nombre_Publico_Imagen_Url");
            entity.Property(e => e.NombrePublicoLabelCssClass)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('Label')")
                .HasComment("Indica el nombre de la clase en el archivo de estilo (CSS) el cual el objeto tomara como diseño(generalmente aplica a un Label).")
                .HasColumnName("Nombre_Publico_Label_CssClass");
            entity.Property(e => e.NombrePublicoLabelWith)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("((50))")
                .HasComment("Indica el ancho del objeto(generalmente un Label).")
                .HasColumnName("Nombre_Publico_Label_With");
            entity.Property(e => e.NombrePublicoMostrar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasComment("Indica si el objeto será visible al usuario.")
                .HasColumnName("Nombre_Publico_Mostrar");
            entity.Property(e => e.NombrePublicoNombrePublico)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombre público del objeto (Generalmente un Botón) que se mostrara la usuario final.")
                .HasColumnName("Nombre_Publico_Nombre_Publico");
            entity.Property(e => e.NombrePublicoTablaHtlmMerge)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si determinado objeto(generalmente un textbox). se mostrara solo en una fila de la tabla HTML que se genera en la interfaces del usuario.")
                .HasColumnName("Nombre_Publico_Tabla_Htlm_Merge");
            entity.Property(e => e.NombrePublicoTablaHtmlCantidadColumna)
                .HasDefaultValueSql("((2))")
                .HasComment("Indica la cantidad de columna que la interface debe diseñar para mostrar al usuario(generalmente aplica a un panel)")
                .HasColumnName("Nombre_Publico_Tabla_Html_Cantidad_Columna");
            entity.Property(e => e.NombrePublicoTablaHtmlTdCssClass)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('GridItemBottom')")
                .HasComment("Indica el nombre de la clase en el archivo de estilo (CSS) el cual el objeto tomara como diseño(generalmente aplica a un panel).")
                .HasColumnName("Nombre_Publico_Tabla_Html_Td_CssClass");
            entity.Property(e => e.NombrePublicoTextBoxCssClass)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('ControlNormalText')")
                .HasComment("Indica el nombre de la clase en el archivo de estilo (CSS) el cual el objeto tomara como diseño(generalmente aplica a un textbox).")
                .HasColumnName("Nombre_Publico_TextBox_CssClass");
            entity.Property(e => e.NombrePublicoTextBoxTexMode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('SingleLine')")
                .HasComment("Indica el modo de escritura que acepta el objeto(generalmente un textbox), puede ser una sola línea o múltiples líneas.")
                .HasColumnName("Nombre_Publico_TextBox_TexMode");
            entity.Property(e => e.NombrePublicoTextBoxWith)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("((50))")
                .HasComment("Indica el ancho del objeto(generalmente un textbox).")
                .HasColumnName("Nombre_Publico_TextBox_With");
            entity.Property(e => e.NombrePublicoToolTips)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasComment("Pequeña descripción que sale sobre el objeto(Generalmente un Botón) al pasar el Mouse sobre el mismo.")
                .HasColumnName("Nombre_Publico_ToolTips");
            entity.Property(e => e.NombrePublicoVisualizarOrden)
                .HasComment("Indica el orden de visualización del objeto en la interface del usuario.")
                .HasColumnName("Nombre_Publico_Visualizar_Orden");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SistemasCorreosDestinatariosCatum>(entity =>
        {
            entity.HasKey(e => e.CorreoDestinatarioClave);

            entity.ToTable("Sistemas_Correos_Destinatarios_Cata");

            entity.Property(e => e.CorreoDestinatarioClave)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Correo_Destinatario_Clave");
            entity.Property(e => e.CorreoDestinatarioDetalle)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Correo_Destinatario_Detalle");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SistemasCorreosEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.CorreoEstadoCodigo);

            entity.ToTable("Sistemas_Correos_Estados_Cata");

            entity.Property(e => e.CorreoEstadoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Correo_Estado_Codigo");
            entity.Property(e => e.CorreoEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Correo_Estado_Descripcion");
            entity.Property(e => e.CorreoEstadoExplicacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Correo_Estado_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SistemasCorreosPlantillasCatum>(entity =>
        {
            entity.HasKey(e => e.CorreoPlantillaNumero).HasName("PK_Sistemas_Correo_Plantillas_Cata");

            entity.ToTable("Sistemas_Correos_Plantillas_Cata");

            entity.Property(e => e.CorreoPlantillaNumero).HasColumnName("Correo_Plantilla_Numero");
            entity.Property(e => e.CorreoPlantillaAsunto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Correo_Plantilla_Asunto");
            entity.Property(e => e.CorreoPlantillaCuerpo)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("Correo_Plantilla_Cuerpo");
            entity.Property(e => e.CorreoPlantillaDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Correo_Plantilla_Descripcion");
            entity.Property(e => e.CorreoPlantillaEnviarCc)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Correo_Plantilla_Enviar_CC");
            entity.Property(e => e.CorreoPlantillaEnviarCco)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Correo_Plantilla_Enviar_CCO");
            entity.Property(e => e.CorreoPlantillaExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Correo_Plantilla_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SistemasCorreosTran>(entity =>
        {
            entity.HasKey(e => e.CorreoSecuencia).HasName("PK_Sistemas_Correos_Trans_1");

            entity.ToTable("Sistemas_Correos_Trans");

            entity.Property(e => e.CorreoSecuencia).HasColumnName("Correo_Secuencia");
            entity.Property(e => e.CorreoAsunto)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Correo_Asunto");
            entity.Property(e => e.CorreoCambioEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Correo_Cambio_Estado_Fecha");
            entity.Property(e => e.CorreoCuerpo)
                .HasColumnType("ntext")
                .HasColumnName("Correo_Cuerpo");
            entity.Property(e => e.CorreoEnviarCc)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("Correo_Enviar_CC");
            entity.Property(e => e.CorreoEnviarCco)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Correo_Enviar_CCO");
            entity.Property(e => e.CorreoEnviarTo)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasColumnName("Correo_Enviar_To");
            entity.Property(e => e.CorreoEstadoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Correo_Estado_Codigo");
            entity.Property(e => e.CorreoPlantillaNumero).HasColumnName("Correo_Plantilla_Numero");
            entity.Property(e => e.CorrreoCambioEstadoUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("(P=Pendiente,E=Enviado,C= Cancelado,A=Actividad)")
                .HasColumnName("Corrreo_Cambio_Estado_Usuario");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CorreoEstadoCodigoNavigation).WithMany(p => p.SistemasCorreosTrans)
                .HasForeignKey(d => d.CorreoEstadoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Correos_Trans_Sistemas_Correos_Estados_Cata");

            entity.HasOne(d => d.CorreoPlantillaNumeroNavigation).WithMany(p => p.SistemasCorreosTrans)
                .HasForeignKey(d => d.CorreoPlantillaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Correos_Trans_Sistemas_Correos_Plantillas_Cata");
        });

        modelBuilder.Entity<SistemasDocumentosMaster>(entity =>
        {
            entity.HasKey(e => e.DocumentoCodigo).HasName("PK_Sistemas_Documentos_Trans");

            entity.ToTable("Sistemas_Documentos_Master", tb => tb.HasComment("Es un maestro donde se registran todo los documentos que se publican a los usuarios para los diferentes sistemas de información, su fuente de datos los sistemas internos de la SISALRIL."));

            entity.Property(e => e.DocumentoCodigo)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.DocumentoCategoria)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Categoría  del documento  (Esquema, Instructivo, formato) que se publica a los usuarios.")
                .HasColumnName("Documento_Categoria");
            entity.Property(e => e.DocumentoDescripcion)
                .HasMaxLength(220)
                .IsUnicode(false)
                .HasComment("Breve descripción del documento  (Esquema, Instructivo, formato) que se publica a los usuarios.")
                .HasColumnName("Documento_Descripcion");
            entity.Property(e => e.DocumentoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Explicación del documento  (Esquema, Instructivo, formato) que se publica a los usuarios.")
                .HasColumnName("Documento_Explicacion");
            entity.Property(e => e.DocumentoNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombre del documento  (Esquema, Instructivo, formato) que se publica a los usuarios.")
                .HasColumnName("Documento_Nombre");
            entity.Property(e => e.DocumentoRuta)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Es la ruta del servidor y carpeta donde se encuentra almacenado el documento.")
                .HasColumnName("Documento_Ruta");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SistemasDocumentosTran>(entity =>
        {
            entity.HasKey(e => new { e.SistemaNumero, e.DocumentoCodigo }).HasName("PK_Sistemas_Documentos_Trans_1");

            entity.ToTable("Sistemas_Documentos_Trans", tb => tb.HasComment("Es una tabla transaccional  donde se registran todo los documentos y con cual sistema de información se relacionan,   para su publicación a los usuarios del sistema, su fuente de datos los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SistemaNumero)
                .HasComment("Número único del sistema de información.")
                .HasColumnName("Sistema_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasComment("Es el código único que representa el documento dentro del sistema.")
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.DocumentoOrden)
                .HasComment("Número de orden en el que debe ser desplegado un documento para un sistema de información específico.")
                .HasColumnName("Documento_Orden");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.SistemaNumeroNavigation).WithMany(p => p.SistemasDocumentosTrans)
                .HasForeignKey(d => d.SistemaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Documentos_Trans_Sistemas_Master");
        });

        modelBuilder.Entity<SistemasErroresCatum>(entity =>
        {
            entity.HasKey(e => e.SistemasErrorSecuencia);

            entity.ToTable("Sistemas_Errores_Cata", tb => tb.HasComment("Es una tabla en la cual se registran los posibles errores que los sistemas pueden generar y los cuales están controlados, en la misma se ofrece una ayuda básica al usuario para que pueda realizar su operación sin generar el mismo error nuevamente."));

            entity.Property(e => e.SistemasErrorSecuencia).HasColumnName("Sistemas_Error_Secuencia");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SistemasErrorAyuda)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("Sistemas_Error_Ayuda");
            entity.Property(e => e.SistemasErrorDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Sistemas_Error_Descripcion");
            entity.Property(e => e.SistemasErrorExplicacion)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("Sistemas_Error_Explicacion");
            entity.Property(e => e.SistemasErrorMensajeInterno)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/A')")
                .HasColumnName("Sistemas_Error_Mensaje_Interno");
        });

        modelBuilder.Entity<SistemasErroresTran>(entity =>
        {
            entity.HasKey(e => e.ErrorSecuencia);

            entity.ToTable("Sistemas_Errores_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran todo los errores generado por el Sistema Operativo en la ejecución de una aplicación,  su fuente de datos los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ErrorSecuencia)
                .HasComment("Es una secuencia única para identificar la transacción con el objetivo de optimizar las funcionalidades de la tabla.")
                .HasColumnName("Error_Secuencia");
            entity.Property(e => e.ErrorMensajeCorto)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Mensaje cortó generado por el Sistema Operativo en un error en la ejecución de una aplicación.")
                .HasColumnName("Error_Mensaje_Corto");
            entity.Property(e => e.ErrorMensajeDetalle)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasComment("Detalle completo del  mensaje generado por el Sistema Operativo en un error en la ejecución de una aplicación.")
                .HasColumnName("Error_Mensaje_Detalle");
            entity.Property(e => e.ErrorOrigen)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Origen del  mensaje generado por el Sistema Operativo en un error en la ejecución de una aplicación.")
                .HasColumnName("Error_Origen");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SistemaNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sistema_Nombre");
        });

        modelBuilder.Entity<SistemasMaster>(entity =>
        {
            entity.HasKey(e => e.SistemaNumero).HasName("PK_Sistema_Sistemas");

            entity.ToTable("Sistemas_Master", tb => tb.HasComment("Es un maestro donde se registran los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL en el proceso de desarrollo."));

            entity.Property(e => e.SistemaNumero)
                .HasComment("Número único del sistema de información.")
                .HasColumnName("Sistema_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SistemaDescripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Breve descripción del sistema de información.")
                .HasColumnName("Sistema_Descripcion");
            entity.Property(e => e.SistemaExplicacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasComment("Explicación de la descripción del sistema de información.")
                .HasColumnName("Sistema_Explicacion");
            entity.Property(e => e.SistemaLogoImage)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Dirección donde se encuentra la imagen del logo del sistema de información.")
                .HasColumnName("Sistema_Logo_Image");
            entity.Property(e => e.SistemaMenuNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombre del menú principal del sistema de información.")
                .HasColumnName("Sistema_Menu_Nombre");
            entity.Property(e => e.SistemaNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombre oficial (Titulo)  del sistema de información.")
                .HasColumnName("Sistema_Nombre");
            entity.Property(e => e.SistemaUrl)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Dirección donde se encuentran los objetos de ejecución y/o desarrollo del sistema de información.")
                .HasColumnName("Sistema_Url");
        });

        modelBuilder.Entity<SistemasMensajesConfig>(entity =>
        {
            entity.HasKey(e => e.CatalogoMensajeCodigo).HasName("PK_Sistema_Catalogo_Mensajes");

            entity.ToTable("Sistemas_Mensajes_Config", tb => tb.HasComment("Es una tabla de configuración donde se registran los mensajes utilizados en los módulos de los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL en el proceso de desarrollo."));

            entity.Property(e => e.CatalogoMensajeCodigo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Código que representa los mensajes utilizados en la interfaces de los sistemas de información.")
                .HasColumnName("Catalogo_Mensaje_Codigo");
            entity.Property(e => e.CatalogoMensajeValor)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasComment("Contenido de los mensajes utilizados en la interfaces de los sistemas de información.")
                .HasColumnName("Catalogo_Mensaje_Valor");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SistemasModulosControlesTran>(entity =>
        {
            entity.HasKey(e => new { e.SistemaNumero, e.ModuloNumero, e.ModuloFuncionNumero, e.ControlNumero }).HasName("PK_Sistema_Modulo_Controles");

            entity.ToTable("Sistemas_Modulos_Controles_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los controles y su relación con la funcionalidades de los módulos de los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SistemaNumero)
                .HasComment("Número único del sistema de información.")
                .HasColumnName("Sistema_Numero");
            entity.Property(e => e.ModuloNumero)
                .HasComment("Número único de modulo del sistema de información.")
                .HasColumnName("Modulo_Numero");
            entity.Property(e => e.ModuloFuncionNumero)
                .HasComment("Número único de la funcionalidad del modulo del sistema de información.")
                .HasColumnName("Modulo_Funcion_Numero");
            entity.Property(e => e.ControlNumero)
                .HasComment("Número único del control del sistema de información.")
                .HasColumnName("Control_Numero");
            entity.Property(e => e.ModuloControlCategoria)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/A')")
                .HasColumnName("Modulo_Control_Categoria");
            entity.Property(e => e.ModuloControlOrden)
                .HasComment("Indica el orden en que se va a mostrar el control dentro del módulo del sistema de información.")
                .HasColumnName("Modulo_Control_Orden");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ControlNumeroNavigation).WithMany(p => p.SistemasModulosControlesTrans)
                .HasForeignKey(d => d.ControlNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistema_Modulo_Controles_Sistema_Controles_Cata");

            entity.HasOne(d => d.SistemasModulosFuncionesTran).WithMany(p => p.SistemasModulosControlesTrans)
                .HasForeignKey(d => new { d.SistemaNumero, d.ModuloNumero, d.ModuloFuncionNumero })
                .HasConstraintName("FK_Sistema_Modulo_Controles_Trans_Sistema_Modulos_Funciones_Trans");
        });

        modelBuilder.Entity<SistemasModulosFuncionesTran>(entity =>
        {
            entity.HasKey(e => new { e.SistemaNumero, e.ModuloNumero, e.ModuloFuncionNumero }).HasName("PK_Sistema_Modulos_Funciones");

            entity.ToTable("Sistemas_Modulos_Funciones_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran las funcionalidades de los módulos de los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SistemaNumero)
                .HasComment("Número único del sistema de información.")
                .HasColumnName("Sistema_Numero");
            entity.Property(e => e.ModuloNumero)
                .HasComment("Número único de modulo del sistema de información.")
                .HasColumnName("Modulo_Numero");
            entity.Property(e => e.ModuloFuncionNumero)
                .ValueGeneratedOnAdd()
                .HasComment("Número único de la funcionalidad del modulo del sistema de información.")
                .HasColumnName("Modulo_Funcion_Numero");
            entity.Property(e => e.ModuloFuncionDescripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Descripción de la función que representan una o varias operaciones que se utilizan en las interfaces de los sistemas de información.")
                .HasColumnName("Modulo_Funcion_Descripcion");
            entity.Property(e => e.ModuloFuncionEsPopup)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si la función que representan una o varias operaciones que se utilizan en las interfaces de los sistemas de información es un POPUP.")
                .HasColumnName("Modulo_Funcion_EsPopup");
            entity.Property(e => e.ModuloFuncionExplicacion)
                .HasComment("Breve explicación  de la función que representan una o varias operaciones que se utilizan en las interfaces de los sistemas de información.")
                .HasColumnType("ntext")
                .HasColumnName("Modulo_Funcion_Explicacion");
            entity.Property(e => e.ModuloFuncionMenuMostrar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si la función se va a mostrar en el  menú  en las interfaces de los sistemas de información.")
                .HasColumnName("Modulo_Funcion_Menu_Mostrar");
            entity.Property(e => e.ModuloFuncionMenuNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombre del menú de la función que representan una o varias operaciones que se utilizan en las interfaces de los sistemas de información.")
                .HasColumnName("Modulo_Funcion_Menu_Nombre");
            entity.Property(e => e.ModuloFuncionMenuOrden)
                .HasComment("Indica si en cual posición (orden) se va mostrar la función en el  menú  en las interfaces de los sistemas de información.")
                .HasColumnName("Modulo_Funcion_Menu_Orden");
            entity.Property(e => e.ModuloFuncionNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombre de la función que representan una o varias operaciones que se utilizan en las interfaces de los sistemas de información.")
                .HasColumnName("Modulo_Funcion_Nombre");
            entity.Property(e => e.ModuloFuncionPopupAlto)
                .HasComment("Indica la altura del POPUP donde se va a mostrar la función que representan una o varias operaciones que se utilizan en las interfaces de los sistemas de información.")
                .HasColumnName("Modulo_Funcion_Popup_Alto");
            entity.Property(e => e.ModuloFuncionPopupAncho)
                .HasComment("Indica el ancho del POPUP donde se va a mostrar la función que representan una o varias operaciones que se utilizan en las interfaces de los sistemas de información.")
                .HasColumnName("Modulo_Funcion_Popup_Ancho");
            entity.Property(e => e.ModuloFuncionUrl)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Direccion donde se encuentran los objetos de la función que representan una o varias operaciones que se utilizan en las interfaces de los sistemas de información.")
                .HasColumnName("Modulo_Funcion_Url");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.SistemasModulosMaster).WithMany(p => p.SistemasModulosFuncionesTrans)
                .HasForeignKey(d => new { d.SistemaNumero, d.ModuloNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistema_Modulos_Funciones_Trans_Sistema_Modulos_Trans");
        });

        modelBuilder.Entity<SistemasModulosMaster>(entity =>
        {
            entity.HasKey(e => new { e.SistemaNumero, e.ModuloNumero }).HasName("PK_Sistema_Modulos");

            entity.ToTable("Sistemas_Modulos_Master", tb => tb.HasComment("Es un maestro donde se registran los módulos de los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL en el proceso de desarrollo."));

            entity.Property(e => e.SistemaNumero)
                .HasComment("Número único del sistema de información.")
                .HasColumnName("Sistema_Numero");
            entity.Property(e => e.ModuloNumero)
                .ValueGeneratedOnAdd()
                .HasComment("Número único de modulo del sistema de información.")
                .HasColumnName("Modulo_Numero");
            entity.Property(e => e.ModuloDescripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Breve descripción del módulo del sistema de información.")
                .HasColumnName("Modulo_Descripcion");
            entity.Property(e => e.ModuloExplicacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasComment("Explicación de la descripción del módulo del sistema de información.")
                .HasColumnName("Modulo_Explicacion");
            entity.Property(e => e.ModuloMenuMostrar)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasComment("Indica si menú principal del módulo del sistema de información se va a mostrar por defecto.")
                .HasColumnName("Modulo_Menu_Mostrar");
            entity.Property(e => e.ModuloMenuOrden)
                .HasComment("Indica el orden en que se va a mostrar el menú principal del módulo del sistema de información.")
                .HasColumnName("Modulo_Menu_Orden");
            entity.Property(e => e.ModuloNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombre oficial (Titulo)  del sistema de información.")
                .HasColumnName("Modulo_Nombre");
            entity.Property(e => e.ModuloNombreMenu)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombre del menú principal del módulo del sistema de información.")
                .HasColumnName("Modulo_Nombre_Menu");
            entity.Property(e => e.ModuloUrl)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Dirección donde se encuentran los objetos de ejecución y/o desarrollo del módulo  del sistema de información.")
                .HasColumnName("Modulo_Url");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.SistemaNumeroNavigation).WithMany(p => p.SistemasModulosMasters)
                .HasForeignKey(d => d.SistemaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistema_Modulos_Trans_Sistema_Sistemas_Master");
        });

        modelBuilder.Entity<SistemasOperacionesTipoCatum>(entity =>
        {
            entity.HasKey(e => e.OperacionTipoNumero).HasName("PK_Sistema_Operacion_Tipo");

            entity.ToTable("Sistemas_Operaciones_Tipo_Cata", tb => tb.HasComment("Es un catálogo de los tipos de operaciones que ejecutan los controles  utilizados en los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL  en el proceso de desarrollo."));

            entity.Property(e => e.OperacionTipoNumero)
                .ValueGeneratedOnAdd()
                .HasComment("Número único del tipo de operación que se utilizan en la interface de los sistemas de información, La cual hace referencia generalmente a Insertar, Actualizar, Borrar.")
                .HasColumnName("Operacion_Tipo_Numero");
            entity.Property(e => e.OperacionTipoExplicacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Breve explicación del nombre del  tipo de operación que se utilizan en la interface de los sistemas de información, La cual hace referencia generalmente a Insertar, Actualizar, Borrar.")
                .HasColumnName("Operacion_Tipo_Explicacion");
            entity.Property(e => e.OperacionTipoNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombre del  tipo de operación que se utilizan en la interface de los sistemas de información, La cual hace referencia generalmente a Insertar, Actualizar, Borrar.")
                .HasColumnName("Operacion_Tipo_Nombre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SistemasParametrosConfig>(entity =>
        {
            entity.HasKey(e => e.ParametroCodigo).HasName("PK_Sistema_Parametros");

            entity.ToTable("Sistemas_Parametros_Config", tb => tb.HasComment("Es una tabla de configuración donde se registran los parámetros y sus especificaciones  para  los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL en el proceso de desarrollo."));

            entity.Property(e => e.ParametroCodigo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Código único que representa cada parámetro de sistema de información.")
                .HasColumnName("Parametro_Codigo");
            entity.Property(e => e.ParametroExplicacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/A')")
                .HasComment("Breve explicación del  parámetro de sistema de información.")
                .HasColumnName("Parametro_Explicacion");
            entity.Property(e => e.ParametroTipo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/A')")
                .HasComment("Tipo de parámetro de sistema de información.")
                .HasColumnName("Parametro_Tipo");
            entity.Property(e => e.ParametroValor)
                .HasMaxLength(4000)
                .HasComment("Valor asignado al parámetro en el sistema de información.")
                .HasColumnName("Parametro_Valor");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SistemasProcesosCatum>(entity =>
        {
            entity.HasKey(e => e.ProcesoNumero);

            entity.ToTable("Sistemas_Procesos_Cata");

            entity.Property(e => e.ProcesoNumero).HasColumnName("Proceso_Numero");
            entity.Property(e => e.ProcesoDescripcion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Proceso_Descripcion");
            entity.Property(e => e.ProcesoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Proceso_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SistemasPublicosConfig>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Sistemas_Publicos_Config");

            entity.Property(e => e.NombrePublicoBusquedaMostrar)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Indica si se mostrara un control de búsqueda en la interface.")
                .HasColumnName("Nombre_Publico_Busqueda_Mostrar");
            entity.Property(e => e.NombrePublicoImagenUrl)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Imagen que mostrara el objeto(Generalmente un Botón).")
                .HasColumnName("Nombre_Publico_Imagen_Url");
            entity.Property(e => e.NombrePublicoLabelCssClass)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Indica el nombre de la clase en el archivo de estilo (CSS) el cual el objeto tomara como diseño(generalmente aplica a un Label).")
                .HasColumnName("Nombre_Publico_Label_CssClass");
            entity.Property(e => e.NombrePublicoLabelWith)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Indica el ancho del objeto(generalmente un Label).")
                .HasColumnName("Nombre_Publico_Label_With");
            entity.Property(e => e.NombrePublicoMostrar)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Indica si el objeto será visible al usuario.")
                .HasColumnName("Nombre_Publico_Mostrar");
            entity.Property(e => e.NombrePublicoNombrePrivado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Nombre interno del objeto (Generalmente un Botón). al cual se hace referencia en el registro.")
                .HasColumnName("Nombre_Publico_Nombre_Privado");
            entity.Property(e => e.NombrePublicoNombrePublico)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Nombre público del objeto (Generalmente un Botón) que se mostrara la usuario final.")
                .HasColumnName("Nombre_Publico_Nombre_Publico");
            entity.Property(e => e.NombrePublicoPagina)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Nombre de la interface a la cual se hace referencia.")
                .HasColumnName("Nombre_Publico_Pagina");
            entity.Property(e => e.NombrePublicoTablaHtlmMerge)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Indica si determinado objeto(generalmente un textbox). se mostrara solo en una fila de la tabla HTML que se genera en la interfaces del usuario.")
                .HasColumnName("Nombre_Publico_Tabla_Htlm_Merge");
            entity.Property(e => e.NombrePublicoTablaHtmlCantidadColumna)
                .HasComment("Indica la cantidad de columna que la interface debe diseñar para mostrar al usuario(generalmente aplica a un panel)")
                .HasColumnName("Nombre_Publico_Tabla_Html_Cantidad_Columna");
            entity.Property(e => e.NombrePublicoTablaHtmlTdCssClass)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Indica el nombre de la clase en el archivo de estilo (CSS) el cual el objeto tomara como diseño(generalmente aplica a un panel).")
                .HasColumnName("Nombre_Publico_Tabla_Html_Td_CssClass");
            entity.Property(e => e.NombrePublicoTextBoxCssClass)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Indica el nombre de la clase en el archivo de estilo (CSS) el cual el objeto tomara como diseño(generalmente aplica a un textbox).")
                .HasColumnName("Nombre_Publico_TextBox_CssClass");
            entity.Property(e => e.NombrePublicoTextBoxTexMode)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Indica el modo de escritura que acepta el objeto(generalmente un textbox), puede ser una sola línea o múltiples líneas.")
                .HasColumnName("Nombre_Publico_TextBox_TexMode");
            entity.Property(e => e.NombrePublicoTextBoxWith)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Indica el ancho del objeto(generalmente un textbox).")
                .HasColumnName("Nombre_Publico_TextBox_With");
            entity.Property(e => e.NombrePublicoToolTips)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Pequeña descripción que sale sobre el objeto(Generalmente un Botón) al pasar el Mouse sobre el mismo.")
                .HasColumnName("Nombre_Publico_ToolTips");
            entity.Property(e => e.NombrePublicoVisualizarOrden)
                .HasComment("Indica el orden de visualización del objeto en la interface del usuario.")
                .HasColumnName("Nombre_Publico_Visualizar_Orden");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SistemasSeguimientosEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.SeguimientoEstadoNumero);

            entity.ToTable("Sistemas_Seguimientos_Estados_Cata");

            entity.Property(e => e.SeguimientoEstadoNumero)
                .ValueGeneratedNever()
                .HasColumnName("Seguimiento_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Seguimiento_Estado_Descripcion");
            entity.Property(e => e.SeguimientoEstadoExplicacion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Seguimiento_Estado_Explicacion");
        });

        modelBuilder.Entity<SistemasSeguimientosMaster>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero);

            entity.ToTable("Sistemas_Seguimientos_Master");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.ArchivoNumero).HasColumnName("Archivo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoArchivoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Seguimiento_Archivo_Fecha");
            entity.Property(e => e.SeguimientoArchivoNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Seguimiento_Archivo_Nombre");
            entity.Property(e => e.SeguimientoArchivoRespuestaFecha)
                .HasColumnType("datetime")
                .HasColumnName("Seguimiento_Archivo_Respuesta_Fecha");
            entity.Property(e => e.SeguimientoArchivoRespuestaNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Seguimiento_Archivo_Respuesta_Nombre");
            entity.Property(e => e.SeguimientoArchivoRespuestaUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Seguimiento_Archivo_Respuesta_Usuario");
            entity.Property(e => e.SeguimientoArchivoUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Seguimiento_Archivo_Usuario");
            entity.Property(e => e.SeguimientoEstadoNumero).HasColumnName("Seguimiento_Estado_Numero");
            entity.Property(e => e.SeguimientoPadreNumero).HasColumnName("Seguimiento_Padre_Numero");
            entity.Property(e => e.SeguimientoRegistrosCantidad).HasColumnName("Seguimiento_Registros_Cantidad");

            entity.HasOne(d => d.ArchivoNumeroNavigation).WithMany(p => p.SistemasSeguimientosMasters)
                .HasForeignKey(d => d.ArchivoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Seguimientos_Master_Sistemas_Archivos_Cata");

            entity.HasOne(d => d.SeguimientoEstadoNumeroNavigation).WithMany(p => p.SistemasSeguimientosMasters)
                .HasForeignKey(d => d.SeguimientoEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Seguimientos_Master_Sistemas_Seguimientos_Estados_Cata");

            entity.HasOne(d => d.SeguimientoNumeroNavigation).WithOne(p => p.SistemasSeguimientosMaster)
                .HasForeignKey<SistemasSeguimientosMaster>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Seguimientos_Master_TRP_Accion_Condicion_Enfermedad_Trans");

            entity.HasOne(d => d.SeguimientoNumero1).WithOne(p => p.SistemasSeguimientosMaster)
                .HasForeignKey<SistemasSeguimientosMaster>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Seguimientos_Master_TRP_Accion_SISALRIL_ARS_Origen_Destino_Trans");

            entity.HasOne(d => d.SeguimientoNumero2).WithOne(p => p.SistemasSeguimientosMaster)
                .HasForeignKey<SistemasSeguimientosMaster>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Seguimientos_Master_TRP_Cancelacion_SISALRIL_Traspasos_ARS_Trans");

            entity.HasOne(d => d.SeguimientoNumero3).WithOne(p => p.SistemasSeguimientosMaster)
                .HasForeignKey<SistemasSeguimientosMaster>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Seguimientos_Master_TRP_Notificacion_ARS_Cancelacion_Traspaso_Trans");

            entity.HasOne(d => d.SeguimientoNumero4).WithOne(p => p.SistemasSeguimientosMaster)
                .HasForeignKey<SistemasSeguimientosMaster>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Seguimientos_Master_TRP_Notificacion_Condicion_Enfermedad_Trans");

            entity.HasOne(d => d.SeguimientoNumero5).WithOne(p => p.SistemasSeguimientosMaster)
                .HasForeignKey<SistemasSeguimientosMaster>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Seguimientos_Master_Traspasos_NUCUF_Accion_Condicion_Enfermedad_Trans");

            entity.HasOne(d => d.SeguimientoNumero6).WithOne(p => p.SistemasSeguimientosMaster)
                .HasForeignKey<SistemasSeguimientosMaster>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Seguimientos_Master_Traspasos_NUCUF_Altas_Trans");

            entity.HasOne(d => d.SeguimientoNumero7).WithOne(p => p.SistemasSeguimientosMaster)
                .HasForeignKey<SistemasSeguimientosMaster>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Seguimientos_Master_Traspasos_NUCUF_Autorizacion_Cancelacion_Trans");

            entity.HasOne(d => d.SeguimientoNumero8).WithOne(p => p.SistemasSeguimientosMaster)
                .HasForeignKey<SistemasSeguimientosMaster>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Seguimientos_Master_Traspasos_NUCUF_Bajas_Trans");

            entity.HasOne(d => d.SeguimientoNumero9).WithOne(p => p.SistemasSeguimientosMaster)
                .HasForeignKey<SistemasSeguimientosMaster>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Seguimientos_Master_Traspasos_NUCUF_Detalle_Autorizacion_Cancelacion_Trans");

            entity.HasOne(d => d.SeguimientoNumero10).WithOne(p => p.SistemasSeguimientosMaster)
                .HasForeignKey<SistemasSeguimientosMaster>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Seguimientos_Master_Traspasos_NUCUF_Notificacion_Condicion_Enfermedad_Trans");

            entity.HasOne(d => d.SeguimientoNumero11).WithOne(p => p.SistemasSeguimientosMaster)
                .HasForeignKey<SistemasSeguimientosMaster>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Seguimientos_Master_Traspasos_NUCUF_Notificacion_Preaviso_Efectividad_Trans");

            entity.HasOne(d => d.SeguimientoNumero12).WithOne(p => p.SistemasSeguimientosMaster)
                .HasForeignKey<SistemasSeguimientosMaster>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Seguimientos_Master_Traspasos_NUCUF_Notificacion_Solicitudes_ARS_Destino_Trans");

            entity.HasOne(d => d.SeguimientoNumero13).WithOne(p => p.SistemasSeguimientosMaster)
                .HasForeignKey<SistemasSeguimientosMaster>(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Seguimientos_Master_TRP_Respuesta_Accion_Condicion_Enfermedad_Trans");
        });

        modelBuilder.Entity<SistemasValoresDefinidosConfig>(entity =>
        {
            entity.HasKey(e => e.CatalogoNumero).HasName("PK_Sistema_Catalogos_Definidos");

            entity.ToTable("Sistemas_Valores_Definidos_Config", tb => tb.HasComment("Es una tabla de configuración donde se registran los valores definidos  y los catálogos a los que pertenecen para ser utilizados en los sistemas de información, su fuente de datos son los sistemas internos de la SISALRIL en el proceso de desarrollo."));

            entity.Property(e => e.CatalogoNumero)
                .HasComment("Número único del catálogo (Tabla) donde están contenidos los valores.")
                .HasColumnName("Catalogo_Numero");
            entity.Property(e => e.CatalogoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Código único del catálogo (Tabla) donde están contenidos los valores.")
                .HasColumnName("Catalogo_Codigo");
            entity.Property(e => e.CatalogoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción del catálogo (Tabla) donde están contenidos los valores.")
                .HasColumnName("Catalogo_Descripcion");
            entity.Property(e => e.CatalogoExplicacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasDefaultValueSql("('No Especificado')")
                .HasComment("Explicación sobre del catálogo (Tabla) donde están contenidos los valores.")
                .HasColumnName("Catalogo_Explicacion");
            entity.Property(e => e.CatalogoTabla)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre del catálogo (Tabla) donde están contenidos los valores.")
                .HasColumnName("Catalogo_Tabla");
            entity.Property(e => e.CatalogoTablaColumna)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasComment("Nombre de la columna del catálogo (Tabla) donde están contenidos los valores.")
                .HasColumnName("Catalogo_Tabla_Columna");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SistemasWebserviceProcesosLogTran>(entity =>
        {
            entity.HasKey(e => e.ProcesoLogSecuencia);

            entity.ToTable("Sistemas_Webservice_Procesos_Log_Trans");

            entity.Property(e => e.ProcesoLogSecuencia).HasColumnName("Proceso_Log_Secuencia");
            entity.Property(e => e.ProcesoLogBrowser)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/A')")
                .HasColumnName("Proceso_Log_Browser");
            entity.Property(e => e.ProcesoLogDatos)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Proceso_Log_Datos");
            entity.Property(e => e.ProcesoLogMaquina)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/A')")
                .HasColumnName("Proceso_Log_Maquina");
            entity.Property(e => e.ProcesoLogObjetoOrigen)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/A')")
                .HasColumnName("Proceso_Log_Objeto_Origen");
            entity.Property(e => e.ProcesoLogPlataforma)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/A')")
                .HasColumnName("Proceso_Log_Plataforma");
            entity.Property(e => e.ProcesoLogUrlOrigen)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Proceso_Log_Url_Origen");
            entity.Property(e => e.ProcesoNombre)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Nombre del procedimiento de BDD.")
                .HasColumnName("Proceso_Nombre");
            entity.Property(e => e.ProcesoSistemaNombre)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Nombre del procedimiento de BDD.")
                .HasColumnName("Proceso_Sistema_Nombre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ProcesoNombreNavigation).WithMany(p => p.SistemasWebserviceProcesosLogTrans)
                .HasForeignKey(d => d.ProcesoNombre)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sistemas_Webservice_Procesos_Log_Trans_Sistemas_Webservice_Procesos_Master");
        });

        modelBuilder.Entity<SistemasWebserviceProcesosMaster>(entity =>
        {
            entity.HasKey(e => e.ProcesoNombre);

            entity.ToTable("Sistemas_Webservice_Procesos_Master", tb => tb.HasComment("Es un maestro donde se registran todo los procedimientos  de BDD que se relacionas con los Servicios WEB (WEB SERVICE) , utilizados en todos los sistemas , su fuente de datos los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ProcesoNombre)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Nombre del procedimiento de BDD.")
                .HasColumnName("Proceso_Nombre");
            entity.Property(e => e.ProcesoDescripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Descripción del procedimiento de BDD.")
                .HasColumnName("Proceso_Descripcion");
            entity.Property(e => e.ProcesoNombrePublico)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Nombre público del procedimiento de BDD.")
                .HasColumnName("Proceso_Nombre_Publico");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SistemasWebserviceProcesosParametrosTran>(entity =>
        {
            entity.HasKey(e => new { e.ProcesoNombre, e.ProcesoParametroNombre });

            entity.ToTable("Sistemas_Webservice_Procesos_Parametros_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los parámetros de los procedimientos  de BDD que se relacionas con los Servicios WEB (WEB SERVICE) , utilizados en todos los sistemas , su fuente de datos los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ProcesoNombre)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Nombre del procedimiento de BDD.")
                .HasColumnName("Proceso_Nombre");
            entity.Property(e => e.ProcesoParametroNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombre del  parámetro de un procedimiento de BDD relacionado con los Servicios WEB.")
                .HasColumnName("Proceso_Parametro_Nombre");
            entity.Property(e => e.ProcesoParametroDatoTipo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Tipo de datos de plataforma de desarrollo del parámetro de un procedimiento de BDD relacionado con los Servicios WEB.")
                .HasColumnName("Proceso_Parametro_Dato_Tipo");
            entity.Property(e => e.ProcesoParametroDbDatoTipo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Tipo de datos de BDD del parámetro de un procedimiento de BDD relacionado con los Servicios WEB.")
                .HasColumnName("Proceso_Parametro_Db_Dato_Tipo");
            entity.Property(e => e.ProcesoParametroDescripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Descripción del  parámetro de un procedimiento de BDD relacionado con los Servicios WEB.")
                .HasColumnName("Proceso_Parametro_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ProcesoNombreNavigation).WithMany(p => p.SistemasWebserviceProcesosParametrosTrans)
                .HasForeignKey(d => d.ProcesoNombre)
                .HasConstraintName("FK_Sistemas_Webservice_Procesos_Parametros_Trans_Sistemas_Webservice_Procesos_Master");
        });

        modelBuilder.Entity<SrlCertificacionesAfiliadosTran>(entity =>
        {
            entity.HasKey(e => e.CertificacionSecuencia).HasName("PK_Afiliados_SRL_Certificaciones_Discapacidad_Trans");

            entity.ToTable("SRL_Certificaciones_Afiliados_Trans");

            entity.Property(e => e.CertificacionSecuencia)
                .ValueGeneratedNever()
                .HasColumnName("Certificacion_Secuencia");
            entity.Property(e => e.ArlRemiteComisionMedicaFecha).HasColumnName("ARL_Remite_Comision_Medica_Fecha");
            entity.Property(e => e.ArlssNumero)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ARLSS_Numero");
            entity.Property(e => e.ArlssObjecionFecha).HasColumnName("ARLSS_Objecion_Fecha");
            entity.Property(e => e.CertificacionConcrecionFecha).HasColumnName("Certificacion_Concrecion_Fecha");
            entity.Property(e => e.CertificacionDiagnosticoDescripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Certificacion_Diagnostico_Descripcion");
            entity.Property(e => e.CertificacionEdadAnios).HasColumnName("Certificacion_Edad_Anios");
            entity.Property(e => e.CertificacionEstadoNumero).HasColumnName("Certificacion_Estado_Numero");
            entity.Property(e => e.CertificacionNumero).HasColumnName("Certificacion_Numero");
            entity.Property(e => e.CertificacionSiniestroFecha).HasColumnName("Certificacion_Siniestro_Fecha");
            entity.Property(e => e.CiudadanoNss).HasColumnName("Ciudadano_Nss");
            entity.Property(e => e.ComisionMedicaNumero).HasColumnName("Comision_Medica_Numero");
            entity.Property(e => e.DictamenFecha).HasColumnName("Dictamen_Fecha");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.PorcientoDiscapacidadCertificada)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Porciento_Discapacidad_Certificada");
            entity.Property(e => e.PorcientoDiscapacidadPrimeraEvaluacion)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Porciento_Discapacidad_Primera_Evaluacion");
            entity.Property(e => e.RecepcionSisalrilFecha).HasColumnName("Recepcion_SISALRIL_Fecha");
            entity.Property(e => e.RegionAnatomicaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Region_Anatomica_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CertificacionEstadoNumeroNavigation).WithMany(p => p.SrlCertificacionesAfiliadosTrans)
                .HasForeignKey(d => d.CertificacionEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRL_Certificaciones_Afiliados_Trans_SRL_Certificaciones_Estados_Cata");

            entity.HasOne(d => d.CertificacionNumeroNavigation).WithMany(p => p.SrlCertificacionesAfiliadosTrans)
                .HasForeignKey(d => d.CertificacionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRL_Certificaciones_Afiliados_Trans_SRL_Certificaciones_Master");

            entity.HasOne(d => d.CiudadanoNssNavigation).WithMany(p => p.SrlCertificacionesAfiliadosTrans)
                .HasForeignKey(d => d.CiudadanoNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRL_Certificaciones_Afiliados_Trans_TSS_Ciudadanos_Master");

            entity.HasOne(d => d.ComisionMedicaNumeroNavigation).WithMany(p => p.SrlCertificacionesAfiliadosTrans)
                .HasForeignKey(d => d.ComisionMedicaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRL_Certificaciones_Afiliados_Trans_SRL_Comisiones_Medicas_Master");

            entity.HasOne(d => d.RegionAnatomicaCodigoNavigation).WithMany(p => p.SrlCertificacionesAfiliadosTrans)
                .HasForeignKey(d => d.RegionAnatomicaCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRL_Certificaciones_Afiliados_Trans_SRL_Certificaciones_Regiones_Anatomicas_Cata");
        });

        modelBuilder.Entity<SrlCertificacionesAfiliadosVistum>(entity =>
        {
            entity.HasKey(e => new { e.CiudadanoNss, e.CertificacionNumero });

            entity.ToTable("SRL_Certificaciones_Afiliados_Vista");

            entity.Property(e => e.CiudadanoNss).HasColumnName("Ciudadano_Nss");
            entity.Property(e => e.CertificacionNumero).HasColumnName("Certificacion_Numero");
            entity.Property(e => e.CertificacionEstadoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Certificacion_Estado_Descripcion");
            entity.Property(e => e.CertificacionFecha)
                .HasColumnType("datetime")
                .HasColumnName("Certificacion_Fecha");
            entity.Property(e => e.CiudadanoNoDocumento)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_No_Documento");
            entity.Property(e => e.CiudadanoNombreCompleto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Nombre_Completo");
            entity.Property(e => e.PorcientoDiscapacidadCertificada)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("Porciento_Discapacidad_Certificada");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SrlCertificacionesEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.CertificacionEstadoNumero).HasName("PK_Afiliados_SRL_Certificaciones_Estados_Cata");

            entity.ToTable("SRL_Certificaciones_Estados_Cata");

            entity.Property(e => e.CertificacionEstadoNumero).HasColumnName("Certificacion_Estado_Numero");
            entity.Property(e => e.CertificacionEstadoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Certificacion_Estado_Descripcion");
            entity.Property(e => e.CertificacionEstadoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasColumnName("Certificacion_Estado_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SrlCertificacionesMaster>(entity =>
        {
            entity.HasKey(e => e.CertificacionNumero).HasName("PK_SRL_Certificaciones_Master_1");

            entity.ToTable("SRL_Certificaciones_Master");

            entity.Property(e => e.CertificacionNumero).HasColumnName("Certificacion_Numero");
            entity.Property(e => e.CertificacionFecha)
                .HasColumnType("datetime")
                .HasColumnName("Certificacion_Fecha");
            entity.Property(e => e.CertificacionUltimaNovedadFecha)
                .HasColumnType("datetime")
                .HasColumnName("Certificacion_Ultima_Novedad_Fecha");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SrlCertificacionesRegionesAnatomicasCatum>(entity =>
        {
            entity.HasKey(e => e.RegionAnatomicaCodigo).HasName("PK_Regiones_Anatomicas_Cata");

            entity.ToTable("SRL_Certificaciones_Regiones_Anatomicas_Cata");

            entity.Property(e => e.RegionAnatomicaCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Region_Anatomica_Codigo");
            entity.Property(e => e.RegionAnatomicaDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Region_Anatomica_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SrlComisionesMedicasMaster>(entity =>
        {
            entity.HasKey(e => e.ComisionMedicaNumero).HasName("PK_ARL_CMR_Master");

            entity.ToTable("SRL_Comisiones_Medicas_Master");

            entity.Property(e => e.ComisionMedicaNumero).HasColumnName("Comision_Medica_Numero");
            entity.Property(e => e.ComisionMedicaCodigo)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Comision_Medica_Codigo");
            entity.Property(e => e.ComisionMedicaDireccion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Comision_Medica_Direccion");
            entity.Property(e => e.ComisionMedicaNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Comision_Medica_Nombre");
            entity.Property(e => e.ComisionMedicaTelefono)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Comision_Medica_Telefono");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SrlComisionesMedicasRegionesCatum>(entity =>
        {
            entity.HasKey(e => new { e.ComisionMedicaNumero, e.RegionSaludNumero });

            entity.ToTable("SRL_Comisiones_Medicas_Regiones_Cata");

            entity.Property(e => e.ComisionMedicaNumero).HasColumnName("Comision_Medica_Numero");
            entity.Property(e => e.RegionSaludNumero).HasColumnName("Region_Salud_Numero");
            entity.Property(e => e.ComisionMedicaFusionada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Comision_Medica_Fusionada");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ComisionMedicaNumeroNavigation).WithMany(p => p.SrlComisionesMedicasRegionesCata)
                .HasForeignKey(d => d.ComisionMedicaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SRL_Comisiones_Medicas_Regiones_Cata_SRL_Comisiones_Medicas_Master");
        });

        modelBuilder.Entity<SubGruposAreasCatum>(entity =>
        {
            entity.HasKey(e => e.SubGrupoAreaNumero);

            entity.ToTable("SubGrupos_Areas_Cata", tb => tb.HasComment("Es un catálogo que contiene las aéreas de servicios de salud (departamentos)  y su relación con los subgrupos de servicios de salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SubGrupoAreaNumero)
                .HasComment("Número único asignado al área, se refiere al área donde se deben prestar  las coberturas de subgrupo del PDSS,  Ambulatoria, Urgencias y Hospitalización.")
                .HasColumnName("SubGrupo_Area_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SubGrupoAreaDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del área, se refiere al área donde se deben prestar las coberturas de subgrupo del PDSS, Ambulatoria, Urgencias y Hospitalización.")
                .HasColumnName("SubGrupo_Area_Descripcion");
        });

        modelBuilder.Entity<SubGruposAtencionesServiciosTipoCatum>(entity =>
        {
            entity.HasKey(e => new { e.GrupoNumero, e.SubGrupoNumero, e.AtencionTipoCodigo, e.ServicioTipoCodigo });

            entity.ToTable("SubGrupos_Atenciones_Servicios_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene los tipos de servicios y atenciones utilizadas para calificar los episodios de prestaciones de salud y su relación con los subgrupos de servicios de salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.GrupoNumero)
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubGrupoNumero)
                .HasComment("Número único asignado al subgrupo del PDSS, se incrementa de 1 a N para cada grupo del PDSS.")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.AtencionTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del Tipo de Atención, especifica si el servicio fue prestado por una Emergencia, Programado o por un Accidente de Tránsito.")
                .HasColumnName("Atencion_Tipo_Codigo");
            entity.Property(e => e.ServicioTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del Tipo de servicio, especifica si el servicio fue prestado bajo el área de  Hospitalización,  Prevención y Promoción,  Emergencia y Ambulatorio.")
                .HasColumnName("Servicio_Tipo_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.AtencionTipoCodigoNavigation).WithMany(p => p.SubGruposAtencionesServiciosTipoCata)
                .HasForeignKey(d => d.AtencionTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubGrupos_Atenciones_Servicios_Tipo_Cata_Atenciones_Tipo_Cata");

            entity.HasOne(d => d.ServicioTipoCodigoNavigation).WithMany(p => p.SubGruposAtencionesServiciosTipoCata)
                .HasForeignKey(d => d.ServicioTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubGrupos_Atenciones_Servicios_Tipo_Cata_Servicios_Tipo_Cata");

            entity.HasOne(d => d.SubGruposCatum).WithMany(p => p.SubGruposAtencionesServiciosTipoCata)
                .HasForeignKey(d => new { d.GrupoNumero, d.SubGrupoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubGrupos_Atenciones_Servicios_Tipo_Cata_SubGrupos_Cata");
        });

        modelBuilder.Entity<SubGruposCategoriasCatum>(entity =>
        {
            entity.HasKey(e => e.SubGrupoCategoriaNumero);

            entity.ToTable("SubGrupos_Categorias_Cata", tb => tb.HasComment("Es un catálogo que contiene las categorías de servicios de salud (departamentos)  y su relación con los subgrupos de servicios de salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SubGrupoCategoriaNumero)
                .HasComment("Número único asignado a categoría de los subgrupos del PDSS, se refiere a si las coberturas se prestan bajo un Programa,  Área,  Área/ Servicios o Proceso.")
                .HasColumnName("SubGrupo_Categoria_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SubGrupoCategoriaDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción de la categoría de los subgrupos del PDSS,  se refiere a si las coberturas se prestan bajo un Programa,  Área,  Área/ Servicios o Proceso.")
                .HasColumnName("SubGrupo_Categoria_Descripcion");
        });

        modelBuilder.Entity<SubGruposCatum>(entity =>
        {
            entity.HasKey(e => new { e.GrupoNumero, e.SubGrupoNumero });

            entity.ToTable("SubGrupos_Cata", tb => tb.HasComment("Es un catálogo que contiene los detalles de los subgrupos de servicios de salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.HasIndex(e => e.SubGrupoCodigo, "Idx_SubGrupos_Cata_SubGrupo_Codigo");

            entity.Property(e => e.GrupoNumero)
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubGrupoNumero)
                .HasComment("Número único asignado al subgrupo del PDSS, se incrementa de 1 a N para cada grupo del PDSS.")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SubGrupoAreaNumero)
                .HasComment("Número único asignado al área, se refiere al área donde se deben prestar  las coberturas de subgrupo del PDSS,  Ambulatoria, Urgencias y Hospitalización.")
                .HasColumnName("SubGrupo_Area_Numero");
            entity.Property(e => e.SubGrupoCategoriaNumero)
                .HasComment("Número único asignado a categoría de los subgrupos del PDSS, se refiere a si las coberturas se prestan bajo un Programa,  Área,  Área/ Servicios o Proceso.")
                .HasColumnName("SubGrupo_Categoria_Numero");
            entity.Property(e => e.SubGrupoCodigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("Código creado a partir de la combinación de numero de grupo con el numero del subgrupo separados por un punto (.). ")
                .HasColumnName("SubGrupo_Codigo");
            entity.Property(e => e.SubGrupoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción del subgrupo del PDSS,  se referiré al ámbito de los servicios cubiertos dentro de cada subgrupo.")
                .HasColumnName("SubGrupo_Descripcion");
            entity.Property(e => e.SubGrupoExplicacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasComment("Es la explicación detallada de cada subgrupo del PDSS.")
                .HasColumnName("SubGrupo_Explicacion");
            entity.Property(e => e.SubGrupoPoblacionNumero)
                .HasComment("Número único de población (Grupo etario) ")
                .HasColumnName("SubGrupo_Poblacion_Numero");
            entity.Property(e => e.SubGrupoServicioNumero)
                .HasComment("Número único asignado al servicio clínico, se refiere al servicio clínico bajo el cual se prestan  las coberturas de subgrupo del PDSS,  Especialidades básicas, Odontología,  Cirugía General etc.\r\n")
                .HasColumnName("SubGrupo_Servicio_Numero");

            entity.HasOne(d => d.GrupoNumeroNavigation).WithMany(p => p.SubGruposCata)
                .HasForeignKey(d => d.GrupoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubGrupos_Cata_Grupos_Cata");

            entity.HasOne(d => d.SubGrupoAreaNumeroNavigation).WithMany(p => p.SubGruposCata)
                .HasForeignKey(d => d.SubGrupoAreaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubGrupos_Cata_SubGrupos_Areas_Cata");

            entity.HasOne(d => d.SubGrupoAreaNumero1).WithMany(p => p.SubGruposCata)
                .HasForeignKey(d => d.SubGrupoAreaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubGrupos_Cata_SubGrupos_Categorias_Cata");

            entity.HasOne(d => d.SubGrupoPoblacionNumeroNavigation).WithMany(p => p.SubGruposCata)
                .HasForeignKey(d => d.SubGrupoPoblacionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubGrupos_Cata_SubGrupos_Poblaciones_Cata");

            entity.HasOne(d => d.SubGrupoServicioNumeroNavigation).WithMany(p => p.SubGruposCata)
                .HasForeignKey(d => d.SubGrupoServicioNumero)
                .HasConstraintName("FK_SubGrupos_Cata_SubGrupos_Servicios_Cata");
        });

        modelBuilder.Entity<SubGruposGruposCatum>(entity =>
        {
            entity.HasKey(e => e.GrupoNumero).HasName("PK_Grupos_Cata");

            entity.ToTable("SubGrupos_Grupos_Cata", tb => tb.HasComment("Es un catálogo que contiene los grupos de servicios de salud y su relación con los subgrupos de servicios de salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.GrupoNumero)
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.GrupoConteoNumero)
                .HasComment("Específica la forma en que se van a cuantificar los servicios para la evaluación del  PDSS, 1 cuando se cuentan cada uno de los servicios prestados (3 Medicamentos) , 2 se cuenta el servicio como dado dentro de un episodio de salud (Se prestó Medicamentos)")
                .HasColumnName("Grupo_Conteo_Numero");
            entity.Property(e => e.GrupoDescripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Descripcion");
            entity.Property(e => e.GrupoDescripcionCorta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción corta (Resumido para mejor visualización en las interfaces) del grupo  al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Descripcion_Corta");
            entity.Property(e => e.GrupoExplicacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasComment("Explicación detallada del objetivo y contenido del grupo  al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Explicacion");
            entity.Property(e => e.GrupoServicio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasComment("Especifica si el grupo es o no de servicios de salud")
                .HasColumnName("Grupo_Servicio");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<SubGruposPoblacionesCatum>(entity =>
        {
            entity.HasKey(e => e.SubGrupoPoblacionNumero);

            entity.ToTable("SubGrupos_Poblaciones_Cata", tb => tb.HasComment("Es un catálogo que contiene los grupos de población y su relación con los subgrupos de servicios de salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SubGrupoPoblacionNumero)
                .HasComment("Número único de población (Grupo etario) ")
                .HasColumnName("SubGrupo_Poblacion_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SubGrupoPoblacionDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción de la población (Grupo etario)")
                .HasColumnName("SubGrupo_Poblacion_Descripcion");
            entity.Property(e => e.SubGrupoPoblacionDesdeHm)
                .HasComment("Desde cual edad se incluye la población (Grupo etario)  para hombres y mujeres.")
                .HasColumnName("SubGrupo_Poblacion_Desde_HM");
            entity.Property(e => e.SubGrupoPoblacionDesdeNinios)
                .HasComment("Desde cual edad se incluye la población (Grupo etario)  para los niños.")
                .HasColumnName("SubGrupo_Poblacion_Desde_Ninios");
            entity.Property(e => e.SubGrupoPoblacionHastaHm)
                .HasComment("Desde cual edad se incluye la población (Grupo etario)  para hombres y mujeres.")
                .HasColumnName("SubGrupo_Poblacion_Hasta_HM");
            entity.Property(e => e.SubGrupoPoblacionHastaNinios)
                .HasComment("Hasta cual edad se incluye la población (Grupo etario)   para los niños.")
                .HasColumnName("SubGrupo_Poblacion_Hasta_Ninios");
            entity.Property(e => e.SubGrupoPoblacionHombres)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Si la población (Grupo etario) incluye los  hombres (Sexo Masculino)")
                .HasColumnName("SubGrupo_Poblacion_Hombres");
            entity.Property(e => e.SubGrupoPoblacionMujeres)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Si la población (Grupo etario) incluye las mujeres (Sexo femenino)")
                .HasColumnName("SubGrupo_Poblacion_Mujeres");
            entity.Property(e => e.SubGrupoPoblacionNinios)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Si la población (Grupo etario) incluye los niños (Ambos Sexos)")
                .HasColumnName("SubGrupo_Poblacion_Ninios");
        });

        modelBuilder.Entity<SubGruposServiciosCatum>(entity =>
        {
            entity.HasKey(e => e.SubGrupoServicioNumero);

            entity.ToTable("SubGrupos_Servicios_Cata", tb => tb.HasComment("Es un catálogo que contiene los tipos de servicios de salud y su relación con los subgrupos de servicios de salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SubGrupoServicioNumero)
                .HasComment("Número único asignado al servicio clínico, se refiere al servicio clínico bajo el cual se prestan  las coberturas de subgrupo del PDSS,  Especialidades básicas, Odontología,  Cirugía General etc.\r\n")
                .HasColumnName("SubGrupo_Servicio_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SubGrupoServicioDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del  servicio clínico, se refiere al servicio clínico bajo el cual se prestan  las coberturas de subgrupo del PDSS,  Especialidades básicas, Odontología,  Cirugía General etc.")
                .HasColumnName("SubGrupo_Servicio_Descripcion");
        });

        modelBuilder.Entity<SubgruposCie09Catum>(entity =>
        {
            entity.HasKey(e => new { e.GrupoNumero, e.SubGrupoNumero, e.Cie09Codigo });

            entity.ToTable("Subgrupos_CIE09_Cata", tb => tb.HasComment("Es un catálogo que contiene el código internacional de enfermedades  del tomo de los procedimientos  (CIE9) de la OPS OMS y su relación con los subgrupos de servicios de salud, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.GrupoNumero)
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubGrupoNumero)
                .HasComment("Número único asignado al subgrupo del PDSS, se incrementa de 1 a N para cada grupo del PDSS.")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.Cie09Codigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Es un código que representa un procedimiento de salud y pertenece al código de la Clasificación Internacional de las enfermedades (CIE) , esta clasificación es de la Organización Mundial de la Salud (OMS).")
                .HasColumnName("CIE09_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.Cie09CodigoNavigation).WithMany(p => p.SubgruposCie09Cata)
                .HasForeignKey(d => d.Cie09Codigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Subgrupos_CIE09_Cata_CIE09_Cata");

            entity.HasOne(d => d.SubGruposCatum).WithMany(p => p.SubgruposCie09Cata)
                .HasForeignKey(d => new { d.GrupoNumero, d.SubGrupoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Subgrupos_CIE09_Cata_SubGrupos_Cata");
        });

        modelBuilder.Entity<SubgruposCie10Catum>(entity =>
        {
            entity.HasKey(e => new { e.GrupoNumero, e.SubGrupoNumero, e.Cie10Codigo });

            entity.ToTable("Subgrupos_CIE10_Cata", tb => tb.HasComment("Es un catálogo que contiene el código internacional de enfermedades  (Diagnósticos)   (CIE10) de la OPS OMS y su relación con los códigos únicos de procedimiento de salud (CUPS), su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.GrupoNumero)
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.SubGrupoNumero)
                .HasComment("Número único asignado al subgrupo del PDSS, se incrementa de 1 a N para cada grupo del PDSS.")
                .HasColumnName("SubGrupo_Numero");
            entity.Property(e => e.Cie10Codigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Es el código de una enfermedad o padecimiento y pertenece al código de la Clasificación Internacional de las enfermedades (CIE) , esta clasificación es de la Organización Mundial de la Salud (OMS).")
                .HasColumnName("CIE10_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.Cie10CodigoNavigation).WithMany(p => p.SubgruposCie10Cata)
                .HasForeignKey(d => d.Cie10Codigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Subgrupos_CIE10_Cata_CIE10_Cata");

            entity.HasOne(d => d.SubGruposCatum).WithMany(p => p.SubgruposCie10Cata)
                .HasForeignKey(d => new { d.GrupoNumero, d.SubGrupoNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Subgrupos_CIE10_Cata_SubGrupos_Cata");
        });

        modelBuilder.Entity<SysDiagramsAuditore>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("sysDiagrams_Auditores");

            entity.Property(e => e.Definition).HasColumnName("definition");
            entity.Property(e => e.DiagramId)
                .ValueGeneratedOnAdd()
                .HasColumnName("diagram_id");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("name");
            entity.Property(e => e.PrincipalId).HasColumnName("principal_id");
            entity.Property(e => e.Version).HasColumnName("version");
        });

        modelBuilder.Entity<SysDiagramsProfesionale>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("sysDiagrams_Profesionales");

            entity.Property(e => e.Definition).HasColumnName("definition");
            entity.Property(e => e.DiagramId)
                .ValueGeneratedOnAdd()
                .HasColumnName("diagram_id");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("name");
            entity.Property(e => e.PrincipalId).HasColumnName("principal_id");
            entity.Property(e => e.Version).HasColumnName("version");
        });

        modelBuilder.Entity<TempoPruebaCiudadano>(entity =>
        {
            entity.HasKey(e => e.CiudadanoNss);

            entity.ToTable("Tempo_prueba_Ciudadanos");

            entity.Property(e => e.CiudadanoNss)
                .ValueGeneratedNever()
                .HasColumnName("Ciudadano_NSS");
            entity.Property(e => e.CiudadanoNombres)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Nombres");
        });

        modelBuilder.Entity<TrabajadoresFf>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_TrabajadoresFF");

            entity.Property(e => e.TrabajadorNss).HasColumnName("trabajador_nss");
        });

        modelBuilder.Entity<TraspasoSolicitudesTipoCatum>(entity =>
        {
            entity.HasKey(e => e.TraspasoSolicitudTipoNumero);

            entity.ToTable("Traspaso_Solicitudes_Tipo_Cata");

            entity.Property(e => e.TraspasoSolicitudTipoNumero).HasColumnName("Traspaso_Solicitud_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TraspasoSolicitudTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Solicitud_Tipo_Descripcion");
            entity.Property(e => e.TraspasoSolicitudTipoSigla)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Solicitud_Tipo_Sigla");
        });

        modelBuilder.Entity<TraspasosAccionCondicionEnfermedadHistorico>(entity =>
        {
            entity.HasKey(e => e.HistoricoNumero).HasName("PK__Traspaso__1408953907FD5494");

            entity.ToTable("Traspasos_Accion_Condicion_Enfermedad_Historico");

            entity.Property(e => e.HistoricoNumero).HasColumnName("Historico_Numero");
            entity.Property(e => e.AccionNumero).HasColumnName("Accion_Numero");
            entity.Property(e => e.Comentario)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NuctNumero).HasColumnName("Nuct_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroUsuarioHistorico)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario_Historico");
            entity.Property(e => e.RepuestaNumero).HasColumnName("Repuesta_Numero");

            entity.HasOne(d => d.AccionNumeroNavigation).WithMany(p => p.TraspasosAccionCondicionEnfermedadHistoricos)
                .HasForeignKey(d => d.AccionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Accion_Condicion_Enfermedades_Historicos_Trans_Traspasos_Acciones_Cata1");

            entity.HasOne(d => d.RepuestaNumeroNavigation).WithMany(p => p.TraspasosAccionCondicionEnfermedadHistoricos)
                .HasForeignKey(d => d.RepuestaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Accion_Condicion_Enfermedades_Historicos_Trans_Traspasos_Respuestas_Cata");
        });

        modelBuilder.Entity<TraspasosAccionCondicionEnfermedadTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero).HasName("PK_TRP_Accion_Condicion_Enfermedad_Trans");

            entity.ToTable("Traspasos_Accion_Condicion_Enfermedad_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico.")
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.AccionNumero)
                .HasComment("Código que indica la acción de SISALRIl (1 = Detener el traspaso, 2 = Continuar con el flujo del traspaso sin tomar en cuenta la notificación de enfermedad de la ARS Origen).")
                .HasColumnName("Accion_Numero");
            entity.Property(e => e.LoteSuirNumero)
                .HasComment("Número de Lote del archivo donde fue enviado el registro reportado.")
                .HasColumnName("Lote_SUIR_Numero");
            entity.Property(e => e.MotivoNumero)
                .HasComment("Código que indica el detalle de la acción tomada por la SISALRIL.")
                .HasColumnName("Motivo_Numero");
            entity.Property(e => e.Nuct)
                .HasComment("Número único de Control del Traspaso con el cual fue autorizado el traspaso.")
                .HasColumnName("NUCT");
            entity.Property(e => e.RegistroNumero)
                .HasComment("Estatus en que quedó el registro luego de la validación.")
                .HasColumnName("Registro_Numero");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identificador del tipo de registro (Constante = D).")
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.TraspasoTipoNumero)
                .HasComment("Indica el Número del tipo de traspaso.")
                .HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosAccionProblemaImagenHistorico>(entity =>
        {
            entity.HasKey(e => e.HistoricoNumero).HasName("PK__Traspaso__14089539C2E3E6BF");

            entity.ToTable("Traspasos_Accion_Problema_Imagen_Historico");

            entity.Property(e => e.HistoricoNumero).HasColumnName("Historico_Numero");
            entity.Property(e => e.AccionNumero).HasColumnName("Accion_Numero");
            entity.Property(e => e.Comentario)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NuctNumero).HasColumnName("Nuct_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroUsuarioHistorico)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario_Historico");
            entity.Property(e => e.RespuestaNumero).HasColumnName("Respuesta_Numero");

            entity.HasOne(d => d.AccionNumeroNavigation).WithMany(p => p.TraspasosAccionProblemaImagenHistoricos)
                .HasForeignKey(d => d.AccionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Traspasos__Accio__76D398BE");

            entity.HasOne(d => d.RespuestaNumeroNavigation).WithMany(p => p.TraspasosAccionProblemaImagenHistoricos)
                .HasForeignKey(d => d.RespuestaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Traspasos__Repue__77C7BCF7");
        });

        modelBuilder.Entity<TraspasosAccionSisalrilArsOrigenDestinoTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero).HasName("PK_TRP_Accion_SISALRIL_ARS_Origen_Trans");

            entity.ToTable("Traspasos_Accion_SISALRIL_ARS_Origen_Destino_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico.")
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.AccionSisalrilNumero)
                .HasComment("Código que indica la acción de SISALRIl (1 = Detener el traspaso, 2 = Continuar con el flujo del traspaso sin tomar en cuenta la notificación de enfermedad de la ARS Origen).")
                .HasColumnName("Accion_SISALRIL_Numero");
            entity.Property(e => e.AfiliadoDependienteCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del Dependiente del titular que solicitó el traspaso (Solo para el tipo de afiliado Dependiente).")
                .HasColumnName("Afiliado_Dependiente_Cedula");
            entity.Property(e => e.AfiliadoDependienteNss)
                .HasComment("Número de Seguridad Social del dependiente del titular que solicitó el traspaso (Solo para el tipo de afiliado Dependiente, obligatorio si el dependiente está activo).")
                .HasColumnName("Afiliado_Dependiente_NSS");
            entity.Property(e => e.AfiliadoFechaNacimiento)
                .HasComment("Fecha de nacimiento del afiliado.")
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Nacimiento");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sexo del afiliado.")
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el afiliado es un dependiente o un titular: (T = Titular, D = Dependiente Directo, A = Dependiente Adicional).")
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del titular que solicitó el traspaso.")
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNss)
                .HasComment("Número de Seguridad Social del titular que solicitó el traspaso.")
                .HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.ArsTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica cual es el tipo de ARS con relación al afiliado (posibles valores O = ARS Origen, D = ARS Destino).")
                .HasColumnName("ARS_Tipo_Codigo");
            entity.Property(e => e.MotivoAccionSisalrilNumero)
                .HasComment("Código que indica el detalle de la acción tomada por la SISALRIL.")
                .HasColumnName("Motivo_Accion_SISALRIL_Numero");
            entity.Property(e => e.Nuct)
                .HasComment("Número único de Control del Traspaso con el cual fue autorizado el traspaso.")
                .HasColumnName("NUCT");
            entity.Property(e => e.ParentescoNumero)
                .HasComment("Código del parentesco que identifica la relación de un dependiente con su titular (será obligatorio si el tipo de afiliado es un dependiente).")
                .HasColumnName("Parentesco_Numero");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identificador del tipo de registro (Constante = D).")
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.TraspasoTipoNumero)
                .HasComment("Indica el Número del tipo de traspaso.")
                .HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosAccionesCatum>(entity =>
        {
            entity.HasKey(e => e.AccionNumero);

            entity.ToTable("Traspasos_Acciones_Cata", tb => tb.HasComment("Es un catálogo que contiene las acciones que se toman como respuesta a la evaluación de un traspaso, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.AccionNumero)
                .HasComment("Número único de cada acción,  acciones que se aplican en los proceso de evaluación de traspasos con reclamos de la ARS o por solicitudes del usuario.")
                .HasColumnName("Accion_Numero");
            entity.Property(e => e.AccionDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción de  la acción,  acciones que se aplican en los proceso de evaluación de traspasos con reclamos de la ARS o por solicitudes del usuario.")
                .HasColumnName("Accion_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TraspasosAfiliadosTran>(entity =>
        {
            entity.HasKey(e => new { e.Nuct, e.AfiliadoTitularNss, e.AfiliadoNss }).HasName("PK_Traspasos_Afiliados_Trans_1");

            entity.ToTable("Traspasos_Afiliados_Trans");

            entity.HasIndex(e => e.Nuct, "IDX_NUCT");

            entity.Property(e => e.Nuct).HasColumnName("NUCT");
            entity.Property(e => e.AfiliadoTitularNss).HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.AfiliadoNss).HasColumnName("Afiliado_NSS");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.ParentescoNumero).HasColumnName("Parentesco_Numero");
            entity.Property(e => e.PeriodoFactura).HasColumnName("Periodo_Factura");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TraspasosAfiliadosTrans99>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Traspasos_Afiliados_Trans99");

            entity.Property(e => e.AfiliadoNss).HasColumnName("Afiliado_NSS");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularNss).HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.Nuct).HasColumnName("NUCT");
            entity.Property(e => e.ParentescoNumero).HasColumnName("Parentesco_Numero");
            entity.Property(e => e.PeriodoFactura).HasColumnName("Periodo_Factura");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TraspasosCancelacionSisalrilArsTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero).HasName("PK_TRP_Cancelacion_SISALRIL_Traspasos_ARS_Trans");

            entity.ToTable("Traspasos_Cancelacion_SISALRIL_ARS_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNss).HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.MotivoNumero).HasColumnName("Motivo_Numero");
            entity.Property(e => e.Nuct).HasColumnName("NUCT");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.RespuestaCodigo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Respuesta_Codigo");
            entity.Property(e => e.TraspasoTipoNumero).HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosErroresCatum>(entity =>
        {
            entity.HasKey(e => e.ErrorNumero);

            entity.ToTable("Traspasos_Errores_Cata", tb => tb.HasComment("Es un catálogo que contiene los tipos de errores de validación de los traspasos, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ErrorNumero)
                .HasComment("Número único del error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema o de la solicitud de un traspaso.")
                .HasColumnName("Error_Numero");
            entity.Property(e => e.ErrorDescripcion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Descripción del error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema o de la solicitud de un traspaso.")
                .HasColumnName("Error_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TraspasosErroresRespuestasTran>(entity =>
        {
            entity.HasKey(e => new { e.ErrorRespuestaNumero, e.SeguimientoNumero, e.Nuct });

            entity.ToTable("Traspasos_Errores_Respuestas_Trans");

            entity.Property(e => e.ErrorRespuestaNumero)
                .HasComment("Número único de repuesta dada, después de detactado su error durante la evaluación de un formulario de reclamo en un proceso de traspaso.")
                .HasColumnName("Error_Respuesta_Numero");
            entity.Property(e => e.SeguimientoNumero)
                .HasComment("Número único que representa la carga de un Archivo de Traspaso por Problema de Imagen y/o Condición de Enfermedad, reportado por el SUIR.")
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.Nuct).HasComment("Numero Único de Control de Traspaso con el cual fue autorizado el traspaso mediante consulta al Webservices de autorización de Traspaso de Salud.");
            entity.Property(e => e.ErrorRespuestaFecha)
                .HasComment("Indica la fecha del error durante la evaluación de un formulario de reclamo en un proceso de traspaso.")
                .HasColumnType("datetime")
                .HasColumnName("Error_Respuesta_Fecha");
            entity.Property(e => e.ErrorRespuestaUsuarip)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasComment("Indica el usuario que dió la respuesta del error.")
                .HasColumnName("Error_Respuesta_Usuarip");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.SeguimientoNumeroNavigation).WithMany(p => p.TraspasosErroresRespuestasTrans)
                .HasForeignKey(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Errores_Respuestas_Trans_Traspasos_Seguimientos_Master");
        });

        modelBuilder.Entity<TraspasosErroresTran>(entity =>
        {
            entity.HasKey(e => new { e.Nuct, e.ErrorNumero }).HasName("PK_Traspasos_Errores_Tarns");

            entity.ToTable("Traspasos_Errores_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los errores de validación de los registros de traspasos reportados  por UNIPAGO, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.Nuct)
                .HasComment("Número único de control de traspaso, número asignado a cada traspaso desde su solicitud hasta su operación final.")
                .HasColumnName("NUCT");
            entity.Property(e => e.ErrorNumero)
                .HasComment("Número único del error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema o de la solicitud de un traspaso.")
                .HasColumnName("Error_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ErrorNumeroNavigation).WithMany(p => p.TraspasosErroresTrans)
                .HasForeignKey(d => d.ErrorNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Errores_Tarns_Traspasos_Errores_Cata");

            entity.HasOne(d => d.NuctNavigation).WithMany(p => p.TraspasosErroresTrans)
                .HasForeignKey(d => d.Nuct)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Errores_Tarns_Traspasos_Trans");
        });

        modelBuilder.Entity<TraspasosEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.NuctEstadoNumero).HasName("PK_Traspasos_NUCT_Estado_Cata");

            entity.ToTable("Traspasos_Estados_Cata", tb => tb.HasComment("Es un catálogo con los estados en que pude estar un traspaso, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.NuctEstadoNumero)
                .HasComment("Número único de cada estado, relacionado con los diferentes procesos de investigación o notificación del SUIR, que pueden aplicar sobre  los traspasos.")
                .HasColumnName("NUCT_Estado_Numero");
            entity.Property(e => e.NuctEstadoCambio)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("NUCT_Estado_Cambio");
            entity.Property(e => e.NuctEstadoComentario)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Comentario para presentar a los usuarios en función de la descripción de cada estado, relacionado con los diferentes procesos de investigación o notificación del SUIR, que pueden aplicar sobre  los traspasos.")
                .HasColumnName("NUCT_Estado_Comentario");
            entity.Property(e => e.NuctEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción de cada estado, relacionado con los diferentes procesos de investigación o notificación del SUIR, que pueden aplicar sobre  los traspasos.")
                .HasColumnName("NUCT_Estado_Descripcion");
            entity.Property(e => e.NuctEstadoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Breve explicación de la descripción de cada estado, relacionado con los diferentes procesos de investigación o notificación del SUIR, que pueden aplicar sobre  los traspasos.")
                .HasColumnName("NUCT_Estado_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TraspasosFormulariosCdeDetallesTran>(entity =>
        {
            entity.HasKey(e => new { e.FormularioCdeNumero, e.GrupoNumero, e.CoberturaNumero }).HasName("PK_Traspasos_Formularios_DCE_Detalles_Trans");

            entity.ToTable("Traspasos_Formularios_CDE_Detalles_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los detalles relacionados con un  traspaso donde se determino una  condición de enfermedad (CDE), su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.FormularioCdeNumero)
                .HasComment("Número único del formulario de condición de enfermedad (CDE) con el cual se registro el caso para el afiliado en el proceso de traspaso.")
                .HasColumnName("Formulario_CDE_Numero");
            entity.Property(e => e.GrupoNumero)
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.CoberturaNumero)
                .HasComment("Numero único de cobertura que representa un  insumo, procedimiento médico, material, fármaco,  servicio  general que fue o puede ser prestado.")
                .HasColumnName("Cobertura_Numero");
            entity.Property(e => e.FormularioArchivoNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Formulario_Archivo_Nombre");
            entity.Property(e => e.FormularioCdeFechaDiagnostico)
                .HasComment("Fecha en que fue diagnosticado el afiliado que está en el proceso de traspaso donde  se determino una  condición de enfermedad (CDE).")
                .HasColumnType("datetime")
                .HasColumnName("Formulario_CDE_Fecha_Diagnostico");
            entity.Property(e => e.FormularioCdeFechaProgramada)
                .HasComment("Fecha programada para la intervención o tratamiento que se va a aplicar al afiliado que está en el  proceso de traspaso donde  se determino una  condición de enfermedad (CDE).")
                .HasColumnType("datetime")
                .HasColumnName("Formulario_CDE_Fecha_Programada");
            entity.Property(e => e.FormularioCdeUsuario)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Detalles del usuario de la ARS  y IP donde se registro una  condición de enfermedad (CDE) del proceso de traspaso.")
                .HasColumnName("Formulario_CDE_Usuario");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.FormularioCdeNumeroNavigation).WithMany(p => p.TraspasosFormulariosCdeDetallesTrans)
                .HasForeignKey(d => d.FormularioCdeNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Formularios_DCE_Detalles_Trans_Traspasos_Formularios_DCE_Trans");

            entity.HasOne(d => d.TraspasosProcedimientosVistum).WithMany(p => p.TraspasosFormulariosCdeDetallesTrans)
                .HasForeignKey(d => new { d.GrupoNumero, d.CoberturaNumero })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Formularios_DCE_Detalles_Trans_Procedimientos_Vista");
        });

        modelBuilder.Entity<TraspasosFormulariosCdeTran>(entity =>
        {
            entity.HasKey(e => e.FormularioCdeNumero).HasName("PK_Traspasos_Formularios_DCE_Trans");

            entity.ToTable("Traspasos_Formularios_CDE_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran traspaso donde se determino una  condición de enfermedad (CDE), su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.HasIndex(e => e.Nuct, "Idx_Formularios_CDE_Trans_Nuct");

            entity.Property(e => e.FormularioCdeNumero)
                .HasComment("Número único del formulario de condición de enfermedad (CDE) con el cual se registro el caso para el afiliado en el proceso de traspaso.")
                .HasColumnName("Formulario_CDE_Numero");
            entity.Property(e => e.AccionNumero)
                .HasComment("Número único de cada acción,  acciones que se aplican en los proceso de evaluación de traspasos con reclamos de la ARS o por solicitudes del usuario.")
                .HasColumnName("Accion_Numero");
            entity.Property(e => e.AfiliadoNombreCompleto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nombre completo del afiliado que está en el proceso de traspaso donde  se determino una  condición de enfermedad (CDE).")
                .HasColumnName("Afiliado_Nombre_Completo");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_NSS");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength()
                .HasComment("Es el código que clasifica los afiliados en T = Titulares (Quien representa al núcleo familiar) D = Dependientes  (Hijos y Conjugues) y A = Adicionales (Padres, Hijos con mayoría de edad cumplida 18 o 21, otros familiares dependientes económicamente).")
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.ComentarioAccion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasComment("Comentario relacionado con la acción aplicada al traspaso donde se determino una  condición de enfermedad (CDE).")
                .HasColumnName("Comentario_Accion");
            entity.Property(e => e.ComentarioSancion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasComment("Comentario relacionado con la sanción aplicada al traspaso donde se determino una  condición de enfermedad (CDE).")
                .HasColumnName("Comentario_Sancion");
            entity.Property(e => e.FormularioCdeCirugiaElectivaPe)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica si el afiliado tiene o no una cirugía electiva pendiente para un traspaso donde se determino una  condición de enfermedad (CDE).")
                .HasColumnName("Formulario_CDE_Cirugia_Electiva_PE");
            entity.Property(e => e.FormularioCdeMedicoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Número de cédula de identidad del afiliado que está en el proceso de traspaso donde  se determino una  condición de enfermedad (CDE).")
                .HasColumnName("Formulario_CDE_Medico_Cedula");
            entity.Property(e => e.FormularioCdeMedicoDireccion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Dirección del consultorio del Médico que realizó el diagnostico e indicación para el afiliado del  proceso de traspaso donde  se determino una  condición de enfermedad (CDE).")
                .HasColumnName("Formulario_CDE_Medico_Direccion");
            entity.Property(e => e.FormularioCdeMedicoEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Dirección de correo electrónico del Médico que realizó el diagnostico e indicación para el afiliado del proceso de traspaso donde  se determino una  condición de enfermedad (CDE).")
                .HasColumnName("Formulario_CDE_Medico_Email");
            entity.Property(e => e.FormularioCdeMedicoEspecialidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Especialidad del Médico que realizó el diagnostico e indicación para el afiliado del  proceso de traspaso donde  se determino una  condición de enfermedad (CDE).")
                .HasColumnName("Formulario_CDE_Medico_Especialidad");
            entity.Property(e => e.FormularioCdeMedicoNombre)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Nombre completo del Médico que realizó el diagnostico e indicación para el afiliado del  proceso de traspaso donde  se determino una  condición de enfermedad (CDE).")
                .HasColumnName("Formulario_CDE_Medico_Nombre");
            entity.Property(e => e.FormularioCdeMedicoTelefono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de teléfono  del Médico que realizó el diagnostico e indicación para el afiliado del  proceso de traspaso donde  se determino una  condición de enfermedad (CDE).")
                .HasColumnName("Formulario_CDE_Medico_Telefono");
            entity.Property(e => e.FormularioCdeObservaciones)
                .HasMaxLength(400)
                .IsUnicode(false)
                .HasComment("Observaciones del formulario de condición de enfermedad para los procesos de traspaso.")
                .HasColumnName("Formulario_CDE_Observaciones");
            entity.Property(e => e.FormularioCdeTratamientoEc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Detalles del tratamiento indicado al afiliado en un proceso de traspaso donde  se determino una  condición de enfermedad (CDE).")
                .HasColumnName("Formulario_CDE_Tratamiento_EC");
            entity.Property(e => e.FormularioCdeUsuario)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasComment("Detalles del usuario de la ARS  y IP donde se registro una  condición de enfermedad (CDE) del proceso de traspaso.")
                .HasColumnName("Formulario_CDE_Usuario");
            entity.Property(e => e.Nuct)
                .HasComment("Número único de control de traspaso, número asignado a cada traspaso desde su solicitud hasta su operación final.")
                .HasColumnName("NUCT");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RespuestaNumero)
                .HasComment("Número único de repuesta dada, después de la evaluación de un formulario de reclamo en un proceso de traspaso.")
                .HasColumnName("Respuesta_Numero");
            entity.Property(e => e.SancionNumero)
                .HasComment("Número único de sanción aplicada después de la evaluación de un caso de reclamo en un proceso de traspaso.")
                .HasColumnName("Sancion_Numero");

            entity.HasOne(d => d.AccionNumeroNavigation).WithMany(p => p.TraspasosFormulariosCdeTrans)
                .HasForeignKey(d => d.AccionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Formularios_DCE_Trans_Traspasos_Acciones_Cata");

            entity.HasOne(d => d.AfiliadoNssNavigation).WithMany(p => p.TraspasosFormulariosCdeTrans)
                .HasForeignKey(d => d.AfiliadoNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Formularios_CDE_Trans_TSS_Ciudadanos_Master");

            entity.HasOne(d => d.AfiliadoTipoCodigoNavigation).WithMany(p => p.TraspasosFormulariosCdeTrans)
                .HasForeignKey(d => d.AfiliadoTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Formularios_CDE_Trans_Afiliados_Tipo_Cata");

            entity.HasOne(d => d.NuctNavigation).WithMany(p => p.TraspasosFormulariosCdeTrans)
                .HasForeignKey(d => d.Nuct)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Formularios_CDE_Trans_Traspasos_NUCT_Trans");

            entity.HasOne(d => d.RespuestaNumeroNavigation).WithMany(p => p.TraspasosFormulariosCdeTrans)
                .HasForeignKey(d => d.RespuestaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Formularios_DCE_Trans_Traspasos_Respuestas_Cata");

            entity.HasOne(d => d.SancionNumeroNavigation).WithMany(p => p.TraspasosFormulariosCdeTrans)
                .HasForeignKey(d => d.SancionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Formularios_DCE_Trans_Traspasos_Sanciones_Cata");
        });

        modelBuilder.Entity<TraspasosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.Nuct, e.RegistroFechaHistorico });

            entity.ToTable("Traspasos_Historico");

            entity.Property(e => e.Nuct)
                .HasComment("Número único de control de traspaso, número asignado a cada traspaso desde su solicitud hasta su operación final.")
                .HasColumnName("NUCT");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.AccionNumero)
                .HasComment("Número único de cada acción,  acciones que se aplican en los proceso de evaluación de traspasos con reclamos de la ARS o por solicitudes del usuario.")
                .HasColumnName("Accion_Numero");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNombreCompleto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Es nombre completo (Nombres  y Apellidos) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Afiliado_Titular_Nombre_Completo");
            entity.Property(e => e.AfiliadoTitularNss)
                .HasComment("Número único que identifica a un afiliado titular dentro del SFS, sobre el cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.ArsDestino)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Destino");
            entity.Property(e => e.ArsOrigen)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Origen");
            entity.Property(e => e.CasoNumero)
                .HasComment("Número del Caso.")
                .HasColumnName("Caso_Numero");
            entity.Property(e => e.ImagenEncontrada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica sí o no  la imagen de traspaso fue encontrada en la ruta indicada.")
                .HasColumnName("Imagen_Encontrada");
            entity.Property(e => e.ImagenNombre)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasComment("Nombre del archivo  de  la imagen de traspaso.")
                .HasColumnName("Imagen_Nombre");
            entity.Property(e => e.ImagenRuta)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasComment("Dirección donde se encuentran almacenado el archivo de la imagen de traspaso.")
                .HasColumnName("Imagen_Ruta");
            entity.Property(e => e.NuctEstadoNumero)
                .HasComment("Número único de cada estado, relacionado con los diferentes procesos de investigación o notificación del SUIR, que pueden aplicar sobre  los traspasos.")
                .HasColumnName("NUCT_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroUsuarioHistorico)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario_Historico");
            entity.Property(e => e.RespuestaNumero)
                .HasComment("Número único de repuesta dada, después de la evaluación de un formulario de reclamo en un proceso de traspaso.")
                .HasColumnName("Respuesta_Numero");
            entity.Property(e => e.SansionNumero)
                .HasComment("Número único de repuesta dada, después de la evaluación de un formulario de reclamo en un proceso de traspaso.")
                .HasColumnName("Sansion_Numero");
            entity.Property(e => e.TraspasoEfectividadFecha)
                .HasComment("Fecha en la cual se culmino el proceso de traspaso.")
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Efectividad_Fecha");
            entity.Property(e => e.TraspasoEmail)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Email");
            entity.Property(e => e.TraspasoEstatus)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Estatus en el que se encuentra el proceso de traspaso, (RE u OK), reportado por el SUIR.")
                .HasColumnName("Traspaso_Estatus");
            entity.Property(e => e.TraspasoNotificacionArsOrigenFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Notificacion_Ars_Origen_Fecha");
            entity.Property(e => e.TraspasoObservacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasComment("Observaciones sobre los problemas detectados en  la imagen de traspaso.")
                .HasColumnName("Traspaso_Observacion");
            entity.Property(e => e.TraspasoSolicitudFecha)
                .HasComment("Fecha en la cual fue realizada la solicitud del traspaso por el afiliado en la ARS Destino.")
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Solicitud_Fecha");
            entity.Property(e => e.TraspasoTelefonoCelular)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Celular");
            entity.Property(e => e.TraspasoTelefonoEmpresa)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Empresa");
            entity.Property(e => e.TraspasoTelefonoResidencia)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Residencia");
            entity.Property(e => e.TraspasoTipoNumero)
                .HasComment("Número único que especifica el tipo de traspaso.")
                .HasColumnName("Traspaso_Tipo_Numero");
            entity.Property(e => e.TraspasoVencimientoReporteCondicionEnfermedadFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Vencimiento_Reporte_Condicion_Enfermedad_Fecha");
            entity.Property(e => e.TraspasoVencimientoReporteProblemaImagenFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Vencimiento_Reporte_Problema_Imagen_Fecha");
            entity.Property(e => e.TraspasoVencimientoTipoNumero)
                .HasComment("Número único que especifica el tipo de vencimiento de traspaso.")
                .HasColumnName("Traspaso_Vencimiento_Tipo_Numero");

            entity.HasOne(d => d.NuctNavigation).WithMany(p => p.TraspasosHistoricos)
                .HasForeignKey(d => d.Nuct)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Trapasos_Historico_Traspasos_Master");
        });

        modelBuilder.Entity<TraspasosMaster>(entity =>
        {
            entity.HasKey(e => e.Nuct).HasName("PK_Traspasos_NUCT_Trans");

            entity.ToTable("Traspasos_Master", tb =>
                {
                    tb.HasComment("Es un maestro donde se registran los detalles de los traspasos recibidos desde UNIPAGO y los datos sobre los procesos que se realizan con ellos, su fuente de datos la vista de traspasos publicadas por UNIPAGO y los sistemas internos de la SISALRIL.");
                    tb.HasTrigger("Trigger_Traspasos_Historico_Update");
                });

            entity.HasIndex(e => e.NuctEstadoNumero, "IDX_Nuct_Estado");

            entity.HasIndex(e => e.TraspasoSolicitudFecha, "IDX_Sol_Fecha");

            entity.HasIndex(e => e.ArsDestino, "Idx_Traspasos_Master_ARS_Destino");

            entity.HasIndex(e => new { e.ArsDestino, e.RegistroFecha }, "Idx_Traspasos_Master_ARS_Fecha");

            entity.HasIndex(e => e.ArsOrigen, "Idx_Traspasos_Master_ARS_Origen");

            entity.HasIndex(e => new { e.ArsOrigen, e.RegistroFecha }, "Idx_Traspasos_Master_Ars_Origen_Fecha");

            entity.HasIndex(e => e.TraspasoSolicitudFecha, "Idx_Traspasos_Master_Fecha_Solicitud");

            entity.HasIndex(e => e.AfiliadoTitularCedula, "Idx_Traspasos_Master_Titular_Cedula");

            entity.HasIndex(e => e.AfiliadoTitularNss, "Idx_Traspasos_Master_Titular_NSS");

            entity.Property(e => e.Nuct)
                .ValueGeneratedNever()
                .HasComment("Número único de control de traspaso, número asignado a cada traspaso desde su solicitud hasta su operación final.")
                .HasColumnName("NUCT");
            entity.Property(e => e.AccionNumero)
                .HasComment("Número único de cada acción,  acciones que se aplican en los proceso de evaluación de traspasos con reclamos de la ARS o por solicitudes del usuario.")
                .HasColumnName("Accion_Numero");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNombreCompleto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Es nombre completo (Nombres  y Apellidos) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Afiliado_Titular_Nombre_Completo");
            entity.Property(e => e.AfiliadoTitularNss)
                .HasComment("Número único que identifica a un afiliado titular dentro del SFS, sobre el cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.ArsDestino)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Destino");
            entity.Property(e => e.ArsOrigen)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Origen");
            entity.Property(e => e.CasoNumero)
                .HasComment("Número del Caso.")
                .HasColumnName("Caso_Numero");
            entity.Property(e => e.ImagenEncontrada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Indica sí o no  la imagen de traspaso fue encontrada en la ruta indicada.")
                .HasColumnName("Imagen_Encontrada");
            entity.Property(e => e.ImagenNombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasComment("Nombre del archivo  de  la imagen de traspaso.")
                .HasColumnName("Imagen_Nombre");
            entity.Property(e => e.ImagenRuta)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("(' ')")
                .HasComment("Dirección donde se encuentran almacenado el archivo de la imagen de traspaso.")
                .HasColumnName("Imagen_Ruta");
            entity.Property(e => e.NuctEstadoNumero)
                .HasComment("Número único de cada estado, relacionado con los diferentes procesos de investigación o notificación del SUIR, que pueden aplicar sobre  los traspasos.")
                .HasColumnName("NUCT_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RepresentanteCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Representante_Cedula");
            entity.Property(e => e.RespuestaNumero)
                .HasComment("Número único de repuesta dada, después de la evaluación de un formulario de reclamo en un proceso de traspaso.")
                .HasColumnName("Respuesta_Numero");
            entity.Property(e => e.SansionNumero)
                .HasDefaultValueSql("((0))")
                .HasComment("Número único de repuesta dada, después de la evaluación de un formulario de reclamo en un proceso de traspaso.")
                .HasColumnName("Sansion_Numero");
            entity.Property(e => e.TraspasoEfectividadFecha)
                .HasComment("Fecha en la cual se culmino el proceso de traspaso.")
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Efectividad_Fecha");
            entity.Property(e => e.TraspasoEmail)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Email");
            entity.Property(e => e.TraspasoEstatus)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Estatus en el que se encuentra el proceso de traspaso, (RE u OK), reportado por el SUIR.")
                .HasColumnName("Traspaso_Estatus");
            entity.Property(e => e.TraspasoNotificacionArsOrigenFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Notificacion_Ars_Origen_Fecha");
            entity.Property(e => e.TraspasoObservacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasComment("Observaciones sobre los problemas detectados en  la imagen de traspaso.")
                .HasColumnName("Traspaso_Observacion");
            entity.Property(e => e.TraspasoSolicitudFecha)
                .HasComment("Fecha en la cual fue realizada la solicitud del traspaso por el afiliado en la ARS Destino.")
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Solicitud_Fecha");
            entity.Property(e => e.TraspasoTelefonoCelular)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Celular");
            entity.Property(e => e.TraspasoTelefonoEmpresa)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Empresa");
            entity.Property(e => e.TraspasoTelefonoResidencia)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Residencia");
            entity.Property(e => e.TraspasoTelefonos)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Traspaso_Telefonos");
            entity.Property(e => e.TraspasoTipoNumero)
                .HasComment("Número único que especifica el tipo de traspaso.")
                .HasColumnName("Traspaso_Tipo_Numero");
            entity.Property(e => e.TraspasoVencimientoReporteCondicionEnfermedadFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Vencimiento_Reporte_Condicion_Enfermedad_Fecha");
            entity.Property(e => e.TraspasoVencimientoReporteProblemaImagenFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Vencimiento_Reporte_Problema_Imagen_Fecha");
            entity.Property(e => e.TraspasoVencimientoTipoNumero)
                .HasComment("Número único que especifica el tipo de vencimiento de traspaso.")
                .HasColumnName("Traspaso_Vencimiento_Tipo_Numero");

            entity.HasOne(d => d.AccionNumeroNavigation).WithMany(p => p.TraspasosMasters)
                .HasForeignKey(d => d.AccionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_NUCT_Trans_Traspasos_Acciones_Cata");

            entity.HasOne(d => d.AfiliadoTitularNssNavigation).WithMany(p => p.TraspasosMasters)
                .HasForeignKey(d => d.AfiliadoTitularNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Master_TSS_Ciudadanos_Master");

            entity.HasOne(d => d.ArsDestinoNavigation).WithMany(p => p.TraspasosMasterArsDestinoNavigations)
                .HasForeignKey(d => d.ArsDestino)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Master_ARS_Master");

            entity.HasOne(d => d.ArsOrigenNavigation).WithMany(p => p.TraspasosMasterArsOrigenNavigations)
                .HasForeignKey(d => d.ArsOrigen)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Master_ARS_Master1");

            entity.HasOne(d => d.NuctEstadoNumeroNavigation).WithMany(p => p.TraspasosMasters)
                .HasForeignKey(d => d.NuctEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_NUCT_Trans_Traspasos_NUCT_Estado_Cata");

            entity.HasOne(d => d.RespuestaNumeroNavigation).WithMany(p => p.TraspasosMasters)
                .HasForeignKey(d => d.RespuestaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_NUCT_Trans_Traspasos_Respuestas_Cata");

            entity.HasOne(d => d.TraspasoTipoNumeroNavigation).WithMany(p => p.TraspasosMasters)
                .HasForeignKey(d => d.TraspasoTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_NUCT_Trans_Trapasos_Tipo_Cata");

            entity.HasOne(d => d.TraspasoVencimientoTipoNumeroNavigation).WithMany(p => p.TraspasosMasters)
                .HasForeignKey(d => d.TraspasoVencimientoTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Trans_Traspasos_Vecimientos_Tipo_Cata");
        });

        modelBuilder.Entity<TraspasosMaster1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Traspasos_Master_1");

            entity.Property(e => e.AccionNumero).HasColumnName("Accion_Numero");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNombreCompleto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Nombre_Completo");
            entity.Property(e => e.AfiliadoTitularNss).HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.ArsDestino).HasColumnName("ARS_Destino");
            entity.Property(e => e.ArsOrigen).HasColumnName("ARS_Origen");
            entity.Property(e => e.CasoNumero).HasColumnName("Caso_Numero");
            entity.Property(e => e.ImagenEncontrada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Imagen_Encontrada");
            entity.Property(e => e.ImagenNombre)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("Imagen_Nombre");
            entity.Property(e => e.ImagenRuta)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Imagen_Ruta");
            entity.Property(e => e.Nuct).HasColumnName("NUCT");
            entity.Property(e => e.NuctEstadoNumero).HasColumnName("NUCT_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RespuestaNumero).HasColumnName("Respuesta_Numero");
            entity.Property(e => e.SansionNumero).HasColumnName("Sansion_Numero");
            entity.Property(e => e.TraspasoEfectividadFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Efectividad_Fecha");
            entity.Property(e => e.TraspasoEmail)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Email");
            entity.Property(e => e.TraspasoEstatus)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Traspaso_Estatus");
            entity.Property(e => e.TraspasoNotificacionArsOrigenFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Notificacion_Ars_Origen_Fecha");
            entity.Property(e => e.TraspasoObservacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Observacion");
            entity.Property(e => e.TraspasoSolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Solicitud_Fecha");
            entity.Property(e => e.TraspasoTelefonoCelular)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Celular");
            entity.Property(e => e.TraspasoTelefonoEmpresa)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Empresa");
            entity.Property(e => e.TraspasoTelefonoResidencia)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Residencia");
            entity.Property(e => e.TraspasoTipoNumero).HasColumnName("Traspaso_Tipo_Numero");
            entity.Property(e => e.TraspasoVencimientoReporteCondicionEnfermedadFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Vencimiento_Reporte_Condicion_Enfermedad_Fecha");
            entity.Property(e => e.TraspasoVencimientoReporteProblemaImagenFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Vencimiento_Reporte_Problema_Imagen_Fecha");
            entity.Property(e => e.TraspasoVencimientoTipoNumero).HasColumnName("Traspaso_Vencimiento_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosMaster99>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Traspasos_Master99");

            entity.Property(e => e.AccionNumero).HasColumnName("Accion_Numero");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNombreCompleto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Nombre_Completo");
            entity.Property(e => e.AfiliadoTitularNss).HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.ArsDestino).HasColumnName("ARS_Destino");
            entity.Property(e => e.ArsOrigen).HasColumnName("ARS_Origen");
            entity.Property(e => e.CasoNumero).HasColumnName("Caso_Numero");
            entity.Property(e => e.ImagenEncontrada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Imagen_Encontrada");
            entity.Property(e => e.ImagenNombre)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("Imagen_Nombre");
            entity.Property(e => e.ImagenRuta)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Imagen_Ruta");
            entity.Property(e => e.Nuct).HasColumnName("NUCT");
            entity.Property(e => e.NuctEstadoNumero).HasColumnName("NUCT_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RepresentanteCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Representante_Cedula");
            entity.Property(e => e.RespuestaNumero).HasColumnName("Respuesta_Numero");
            entity.Property(e => e.SansionNumero).HasColumnName("Sansion_Numero");
            entity.Property(e => e.TraspasoEfectividadFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Efectividad_Fecha");
            entity.Property(e => e.TraspasoEmail)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Email");
            entity.Property(e => e.TraspasoEstatus)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Traspaso_Estatus");
            entity.Property(e => e.TraspasoNotificacionArsOrigenFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Notificacion_Ars_Origen_Fecha");
            entity.Property(e => e.TraspasoObservacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Observacion");
            entity.Property(e => e.TraspasoSolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Solicitud_Fecha");
            entity.Property(e => e.TraspasoTelefonoCelular)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Celular");
            entity.Property(e => e.TraspasoTelefonoEmpresa)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Empresa");
            entity.Property(e => e.TraspasoTelefonoResidencia)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Residencia");
            entity.Property(e => e.TraspasoTelefonos)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefonos");
            entity.Property(e => e.TraspasoTipoNumero).HasColumnName("Traspaso_Tipo_Numero");
            entity.Property(e => e.TraspasoVencimientoReporteCondicionEnfermedadFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Vencimiento_Reporte_Condicion_Enfermedad_Fecha");
            entity.Property(e => e.TraspasoVencimientoReporteProblemaImagenFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Vencimiento_Reporte_Problema_Imagen_Fecha");
            entity.Property(e => e.TraspasoVencimientoTipoNumero).HasColumnName("Traspaso_Vencimiento_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosMasterDuver>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Traspasos_Master_duver");

            entity.Property(e => e.AccionNumero).HasColumnName("Accion_Numero");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNombreCompleto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Nombre_Completo");
            entity.Property(e => e.AfiliadoTitularNss).HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.ArsDestino).HasColumnName("ARS_Destino");
            entity.Property(e => e.ArsOrigen).HasColumnName("ARS_Origen");
            entity.Property(e => e.CasoNumero).HasColumnName("Caso_Numero");
            entity.Property(e => e.ImagenEncontrada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Imagen_Encontrada");
            entity.Property(e => e.ImagenNombre)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("Imagen_Nombre");
            entity.Property(e => e.ImagenRuta)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Imagen_Ruta");
            entity.Property(e => e.Nuct).HasColumnName("NUCT");
            entity.Property(e => e.NuctEstadoNumero).HasColumnName("NUCT_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RepresentanteCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Representante_Cedula");
            entity.Property(e => e.RespuestaNumero).HasColumnName("Respuesta_Numero");
            entity.Property(e => e.SansionNumero).HasColumnName("Sansion_Numero");
            entity.Property(e => e.TraspasoEfectividadFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Efectividad_Fecha");
            entity.Property(e => e.TraspasoEmail)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Email");
            entity.Property(e => e.TraspasoEstatus)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Traspaso_Estatus");
            entity.Property(e => e.TraspasoNotificacionArsOrigenFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Notificacion_Ars_Origen_Fecha");
            entity.Property(e => e.TraspasoObservacion)
                .HasMaxLength(800)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Observacion");
            entity.Property(e => e.TraspasoSolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Solicitud_Fecha");
            entity.Property(e => e.TraspasoTelefonoCelular)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Celular");
            entity.Property(e => e.TraspasoTelefonoEmpresa)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Empresa");
            entity.Property(e => e.TraspasoTelefonoResidencia)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Residencia");
            entity.Property(e => e.TraspasoTelefonos)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefonos");
            entity.Property(e => e.TraspasoTipoNumero).HasColumnName("Traspaso_Tipo_Numero");
            entity.Property(e => e.TraspasoVencimientoReporteCondicionEnfermedadFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Vencimiento_Reporte_Condicion_Enfermedad_Fecha");
            entity.Property(e => e.TraspasoVencimientoReporteProblemaImagenFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Vencimiento_Reporte_Problema_Imagen_Fecha");
            entity.Property(e => e.TraspasoVencimientoTipoNumero).HasColumnName("Traspaso_Vencimiento_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosMasterVistum>(entity =>
        {
            entity.HasKey(e => e.Nuct);

            entity.ToTable("Traspasos_Master_Vista");

            entity.Property(e => e.Nuct)
                .ValueGeneratedNever()
                .HasColumnName("NUCT");
            entity.Property(e => e.AccionDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Accion_Descripcion");
            entity.Property(e => e.AccionNumero).HasColumnName("Accion_Numero");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNombreCompleto)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Nombre_Completo");
            entity.Property(e => e.AfiliadoTitularNss).HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.ArsDestinoNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ARS_Destino_Nombre");
            entity.Property(e => e.ArsDestinoNumero).HasColumnName("ARS_Destino_Numero");
            entity.Property(e => e.ArsOrigenNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ARS_Origen_Nombre");
            entity.Property(e => e.ArsOrigenNumero).HasColumnName("ARS_Origen_Numero");
            entity.Property(e => e.MotivoDescripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Motivo_Descripcion");
            entity.Property(e => e.NuctEstadoComentario)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Nuct_Estado_Comentario");
            entity.Property(e => e.NuctEstadoNumero).HasColumnName("Nuct_Estado_Numero");
            entity.Property(e => e.RespuestaDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Respuesta_Descripcion");
            entity.Property(e => e.RespuestaNumero).HasColumnName("Respuesta_Numero");
            entity.Property(e => e.TraspasoSolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Solicitud_Fecha");
        });

        modelBuilder.Entity<TraspasosNotificacionArsCancelacionTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero).HasName("PK_TRP_Notificacion_ARS_Cancelacion_Traspaso_Trans");

            entity.ToTable("Traspasos_Notificacion_ARS_Cancelacion_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico.")
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del titular que solicitó el traspaso.")
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNss)
                .HasComment("Número de Seguridad Social del titular que solicitó el traspaso.")
                .HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.ArsTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifica cual es el tipo de ARS con relación al afiliado (posibles valores O = ARS Origen, D = ARS Destino).")
                .HasColumnName("ARS_Tipo_Codigo");
            entity.Property(e => e.MotivoNumero)
                .HasComment("Código que indica el detalle de la acción tomada por la SISALRIL.")
                .HasColumnName("Motivo_Numero");
            entity.Property(e => e.Nuct)
                .HasComment("Número único de Control del Traspaso con el cual fue autorizado el traspaso.")
                .HasColumnName("NUCT");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identificador del tipo de registro (Constante = D).")
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.TraspasoTipoNumero)
                .HasComment("Indica el Número del tipo de traspaso.")
                .HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosNotificacionCondicionEnfermedadTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero).HasName("PK_TRP_Notificacion_Condicion_Enfermedad_Trans");

            entity.ToTable("Traspasos_Notificacion_Condicion_Enfermedad_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico.")
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.AfiliadoDependienteCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del Dependiente del titular que solicitó el traspaso.")
                .HasColumnName("Afiliado_Dependiente_Cedula");
            entity.Property(e => e.AfiliadoDependienteNss)
                .HasComment("Número de Seguridad Social del dependiente del titular que solicitó el traspaso.")
                .HasColumnName("Afiliado_Dependiente_NSS");
            entity.Property(e => e.AfiliadoFechaNacimiento)
                .HasComment("Fecha de nacimiento del afiliado.")
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Nacimiento");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sexo del afiliado.")
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el afiliado es un dependiente o un titular (T = Titular, D = Dependiente, A = Dependiente Adicional).")
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del titular que solicitó el traspaso.")
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNss)
                .HasComment("Número de Seguridad Social del titular que solicitó el traspaso.")
                .HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.CondicionEnfermedadNumero)
                .HasComment("Condición de enfermedad del afiliado.")
                .HasColumnName("Condicion_Enfermedad_Numero");
            entity.Property(e => e.Nuct)
                .HasComment("Número único de Control del Traspaso con el cual fue autorizado el traspaso.")
                .HasColumnName("NUCT");
            entity.Property(e => e.ParentescoNumero)
                .HasComment("Código del parentesco que identifica la relación de un dependiente con su titular.")
                .HasColumnName("Parentesco_Numero");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identificador del tipo de registro (Constante = D).")
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.TraspasoTipoNumero)
                .HasComment("Indica el Número del tipo de traspaso.")
                .HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosNuctCeTran>(entity =>
        {
            entity.HasKey(e => e.Nuct);

            entity.ToTable("Traspasos_NUCT_CE_Trans");

            entity.Property(e => e.Nuct)
                .ValueGeneratedNever()
                .HasColumnName("NUCT");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNss).HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.ArsDestino).HasColumnName("ARS_Destino");
            entity.Property(e => e.ArsOrigen).HasColumnName("ARS_Origen");
            entity.Property(e => e.FechaNotificacionArsOrigen)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_Notificacion_Ars_Origen");
            entity.Property(e => e.MotivoNumero)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Motivo_Numero");
            entity.Property(e => e.PreguntaClaveDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Pregunta_Clave_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RepresentanteCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Representante_Cedula");
            entity.Property(e => e.RespuestaDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Respuesta_Descripcion");
            entity.Property(e => e.SangreTipoCodigo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Sangre_Tipo_Codigo");
            entity.Property(e => e.TraspasoEfectividadFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Efectividad_Fecha");
            entity.Property(e => e.TraspasoEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Email");
            entity.Property(e => e.TraspasoEstatus)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Traspaso_Estatus");
            entity.Property(e => e.TraspasoSolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Solicitud_Fecha");
            entity.Property(e => e.TraspasoTelefonoCelular)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Celular");
            entity.Property(e => e.TraspasoTelefonoEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Empresa");
            entity.Property(e => e.TraspasoTelefonoResidencia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefono_Residencia");
            entity.Property(e => e.TraspasoTipoNumero).HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosNuctErroresCatum>(entity =>
        {
            entity.HasKey(e => e.ErrorNumero);

            entity.ToTable("Traspasos_NUCT_Errores_Cata", tb => tb.HasComment("Es una tabla catálogo que contiene los diferentes errores de los NUCT durante su validación."));

            entity.Property(e => e.ErrorNumero)
                .HasComment("Número único del error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema o de la solicitud de un traspaso.")
                .HasColumnName("Error_Numero");
            entity.Property(e => e.ErrorDescripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Descripción del error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema o de la solicitud de un traspaso.")
                .HasColumnName("Error_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TraspasosNuctErroresRechazosCatum>(entity =>
        {
            entity.HasKey(e => e.ErrorNumero).HasName("PK_Traspasos_Errores_Rechazos_Cata");

            entity.ToTable("Traspasos_NUCT_Errores_Rechazos_Cata", tb => tb.HasComment("Es un catálogo que contiene los tipos de errores de validación de los traspasos, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ErrorNumero)
                .HasComment("Número único del error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema o de la solicitud de un traspaso.")
                .HasColumnName("Error_Numero");
            entity.Property(e => e.ErrorDescripcion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Descripción del error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema o de la solicitud de un traspaso.")
                .HasColumnName("Error_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TraspasosNuctErroresRechazosTran>(entity =>
        {
            entity.HasKey(e => new { e.RechazoNumero, e.ErrorNumero }).HasName("PK_Traspasos_Errores_Rechazos_Trans");

            entity.ToTable("Traspasos_NUCT_Errores_Rechazos_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los errores de validación de los registros de traspasos reportados  por UNIPAGO, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.RechazoNumero)
                .HasComment("Número único de control de traspaso, número asignado a cada traspaso desde su solicitud hasta su operación final.")
                .HasColumnName("Rechazo_Numero");
            entity.Property(e => e.ErrorNumero)
                .HasComment("Número único del error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema o de la solicitud de un traspaso.")
                .HasColumnName("Error_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ErrorNumeroNavigation).WithMany(p => p.TraspasosNuctErroresRechazosTrans)
                .HasForeignKey(d => d.ErrorNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Errores_Rechazos_Trans_Traspasos_Errores_Cata");
        });

        modelBuilder.Entity<TraspasosNuctErroresTran>(entity =>
        {
            entity.HasKey(e => e.ErrorSecuencia);

            entity.ToTable("Traspasos_NUCT_Errores_Trans", tb => tb.HasComment("Es una tabla transaccional que contiene los diferentes errores de los NUCT durante su validación."));

            entity.Property(e => e.ErrorSecuencia)
                .ValueGeneratedNever()
                .HasComment("Secuencia para identifica cada error en un proceso de carga de esquema especifica (Seguimiento + Lote).")
                .HasColumnName("Error_Secuencia");
            entity.Property(e => e.ErrorCampo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Nombre del campo que arrojó el error durante la validación de los NUCT.")
                .HasColumnName("Error_Campo");
            entity.Property(e => e.ErrorNumero)
                .HasComment("Número único del error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema o de la solicitud de un traspaso.")
                .HasColumnName("Error_Numero");
            entity.Property(e => e.Nuct)
                .HasComment("Número único de control de traspaso, número asignado a cada traspaso desde su solicitud hasta su operación final.")
                .HasColumnName("NUCT");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TraspasosNuctRechazosTran>(entity =>
        {
            entity.HasKey(e => e.RechazoNumero).HasName("PK_Traspasos_Rechazos_Trans2");

            entity.ToTable("Traspasos_NUCT_Rechazos_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran las solicitudes de traspasos que son rechazadas, no llegan al proceso de asignación de NUCT, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.RechazoNumero)
                .ValueGeneratedNever()
                .HasComment("Número único de rechazo a una solicitud de traspaso, cuando este es mayor que cero es porque no se genero el NUCT.")
                .HasColumnName("Rechazo_Numero");
            entity.Property(e => e.ArsDestino)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Destino");
            entity.Property(e => e.ArsOrigen)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Origen");
            entity.Property(e => e.CedulaTitular)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Cedula_Titular");
            entity.Property(e => e.FechaActualizacion)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Fecha_Actualizacion");
            entity.Property(e => e.NssTitular)
                .HasComment("Número único que identifica a un afiliado titular dentro del SFS, sobre el cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("NSS_Titular");
            entity.Property(e => e.RechazoEstatus)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Estatus en el que se encuentra el proceso de traspaso, (RE u OK), reportado por el SUIR.")
                .HasColumnName("Rechazo_Estatus");
            entity.Property(e => e.RechazoMotivo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("Motivo por e cual se rechazo una solicitud de traspaso.")
                .HasColumnName("Rechazo_Motivo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RepresentanteCodigo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Número de cedula del representante de la ARS que registro la solicitud de traspaso.")
                .HasColumnName("Representante_Codigo");
            entity.Property(e => e.TitularEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Dirección de correo electrónico del Titular registrado en una solicitud de traspaso.")
                .HasColumnName("Titular_Email");
            entity.Property(e => e.TitularPreguntaClave)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Pregunta clave seleccionada por el Titular registrado en una solicitud de traspaso.")
                .HasColumnName("Titular_Pregunta_Clave");
            entity.Property(e => e.TitularRespuesta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Respuesta a la pregunta clave expresada por el Titular registrado en una solicitud de traspaso.")
                .HasColumnName("Titular_Respuesta");
            entity.Property(e => e.TitularTelefonoCelular)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de teléfono móvil del Titular registrado en una solicitud de traspaso.")
                .HasColumnName("Titular_Telefono_Celular");
            entity.Property(e => e.TitularTelefonoEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de teléfono de la empresa donde labora el Titular registrado en una solicitud de traspaso.")
                .HasColumnName("Titular_Telefono_Empresa");
            entity.Property(e => e.TitularTelefonoResidencia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de teléfono del lugar de residencia donde labora el Titular registrado en una solicitud de traspaso.")
                .HasColumnName("Titular_Telefono_Residencia");
            entity.Property(e => e.TitularTipoSangre)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Es la descripción del tipo de sangre el Titular registrado en una solicitud de traspaso.")
                .HasColumnName("Titular_Tipo_Sangre");
            entity.Property(e => e.TraspasoEfectividadFecha)
                .HasComment("Fecha en la cual se culmino el proceso de traspaso.")
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Efectividad_Fecha");
            entity.Property(e => e.TraspasoSolicitudFecha)
                .HasComment("Fecha en la cual fue realizada la solicitud del traspaso por el afiliado en la ARS Destino.")
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Solicitud_Fecha");
            entity.Property(e => e.TraspasoTipoNumero)
                .HasComment("Número único que especifica el tipo de traspaso.")
                .HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosNucufAccionCondicionEnfermedadTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero).HasName("PK_Traspasos_NUCT_Accion_Condicion_Enfermedad_Trans");

            entity.ToTable("Traspasos_NUCUF_Accion_Condicion_Enfermedad_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico.")
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.AccionNumero)
                .HasComment("Código que indica la acción de SISALRIL (1 = Detener el traspaso, 2 = Continuar con el flujo del traspaso sin tomar en cuenta la notificación de enfermedad por la ARS Origen).")
                .HasColumnName("Accion_Numero");
            entity.Property(e => e.AccionSisalrilNumero)
                .HasComment("Código que indica la acción de SISALRIL (1 = Autorización, 2 = Cancelación, 3 = Cancelación NUCUF, 0 = No Especifiado).")
                .HasColumnName("Accion_SISALRIL_Numero");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número de Seguridad Social del afiliado que fue solicitado para traspaso para unificación de núcleo familiar.")
                .HasColumnName("Afiliado_NSS");
            entity.Property(e => e.MotivoNumero)
                .HasComment("Código que indica el detalle de la acción tomada por la SISALRIL.")
                .HasColumnName("Motivo_Numero");
            entity.Property(e => e.MotivoSisalrilNumero)
                .HasComment("Código que indica el detalle de la acción tomada por la SISALRIL.")
                .HasColumnName("Motivo_SISALRIL_Numero");
            entity.Property(e => e.Nucuf)
                .HasComment("Número Unico de Control de Unificación de Núcleo Familiar con el cual fue autorizado el traspaso.")
                .HasColumnName("NUCUF");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Estatus en que quedó el registro luego de la validación.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identificador del tipo de registro (Constante = D).")
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.RespuestaCodigo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Código de respuesta de la validación del registro según catálogo de motivos del SUIR.")
                .HasColumnName("Respuesta_Codigo");
            entity.Property(e => e.TraspasoTipoNumero)
                .HasComment("Indica el Número del tipo de traspaso.")
                .HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosNucufAltasTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero);

            entity.ToTable("Traspasos_NUCUF_Altas_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico.")
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.ActaNacimientoAnio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un dependiente sin cédula, se proporcionará el año del acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Anio");
            entity.Property(e => e.ActaNacimientoFolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un dependiente sin cédula, se proporcionará el folio del acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Folio");
            entity.Property(e => e.ActaNacimientoLibro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un dependiente sin cédula, se proporcionará el libro en donde está registrada el acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Libro");
            entity.Property(e => e.ActaNacimientoMunicipio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un dependiente sin cédula, se proporcionará el municipio en que fue elaborada el acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Municipio");
            entity.Property(e => e.ActaNacimientoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un dependiente sin cédula, se proporcionará el número del acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Numero");
            entity.Property(e => e.ActaNacimientoOficialia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un dependiente sin cédula, se proporcionará la oficialia en donde fue elaborada el acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Oficialia");
            entity.Property(e => e.AfiliadoCantidadCotizaciones)
                .HasComment("Cantidad de cotizaciones del titular solicitado como dependiente o titular del dependiente solicitado.")
                .HasColumnName("Afiliado_Cantidad_Cotizaciones");
            entity.Property(e => e.AfiliadoDependienteCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del Dependiente del titular que solicitó el traspaso por unificación familiar.")
                .HasColumnName("Afiliado_Dependiente_Cedula");
            entity.Property(e => e.AfiliadoDependienteNss)
                .HasComment("Número de Seguridad Social del Dependiente del titular que solicitó el traspaso por unificación familiar.")
                .HasColumnName("Afiliado_Dependiente_NSS");
            entity.Property(e => e.AfiliadoDiscapacitado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el dependiente es o no discapacitado. S = SI y N = NO. (Este campo será obligatorio para el tipo de afiliado dependiente).")
                .HasColumnName("Afiliado_Discapacitado");
            entity.Property(e => e.AfiliadoEstudiante)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el dependiente es estudiante. S = SI y N = NO. (Este campo será obligatorio para el tipo de afiliado dependiente).")
                .HasColumnName("Afiliado_Estudiante");
            entity.Property(e => e.AfiliadoFechaAfiliacionSuir)
                .HasComment("Fecha en que la persona se afilió por primera vez a una ARS.")
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Afiliacion_SUIR");
            entity.Property(e => e.AfiliadoFechaNacimiento)
                .HasComment("Fecha de nacimiento del afiliado.")
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Nacimiento");
            entity.Property(e => e.AfiliadoPrimerApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Primer apellido del afiliado.")
                .HasColumnName("Afiliado_Primer_Apellido");
            entity.Property(e => e.AfiliadoPrimerNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Primer nombre del afiliado.")
                .HasColumnName("Afiliado_Primer_Nombre");
            entity.Property(e => e.AfiliadoSegundoApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Segundo apellido del afiliado.")
                .HasColumnName("Afiliado_Segundo_Apellido");
            entity.Property(e => e.AfiliadoSegundoNombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Segundo nombre del afiliado.")
                .HasColumnName("Afiliado_Segundo_Nombre");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sexo del afiliado.")
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el afiliado es un dependiente o un titular (T = Titular, D = Dependiente, A = Dependiente Adicional).")
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del titular que solicitó el traspaso por unificación familiar.")
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNss)
                .HasComment("Número de Seguridad Social del titular que solicitó el traspaso por unificación familiar.")
                .HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Municipio donde reside el afiliado.")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.Nucuf)
                .HasComment("Número Unico de Control de Unificación de Núcleo Familiar con el cual fue autorizado el traspaso.")
                .HasColumnName("NUCUF");
            entity.Property(e => e.ParentescoNumero)
                .HasComment("Código del parentesco que identifica la relación de un dependiente con su titular.")
                .HasColumnName("Parentesco_Numero");
            entity.Property(e => e.ProvinciaNumero)
                .HasComment("Provincia donde reside el afiliado.")
                .HasColumnName("Provincia_Numero");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identificador del tipo de registro (Constante = D).")
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.TraspasoTipoNumero)
                .HasComment("Indica el Número del tipo de traspaso.")
                .HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosNucufAutorizacionCancelacionTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero).HasName("PK_Traspasos_NUCT_Autorizacion_Cancelacion_Trans");

            entity.ToTable("Traspasos_NUCUF_Autorizacion_Cancelacion_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico.")
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.AccionSisalrilNumero)
                .HasComment("Código que indica la acción de SISALRIL (1 = Autorización, 2 = Cancelación, 3 = Cancelación NUCUF, 0 = No Especifiado).")
                .HasColumnName("Accion_SISALRIL_Numero");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del titular que solicitó el traspaso por unificación familiar.")
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNss)
                .HasComment("Número de Seguridad Social del titular que solicitó el traspaso por unificación familiar.")
                .HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.MotivoNumero)
                .HasComment("Código que indica el detalle de la acción tomada por la SISALRIL.")
                .HasColumnName("Motivo_Numero");
            entity.Property(e => e.Nucuf)
                .HasComment("Número Unico de Control de Unificación de Núcleo Familiar con el cual fue autorizado el traspaso.")
                .HasColumnName("NUCUF");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Estatus en que quedó el registro luego de la validación.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identificador del tipo de registro (Constante = D).")
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.RespuestaCodigo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Código de respuesta de la validacion del registro según catálogo de motivos del SUIR.")
                .HasColumnName("Respuesta_Codigo");
            entity.Property(e => e.TraspasoTipoNumero)
                .HasComment("Indica el Número del tipo de traspaso.")
                .HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosNucufBajasTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero);

            entity.ToTable("Traspasos_NUCUF_Bajas_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico.")
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.AfiliadoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del afiliado que fue solicitado para el Traspaso para Unificación del Núcleo Familiar o NUI en caso de ser dependiente menor de edad.")
                .HasColumnName("Afiliado_Cedula");
            entity.Property(e => e.AfiliadoFechaNacimiento)
                .HasComment("Fecha de nacimiento del afiliado.")
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Nacimiento");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número de Seguridad Social del afiliado solicitado para el traspaso para unificación de núcleo familiar (Solo será obligatorio si el dependiente esta activo).")
                .HasColumnName("Afiliado_NSS");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sexo del afiliado.")
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el afiliado es un dependiente o un titular (T = Titular, D = Dependiente, A = Dependiente Adicional).")
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del titular que solicitó el traspaso por unificación familiar.")
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNss)
                .HasComment("Número de Seguridad Social del titular que solicitó el traspaso por unificación familiar.")
                .HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.LoteCargaNumero)
                .HasComment("Número de lote donde se cargó el afiliado (Solo tendrá valor cuando el estatus del afiliado sea Provisional (PE).")
                .HasColumnName("Lote_Carga_Numero");
            entity.Property(e => e.Nucuf)
                .HasComment("Número Unico de Control de Unificación de Núcleo Familiar con el cual fue autorizado el traspaso.")
                .HasColumnName("NUCUF");
            entity.Property(e => e.ParentescoNumero)
                .HasComment("Código del parentesco que identifica la relación de un dependiente con su titular (Será obligatorio si el tipo de afiliados es un dependiente).")
                .HasColumnName("Parentesco_Numero");
            entity.Property(e => e.RechazoMotivoCodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Indica el motivo del rechazo del registro en el SUIR según catálogo de motivos del SUIR.")
                .HasColumnName("Rechazo_Motivo_Codigo");
            entity.Property(e => e.RegistroCargaNumero)
                .HasComment("Número de Id de registro de la posición donde se encuentra el afiliado cargado. (Solo tendrá valor cuando el estatus del afiliado sea Provisional PE).")
                .HasColumnName("Registro_Carga_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica el estatus en que será marcado el registro por ser rechazado (constante = RE).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identificador del tipo de registro (Constante = D).")
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.TraspasoTipoNumero)
                .HasComment("Indica el Número del tipo de traspaso.")
                .HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosNucufDetalleAutorizacionCancelacionTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero).HasName("PK_Traspasos_NUCUF_Detalle_Autorizacion_Calendario_Trans");

            entity.ToTable("Traspasos_NUCUF_Detalle_Autorizacion_Cancelacion_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que representa la carga de un informe (esquemas), que debe realizar cada ARS/ARL para un período específico.")
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.AccionSisalrilNumero)
                .HasComment("Código que indica la acción de SISALRIL (1 = Autorización, 2 = Cancelación, 3 = Cancelación NUCUF, 0 = No Especifiado).")
                .HasColumnName("Accion_SISALRIL_Numero");
            entity.Property(e => e.ActaNacimientoAnio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un afiliado si cédula ni NSS, se proporcionará el año del acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Anio");
            entity.Property(e => e.ActaNacimientoFolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un afiliado si cédula ni NSS, se proporcionará el folio en que fue elaborada el acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Folio");
            entity.Property(e => e.ActaNacimientoLibro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un afiliado si cédula ni NSS, se proporcionará el libro en que fue elaborada el acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Libro");
            entity.Property(e => e.ActaNacimientoMunicipio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un afiliado si cédula ni NSS, se proporcionará el municipio en que fue elaborada el acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Municipio");
            entity.Property(e => e.ActaNacimientoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un afiliado si cédula ni NSS, se proporcionará el número del acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Numero");
            entity.Property(e => e.ActaNacimientoOficialia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Cuando sea un afiliado si cédula ni NSS, se proporcionará la oficialia en que fue elaborada el acta de nacimiento.")
                .HasColumnName("Acta_Nacimiento_Oficialia");
            entity.Property(e => e.AfiliadoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del afiliado que fue solicitado para el Traspaso para Unificación Núcleo Familiar o NUI en caso de ser dependiente menor de edad.")
                .HasColumnName("Afiliado_Cedula");
            entity.Property(e => e.AfiliadoFechaNacimiento)
                .HasComment("Fecha de nacimiento del afiliado.")
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Nacimiento");
            entity.Property(e => e.AfiliadoNss)
                .HasComment("Número de Seguridad Social del Afiliado solicitado en el traspaso.")
                .HasColumnName("Afiliado_NSS");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sexo del afiliado.")
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica el tipo de afiliado (Posibles valores: T = Titular, D = Dependiente Directo, A = Dependiente Adicional).")
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula del titular que solicitó el traspaso por unificación familiar.")
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNss)
                .HasComment("Número de Seguridad Social del titular que solicitó el traspaso por unificación familiar.")
                .HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.ArsTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifica cual es el tipo de ARS con relación al afiliado (posibles valores O = ARS Origen, D = ARS Destino).")
                .HasColumnName("ARS_Tipo_Codigo");
            entity.Property(e => e.MotivoNumero)
                .HasComment("Código que indica el detalle de la acción tomada por la SISALRIL.")
                .HasColumnName("Motivo_Numero");
            entity.Property(e => e.Nucuf)
                .HasComment("Número Unico de Control de Unificación de Núcleo Familiar con el cual fue autorizado el traspaso.")
                .HasColumnName("NUCUF");
            entity.Property(e => e.ParentescoNumero)
                .HasComment("Código del parentesco que identifica la relación de un dependiente con su titular (será obligatorio si el tipo de afiliado es un dependiente).")
                .HasColumnName("Parentesco_Numero");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identificador del tipo de registro (Constante = D).")
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.TraspasoTipoNumero)
                .HasComment("Indica el Número del tipo de traspaso.")
                .HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosNucufMaster>(entity =>
        {
            entity.HasKey(e => new { e.Nucuf, e.AfiliadoDependienteNss });

            entity.ToTable("Traspasos_NUCUF_Master", tb => tb.HasComment("Es una tabla transaccional donde se registran los traspasos por unificación familiar, no llegan al proceso de asignación de NUCUF, su fuente de datos son las vistas de traspasos publicadas por UNIPAGO."));

            entity.Property(e => e.Nucuf)
                .HasComment("Número único de control de traspaso, número asignado a cada traspaso de unificación familiar, desde su solicitud hasta su operación final.")
                .HasColumnName("NUCUF");
            entity.Property(e => e.AfiliadoDependienteNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_Dependiente_NSS");
            entity.Property(e => e.ActaNacimientoAnio)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Año correspondiente al acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Acta_Nacimiento_Anio");
            entity.Property(e => e.ActaNacimientoFolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de folio  del acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Acta_Nacimiento_Folio");
            entity.Property(e => e.ActaNacimientoLibro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de folio  del acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Acta_Nacimiento_Libro");
            entity.Property(e => e.ActaNacimientoMunicipio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Numero de municipio del acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Acta_Nacimiento_Municipio");
            entity.Property(e => e.ActaNacimientoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de acta  del documento de acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Acta_Nacimiento_Numero");
            entity.Property(e => e.ActaNacimientoOficialia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de la oficialía civil correspondiente al  acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Acta_Nacimiento_Oficialia");
            entity.Property(e => e.AfiliadoCotiza)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("Indica si el afiliado que está en el proceso de traspaso por unificación familiar cotiza a la TSS.")
                .HasColumnName("Afiliado_Cotiza");
            entity.Property(e => e.AfiliadoFechaNacimiento)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Es la fecha de nacimiento de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Afiliado_Fecha_Nacimiento");
            entity.Property(e => e.AfiliadoFechaSolicitud)
                .HasComment("Fecha en que un afiliado solicita su afiliación a una Administradora de Riesgos de Salud (ARS) para un Plan de Servicios de Salud (PDSS, Voluntarios, Complementario, Especial, etc.).")
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Solicitud");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("Sexo de la persona (Afiliado)  (F=femenino, M=masculino).")
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el código que clasifica los afiliados en T = Titulares (Quien representa al núcleo familiar) D = Dependientes  (Hijos y Conjugues) y A = Adicionales (Padres, Hijos con mayoría de edad cumplida 18 o 21, otros familiares dependientes económicamente).")
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.ArsDestino)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Destino");
            entity.Property(e => e.ArsOrigen)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Origen");
            entity.Property(e => e.AutorizadoSisalril)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("Indica si traspaso por unificación familiar fue autorizado por la SISALRIL.")
                .HasColumnName("Autorizado_SISALRIL");
            entity.Property(e => e.CedulaDependiente)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Cedula_Dependiente");
            entity.Property(e => e.CedulaTitularDependienteSolicitado)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Cedula_Titular_Dependiente_Solicitado");
            entity.Property(e => e.FechaCierre)
                .HasComment("Fecha en que se hace efectivo el proceso de traspaso por unificación familiar cotiza a la TSS.")
                .HasColumnType("datetime")
                .HasColumnName("Fecha_Cierre");
            entity.Property(e => e.LoteNotificacionArsOrigen)
                .HasComment("Numero de lote con el cual UNIPAGO notificó a la ARS origen del traspaso de su afiliado.")
                .HasColumnName("Lote_Notificacion_ARS_Origen");
            entity.Property(e => e.NssTitularDependienteSolicitado)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("NSS_Titular_Dependiente_Solicitado");
            entity.Property(e => e.NucufEstado)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Estado en que se encuentra el NUCUF del proceso de traspaso por unificación familiar cotiza a la TSS.")
                .HasColumnName("NUCUF_Estado");
            entity.Property(e => e.ParentescoNumeroDestino)
                .HasComment("Número único que representa el parentesco entre un dependiente y el titular de un núcleo familiar en el Seguro Familiar de Salud (SFS).")
                .HasColumnName("Parentesco_Numero_Destino");
            entity.Property(e => e.ParentescoNumeroOrigen)
                .HasComment("Número único que representa el parentesco entre un dependiente y el titular de un núcleo familiar en el Seguro Familiar de Salud (SFS).")
                .HasColumnName("Parentesco_Numero_Origen");
            entity.Property(e => e.RechazoMotivo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("Motivo por e cual se rechazo una solicitud de traspaso.")
                .HasColumnName("Rechazo_Motivo");
            entity.Property(e => e.RechazoNumero)
                .HasComment("Número único de rechazo a una solicitud de traspaso, cuando este es mayor que cero es porque no se genero el NUCT.")
                .HasColumnName("Rechazo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TraspasoTipoNumero)
                .HasComment("Número único que especifica el tipo de traspaso.")
                .HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosNucufNotificacionCondicionEnfermedadTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero);

            entity.ToTable("Traspasos_NUCUF_Notificacion_Condicion_Enfermedad_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.AccionSisalrilNumero).HasColumnName("Accion_SISALRIL_Numero");
            entity.Property(e => e.ActaNacimientoAnio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Anio");
            entity.Property(e => e.ActaNacimientoFolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Folio");
            entity.Property(e => e.ActaNacimientoLibro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Libro");
            entity.Property(e => e.ActaNacimientoMunicipio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Municipio");
            entity.Property(e => e.ActaNacimientoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Numero");
            entity.Property(e => e.ActaNacimientoOficialia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Oficialia");
            entity.Property(e => e.AfiliadoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Cedula");
            entity.Property(e => e.AfiliadoFechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Nacimiento");
            entity.Property(e => e.AfiliadoNss).HasColumnName("Afiliado_NSS");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.ArsTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ARS_Tipo_Codigo");
            entity.Property(e => e.CondicionEnfermedadNumero).HasColumnName("Condicion_Enfermedad_Numero");
            entity.Property(e => e.MotivoSisalrilNumero).HasColumnName("Motivo_SISALRIL_Numero");
            entity.Property(e => e.Nucuf).HasColumnName("NUCUF");
            entity.Property(e => e.ParentescoNumero).HasColumnName("Parentesco_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.RespuestaCodigo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Respuesta_Codigo");
            entity.Property(e => e.TraspasoTipoNumero).HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosNucufNotificacionPreavisoEfectividadTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero);

            entity.ToTable("Traspasos_NUCUF_Notificacion_Preaviso_Efectividad_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.ActaNacimientoAnio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Anio");
            entity.Property(e => e.ActaNacimientoFolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Folio");
            entity.Property(e => e.ActaNacimientoLibro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Libro");
            entity.Property(e => e.ActaNacimientoMunicipio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Municipio");
            entity.Property(e => e.ActaNacimientoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Numero");
            entity.Property(e => e.ActaNacimientoOficialia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Oficialia");
            entity.Property(e => e.AfiliadoDependienteCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Dependiente_Cedula");
            entity.Property(e => e.AfiliadoDependienteNss).HasColumnName("Afiliado_Dependiente_NSS");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularNss).HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.Nucuf).HasColumnName("NUCUF");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.TraspasoEfectividadFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Efectividad_Fecha");
            entity.Property(e => e.TraspasoTipoNumero).HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosNucufNotificacionSolicitudesArsDestinoTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero);

            entity.ToTable("Traspasos_NUCUF_Notificacion_Solicitudes_ARS_Destino_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.ActaNacimientoAnio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Anio");
            entity.Property(e => e.ActaNacimientoFolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Folio");
            entity.Property(e => e.ActaNacimientoLibro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Libro");
            entity.Property(e => e.ActaNacimientoMunicipio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Municipio");
            entity.Property(e => e.ActaNacimientoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Numero");
            entity.Property(e => e.ActaNacimientoOficialia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Acta_Nacimiento_Oficialia");
            entity.Property(e => e.AfiliadoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Cedula");
            entity.Property(e => e.AfiliadoNss).HasColumnName("Afiliado_NSS");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.MotivoRespuesta)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Motivo_Respuesta");
            entity.Property(e => e.Nucuf).HasColumnName("NUCUF");
            entity.Property(e => e.ParentescoNumero).HasColumnName("Parentesco_Numero");
            entity.Property(e => e.RechazoNumero).HasColumnName("Rechazo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.TraspasoTipoCodigo).HasColumnName("Traspaso_Tipo_Codigo");
        });

        modelBuilder.Entity<TraspasosNucufRechazosTran>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Traspasos_NUCUF_Rechazos_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los errores de las solicitudes de traspasos pro unificación familiar que son rechazadas, no llegan al proceso de asignación de NUCUF, su fuente de datos son las vistas de traspasos publicadas por UNIPAGO."));

            entity.Property(e => e.ActaNacimientoAnio)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Año correspondiente al acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Acta_Nacimiento_Anio");
            entity.Property(e => e.ActaNacimientoFolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de folio  del acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Acta_Nacimiento_Folio");
            entity.Property(e => e.ActaNacimientoLibro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de folio  del acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Acta_Nacimiento_Libro");
            entity.Property(e => e.ActaNacimientoMunicipio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Numero de municipio del acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Acta_Nacimiento_Municipio");
            entity.Property(e => e.ActaNacimientoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de acta  del documento de acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Acta_Nacimiento_Numero");
            entity.Property(e => e.ActaNacimientoOficialia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de la oficialía civil correspondiente al  acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Acta_Nacimiento_Oficialia");
            entity.Property(e => e.AfiliadoCotiza)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("Indica si el afiliado que está en el proceso de traspaso por unificación familiar cotiza a la TSS.")
                .HasColumnName("Afiliado_Cotiza");
            entity.Property(e => e.AfiliadoDependienteCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Afiliado_Dependiente_Cedula");
            entity.Property(e => e.AfiliadoDependienteNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_Dependiente_NSS");
            entity.Property(e => e.AfiliadoFechaNacimiento)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasComment("Es la fecha de nacimiento de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Afiliado_Fecha_Nacimiento");
            entity.Property(e => e.AfiliadoFechaSolicitud)
                .HasComment("Fecha en que un afiliado solicita su afiliación a una Administradora de Riesgos de Salud (ARS) para un Plan de Servicios de Salud (PDSS, Voluntarios, Complementario, Especial, etc.).")
                .HasColumnType("datetime")
                .HasColumnName("Afiliado_Fecha_Solicitud");
            entity.Property(e => e.AfiliadoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("Sexo de la persona (Afiliado)  (F=femenino, M=masculino).")
                .HasColumnName("Afiliado_Sexo");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("Es el código que clasifica los afiliados en T = Titulares (Quien representa al núcleo familiar) D = Dependientes  (Hijos y Conjugues) y A = Adicionales (Padres, Hijos con mayoría de edad cumplida 18 o 21, otros familiares dependientes económicamente).")
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.ArsDestino)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Destino");
            entity.Property(e => e.ArsOrigen)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Origen");
            entity.Property(e => e.AutorizadoSisalril)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("Indica si traspaso por unificación familiar fue autorizado por la SISALRIL.")
                .HasColumnName("Autorizado_SISALRIL");
            entity.Property(e => e.CedulaRepresentante)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Representante de la ARS Destino que registro la solicitud de traspaso por unificación familiar.")
                .HasColumnName("Cedula_Representante");
            entity.Property(e => e.CedulaTitularDependienteSolicitado)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Cedula_Titular_Dependiente_Solicitado");
            entity.Property(e => e.FechaCierre)
                .HasComment("Fecha en que se hace efectivo el proceso de traspaso por unificación familiar cotiza a la TSS.")
                .HasColumnType("datetime")
                .HasColumnName("Fecha_Cierre");
            entity.Property(e => e.LoteNotificacionArsOrigen)
                .HasComment("Numero de lote con el cual UNIPAGO notificó a la ARS origen del traspaso de su afiliado.")
                .HasColumnName("Lote_Notificacion_ARS_Origen");
            entity.Property(e => e.NssTitularDependienteSolicitado)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("NSS_Titular_Dependiente_Solicitado");
            entity.Property(e => e.Nucuf)
                .HasComment("Número único de control de traspaso, número asignado a cada traspaso de unificación familiar, desde su solicitud hasta su operación final.")
                .HasColumnName("NUCUF");
            entity.Property(e => e.NucufEstado)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Estado en que se encuentra el NUCUF del proceso de traspaso por unificación familiar cotiza a la TSS.")
                .HasColumnName("NUCUF_Estado");
            entity.Property(e => e.ParentescoNumeroDestino)
                .HasComment("Número único que representa el parentesco entre un dependiente y el titular de un núcleo familiar en el Seguro Familiar de Salud (SFS).")
                .HasColumnName("Parentesco_Numero_Destino");
            entity.Property(e => e.ParentescoNumeroOrigen)
                .HasComment("Número único que representa el parentesco entre un dependiente y el titular de un núcleo familiar en el Seguro Familiar de Salud (SFS).")
                .HasColumnName("Parentesco_Numero_Origen");
            entity.Property(e => e.RechazoMotivo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("Motivo por e cual se rechazo una solicitud de traspaso.")
                .HasColumnName("Rechazo_Motivo");
            entity.Property(e => e.RechazoNumero)
                .HasComment("Número único de rechazo a una solicitud de traspaso, cuando este es mayor que cero es porque no se genero el NUCT.")
                .HasColumnName("Rechazo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TraspasoTipoNumero)
                .HasComment("Número único que especifica el tipo de traspaso.")
                .HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosNucufTran>(entity =>
        {
            entity.HasKey(e => e.Nucuf);

            entity.ToTable("Traspasos_NUCUF_Trans");

            entity.Property(e => e.Nucuf)
                .ValueGeneratedNever()
                .HasColumnName("NUCUF");
            entity.Property(e => e.AfiliadoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Tipo_Codigo");
            entity.Property(e => e.AfiliadoTitularCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Afiliado_Titular_Cedula");
            entity.Property(e => e.AfiliadoTitularNss).HasColumnName("Afiliado_Titular_NSS");
            entity.Property(e => e.ArsDestinoNumero).HasColumnName("ARS_Destino_Numero");
            entity.Property(e => e.ArsOrigenNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ARS_Origen_Numero");
            entity.Property(e => e.NucufEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("NUCUF_Estado");
            entity.Property(e => e.RechazoMotivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Rechazo_Motivo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RepresentanteCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Representante_Cedula");
            entity.Property(e => e.TraspasoEfectividadFecha)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Efectividad_Fecha");
            entity.Property(e => e.TraspasoSolicitudFecha)
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Solicitud_Fecha");
            entity.Property(e => e.TraspasoTelefonos)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Telefonos");
            entity.Property(e => e.TraspasoTipoFormulario)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Tipo_Formulario");
            entity.Property(e => e.TraspasoTipoNumero).HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosProblemasImagenCatum>(entity =>
        {
            entity.HasKey(e => e.ProblemaImagenNumero);

            entity.ToTable("Traspasos_Problemas_Imagen_Cata", tb => tb.HasComment("Es un catálogo con los tipos de problemas de imágenes de traspasos, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.ProblemaImagenNumero)
                .HasComment("Número único que representa los problemas detectados en la imagen de traspaso.")
                .HasColumnName("Problema_Imagen_Numero");
            entity.Property(e => e.ProblemaImagenDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción de los problemas detectados en  la imagen de traspaso.")
                .HasColumnName("Problema_Imagen_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RespuestaNumero)
                .HasComment("Número único de repuesta dada, después de la evaluación de un formulario de reclamo en un proceso de traspaso.")
                .HasColumnName("Respuesta_Numero");

            entity.HasOne(d => d.RespuestaNumeroNavigation).WithMany(p => p.TraspasosProblemasImagenCata)
                .HasForeignKey(d => d.RespuestaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Problemas_Imagen_Cata_Traspasos_Respuestas_Cata");
        });

        modelBuilder.Entity<TraspasosProblemasImagenDetallesTran>(entity =>
        {
            entity.HasKey(e => new { e.Nuct, e.ProblemaImagenNumero }).HasName("PK_TRP_Problemas_Imagen_Detalles_Trans");

            entity.ToTable("Traspasos_Problemas_Imagen_Detalles_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los detalles de los problemas de imágenes de traspasos evaluados en la SISARIL,  su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.Nuct)
                .HasComment("Número único de control de traspaso, número asignado a cada traspaso desde su solicitud hasta su operación final.")
                .HasColumnName("NUCT");
            entity.Property(e => e.ProblemaImagenNumero)
                .HasComment("Número único que representa los problemas detectados en la imagen de traspaso.")
                .HasColumnName("Problema_Imagen_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.NuctNavigation).WithMany(p => p.TraspasosProblemasImagenDetallesTrans)
                .HasForeignKey(d => d.Nuct)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Problemas_Imagen_Detalles_Trans_Traspasos_NUCT_Trans");

            entity.HasOne(d => d.ProblemaImagenNumeroNavigation).WithMany(p => p.TraspasosProblemasImagenDetallesTrans)
                .HasForeignKey(d => d.ProblemaImagenNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TRP_Problemas_Imagen_Detalles_Trans_Traspasos_Problemas_Imagen_Cata");
        });

        modelBuilder.Entity<TraspasosProcedimientosVistum>(entity =>
        {
            entity.HasKey(e => new { e.GrupoNumero, e.CoberturaNumero }).HasName("PK_Procedimientos_Vista");

            entity.ToTable("Traspasos_Procedimientos_Vista", tb => tb.HasComment("Es una vista de las coberturas según grupo y subgrupos de servicios de salud, utilizados para el registro de los detalles relacionados con traspasos con condición de enfermedad (CDE), su fuente de datos  la tabla Planes Subgrupos Coberturas."));

            entity.Property(e => e.GrupoNumero)
                .HasComment("Número único del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Numero");
            entity.Property(e => e.CoberturaNumero)
                .HasComment("Numero único de cobertura que representa un  insumo, procedimiento médico, material, fármaco,  servicio  general que fue o puede ser prestado.")
                .HasColumnName("Cobertura_Numero");
            entity.Property(e => e.CoberturaAplicaTraspasosCde)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Nos indica si la cobertura (insumo, procedimiento médico, material, fármaco, servicio, etc.) es uno de los procedimiento o actos quirúrgicos que pueden ser reportados en una objeción de traspasos por condición de enfermedad CDE.")
                .HasColumnName("Cobertura_Aplica_Traspasos_CDE");
            entity.Property(e => e.CoberturaDescripcion)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Descripción de la cobertura que representa un  insumo, procedimiento médico, material, fármaco,  servicio  general que fue o puede ser prestado.")
                .HasColumnName("Cobertura_Descripcion");
            entity.Property(e => e.CoberturaTipoDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de cobertura, clasifica las coberturas en Actos Quirúrgicos, Consultas, Fármacos, Estudios radiológicos, Etc.")
                .HasColumnName("Cobertura_Tipo_Descripcion");
            entity.Property(e => e.CoberturaTipoNumero)
                .HasComment("Número único del tipo de cobertura, clasifica las coberturas en Actos Quirúrgicos, Consultas, Fármacos, Estudios radiológicos, Etc.")
                .HasColumnName("Cobertura_Tipo_Numero");
            entity.Property(e => e.CodigoCups)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Es  el código de la clasificación única de procedimientos en salud utilizado por el ministerio de salud de Colombia.")
                .HasColumnName("Codigo_CUPS");
            entity.Property(e => e.GrupoDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Descripción del grupo al cual pertenece el Subgrupo del PDSS.")
                .HasColumnName("Grupo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TraspasosRechazosErroresTran>(entity =>
        {
            entity.HasKey(e => new { e.RechazoNumero, e.ErrorNumero });

            entity.ToTable("Traspasos_Rechazos_Errores_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los errores de las solicitudes de traspasos que son rechazadas, no llegan al proceso de asignación de NUCT, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.RechazoNumero)
                .HasComment("Número único de rechazo a una solicitud de traspaso, cuando este es mayor que cero es porque no se genero el NUCT.")
                .HasColumnName("Rechazo_Numero");
            entity.Property(e => e.ErrorNumero)
                .HasComment("Número único del error relacionado con una columna (Campo), utilizado para documentar en el proceso de validación de la carga de un esquema o de la solicitud de un traspaso.")
                .HasColumnName("Error_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.ErrorNumeroNavigation).WithMany(p => p.TraspasosRechazosErroresTrans)
                .HasForeignKey(d => d.ErrorNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Rechazos_Errores_Trans_Traspasos_Errores_Cata");

            entity.HasOne(d => d.RechazoNumeroNavigation).WithMany(p => p.TraspasosRechazosErroresTrans)
                .HasForeignKey(d => d.RechazoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Rechazos_Errores_Trans_Traspasos_Rechazos_Trans");
        });

        modelBuilder.Entity<TraspasosRechazosTran>(entity =>
        {
            entity.HasKey(e => e.RechazoNumero);

            entity.ToTable("Traspasos_Rechazos_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran las solicitudes de traspasos que son rechazadas, no llegan al proceso de asignación de NUCT, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.RechazoNumero)
                .ValueGeneratedNever()
                .HasComment("Número único de rechazo a una solicitud de traspaso, cuando este es mayor que cero es porque no se genero el NUCT.")
                .HasColumnName("Rechazo_Numero");
            entity.Property(e => e.ArsDestino)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Destino");
            entity.Property(e => e.ArsOrigen)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Origen");
            entity.Property(e => e.CedulaTitular)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Cedula_Titular");
            entity.Property(e => e.FechaActualizacion)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Fecha_Actualizacion");
            entity.Property(e => e.NssTitular)
                .HasComment("Número único que identifica a un afiliado titular dentro del SFS, sobre el cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("NSS_Titular");
            entity.Property(e => e.NumeroSecuencia)
                .HasComment("Número que representan un lote de actualización desde una de las vista estadísticas que nos reporta UNIPAGO.")
                .HasColumnName("Numero_Secuencia");
            entity.Property(e => e.RechazoEstatus)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Estatus en el que se encuentra el proceso de traspaso, (RE u OK), reportado por el SUIR.")
                .HasColumnName("Rechazo_Estatus");
            entity.Property(e => e.RechazoMotivo)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasComment("Motivo por e cual se rechazo una solicitud de traspaso.")
                .HasColumnName("Rechazo_Motivo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RepresentanteCodigo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Número de cedula del representante de la ARS que registro la solicitud de traspaso.")
                .HasColumnName("Representante_Codigo");
            entity.Property(e => e.SeguimientoEnvio)
                .HasComment("Número de seguimiento del envió de la solicitud de traspaso.")
                .HasColumnName("Seguimiento_Envio");
            entity.Property(e => e.SeguimientoReenvio)
                .HasComment("Número de seguimiento del reenvió de la solicitud de traspaso.")
                .HasColumnName("Seguimiento_Reenvio");
            entity.Property(e => e.TitularEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Dirección de correo electrónico del Titular registrado en una solicitud de traspaso.")
                .HasColumnName("Titular_Email");
            entity.Property(e => e.TitularNumeroContrato)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de formulario de afiliación con el que se está relacionando solicitud de traspaso.")
                .HasColumnName("Titular_Numero_Contrato");
            entity.Property(e => e.TitularPreguntaClave)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Pregunta clave seleccionada por el Titular registrado en una solicitud de traspaso.")
                .HasColumnName("Titular_Pregunta_Clave");
            entity.Property(e => e.TitularRespuesta)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Respuesta a la pregunta clave expresada por el Titular registrado en una solicitud de traspaso.")
                .HasColumnName("Titular_Respuesta");
            entity.Property(e => e.TitularTelefonoCelular)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de teléfono móvil del Titular registrado en una solicitud de traspaso.")
                .HasColumnName("Titular_Telefono_Celular");
            entity.Property(e => e.TitularTelefonoEmpresa)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de teléfono de la empresa donde labora el Titular registrado en una solicitud de traspaso.")
                .HasColumnName("Titular_Telefono_Empresa");
            entity.Property(e => e.TitularTelefonoResidencia)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Número de teléfono del lugar de residencia donde labora el Titular registrado en una solicitud de traspaso.")
                .HasColumnName("Titular_Telefono_Residencia");
            entity.Property(e => e.TitularTipoSangre)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Es la descripción del tipo de sangre el Titular registrado en una solicitud de traspaso.")
                .HasColumnName("Titular_Tipo_Sangre");
            entity.Property(e => e.TraspasoEfectividadFecha)
                .HasComment("Fecha en la cual se culmino el proceso de traspaso.")
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Efectividad_Fecha");
            entity.Property(e => e.TraspasoSolicitudFecha)
                .HasComment("Fecha en la cual fue realizada la solicitud del traspaso por el afiliado en la ARS Destino.")
                .HasColumnType("datetime")
                .HasColumnName("Traspaso_Solicitud_Fecha");
            entity.Property(e => e.TraspasoTipoNumero)
                .HasComment("Número único que especifica el tipo de traspaso.")
                .HasColumnName("Traspaso_Tipo_Numero");

            entity.HasOne(d => d.TraspasoTipoNumeroNavigation).WithMany(p => p.TraspasosRechazosTrans)
                .HasForeignKey(d => d.TraspasoTipoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Rechazos_Trans_Traspasos_Tipo_Cata");
        });

        modelBuilder.Entity<TraspasosRespuestaAccionCondicionEnfermedadTran>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero).HasName("PK_TRP_Respuesta_Accion_Condicion_Enfermedad_Trans");

            entity.ToTable("Traspasos_Respuesta_Accion_Condicion_Enfermedad_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .ValueGeneratedNever()
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.AccionSisalrilNumero).HasColumnName("Accion_SISALRIL_Numero");
            entity.Property(e => e.LoteSuirNumero).HasColumnName("Lote_SUIR_Numero");
            entity.Property(e => e.MotivoAccionSisalrilNumero).HasColumnName("Motivo_Accion_SISALRIL_Numero");
            entity.Property(e => e.Nuct).HasColumnName("NUCT");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroNumero).HasColumnName("Registro_Numero");
            entity.Property(e => e.RegistroTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Tipo_Codigo");
            entity.Property(e => e.RespuestaCodigo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Respuesta_Codigo");
            entity.Property(e => e.TraspasoTipoNumero).HasColumnName("Traspaso_Tipo_Numero");
        });

        modelBuilder.Entity<TraspasosRespuestasCatum>(entity =>
        {
            entity.HasKey(e => e.RespuestaNumero);

            entity.ToTable("Traspasos_Respuestas_Cata", tb => tb.HasComment("Es un catálogo que contiene el tipo de respuesta dadas después de la evaluación de un traspaso, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.RespuestaNumero)
                .HasComment("Número único de repuesta dada, después de la evaluación de un formulario de reclamo en un proceso de traspaso.")
                .HasColumnName("Respuesta_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RespuestaDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción de la repuesta dada, después de la evaluación de un formulario o imagen en un proceso de traspaso.")
                .HasColumnName("Respuesta_Descripcion");
            entity.Property(e => e.RespuestaTipo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Clasifica el tipo de la repuesta dada, después de la evaluación de un formulario o imagen de un proceso de traspaso,  si aplican para condición de enfermedad o problema de imagen.")
                .HasColumnName("Respuesta_Tipo");
        });

        modelBuilder.Entity<TraspasosSancionesCatum>(entity =>
        {
            entity.HasKey(e => e.SancionNumero);

            entity.ToTable("Traspasos_Sanciones_Cata", tb => tb.HasComment("Es un catálogo que contiene el tipo de sanciones aplicables después de la evaluación de un traspaso, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SancionNumero)
                .HasComment("Número único de sanción aplicada después de la evaluación de un caso de reclamo en un proceso de traspaso.")
                .HasColumnName("Sancion_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SancionDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción de la sanción aplicada después de la evaluación de un caso de reclamo en un proceso de traspaso.")
                .HasColumnName("Sancion_Descripcion");
            entity.Property(e => e.SancionNivelNumero)
                .HasComment("Indica el grado de falta por la cual la sanción aplicada después de la evaluación de un caso de reclamo en un proceso de traspaso.")
                .HasColumnName("Sancion_Nivel_Numero");

            entity.HasOne(d => d.SancionNivelNumeroNavigation).WithMany(p => p.TraspasosSancionesCata)
                .HasForeignKey(d => d.SancionNivelNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Sanciones_Cata_Traspasos_Sanciones_Niveles_Cata");
        });

        modelBuilder.Entity<TraspasosSancionesNivelesCatum>(entity =>
        {
            entity.HasKey(e => e.SancionNivelNumero);

            entity.ToTable("Traspasos_Sanciones_Niveles_Cata", tb => tb.HasComment("Es un catálogo que contiene los niéveles de gravedad relacionados con el tipo de sanciones aplicables después de la evaluación de un traspaso, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SancionNivelNumero)
                .HasComment("Indica el grado de falta por la cual la sanción aplicada después de la evaluación de un caso de reclamo en un proceso de traspaso.")
                .HasColumnName("Sancion_Nivel_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SancionNivelCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("Código de la sanción aplicada después de la evaluación de un caso de reclamo en un proceso de traspaso.")
                .HasColumnName("Sancion_Nivel_Codigo");
            entity.Property(e => e.SancionNivelDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Descripción de la sanción aplicada después de la evaluación de un caso de reclamo en un proceso de traspaso.")
                .HasColumnName("Sancion_Nivel_Descripcion");
        });

        modelBuilder.Entity<TraspasosSeguimientoProblemaImagenTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote });

            entity.ToTable("Traspasos_Seguimiento_Problema_Imagen_Trans");

            entity.Property(e => e.SeguimientoCodigo)
                .ValueGeneratedOnAdd()
                .HasColumnName("Seguimiento_Codigo");
            entity.Property(e => e.SeguimientoLote).HasColumnName("Seguimiento_Lote");
            entity.Property(e => e.InformeEstadoNumero).HasColumnName("Informe_Estado_Numero");
            entity.Property(e => e.InformeNumero).HasColumnName("Informe_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoErrores)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Seguimiento_Errores");
            entity.Property(e => e.SeguimientoLoteSuir).HasColumnName("Seguimiento_Lote_SUIR");
            entity.Property(e => e.SeguimientoNombreArchivo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Seguimiento_Nombre_Archivo");
            entity.Property(e => e.SeguimientoNotificaciones)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Seguimiento_Notificaciones");
            entity.Property(e => e.SeguimientoPeriodoAnio).HasColumnName("Seguimiento_Periodo_Anio");
            entity.Property(e => e.SeguimientoPeriodoMes).HasColumnName("Seguimiento_Periodo_Mes");
            entity.Property(e => e.SeguimientoRecarga)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Seguimiento_Recarga");
            entity.Property(e => e.SeugimientoAlerta)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Seugimiento_Alerta");
        });

        modelBuilder.Entity<TraspasosSeguimientosCondicionEnfermedadTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoNumero, e.Nuct });

            entity.ToTable("Traspasos_Seguimientos_Condicion_Enfermedad_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .HasComment("Número único que representa la carga de un Archivo de Traspaso por Problema de Imagen y/o Condición de Enfermedad, reportado por el SUIR.")
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.Nuct).HasComment("Número Único de Control de Traspaso con el cual fue autorizado el traspaso mediante consulta al Webservices de autorización de Traspaso de Salud.");
            entity.Property(e => e.AccionNumero)
                .HasComment("Código que indica la acción de SISALRIL (1 = Detener el traspaso, 2 = Continuar con el flujo del traspaso sin tomar en cuenta la notificación de enfermedad de la ARS Origen).")
                .HasColumnName("Accion_Numero");
            entity.Property(e => e.MotivoNumero)
                .HasComment("Código que indica el detalle de la acción tomada por la SISALRIL (ver catalogo de motivos de acción Problema Imagen).")
                .HasColumnName("Motivo_Numero");
            entity.Property(e => e.NotificacionLoteSuirNumero)
                .HasComment("Lote de referencia asignado por el SUIR al archivo de notificación de enfermedad donde se reportó a la SISALRIL cada afiliado.")
                .HasColumnName("Notificacion_Lote_SUIR_Numero");
            entity.Property(e => e.PosicionRegistroNumero)
                .HasComment("Número total de registros que contiene el archivo incluyendo el encabezado, el detalle y el sumario.")
                .HasColumnName("Posicion_Registro_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RespuestaFecha)
                .HasComment("Indica la fecha en la cual se dió repuesta, después de la evaluación de un formulario de reclamo en un proceso de traspaso.")
                .HasColumnType("datetime")
                .HasColumnName("Respuesta_Fecha");
            entity.Property(e => e.RespuestaLoteSuirNumero)
                .HasComment("Número de Respuesta del lote del archivo reportado por el SUIR.")
                .HasColumnName("Respuesta_Lote_SUIR_Numero");
            entity.Property(e => e.RespuestaNumero)
                .HasComment("Número único de repuesta dada, después de la evaluación de un formulario de reclamo en un proceso de traspaso.")
                .HasColumnName("Respuesta_Numero");
            entity.Property(e => e.RespuestaUsuario)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasComment("Indica el usuario que dió repuesta, después de la evaluación de un formulario de reclamo en un proceso de traspaso.")
                .HasColumnName("Respuesta_Usuario");
            entity.Property(e => e.SeguimientoEstadoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("('PE')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Seguimiento_Estado_Codigo");

            entity.HasOne(d => d.AccionNumeroNavigation).WithMany(p => p.TraspasosSeguimientosCondicionEnfermedadTrans)
                .HasForeignKey(d => d.AccionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Seguimientos_Condicion_Enfermedad_Trans_Traspasos_Acciones_Cata");

            entity.HasOne(d => d.RespuestaNumeroNavigation).WithMany(p => p.TraspasosSeguimientosCondicionEnfermedadTrans)
                .HasForeignKey(d => d.RespuestaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Seguimientos_Condicion_Enfermedad_Trans_Traspasos_Respuestas_Cata");

            entity.HasOne(d => d.SeguimientoNumeroNavigation).WithMany(p => p.TraspasosSeguimientosCondicionEnfermedadTrans)
                .HasForeignKey(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Seguimientos_Condicion_Enfermedad_Trans_Traspasos_Seguimientos_Master");
        });

        modelBuilder.Entity<TraspasosSeguimientosEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.SeguimientoEstadoCodigo);

            entity.ToTable("Traspasos_Seguimientos_Estados_Cata");

            entity.Property(e => e.SeguimientoEstadoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("('PE')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Seguimiento_Estado_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoEstadoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Seguimiento_Estado_Descripcion");
            entity.Property(e => e.SeguimientoEstadoNombre)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Seguimiento_Estado_Nombre");
        });

        modelBuilder.Entity<TraspasosSeguimientosMaster>(entity =>
        {
            entity.HasKey(e => e.SeguimientoNumero);

            entity.ToTable("Traspasos_Seguimientos_Master");

            entity.Property(e => e.SeguimientoNumero)
                .HasComment("Número único que representa la carga de un Archivo de Traspaso por Problema de Imagen y/o Condición de Enfermedad, reportado por el SUIR.")
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.PosicionRegistroNumero)
                .HasComment("Número total de registros que contiene el archivo incluyendo el encabezado, el detalle y el sumario.")
                .HasColumnName("Posicion_Registro_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SeguimientoEstadoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("('PE')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Seguimiento_Estado_Codigo");
            entity.Property(e => e.SeguimientoFecha)
                .HasComment("Indica la fecha de cuando generó el número de seguimiento.")
                .HasColumnType("datetime")
                .HasColumnName("Seguimiento_Fecha");
            entity.Property(e => e.SeguimientoNombreArchivoEnvio)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasComment("Nombre del Archivo de Envio que contenie los detalles de los Traspasos, ya sea por Problema de Imagen o Condición de Enfermedad.")
                .HasColumnName("Seguimiento_Nombre_Archivo_Envio");
            entity.Property(e => e.SeguimientoNombreArchivoRespuesta)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasComment("Nombre del Archivo de Respuesta que contenie los detalles de los Traspasos, ya sea por Problema de Imagen o Condición de Enfermedad.")
                .HasColumnName("Seguimiento_Nombre_Archivo_Respuesta");
            entity.Property(e => e.TraspasoSeguimientoTipoNumero).HasColumnName("Traspaso_Seguimiento_Tipo_Numero");

            entity.HasOne(d => d.SeguimientoEstadoCodigoNavigation).WithMany(p => p.TraspasosSeguimientosMasters)
                .HasForeignKey(d => d.SeguimientoEstadoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Seguimientos_Master_Traspasos_Seguimientos_Estados_Cata");

            entity.HasOne(d => d.TraspasoSeguimientoTipoNumeroNavigation).WithMany(p => p.TraspasosSeguimientosMasters)
                .HasForeignKey(d => d.TraspasoSeguimientoTipoNumero)
                .HasConstraintName("FK_Traspasos_Seguimientos_Master_Traspasos_Seguimientos_Tipo_Cata");
        });

        modelBuilder.Entity<TraspasosSeguimientosProblemaImagenTran>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoNumero, e.Nuct });

            entity.ToTable("Traspasos_Seguimientos_Problema_Imagen_Trans");

            entity.Property(e => e.SeguimientoNumero)
                .HasComment("Número único que representa la carga de un Archivo de Traspaso por Problema de Imagen y/o Condición de Enfermedad, reportado por el SUIR.")
                .HasColumnName("Seguimiento_Numero");
            entity.Property(e => e.Nuct).HasComment("Número Único de Control de Traspaso con el cual fue autorizado el traspaso mediante consulta al Webservices de autorización de Traspaso de Salud.");
            entity.Property(e => e.AccionNumero)
                .HasComment("Código que indica la acción de SISALRIL (1 = Detener el traspaso, 2 = Continuar con el flujo del traspaso sin tomar en cuenta la notificación de enfermedad de la ARS Origen).")
                .HasColumnName("Accion_Numero");
            entity.Property(e => e.MotivoNumero)
                .HasComment("Código que indica el detalle de la acción tomada por la SISALRIL (ver catalogo de motivos de acción Problema Imagen).")
                .HasColumnName("Motivo_Numero");
            entity.Property(e => e.NotificacionLoteSuirNumero)
                .HasComment("Lote de referencia asignado por el SUIR al archivo de notificación de enfermedad donde se reportó a la SISALRIL cada afiliado.")
                .HasColumnName("Notificacion_Lote_SUIR_Numero");
            entity.Property(e => e.PosicionRegistroNumero)
                .HasComment("Número total de registros que contiene el archivo incluyendo el encabezado, el detalle y el sumario.")
                .HasColumnName("Posicion_Registro_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RespuestaFecha)
                .HasComment("Indica la fecha en la cual se dió repuesta, después de la evaluación de un formulario de reclamo en un proceso de traspaso.")
                .HasColumnType("datetime")
                .HasColumnName("Respuesta_Fecha");
            entity.Property(e => e.RespuestaLoteSuirNumero)
                .HasComment("Número de Respuesta del lote del archivo reportado por el SUIR.")
                .HasColumnName("Respuesta_Lote_SUIR_Numero");
            entity.Property(e => e.RespuestaNumero)
                .HasComment("Número único de repuesta dada, después de la evaluación de un formulario de reclamo en un proceso de traspaso.")
                .HasColumnName("Respuesta_Numero");
            entity.Property(e => e.RespuestaUsuario)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasComment("Indica el usuario que dió repuesta, después de la evaluación de un formulario de reclamo en un proceso de traspaso.")
                .HasColumnName("Respuesta_Usuario");
            entity.Property(e => e.SeguimientoEstadoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasDefaultValueSql("('PE')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Seguimiento_Estado_Codigo");

            entity.HasOne(d => d.AccionNumeroNavigation).WithMany(p => p.TraspasosSeguimientosProblemaImagenTrans)
                .HasForeignKey(d => d.AccionNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Seguimientos_Problema_Imagen_Trans_Traspasos_Acciones_Cata");

            entity.HasOne(d => d.RespuestaNumeroNavigation).WithMany(p => p.TraspasosSeguimientosProblemaImagenTrans)
                .HasForeignKey(d => d.RespuestaNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Seguimientos_Problema_Imagen_Trans_Traspasos_Respuestas_Cata");

            entity.HasOne(d => d.SeguimientoNumeroNavigation).WithMany(p => p.TraspasosSeguimientosProblemaImagenTrans)
                .HasForeignKey(d => d.SeguimientoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Seguimientos_Problema_Imagen_Trans_Traspasos_Seguimientos_Master");
        });

        modelBuilder.Entity<TraspasosSeguimientosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.TraspasoSeguimientoTipoNumero);

            entity.ToTable("Traspasos_Seguimientos_Tipo_Cata");

            entity.Property(e => e.TraspasoSeguimientoTipoNumero).HasColumnName("Traspaso_Seguimiento_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(75)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TraspasoSeguimientoTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Traspaso_Seguimiento_Tipo_Descripcion");
        });

        modelBuilder.Entity<TraspasosSolicitudesImagenesUnipagoTran>(entity =>
        {
            entity.HasKey(e => e.SolicitudImagenNumero);

            entity.ToTable("Traspasos_Solicitudes_Imagenes_UNIPAGO_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran las solicitudes de imágenes de traspasos realizadas a UNIPAGO,  su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.SolicitudImagenNumero)
                .ValueGeneratedNever()
                .HasComment("Numero de la imagen de solicitud de traspaso.")
                .HasColumnName("Solicitud_Imagen_Numero");
            entity.Property(e => e.Nuct)
                .HasComment("Número único de control de traspaso, número asignado a cada traspaso desde su solicitud hasta su operación final.")
                .HasColumnName("NUCT");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudImagenEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Estado en que se encuentra una solicitud de imagen de traspaso.")
                .HasColumnName("Solicitud_Imagen_Estado");
            entity.Property(e => e.SolicitudImagenFecha)
                .HasComment("Fecha que la cual se solicitó la imagen de traspaso.")
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Imagen_Fecha");
            entity.Property(e => e.SolicitudImagenMotivoRechazo)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasComment("Motivo por el cual se rechazo la solicitó la imagen de traspaso.")
                .HasColumnName("Solicitud_Imagen_Motivo_Rechazo");
            entity.Property(e => e.SolicitudImagenSecuencia)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Secuencia de la imagen de solicitud de traspaso.")
                .HasColumnName("Solicitud_Imagen_Secuencia");
            entity.Property(e => e.SolicitudImagenTipoDocumentro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Tipo de documento de la imagen de solicitud de traspaso.")
                .HasColumnName("Solicitud_Imagen_Tipo_Documentro");

            entity.HasOne(d => d.NuctNavigation).WithMany(p => p.TraspasosSolicitudesImagenesUnipagoTrans)
                .HasForeignKey(d => d.Nuct)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Solicitudes_Imagenes_UNIPAGO_Trans_Traspasos_Master");
        });

        modelBuilder.Entity<TraspasosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.TraspasoTipoNumero).HasName("PK_Trapasos_Tipo_Cata");

            entity.ToTable("Traspasos_Tipo_Cata", tb => tb.HasComment("Es un catálogo con los tipos de traspaso, su fuente de datos son los sistemas internos de la SISALRIL y el SUIR UNIPAGO."));

            entity.Property(e => e.TraspasoTipoNumero)
                .HasComment("Número único que especifica el tipo de traspaso.")
                .HasColumnName("Traspaso_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TraspasoTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Traspaso_Tipo_Descripcion");
            entity.Property(e => e.TraspasoTipoExplicacion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Breve explicación Descripción del estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Traspaso_Tipo_Explicacion");
        });

        modelBuilder.Entity<TraspasosUsuariosAsignacionesTran>(entity =>
        {
            entity.HasKey(e => new { e.TraspasoSolicitudTipoNumero, e.Nuct, e.EmpleadoNumero });

            entity.ToTable("Traspasos_Usuarios_Asignaciones_Trans");

            entity.Property(e => e.TraspasoSolicitudTipoNumero).HasColumnName("Traspaso_Solicitud_Tipo_Numero");
            entity.Property(e => e.EmpleadoNumero).HasColumnName("Empleado_Numero");
            entity.Property(e => e.AccionNumero).HasColumnName("Accion_Numero");
            entity.Property(e => e.EmpleadoSupervisorNumero).HasColumnName("Empleado_Supervisor_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A = Activo, I = Inactivo.")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de registro.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Registro del usuario.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudNotificacionEnviada)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Solicitud_Notificacion_Enviada");
            entity.Property(e => e.SolicitudNotificacionEnviadaFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Notificacion_Enviada_Fecha");
        });

        modelBuilder.Entity<TraspasosUsuariosEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.UsuarioEstadoNumero)
                .HasName("PK_Traspaso_Usua_Esta")
                .IsClustered(false);

            entity.ToTable("Traspasos_Usuarios_Estados_Cata");

            entity.Property(e => e.UsuarioEstadoNumero)
                .HasComment("Código único que representa el estado de situación de la clave de usuario de PSS para la consulta de afiliados.")
                .HasColumnName("Usuario_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.UsuarioEstadoDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Descripción del código único que representa el estado de situación de la clave de usuario de PSS para la consulta de afiliados.")
                .HasColumnName("Usuario_Estado_Descripcion");
            entity.Property(e => e.UsuarioEstadoExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Breve explicación de la descripción del código único que representa el estado de situación de la clave de usuario de PSS para la consulta de afiliados.")
                .HasColumnName("Usuario_Estado_Explicacion");
        });

        modelBuilder.Entity<TraspasosUsuariosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.UsuarioCedula, e.RegistroFechaHistorico });

            entity.ToTable("Traspasos_Usuarios_Historico");

            entity.Property(e => e.UsuarioCedula)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasComment("Número de Cédula de la persona que fue registrada como usuario.")
                .HasColumnName("Usuario_Cedula");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.EmpleadorRegistroPatronal)
                .HasComment("Es el número único que le asigna la Tesorería de la Seguridad Social a cada uno de los empleadores que se registran en dicha institución.    ")
                .HasColumnName("Empleador_Registro_Patronal");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");
            entity.Property(e => e.SupervirorInmediatoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Superviror_Inmediato_NSS");
            entity.Property(e => e.SupervisorInmediatoCuenta)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Supervisor_Inmediato_Cuenta");
            entity.Property(e => e.SupervisorInmediatoTelefono)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Supervisor_Inmediato_Telefono");
            entity.Property(e => e.UsuarioCargo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Cargo del usuario dentro de la emplresa")
                .HasColumnName("Usuario_Cargo");
            entity.Property(e => e.UsuarioDireccion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Usuario_Direccion");
            entity.Property(e => e.UsuarioEstadoNumero).HasColumnName("Usuario_Estado_Numero");
            entity.Property(e => e.UsuarioNombreCompleto)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Nombres de la persona que fue registrada como usuario.")
                .HasColumnName("Usuario_Nombre_Completo");
            entity.Property(e => e.UsuarioNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Usuario_NSS");
            entity.Property(e => e.UsuarioSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("Sexo del usuario")
                .HasColumnName("Usuario_Sexo");
            entity.Property(e => e.UsuarioTelefono1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Telefono de contacto1")
                .HasColumnName("Usuario_Telefono_1");
            entity.Property(e => e.UsuarioTelefono2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Telefono de contacto2")
                .HasColumnName("Usuario_Telefono_2");
        });

        modelBuilder.Entity<TraspasosUsuariosMaster>(entity =>
        {
            entity.HasKey(e => new { e.UsuarioCedula, e.EmpleadorRegistroPatronal, e.SolicitudNumero });

            entity.ToTable("Traspasos_Usuarios_Master");

            entity.Property(e => e.UsuarioCedula)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasComment("Número de Cédula de la persona que fue registrada como usuario.")
                .HasColumnName("Usuario_Cedula");
            entity.Property(e => e.EmpleadorRegistroPatronal)
                .HasComment("Es el número único que le asigna la Tesorería de la Seguridad Social a cada uno de los empleadores que se registran en dicha institución.    ")
                .HasColumnName("Empleador_Registro_Patronal");
            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");
            entity.Property(e => e.MotivoBaja)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Motivo_Baja");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SupervirorInmediatoNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Superviror_Inmediato_NSS");
            entity.Property(e => e.SupervisorInmediatoCuenta)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Supervisor_Inmediato_Cuenta");
            entity.Property(e => e.SupervisorInmediatoTelefono)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Supervisor_Inmediato_Telefono");
            entity.Property(e => e.UsuarioCargo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/A')")
                .HasComment("Cargo del usuario dentro de la emplresa")
                .HasColumnName("Usuario_Cargo");
            entity.Property(e => e.UsuarioDireccion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Usuario_Direccion");
            entity.Property(e => e.UsuarioEstadoFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Usuario_Estado_Fecha");
            entity.Property(e => e.UsuarioEstadoNumero).HasColumnName("Usuario_Estado_Numero");
            entity.Property(e => e.UsuarioNombreCompleto)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Nombres de la persona que fue registrada como usuario.")
                .HasColumnName("Usuario_Nombre_Completo");
            entity.Property(e => e.UsuarioNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Usuario_NSS");
            entity.Property(e => e.UsuarioSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("Sexo del usuario")
                .HasColumnName("Usuario_Sexo");
            entity.Property(e => e.UsuarioTelefono1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Telefono de contacto1")
                .HasColumnName("Usuario_Telefono_1");
            entity.Property(e => e.UsuarioTelefono2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Telefono de contacto2")
                .HasColumnName("Usuario_Telefono_2");

            entity.HasOne(d => d.UsuarioEstadoNumeroNavigation).WithMany(p => p.TraspasosUsuariosMasters)
                .HasForeignKey(d => d.UsuarioEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Usuarios_Master_Traspasos_Usuarios_Estados_Cata");

            entity.HasOne(d => d.UsuarioNssNavigation).WithMany(p => p.TraspasosUsuariosMasters)
                .HasForeignKey(d => d.UsuarioNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Usuarios_Master_TSS_Ciudadanos_Master");
        });

        modelBuilder.Entity<TraspasosUsuariosMotivosCatum>(entity =>
        {
            entity.HasKey(e => e.MotivoNumero).HasName("PK_Traspasos_Usuarios_Motivos_Cata_2");

            entity.ToTable("Traspasos_Usuarios_Motivos_Cata");

            entity.Property(e => e.MotivoNumero)
                .HasComment("Numero unico de indentificacion de motivos")
                .HasColumnName("Motivo_Numero");
            entity.Property(e => e.MotivoDescripcion)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Descripcion de los motivos ")
                .HasColumnName("Motivo_Descripcion");
            entity.Property(e => e.MotivoMensaje)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Mensaje de descripcion de motivo")
                .HasColumnName("Motivo_Mensaje");
            entity.Property(e => e.MotivoRechazo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Motivo Rechazo S = si, N no")
                .HasColumnName("Motivo_Rechazo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TraspasosUsuariosSolicitudesEstadosCatum>(entity =>
        {
            entity.HasKey(e => e.SolicitudEstadoNumero)
                .HasName("PK_Usuc_Soli_Usuc")
                .IsClustered(false);

            entity.ToTable("Traspasos_Usuarios_Solicitudes_Estados_Cata");

            entity.Property(e => e.SolicitudEstadoNumero)
                .HasComment("Número único que representa el estado de la solicitud que realiza el usuario a traves de la oficina virtual.")
                .HasColumnName("Solicitud_Estado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudEstadoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción del estado de la solicitud que realiza el usuario en la oficina virtual.")
                .HasColumnName("Solicitud_Estado_Descripcion");
            entity.Property(e => e.SolicitudEstadoProceso)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('S')")
                .IsFixedLength()
                .HasComment("Indica si el estado de la solicitud realizada por el usuario en la oficina virtual se realiza por un proceso (S=SI,N=NO).")
                .HasColumnName("Solicitud_Estado_Proceso");
        });

        modelBuilder.Entity<TraspasosUsuariosSolicitudesHistorico>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudNumero, e.RegistroFechaHistorico })
                .HasName("PK_Trasp_Usu_SoliH")
                .IsClustered(false);

            entity.ToTable("Traspasos_Usuarios_Solicitudes_Historico");

            entity.Property(e => e.SolicitudNumero)
                .HasComment("Es una secuencia de 1 a N que depende de la solicitud generada en la oficina virtual,  y representa cada solicitud que realiza el usuario en la oficina virtual.")
                .HasColumnName("Solicitud_Numero");
            entity.Property(e => e.RegistroFechaHistorico)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha_Historico");
            entity.Property(e => e.DocumentoNumero)
                .HasComment("Número del documento (ARCHI) donde se solcito la activación de la clave para el usuario.")
                .HasColumnName("Documento_Numero");
            entity.Property(e => e.EmpleadorRazonSocial)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Es la razón social registrada por el empleador en la DGII, y que utiliza la Tesorería de la Seguridad Social en su registro de empleadores. Representa el nombre oficial de cada empresa o institución en el país.")
                .HasColumnName("Empleador_Razon_Social");
            entity.Property(e => e.EmpleadorRegistroPatronal)
                .HasComment("Es el número único que le asigna la Tesorería de la Seguridad Social a cada uno de los empleadores que se registran en dicha institución.    ")
                .HasColumnName("Empleador_Registro_Patronal");
            entity.Property(e => e.EmpleadorRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Registro Nacional de Contribuyente de la Empresa que reportó al trabajador.")
                .HasColumnName("Empleador_RNC_o_Cedula");
            entity.Property(e => e.EmpleadorTelefono)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Teléfono del empleador.")
                .HasColumnName("Empleador_Telefono");
            entity.Property(e => e.MotivoNumero)
                .HasDefaultValueSql("((1))")
                .HasComment("Código que indica el detalle de la acción tomada por la SISALRIL.")
                .HasColumnName("Motivo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudEstadoFecha)
                .HasComment("Indica la fecha del estado de la solicitud.")
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Estado_Fecha");
            entity.Property(e => e.SolicitudEstadoNumero)
                .HasComment("Es el número que representa el estado de la solicitud realizada a traves de la oficina virtual, dependerá de las validaciones que se realizan en las solicitudes de la oficina virtual.")
                .HasColumnName("Solicitud_Estado_Numero");
            entity.Property(e => e.SolicitudFecha)
                .HasComment("Para reportar la fecha en que se realizo solicitud en la oficina virtual  DDMMYYYY ")
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
            entity.Property(e => e.SupervisorInmediatoCargo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Supervisor_Inmediato_Cargo");
            entity.Property(e => e.SupervisorInmediatoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Supervisor_Inmediato_Cedula");
            entity.Property(e => e.SupervisorInmediatoCuenta)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Es la cuenta de correo electronica del usuario que realiza la solicitud en la oficina virtual, esta puede ser una cuenta personal o una cuenta empresarial.")
                .HasColumnName("Supervisor_Inmediato_Cuenta");
            entity.Property(e => e.SupervisorInmediatoNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Supervisor_Inmediato_Nombre");
            entity.Property(e => e.SupervisorInmediatoTelefono1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Supervisor_Inmediato_Telefono_1");
            entity.Property(e => e.SupervisorInmediatoTelefono2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Supervisor_Inmediato_Telefono_2");
            entity.Property(e => e.UsuarioCargo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Cargo que desempeña el usuario.")
                .HasColumnName("Usuario_Cargo");
            entity.Property(e => e.UsuarioCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Usuario_Cedula");
            entity.Property(e => e.UsuarioDireccion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Usuario_Direccion");
            entity.Property(e => e.UsuarioNombres)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Es el nombre propio de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Usuario_Nombres");
            entity.Property(e => e.UsuarioNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Usuario_NSS");
            entity.Property(e => e.UsuarioPrimerApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Es el primer apellido de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Usuario_Primer_Apellido");
            entity.Property(e => e.UsuarioSegundoApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Es el segundo apellido de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Usuario_Segundo_Apellido");
            entity.Property(e => e.UsuarioSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Sexo de la persona (Afiliado)  (F=femenino, M=masculino, N = No Especificado).")
                .HasColumnName("Usuario_Sexo");
            entity.Property(e => e.UsuarioTelefono1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Telefono número 1 del usuario que realiza la solicitud a traves de la oficina virtual de la SISALRIL.")
                .HasColumnName("Usuario_Telefono_1");
            entity.Property(e => e.UsuarioTelefono2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Telefono número 2 del usuario que realiza la solicitud a traves de la oficina virtual de la SISALRIL.")
                .HasColumnName("Usuario_Telefono_2");

            entity.HasOne(d => d.SolicitudNumeroNavigation).WithMany(p => p.TraspasosUsuariosSolicitudesHistoricos)
                .HasForeignKey(d => d.SolicitudNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Usuarios_Solicitudes_Historico_Traspasos_Usuarios_Solicitudes_Trans");
        });

        modelBuilder.Entity<TraspasosUsuariosSolicitudesRequerimientosTran>(entity =>
        {
            entity.HasKey(e => new { e.SolicitudNumero, e.RequerimientoNumero });

            entity.ToTable("Traspasos_Usuarios_Solicitudes_Requerimientos_Trans");

            entity.Property(e => e.SolicitudNumero).HasColumnName("Solicitud_Numero");
            entity.Property(e => e.RequerimientoNumero).HasColumnName("Requerimiento_Numero");
            entity.Property(e => e.DocumentoCodigo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Documento_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RequerimientoEstadoFecha)
                .HasColumnType("datetime")
                .HasColumnName("Requerimiento_Estado_Fecha");
            entity.Property(e => e.RequerimientoEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Requerimiento_Estado_Nota");
            entity.Property(e => e.RequerimientoEstadoNumero).HasColumnName("Requerimiento_Estado_Numero");

            entity.HasOne(d => d.SolicitudNumeroNavigation).WithMany(p => p.TraspasosUsuariosSolicitudesRequerimientosTrans)
                .HasForeignKey(d => d.SolicitudNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Usuarios_Solicitudes_Requerimientos_Trans_Traspasos_Usuarios_Solicitudes_Trans");
        });

        modelBuilder.Entity<TraspasosUsuariosSolicitudesTran>(entity =>
        {
            entity.HasKey(e => e.SolicitudNumero)
                .HasName("PK_Trasp_Usu_Soli")
                .IsClustered(false);

            entity.ToTable("Traspasos_Usuarios_Solicitudes_Trans");

            entity.Property(e => e.SolicitudNumero)
                .HasComment("Es una secuencia de 1 a N que depende de la solicitud generada en la oficina virtual,  y representa cada solicitud que realiza el usuario en la oficina virtual.")
                .HasColumnName("Solicitud_Numero");
            entity.Property(e => e.BajaComentario)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Baja_Comentario");
            entity.Property(e => e.BajaDefinitiva).HasColumnName("Baja_Definitiva");
            entity.Property(e => e.DocumentoNumero)
                .HasComment("Número del documento (ARCHI) donde se solcito la activación de la clave para el usuario.")
                .HasColumnName("Documento_Numero");
            entity.Property(e => e.EmpleadorRazonSocial)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Es la razón social registrada por el empleador en la DGII, y que utiliza la Tesorería de la Seguridad Social en su registro de empleadores. Representa el nombre oficial de cada empresa o institución en el país.")
                .HasColumnName("Empleador_Razon_Social");
            entity.Property(e => e.EmpleadorRegistroPatronal)
                .HasComment("Es el número único que le asigna la Tesorería de la Seguridad Social a cada uno de los empleadores que se registran en dicha institución.    ")
                .HasColumnName("Empleador_Registro_Patronal");
            entity.Property(e => e.EmpleadorRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Registro Nacional de Contribuyente de la Empresa que reportó al trabajador.")
                .HasColumnName("Empleador_RNC_o_Cedula");
            entity.Property(e => e.EmpleadorTelefono)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Teléfono del empleador.")
                .HasColumnName("Empleador_Telefono");
            entity.Property(e => e.MotivoBajaNumero)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Motivo_Baja_Numero");
            entity.Property(e => e.MotivoNumero)
                .HasDefaultValueSql("((1))")
                .HasComment("Código que indica el detalle de la acción tomada por la SISALRIL.")
                .HasColumnName("Motivo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SolicitudEstadoFecha)
                .HasComment("Indica la fecha del estado de la solicitud.")
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Estado_Fecha");
            entity.Property(e => e.SolicitudEstadoNota)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasComment("Es el número que representa el estado de la solicitud realizada a traves de la oficina virtual, dependerá de las validaciones que se realizan en las solicitudes de la oficina virtual.")
                .HasColumnName("Solicitud_Estado_Nota");
            entity.Property(e => e.SolicitudEstadoNumero)
                .HasComment("Es el número que representa el estado de la solicitud realizada a traves de la oficina virtual, dependerá de las validaciones que se realizan en las solicitudes de la oficina virtual.")
                .HasColumnName("Solicitud_Estado_Numero");
            entity.Property(e => e.SolicitudFecha)
                .HasComment("Para reportar la fecha en que se realizo solicitud en la oficina virtual  DDMMYYYY ")
                .HasColumnType("datetime")
                .HasColumnName("Solicitud_Fecha");
            entity.Property(e => e.SolicitudMotivo)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasComment("Esta Columna guarda el motivo de la baja de la solicitud ")
                .HasColumnName("Solicitud_Motivo");
            entity.Property(e => e.SupervisorInmediatoCargo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Supervisor_Inmediato_Cargo");
            entity.Property(e => e.SupervisorInmediatoCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Supervisor_Inmediato_Cedula");
            entity.Property(e => e.SupervisorInmediatoCuenta)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Es la cuenta de correo electronica del usuario que realiza la solicitud en la oficina virtual, esta puede ser una cuenta personal o una cuenta empresarial.")
                .HasColumnName("Supervisor_Inmediato_Cuenta");
            entity.Property(e => e.SupervisorInmediatoNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Supervisor_Inmediato_Nombre");
            entity.Property(e => e.SupervisorInmediatoTelefono1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Supervisor_Inmediato_Telefono_1");
            entity.Property(e => e.SupervisorInmediatoTelefono2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Supervisor_Inmediato_Telefono_2");
            entity.Property(e => e.UsuarioCargo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('N/E')")
                .HasComment("Cargo que desempeña el usuario.")
                .HasColumnName("Usuario_Cargo");
            entity.Property(e => e.UsuarioCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Usuario_Cedula");
            entity.Property(e => e.UsuarioDireccion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Usuario_Direccion");
            entity.Property(e => e.UsuarioMail)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Usuario_Mail");
            entity.Property(e => e.UsuarioNombres)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Es el nombre propio de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Usuario_Nombres");
            entity.Property(e => e.UsuarioNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Usuario_NSS");
            entity.Property(e => e.UsuarioPrimerApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Es el primer apellido de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Usuario_Primer_Apellido");
            entity.Property(e => e.UsuarioSegundoApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Es el segundo apellido de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Usuario_Segundo_Apellido");
            entity.Property(e => e.UsuarioSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasComment("Sexo de la persona (Afiliado)  (F=femenino, M=masculino, N = No Especificado).")
                .HasColumnName("Usuario_Sexo");
            entity.Property(e => e.UsuarioTelefono1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Telefono número 1 del usuario que realiza la solicitud a traves de la oficina virtual de la SISALRIL.")
                .HasColumnName("Usuario_Telefono_1");
            entity.Property(e => e.UsuarioTelefono2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Telefono número 2 del usuario que realiza la solicitud a traves de la oficina virtual de la SISALRIL.")
                .HasColumnName("Usuario_Telefono_2");

            entity.HasOne(d => d.MotivoBajaNumeroNavigation).WithMany(p => p.TraspasosUsuariosSolicitudesTrans)
                .HasForeignKey(d => d.MotivoBajaNumero)
                .HasConstraintName("FK_Traspasos_Usuarios_Solicitudes_Trans_Afiliados_Motivos_Baja_Cata");

            entity.HasOne(d => d.MotivoNumeroNavigation).WithMany(p => p.TraspasosUsuariosSolicitudesTrans)
                .HasForeignKey(d => d.MotivoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Usuarios_Solicitudes_Trans_Traspasos_Usuarios_Motivos_Cata");

            entity.HasOne(d => d.SolicitudEstadoNumeroNavigation).WithMany(p => p.TraspasosUsuariosSolicitudesTrans)
                .HasForeignKey(d => d.SolicitudEstadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Traspasos_Usuarios_Solicitudes_Trans_Traspasos_Usuarios_Solicitudes_Estados_Cata");
        });

        modelBuilder.Entity<TraspasosVecimientosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.TraspasoVencimientoTipoNumero);

            entity.ToTable("Traspasos_Vecimientos_Tipo_Cata", tb => tb.HasComment("Es un catálogo que contiene los tipos de vencimientos que afectan los traspaso, su fuente de datos son los sistemas internos de la SISALRIL."));

            entity.Property(e => e.TraspasoVencimientoTipoNumero)
                .HasComment("Número único que especifica el tipo de vencimiento de traspaso.")
                .HasColumnName("Traspaso_Vencimiento_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TraspasoVencimientoTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Descripción  que especifica del tipo de vencimiento de traspaso.")
                .HasColumnName("Traspaso_Vencimiento_Tipo_Descripcion");
        });

        modelBuilder.Entity<TrpSeguimiento>(entity =>
        {
            entity.HasKey(e => new { e.SeguimientoCodigo, e.SeguimientoLote });

            entity.ToTable("TRP_SEGUIMIENTO");

            entity.Property(e => e.SeguimientoCodigo)
                .ValueGeneratedOnAdd()
                .HasColumnType("decimal(18, 0)");
            entity.Property(e => e.SeguimientoLote).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.EstadoCodigo).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.FechaDig).HasColumnType("datetime");
            entity.Property(e => e.InformeCodigo).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LoteSuir)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Lote_SUIR");
            entity.Property(e => e.SeguimientoAlerta)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SeguimientoErrores)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SeguimientoNombreArchivo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SeguimientoNotificaciones)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SeguimientoRecarga)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Usuario)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TssActividadesEconomicasCatum>(entity =>
        {
            entity.HasKey(e => e.ActividadEconomicaNumero);

            entity.ToTable("TSS_Actividades_Economicas_Cata", tb => tb.HasComment("Es un catálogo con los clasificaciones de las actividades económicas de los empleadores, su fuente de datos la vista de publicadas por TSS, codificación de la DGII."));

            entity.Property(e => e.ActividadEconomicaNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que identifica la actividad económica del catálogo de actividades económicas con la que se clasifican los empleadores.")
                .HasColumnName("Actividad_Economica_Numero");
            entity.Property(e => e.ActividadEconomicaCategoriaRiesgo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Categor¡a de riesgo asignada por el SDSS a cada actividad económica, dentro de catálogo de actividades económicas con la que se clasifican los empleadores.")
                .HasColumnName("Actividad_Economica_Categoria_Riesgo");
            entity.Property(e => e.ActividadEconomicaDescripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasComment("Descripción de la actividad económica del catálogo de actividades económicas con la que se clasifican los empleadores.")
                .HasColumnName("Actividad_Economica_Descripcion");
            entity.Property(e => e.ActividadEconomicaSalarioMinimo)
                .HasComment("Salario mínimo especificado para una actividad económica, dentro de catálogo de actividades económicas con la que se clasifican los empleadores. ")
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("Actividad_Economica_Salario_Minimo");
            entity.Property(e => e.CiiuClaseCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código de la clase a la que corresponde el código CIIU clasificación internacional industrial uniforme de la división de estadísticas de la ONU, dentro de catálogo de actividades económicas con la que se clasifican los empleadores.")
                .HasColumnName("CIIU_Clase_Codigo");
            entity.Property(e => e.CiiuCodigo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("Código de clasificación internacional industrial uniforme de la división de estadísticas de la ONU,  equivalente a la actividad económica del catálogo de actividades económicas con la que se clasifican los empleadores.")
                .HasColumnName("CIIU_Codigo");
            entity.Property(e => e.CiiuCodigoVarios)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasComment("Códigos de clasificación internacional industrial uniforme de la división de estad¡sticas de la ONU,  dentro de catálogo de actividades económicas con la que se clasifican los empleadores, varios Código CIIU para  una misma actividad económica.")
                .HasColumnName("CIIU_Codigo_Varios");
            entity.Property(e => e.CiiuGrupoNumero)
                .HasComment("Código del grupo al que pertenece el código CIIU,  clasificación internacional industrial uniforme de la división de estadísticas de la ONU, dentro de catálogo de actividades económicas con la que se clasifican los empleadores.")
                .HasColumnName("CIIU_Grupo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.CiiuClaseCodigoNavigation).WithMany(p => p.TssActividadesEconomicasCata)
                .HasForeignKey(d => d.CiiuClaseCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSS_Actividades_Economicas_Cata_Comunes_CIIU_Clases_Cata");

            entity.HasOne(d => d.CiiuGrupoNumeroNavigation).WithMany(p => p.TssActividadesEconomicasCata)
                .HasForeignKey(d => d.CiiuGrupoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSS_Actividades_Economicas_Cata_Comunes_CIIU_Grupos_Cata");
        });

        modelBuilder.Entity<TssCedulasActualizacionesSisalrilTran>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TSS_Cedulas_Actualizaciones_SISALRIL_Trans");

            entity.Property(e => e.AfiliadoTitularNss).HasColumnName("Afiliado_Titular_Nss");
            entity.Property(e => e.ArsNumero).HasColumnName("Ars_Numero");
            entity.Property(e => e.ArsNumeroSolicitante).HasColumnName("Ars_Numero_Solicitante");
            entity.Property(e => e.CiudadanoNoDocumento)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_No_Documento");
            entity.Property(e => e.ControlNumero)
                .ValueGeneratedOnAdd()
                .HasColumnName("Control_Numero");
            entity.Property(e => e.DatosCargadosTss)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('N')")
                .IsFixedLength()
                .HasColumnName("Datos_Cargados_TSS");
            entity.Property(e => e.DocumentoEstado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Documento_Estado");
            entity.Property(e => e.DocumentoRegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Documento_Registro_Fecha");
            entity.Property(e => e.DocumentoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Documento_Tipo_Codigo");
            entity.Property(e => e.ErrorNumero)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Error_Numero");
            entity.Property(e => e.FechaRespuestaTss)
                .HasColumnType("datetime")
                .HasColumnName("Fecha_Respuesta_TSS");
            entity.Property(e => e.LoteNumero).HasColumnName("Lote_Numero");
            entity.Property(e => e.ParentescoNumero).HasColumnName("Parentesco_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroNumero).HasColumnName("Registro_Numero");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.RegistroUsuarioSolicita)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario_Solicita");
            entity.Property(e => e.UltimaFechaActualizacion)
                .HasColumnType("datetime")
                .HasColumnName("Ultima_Fecha_Actualizacion");
            entity.Property(e => e.Usuario)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TssCiudadanosMaster>(entity =>
        {
            entity.HasKey(e => e.CiudadanoNss).IsClustered(false);

            entity.ToTable("TSS_Ciudadanos_Master", tb => tb.HasComment("Es un maestro con los detalles de todos los ciudadanos del SDS, su fuente directa de datos son las actualización es la TSS, su fuentes indirectas son  el padrón de cedulados de la JCE y los menores registrados a través del SUIR. "));

            entity.HasIndex(e => e.CiudadanoNoDocumento, "Ciudadano_No_Documento");

            entity.HasIndex(e => e.CiudadanoNombreCompleto, "IX_TSS_Ciudadanos_Master_NC").IsClustered();

            entity.HasIndex(e => e.CiudadanoNoDocumento, "Indx_TSS_Ciudadanos_Master_No_Documento").HasFillFactor(90);

            entity.HasIndex(e => e.CiudadanoFechaNacimientoDti, "TSS_Ciudadanos_Master_FechaNAc");

            entity.Property(e => e.CiudadanoNss)
                .ValueGeneratedNever()
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Ciudadano_NSS");
            entity.Property(e => e.CausaInhabilidadNumero)
                .HasComment("Es el número único que representa la causa de inhabilidad de un documento de identificación (Generalmente Cédula) la cual tiene algún impedimento por la JCE y registrado en el padrón de ciudadanos de la TSS. Dicho número se repite según el tipo de causa.")
                .HasColumnName("Causa_Inhabilidad_Numero");
            entity.Property(e => e.CausaTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Tipo de causa de inhabilidad de un documento de identificación (Generalmente Cédula) la cual tiene algún impedimento por la JCE y registrado en el padrón de ciudadanos de la TSS. Dicho número se repite según el tipo de causa.")
                .HasColumnName("Causa_Tipo_codigo");
            entity.Property(e => e.CiudadanoActaNacimientoAnio)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Año correspondiente al acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Ciudadano_Acta_Nacimiento_Anio");
            entity.Property(e => e.CiudadanoActaNacimientoFolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de folio  del acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Ciudadano_Acta_Nacimiento_Folio");
            entity.Property(e => e.CiudadanoActaNacimientoLibro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de libro del acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Ciudadano_Acta_Nacimiento_Libro");
            entity.Property(e => e.CiudadanoActaNacimientoMunicipio)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasComment("Numero de municipio del acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Ciudadano_Acta_Nacimiento_Municipio");
            entity.Property(e => e.CiudadanoActaNacimientoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de acta  del documento de acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Ciudadano_Acta_Nacimiento_Numero");
            entity.Property(e => e.CiudadanoActaNacimientoOficialia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número de la oficialía civil correspondiente al  acta de nacimiento de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Ciudadano_Acta_Nacimiento_Oficialia");
            entity.Property(e => e.CiudadanoActaNacimientoUnida)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Campo donde se unifican todos los campos del acta de nacimiento como una sola cadena, su fin es facilitar la validación en procesos de carga de afilados a planes alternativos.")
                .HasColumnName("Ciudadano_Acta_Nacimiento_Unida");
            entity.Property(e => e.CiudadanoCedulaFormateada)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Es la cédula de identidad y electoral del ciudadano con el formato que incluye los guiones.")
                .HasColumnName("Ciudadano_Cedula_Formateada");
            entity.Property(e => e.CiudadanoFechaNacimiento)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Es la fecha de nacimiento de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Ciudadano_Fecha_Nacimiento");
            entity.Property(e => e.CiudadanoFechaNacimientoDti)
                .HasComment("Es la fecha de nacimiento de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnType("datetime")
                .HasColumnName("Ciudadano_Fecha_Nacimiento_DTI");
            entity.Property(e => e.CiudadanoNoDocumento)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Ciudadano_No_Documento");
            entity.Property(e => e.CiudadanoNoDocumentoAnterior)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Es único número de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Ciudadano_No_Documento_Anterior");
            entity.Property(e => e.CiudadanoNombreCompleto)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Es nombre completo (Nombres  y Apellidos) de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Ciudadano_Nombre_Completo");
            entity.Property(e => e.CiudadanoNombres)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es el nombre propio de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Ciudadano_Nombres");
            entity.Property(e => e.CiudadanoNssEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el NSS del ciudadano esta activo o anulado.")
                .HasColumnName("Ciudadano_NSS_Estatus");
            entity.Property(e => e.CiudadanoPrimerApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Es el primer apellido de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Ciudadano_Primer_Apellido");
            entity.Property(e => e.CiudadanoSegundoApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Es el segundo apellido de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Ciudadano_Segundo_Apellido");
            entity.Property(e => e.CiudadanoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Sexo de la persona (Afiliado)  (F=femenino, M=masculino).")
                .HasColumnName("Ciudadano_Sexo");
            entity.Property(e => e.DocumentoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el código que identifica el tipo de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) para los casos requeridos de las personas registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Documento_Tipo_Codigo");
            entity.Property(e => e.EstadoCivilCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el código de estado civil de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Estado_Civil_Codigo");
            entity.Property(e => e.FechaActualizacionTss)
                .HasComment("Fecha ultima en que la TSS actualizo el registro del ciudadano.")
                .HasColumnType("datetime")
                .HasColumnName("Fecha_Actualizacion_TSS");
            entity.Property(e => e.NacionalidadNumero)
                .HasComment("Número único que representa la nacionalidad de la persona o afiliado.")
                .HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.ProvinciaNumero)
                .HasComment("Número único de la provincia según catálogo de la JCE.  (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Provincia_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('sa')")
                .HasComment("suser_sname()")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SangreTipoNumero)
                .HasComment("Es el código único que representa el tipo de sangre de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Sangre_Tipo_Numero");
        });

        modelBuilder.Entity<TssCiudadanosMaster999>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TSS_CIUDADANOS_MASTER_999");

            entity.Property(e => e.CausaInhabilidadNumero).HasColumnName("Causa_Inhabilidad_Numero");
            entity.Property(e => e.CausaTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Causa_Tipo_codigo");
            entity.Property(e => e.CiudadanoActaNacimientoAnio)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Anio");
            entity.Property(e => e.CiudadanoActaNacimientoFolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Folio");
            entity.Property(e => e.CiudadanoActaNacimientoLibro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Libro");
            entity.Property(e => e.CiudadanoActaNacimientoMunicipio)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Municipio");
            entity.Property(e => e.CiudadanoActaNacimientoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Numero");
            entity.Property(e => e.CiudadanoActaNacimientoOficialia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Oficialia");
            entity.Property(e => e.CiudadanoActaNacimientoUnida)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Unida");
            entity.Property(e => e.CiudadanoCedulaFormateada)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Cedula_Formateada");
            entity.Property(e => e.CiudadanoFechaNacimiento)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Fecha_Nacimiento");
            entity.Property(e => e.CiudadanoFechaNacimientoDti)
                .HasColumnType("smalldatetime")
                .HasColumnName("Ciudadano_Fecha_Nacimiento_DTI");
            entity.Property(e => e.CiudadanoNoDocumento)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_No_Documento");
            entity.Property(e => e.CiudadanoNoDocumentoAnterior)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_No_Documento_Anterior");
            entity.Property(e => e.CiudadanoNombreCompleto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Nombre_Completo");
            entity.Property(e => e.CiudadanoNombres)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Nombres");
            entity.Property(e => e.CiudadanoNss).HasColumnName("Ciudadano_NSS");
            entity.Property(e => e.CiudadanoNssEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Ciudadano_NSS_Estatus");
            entity.Property(e => e.CiudadanoPrimerApellido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Primer_Apellido");
            entity.Property(e => e.CiudadanoSegundoApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Segundo_Apellido");
            entity.Property(e => e.CiudadanoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Ciudadano_Sexo");
            entity.Property(e => e.DocumentoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Documento_Tipo_Codigo");
            entity.Property(e => e.EstadoCivilCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Estado_Civil_Codigo");
            entity.Property(e => e.FechaActualizacionTss)
                .HasColumnType("smalldatetime")
                .HasColumnName("Fecha_Actualizacion_TSS");
            entity.Property(e => e.NacionalidadNumero).HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.ProvinciaNumero).HasColumnName("Provincia_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("smalldatetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SangreTipoNumero).HasColumnName("Sangre_Tipo_Numero");
        });

        modelBuilder.Entity<TssCiudadanosMasterUp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_tss_Ciudadanos_master_Up");

            entity.Property(e => e.CausaInhabilidadNumero).HasColumnName("Causa_Inhabilidad_Numero");
            entity.Property(e => e.CausaTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Causa_Tipo_codigo");
            entity.Property(e => e.CiudadanoActaNacimientoAnio)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Anio");
            entity.Property(e => e.CiudadanoActaNacimientoFolio)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Folio");
            entity.Property(e => e.CiudadanoActaNacimientoLibro)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Libro");
            entity.Property(e => e.CiudadanoActaNacimientoMunicipio)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Municipio");
            entity.Property(e => e.CiudadanoActaNacimientoNumero)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Numero");
            entity.Property(e => e.CiudadanoActaNacimientoOficialia)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Oficialia");
            entity.Property(e => e.CiudadanoActaNacimientoUnida)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Acta_Nacimiento_Unida");
            entity.Property(e => e.CiudadanoCedulaFormateada)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Cedula_Formateada");
            entity.Property(e => e.CiudadanoFechaNacimiento)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Fecha_Nacimiento");
            entity.Property(e => e.CiudadanoFechaNacimientoDti)
                .HasColumnType("smalldatetime")
                .HasColumnName("Ciudadano_Fecha_Nacimiento_DTI");
            entity.Property(e => e.CiudadanoNoDocumento)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_No_Documento");
            entity.Property(e => e.CiudadanoNoDocumentoAnterior)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_No_Documento_Anterior");
            entity.Property(e => e.CiudadanoNombreCompleto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Nombre_Completo");
            entity.Property(e => e.CiudadanoNombres)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Nombres");
            entity.Property(e => e.CiudadanoNss).HasColumnName("Ciudadano_NSS");
            entity.Property(e => e.CiudadanoNssEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Ciudadano_NSS_Estatus");
            entity.Property(e => e.CiudadanoPrimerApellido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Primer_Apellido");
            entity.Property(e => e.CiudadanoSegundoApellido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Ciudadano_Segundo_Apellido");
            entity.Property(e => e.CiudadanoSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Ciudadano_Sexo");
            entity.Property(e => e.DocumentoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Documento_Tipo_Codigo");
            entity.Property(e => e.EstadoCivilCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Estado_Civil_Codigo");
            entity.Property(e => e.FechaActualizacionTss)
                .HasColumnType("smalldatetime")
                .HasColumnName("Fecha_Actualizacion_TSS");
            entity.Property(e => e.NacionalidadNumero).HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.ProvinciaNumero).HasColumnName("Provincia_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("smalldatetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SangreTipoNumero).HasColumnName("Sangre_Tipo_Numero");
            entity.Property(e => e.TrabajadorNss).HasColumnName("trabajador_nss");
        });

        modelBuilder.Entity<TssControlCargaVistasTran>(entity =>
        {
            entity.HasKey(e => e.ControlCargaTablaSecuencia);

            entity.ToTable("TSS_Control_Carga_Vistas_Trans", tb =>
                {
                    tb.HasTrigger("TSS_Control_Carga_Vistas_Trans_Delete");
                    tb.HasTrigger("TSS_Control_Carga_Vistas_Trans_Update");
                });

            entity.Property(e => e.ControlCargaTablaSecuencia).HasColumnName("Control_Carga_Tabla_Secuencia");
            entity.Property(e => e.ControlCargaFecha)
                .HasColumnType("datetime")
                .HasColumnName("Control_Carga_Fecha");
            entity.Property(e => e.ControlCargaRegistrosActualizados).HasColumnName("Control_Carga_Registros_Actualizados");
            entity.Property(e => e.ControlCargaRegistrosBajados).HasColumnName("Control_Carga_Registros_Bajados");
            entity.Property(e => e.ControlCargaRegistrosInsertados).HasColumnName("Control_Carga_Registros_Insertados");
            entity.Property(e => e.ControlCargaTablaNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Control_Carga_Tabla_Nombre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TssCuentasBancosTipoCatum>(entity =>
        {
            entity.HasKey(e => e.CuentaTipoNumero).HasName("PK_Tss_Cuentas_Tipo_Cata");

            entity.ToTable("TSS_Cuentas_Bancos_Tipo_Cata");

            entity.Property(e => e.CuentaTipoNumero).HasColumnName("Cuenta_Tipo_Numero");
            entity.Property(e => e.CuentaTipoDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Cuenta_Tipo_Descripcion");
            entity.Property(e => e.CuentaTipoExplicacion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Cuenta_Tipo_Explicacion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TssDocumentoTipoCatum>(entity =>
        {
            entity.HasKey(e => e.DocumentoTipoCodigo);

            entity.ToTable("TSS_Documento_Tipo_Cata", tb => tb.HasComment("Es un catálogo con los tipo de documento con lo que se registran  los ciudadanos del SDS, su fuente directa de datos son las actualización es la TSS."));

            entity.Property(e => e.DocumentoTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el código que identifica el tipo de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) para los casos requeridos de las personas registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Documento_Tipo_Codigo");
            entity.Property(e => e.DocumentoTipoDescripcion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasComment("Es la descripción  del tipo de documento de identificación oficial (Cedula, residencia, Pasaporte, etc.) para los casos requeridos de las personas registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Documento_Tipo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TssEmpleadoresActivosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PeriodoFactura, e.EmpleadorId });

            entity.ToTable("TSS_Empleadores_Activos_Historico");

            entity.Property(e => e.PeriodoFactura).HasColumnName("Periodo_Factura");
            entity.Property(e => e.EmpleadorId).HasColumnName("Empleador_ID");
            entity.Property(e => e.ActividadEconomicaNumero).HasColumnName("Actividad_Economica_Numero");
            entity.Property(e => e.CategoriaRiesgo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Categoria_Riesgo");
            entity.Property(e => e.EmpleadorFechaRegistroTss).HasColumnName("Empleador_Fecha_Registro_TSS");
            entity.Property(e => e.EmpresaTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Empresa_Tipo_Codigo");
            entity.Property(e => e.MunicipioNumero).HasColumnName("Municipio_Numero");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.SectorEconomicoNumero).HasColumnName("Sector_Economico_Numero");
        });

        modelBuilder.Entity<TssEmpleadoresHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PeriodoFactura, e.EmpleadorRegistroPatronal });

            entity.ToTable("TSS_Empleadores_Historico");

            entity.Property(e => e.PeriodoFactura).HasColumnName("Periodo_Factura");
            entity.Property(e => e.EmpleadorRegistroPatronal).HasColumnName("Empleador_Registro_Patronal");
            entity.Property(e => e.CategoriaRiesgo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Categoria_Riesgo");
            entity.Property(e => e.EmpleadorEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Empleador_Estatus");
            entity.Property(e => e.EmpleadorFechaActualizacionTss)
                .HasColumnType("datetime")
                .HasColumnName("Empleador_Fecha_Actualizacion_TSS");
            entity.Property(e => e.EmpleadorFechaRegistroTss)
                .HasColumnType("datetime")
                .HasColumnName("Empleador_Fecha_Registro_TSS");
            entity.Property(e => e.EmpleadorSalarioSeguridadSocial)
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("Empleador_Salario_Seguridad_Social");
            entity.Property(e => e.EmpleadorTotalTrabajadores).HasColumnName("Empleador_Total_Trabajadores");
            entity.Property(e => e.EmpresaTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Empresa_Tipo_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TssEmpleadoresMaster>(entity =>
        {
            entity.HasKey(e => e.EmpleadorRegistroPatronal);

            entity.ToTable("TSS_Empleadores_Master", tb => tb.HasComment("Es un maestro donde se registran los datos de los empleadores empadronados en el  SDSS por la TSS, su fuente de datos la vista de publicadas por TSS diariamente."));

            entity.HasIndex(e => e.EmpleadorRncOCedula, "Idx_TSS_Empleadores_Master_RNCCEDULA");

            entity.Property(e => e.EmpleadorRegistroPatronal)
                .ValueGeneratedNever()
                .HasComment("Es el número único que le asigna la Tesorería de la Seguridad Social a cada uno de los empleadores que se registran en dicha institución.    ")
                .HasColumnName("Empleador_Registro_Patronal");
            entity.Property(e => e.ActividadEconomicaNumero)
                .HasComment("Número único que identifica la actividad económica del catálogo de actividades económicas con la que se clasifican los empleadores.")
                .HasColumnName("Actividad_Economica_Numero");
            entity.Property(e => e.CategoriaRiesgo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Código de la categoría de riesgo asignada a un empleador para establecer la taza de cotización con la que debe cotizar para el Seguro de Riesgos Laborales.")
                .HasColumnName("Categoria_Riesgo");
            entity.Property(e => e.EmpleadorCuentaBanco)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Numero de cuenta del banco del empleador.")
                .HasColumnName("Empleador_Cuenta_Banco");
            entity.Property(e => e.EmpleadorDireccionCalle)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nombre de la calle o carretera de la dirección donde está la sede o domicilio principal del empleador.")
                .HasColumnName("Empleador_Direccion_Calle");
            entity.Property(e => e.EmpleadorDireccionEdificio)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasComment("Nombre del edificio o residencial de la dirección donde está la sede o domicilio principal del empleador.")
                .HasColumnName("Empleador_Direccion_Edificio");
            entity.Property(e => e.EmpleadorDireccionNumero)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasComment("Número relacionado con la dirección donde está la sede o domicilio principal del empleador.")
                .HasColumnName("Empleador_Direccion_Numero");
            entity.Property(e => e.EmpleadorDireccionPiso)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasComment("Piso relacionado con la dirección donde está la sede o domicilio principal del empleador.")
                .HasColumnName("Empleador_Direccion_Piso");
            entity.Property(e => e.EmpleadorDireccionSector)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasComment("Sector de la dirección donde está la sede o domicilio principal del empleador.")
                .HasColumnName("Empleador_Direccion_Sector");
            entity.Property(e => e.EmpleadorEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Email del empleador.")
                .HasColumnName("Empleador_EMAIL");
            entity.Property(e => e.EmpleadorEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el empleador esta de Alta o de Baja en la TSS.")
                .HasColumnName("Empleador_Estatus");
            entity.Property(e => e.EmpleadorFechaActualizacionTss)
                .HasComment("Fecha ultima en que la TSS actualizo el registro.")
                .HasColumnType("datetime")
                .HasColumnName("Empleador_Fecha_Actualizacion_TSS");
            entity.Property(e => e.EmpleadorFechaRegistroTss)
                .HasComment("Fecha en que la TSS realizo el registro.")
                .HasColumnType("datetime")
                .HasColumnName("Empleador_Fecha_Registro_TSS");
            entity.Property(e => e.EmpleadorNombreComercial)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Nombre comercial del empleador.")
                .HasColumnName("Empleador_Nombre_Comercial");
            entity.Property(e => e.EmpleadorRazonSocial)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Es la razón social registrada por el empleador en la DGII, y que utiliza la Tesorería de la Seguridad Social en su registro de empleadores. Representa el nombre oficial de cada empresa o institución en el país.")
                .HasColumnName("Empleador_Razon_Social");
            entity.Property(e => e.EmpleadorRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("RNC (Registro Nacional Contribuyente) o Cédula del empleador.")
                .HasColumnName("Empleador_RNC_o_Cedula");
            entity.Property(e => e.EmpleadorRncOCedulaSfs)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("RNC (Registro Nacional Contribuyente) o Cédula del empleador.")
                .HasColumnName("Empleador_RNC_o_Cedula_SFS");
            entity.Property(e => e.EmpleadorSalarioSeguridadSocial)
                .HasComment("Salario utilizado para cuantificar la cantidad de trabajadores  que perciben un mismo salario  bajo un grupo de criterios dentro de un consolidado (Tabla con datos calculados por grupos).")
                .HasColumnType("decimal(14, 2)")
                .HasColumnName("Empleador_Salario_Seguridad_Social");
            entity.Property(e => e.EmpleadorTelefono1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Teléfono 1 del empleador.")
                .HasColumnName("Empleador_Telefono_1");
            entity.Property(e => e.EmpleadorTelefono2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Teléfono 2 del empleador.")
                .HasColumnName("Empleador_Telefono_2");
            entity.Property(e => e.EmpleadorTipoCuenta)
                .HasComment("Tipo de cuenta bancaria del empleador.")
                .HasColumnName("Empleador_Tipo_Cuenta");
            entity.Property(e => e.EmpleadorTotalTrabajadores)
                .HasComment("Cantidad de trabajadores en nomina de un empleador actualmente.")
                .HasColumnName("Empleador_Total_Trabajadores");
            entity.Property(e => e.EmpresaTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código que representa el Tipo de empresa según el sector al que pertenece (Pública centralizada, Pública No Centralizada, Privada y Mixta).")
                .HasColumnName("Empresa_Tipo_Codigo");
            entity.Property(e => e.EntidadRecaudadoraNumero)
                .HasComment("Número único que identifica a cada entidad recaudadora en el SUIR TSS.")
                .HasColumnName("Entidad_Recaudadora_Numero");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Número único del municipio según catálogo de la JCE. (Donde está ubicado una entidad o persona, o sucedió un hecho).")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SectorEconomicoNumero)
                .HasComment("Número único del sector económico según clasificación de la TSS para los empleadores (Gobierno, Salud, ONG, Zona Franca, etc.).")
                .HasColumnName("Sector_Economico_Numero");
            entity.Property(e => e.SectorSalarialNumero)
                .HasComment("Número único que identifica un sector salarial para los empleadores registrados en la TSS.")
                .HasColumnName("Sector_Salarial_Numero");
        });

        modelBuilder.Entity<TssEmpleadoresTotalVista99>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TSS_Empleadores_Total_Vista99");

            entity.Property(e => e.ActividadEconomicaNumero).HasColumnName("Actividad_Economica_Numero");
            entity.Property(e => e.CategoriaRiesgo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Categoria_Riesgo");
            entity.Property(e => e.EmpleadorEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Empleador_Estatus");
            entity.Property(e => e.EmpleadorFechaActualizacionTss)
                .HasColumnType("datetime")
                .HasColumnName("Empleador_Fecha_Actualizacion_TSS");
            entity.Property(e => e.EmpleadorFechaRegistroTss)
                .HasColumnType("datetime")
                .HasColumnName("Empleador_Fecha_Registro_TSS");
            entity.Property(e => e.EmpleadorNombreComercial)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Empleador_Nombre_Comercial");
            entity.Property(e => e.EmpleadorRazonSocial)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Empleador_Razon_Social");
            entity.Property(e => e.EmpleadorRegistroPatronal).HasColumnName("Empleador_Registro_Patronal");
            entity.Property(e => e.EmpleadorRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Empleador_RNC_o_Cedula");
            entity.Property(e => e.EmpleadorTelefono1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Empleador_Telefono_1");
            entity.Property(e => e.EmpleadorTelefono2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Empleador_Telefono_2");
            entity.Property(e => e.EmpresaTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Empresa_Tipo_Codigo");
            entity.Property(e => e.EntidadRecaudadoraNumero).HasColumnName("Entidad_Recaudadora_Numero");
            entity.Property(e => e.MunicipioNumero).HasColumnName("Municipio_Numero");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.SectorEconomicoNumero).HasColumnName("Sector_Economico_Numero");
            entity.Property(e => e.SectorSalarialNumero).HasColumnName("Sector_Salarial_Numero");
        });

        modelBuilder.Entity<TssEmpleadoresTotalVistaEs04072022>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TSS_Empleadores_Total_Vista_ES_04072022");

            entity.Property(e => e.ActividadEconomicaNumero).HasColumnName("Actividad_Economica_Numero");
            entity.Property(e => e.CategoriaRiesgo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Categoria_Riesgo");
            entity.Property(e => e.EmpleadorEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Empleador_Estatus");
            entity.Property(e => e.EmpleadorFechaActualizacionTss)
                .HasColumnType("datetime")
                .HasColumnName("Empleador_Fecha_Actualizacion_TSS");
            entity.Property(e => e.EmpleadorFechaRegistroTss)
                .HasColumnType("datetime")
                .HasColumnName("Empleador_Fecha_Registro_TSS");
            entity.Property(e => e.EmpleadorNombreComercial)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Empleador_Nombre_Comercial");
            entity.Property(e => e.EmpleadorRazonSocial)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Empleador_Razon_Social");
            entity.Property(e => e.EmpleadorRegistroPatronal).HasColumnName("Empleador_Registro_Patronal");
            entity.Property(e => e.EmpleadorRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Empleador_RNC_o_Cedula");
            entity.Property(e => e.EmpleadorTelefono1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Empleador_Telefono_1");
            entity.Property(e => e.EmpleadorTelefono2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Empleador_Telefono_2");
            entity.Property(e => e.EmpresaTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Empresa_Tipo_Codigo");
            entity.Property(e => e.EntidadRecaudadoraNumero).HasColumnName("Entidad_Recaudadora_Numero");
            entity.Property(e => e.MunicipioNumero).HasColumnName("Municipio_Numero");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.SectorEconomicoNumero).HasColumnName("Sector_Economico_Numero");
            entity.Property(e => e.SectorSalarialNumero).HasColumnName("Sector_Salarial_Numero");
        });

        modelBuilder.Entity<TssEmpleadoresTotalVistum>(entity =>
        {
            entity.HasKey(e => e.EmpleadorRegistroPatronal).HasName("PK_Tss_Empleadores_Total_Vista");

            entity.ToTable("TSS_Empleadores_Total_Vista");

            entity.Property(e => e.EmpleadorRegistroPatronal)
                .ValueGeneratedNever()
                .HasColumnName("Empleador_Registro_Patronal");
            entity.Property(e => e.ActividadEconomicaNumero).HasColumnName("Actividad_Economica_Numero");
            entity.Property(e => e.CategoriaRiesgo)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("Categoria_Riesgo");
            entity.Property(e => e.EmpleadorEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Empleador_Estatus");
            entity.Property(e => e.EmpleadorFechaActualizacionTss)
                .HasColumnType("datetime")
                .HasColumnName("Empleador_Fecha_Actualizacion_TSS");
            entity.Property(e => e.EmpleadorFechaRegistroTss)
                .HasColumnType("datetime")
                .HasColumnName("Empleador_Fecha_Registro_TSS");
            entity.Property(e => e.EmpleadorNombreComercial)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Empleador_Nombre_Comercial");
            entity.Property(e => e.EmpleadorRazonSocial)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Empleador_Razon_Social");
            entity.Property(e => e.EmpleadorRncOCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Empleador_RNC_o_Cedula");
            entity.Property(e => e.EmpleadorTelefono1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Empleador_Telefono_1");
            entity.Property(e => e.EmpleadorTelefono2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Empleador_Telefono_2");
            entity.Property(e => e.EmpresaTipoCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Empresa_Tipo_Codigo");
            entity.Property(e => e.EntidadRecaudadoraNumero).HasColumnName("Entidad_Recaudadora_Numero");
            entity.Property(e => e.MunicipioNumero).HasColumnName("Municipio_Numero");
            entity.Property(e => e.SectorEconomicoNumero).HasColumnName("Sector_Economico_Numero");
            entity.Property(e => e.SectorSalarialNumero).HasColumnName("Sector_Salarial_Numero");
        });

        modelBuilder.Entity<TssEntidadesRecaudadorasCatum>(entity =>
        {
            entity.HasKey(e => e.EntidadRecaudadoraNumero);

            entity.ToTable("TSS_Entidades_Recaudadoras_Cata", tb => tb.HasComment("Es un catálogo con las entidades recaudadoras (Bancos y Asociaciones de ahorro, etc.) con la que se relacionan las cuenta de los empleadores, su fuente de datos la vista de publicadas por TSS."));

            entity.Property(e => e.EntidadRecaudadoraNumero)
                .HasComment("Número único que identifica a cada entidad recaudadora en el SUIR TSS.")
                .HasColumnName("Entidad_Recaudadora_Numero");
            entity.Property(e => e.EntidadRecaudadoraNombre)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Nombre de la entidad recaudadora en el SUIR TSS.")
                .HasColumnName("Entidad_Recaudadora_Nombre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TssEstadosCivilCatum>(entity =>
        {
            entity.HasKey(e => e.EstadoCivilCodigo);

            entity.ToTable("TSS_Estados_Civil_Cata", tb => tb.HasComment("Es un catálogo con los tipos de estado civil,  según codificación de la JCE, su fuente de datos son las vistas que nos publica la TSS."));

            entity.Property(e => e.EstadoCivilCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Es el código de estado civil de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Estado_Civil_Codigo");
            entity.Property(e => e.EstadoCivilDescripcion)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasComment("Es la descripción del estado civil de cada persona registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Estado_Civil_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TssInhabilidadJceTipoCatum>(entity =>
        {
            entity.HasKey(e => new { e.CausaInhabilidadNumero, e.CausaTipoCodigo });

            entity.ToTable("TSS_Inhabilidad_JCE_Tipo_Cata", tb => tb.HasComment("Es un catálogo con los detalles de los tipos de inamovilidad de documentos (cédulas),  según codificación de la JCE, su fuente de datos son las vista que nos publica la TSS."));

            entity.Property(e => e.CausaInhabilidadNumero)
                .HasComment("Es el número único que representa la causa de inhabilidad de un documento de identificación (Generalmente Cédula) la cual tiene algún impedimento por la JCE y registrado en el padrón de ciudadanos de la TSS. Dicho número se repite según el tipo de causa.")
                .HasColumnName("Causa_Inhabilidad_Numero");
            entity.Property(e => e.CausaTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Tipo de causa de inhabilidad de un documento de identificación (Generalmente Cédula) la cual tiene algún impedimento por la JCE y registrado en el padrón de ciudadanos de la TSS. Dicho número se repite según el tipo de causa.")
                .HasColumnName("Causa_Tipo_Codigo");
            entity.Property(e => e.CausaInhabilidadDescripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Es la descripción de la causa de inhabilidad de un documento de identificación (Generalmente Cédula) la cual tiene algún impedimento por la JCE y registrado en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Causa_Inhabilidad_Descripcion");
            entity.Property(e => e.CausaTipoDescripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Es la descripción del tipo  de causa de inhabilidad de un documento de identificación (Generalmente Cédula) la cual tiene algún impedimento por la JCE y registrado en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Causa_Tipo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TssNacionalidadesCatum>(entity =>
        {
            entity.HasKey(e => e.NacionalidadNumero);

            entity.ToTable("TSS_Nacionalidades_Cata", tb => tb.HasComment("Es un catálogo de las nacionalidades, su fuente de actualización es la TSS."));

            entity.Property(e => e.NacionalidadNumero)
                .ValueGeneratedNever()
                .HasComment("Número único que representa la nacionalidad de la persona o afiliado.")
                .HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.NacionalidadDescripcion)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Descripción de la nacionalidad de la persona o afiliado.")
                .HasColumnName("Nacionalidad_Descripcion");
            entity.Property(e => e.NacionalidadPaisNombre)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Es el nombre del pais correspondiente a la nacionalidad de la persona o afiliado.")
                .HasColumnName("Nacionalidad_Pais_Nombre");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TssPensionadosDispersionesTran>(entity =>
        {
            entity.HasKey(e => new { e.PensionadoNumero, e.PeriodoFactura, e.ArsNumero });

            entity.ToTable("TSS_Pensionados_Dispersiones_Trans");

            entity.Property(e => e.PensionadoNumero)
                .HasComment("Número de carnet de cada pensionado dentro de los procesos de afiliación y dispersión del Plan Especial Transitorio para Pensionadas del Ministerio de Hacienda.")
                .HasColumnName("Pensionado_Numero");
            entity.Property(e => e.PeriodoFactura)
                .HasComment("Es el año y mes correspondiente al período de factura,  este período es en él se factura (Generación de NP) a los empleadores basado en sus nóminas depositadas en las TSS.")
                .HasColumnName("Periodo_Factura");
            entity.Property(e => e.ArsNumero)
                .HasComment("Número único que identifica a la ARS que reporto el hecho o a la cual pertenecía el afiliado sobre el cual se reporto o registro un hecho o situación.")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.DispersionFecha)
                .HasComment("Fecha de la dispersión de los capitas a las ARS/ARL.")
                .HasColumnType("datetime")
                .HasColumnName("Dispersion_Fecha");
            entity.Property(e => e.DispersionFechaRegistroTss)
                .HasComment("Fecha en que la TSS realizo el registro.")
                .HasColumnType("datetime")
                .HasColumnName("Dispersion_Fecha_Registro_TSS");
            entity.Property(e => e.DispersionMonto)
                .HasComment("Monto Dispersado por el o los afiliados a la ARS/ARL.")
                .HasColumnType("decimal(6, 2)")
                .HasColumnName("Dispersion_Monto");
            entity.Property(e => e.DispersionRegistroDispersado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Identifica los casos de afiliados pensionados que están como candidatos para la dispersión de un periodo específico y fueron o no dispersados, esta columna podrá contener los caracteres  (S/N) según se disperse o no por el o los  pensionado (s).")
                .HasColumnName("Dispersion_Registro_Dispersado");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.PensionadoNumeroNavigation).WithMany(p => p.TssPensionadosDispersionesTrans)
                .HasForeignKey(d => d.PensionadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSS_Pensionados_Dispersiones_Trans_TSS_Pensionados_Master");
        });

        modelBuilder.Entity<TssPensionadosHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PeriodoCorte, e.PensionadoNumero });

            entity.ToTable("TSS_Pensionados_Historico");

            entity.Property(e => e.PeriodoCorte).HasColumnName("Periodo_Corte");
            entity.Property(e => e.PensionadoNumero).HasColumnName("Pensionado_Numero");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.CiudadanoNss).HasColumnName("Ciudadano_NSS");
            entity.Property(e => e.InstitucionNumero).HasColumnName("Institucion_Numero");
            entity.Property(e => e.PensionadoDireccion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Pensionado_Direccion");
            entity.Property(e => e.PensionadoDocumentoNo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Pensionado_Documento_NO");
            entity.Property(e => e.PensionadoFechaAfiliacion).HasColumnName("Pensionado_Fecha_Afiliacion");
            entity.Property(e => e.PensionadoFechaBajaSeh).HasColumnName("Pensionado_Fecha_Baja_SEH");
            entity.Property(e => e.PensionadoFechaDesafiliacion).HasColumnName("Pensionado_Fecha_Desafiliacion");
            entity.Property(e => e.PensionadoFechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Fecha_Nacimiento");
            entity.Property(e => e.PensionadoFechaRegistroTss).HasColumnName("Pensionado_Fecha_Registro_TSS");
            entity.Property(e => e.PensionadoMontoPension)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("Pensionado_Monto_Pension");
            entity.Property(e => e.PensionadoNombre)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Pensionado_Nombre");
            entity.Property(e => e.PensionadoTelefono)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Pensionado_Telefono");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.StatusCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Status_Codigo");

            entity.HasOne(d => d.PensionadoNumeroNavigation).WithMany(p => p.TssPensionadosHistoricos)
                .HasForeignKey(d => d.PensionadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSS_Pensionados_Historico_TSS_Pensionados_Master");
        });

        modelBuilder.Entity<TssPensionadosMaster>(entity =>
        {
            entity.HasKey(e => e.PensionadoNumero);

            entity.ToTable("TSS_Pensionados_Master");

            entity.Property(e => e.PensionadoNumero)
                .ValueGeneratedNever()
                .HasComment("Codigó del pensionado")
                .HasColumnName("Pensionado_Numero");
            entity.Property(e => e.ArsNumero)
                .HasComment("ARS que le corresponde segun el decreto y procedimiento establecido")
                .HasColumnName("ARS_Numero");
            entity.Property(e => e.CiudadanoNss)
                .HasComment("ID que representa el numero de seguridad social creado en la tabla SRS_CIAUDADANOS_T")
                .HasColumnName("Ciudadano_NSS");
            entity.Property(e => e.InstitucionNumero)
                .HasComment("Codigó de la institución donde fue pensionado")
                .HasColumnName("Institucion_Numero");
            entity.Property(e => e.PensionadoDireccion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Direccion provista por la SEH")
                .HasColumnName("Pensionado_Direccion");
            entity.Property(e => e.PensionadoDocumentoNo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Número de documento provisto por SEH (Cédula en el caso de Dominicano) ")
                .HasColumnName("Pensionado_Documento_NO");
            entity.Property(e => e.PensionadoFechaAfiliacion)
                .HasComment("Fecha en la que se completo la afiliacion")
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Fecha_Afiliacion");
            entity.Property(e => e.PensionadoFechaBajaSeh)
                .HasComment("Fecha en la que se dio de baja de la base de datos de pensionados")
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Fecha_Baja_SEH");
            entity.Property(e => e.PensionadoFechaDesafiliacion)
                .HasComment("Fecha en la que se desafilio el pensionado de la ARS")
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Fecha_Desafiliacion");
            entity.Property(e => e.PensionadoFechaNacimiento)
                .HasComment("Fecha de nacimiento (Es necesario para los indocumentados)")
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Fecha_Nacimiento");
            entity.Property(e => e.PensionadoFechaRegistroTss)
                .HasComment("Fecha en la que se registro el pensionado en la ARS, pendiente de envio de documentos.")
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Fecha_Registro_TSS");
            entity.Property(e => e.PensionadoMontoPension)
                .HasComment("Monto de la pension del pensionado")
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("Pensionado_Monto_Pension");
            entity.Property(e => e.PensionadoNombre)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Nombre del pensionado")
                .HasColumnName("Pensionado_Nombre");
            entity.Property(e => e.PensionadoTelefono)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Número provisto por la SEH")
                .HasColumnName("Pensionado_Telefono");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A= Activo, I= Inactivo")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha del registro ")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Nombre del usuario ")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.StatusCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("OK= Avtivo, BA= Debaja de la cartera, AF = Pendiente de ser afiliado,  PE = Pendiente de completar la documentacion electronica, CA= Cancelado")
                .HasColumnName("Status_Codigo");

            entity.HasOne(d => d.StatusCodigoNavigation).WithMany(p => p.TssPensionadosMasters)
                .HasForeignKey(d => d.StatusCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSS_Pensionados_Master_TSS_Pensionados_Status_Cata");
        });

        modelBuilder.Entity<TssPensionadosMotivoBajaCatum>(entity =>
        {
            entity.HasKey(e => e.MotivoBajaCodigo);

            entity.ToTable("TSS_Pensionados_Motivo_Baja_Cata");

            entity.Property(e => e.MotivoBajaCodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Código de baja del pensionado")
                .HasColumnName("Motivo_Baja_Codigo");
            entity.Property(e => e.MotivoBajaDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripcion de baja del pensionado")
                .HasColumnName("Motivo_Baja_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Muestra el esta del registro A=Activo, I=Inactivo")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de creacion o modificacion del registro")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Resgistra el usuario que registro o modifico el registro")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TssPensionadosNovedadesDetallesTipoCatum>(entity =>
        {
            entity.HasKey(e => e.NovedadDetalleTipoCodigo);

            entity.ToTable("TSS_Pensionados_Novedades_Detalles_Tipo_Cata");

            entity.Property(e => e.NovedadDetalleTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Codigo del tipo de  novedad")
                .HasColumnName("Novedad_Detalle_Tipo_Codigo");
            entity.Property(e => e.NovedadDetalleTipoDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasComment("Descripción del tipo de novedad")
                .HasColumnName("Novedad_Detalle_Tipo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Estado del registro A=Activo, I= Inactivo")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha de creacion o modificacion del registro")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Usuario que modifico el registro")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TssPensionadosNovedadesDetallesTran>(entity =>
        {
            entity.HasKey(e => new { e.NovedadNumero, e.NovedadDetalleSecuencia });

            entity.ToTable("TSS_Pensionados_Novedades_Detalles_Trans");

            entity.HasIndex(e => e.PensionadoNumero, "IDX_TSS_Pensionados_Novedades_Detalles_Pensionado");

            entity.Property(e => e.NovedadNumero)
                .HasComment("ID de Novedad")
                .HasColumnName("Novedad_Numero");
            entity.Property(e => e.NovedadDetalleSecuencia)
                .HasComment("Secuencia única para identificar un registro dentro de la novedad")
                .HasColumnName("Novedad_Detalle_Secuencia");
            entity.Property(e => e.ArsInspcrito)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasComment("Si el pensionado esta inscrito en una ARS")
                .HasColumnName("ARS_Inspcrito");
            entity.Property(e => e.CiudadanoNss)
                .HasComment("Numero de seguridad social")
                .HasColumnName("Ciudadano_NSS");
            entity.Property(e => e.ConyugeDireccion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Direccion de residencia del conyuge")
                .HasColumnName("Conyuge_Direccion");
            entity.Property(e => e.ConyugeDocumentoNo)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasComment("Número de cedula del conyuge")
                .HasColumnName("Conyuge_Documento_NO");
            entity.Property(e => e.ConyugeDocumentoTipo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("Tipo de documento del conyuge (Cedula o Pasaporte)")
                .HasColumnName("Conyuge_Documento_Tipo");
            entity.Property(e => e.ConyugeEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Correo electronico del conyuge")
                .HasColumnName("Conyuge_EMAIL");
            entity.Property(e => e.ConyugeFechaNacimiento)
                .HasComment("Fecha de nacimiento del conyuge (AAAMMDD)")
                .HasColumnType("datetime")
                .HasColumnName("Conyuge_Fecha_Nacimiento");
            entity.Property(e => e.ConyugeMunicipioNumero)
                .HasComment("Número de municipio donde reside el conyuge")
                .HasColumnName("Conyuge_Municipio_Numero");
            entity.Property(e => e.ConyugeNacionalidadNumero)
                .HasComment("Código de nacionalidad del conyuge")
                .HasColumnName("Conyuge_Nacionalidad_Numero");
            entity.Property(e => e.ConyugeNombres)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre del conyuge")
                .HasColumnName("Conyuge_Nombres");
            entity.Property(e => e.ConyugeNss)
                .HasComment("Número de seguridad social del conyuge")
                .HasColumnName("Conyuge_NSS");
            entity.Property(e => e.ConyugePrimerApeliido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Primer apllido del conyuge")
                .HasColumnName("Conyuge_Primer_Apeliido");
            entity.Property(e => e.ConyugeSectorReside)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Sector de residencia del conyuge")
                .HasColumnName("Conyuge_Sector_Reside");
            entity.Property(e => e.ConyugeSegundoApeliido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Segundo apellido del conyuge")
                .HasColumnName("Conyuge_Segundo_Apeliido");
            entity.Property(e => e.ConyugeTelefono1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Primer telefono del conyuge")
                .HasColumnName("Conyuge_Telefono_1");
            entity.Property(e => e.ConyugeTelefono2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Segundo telefono del conyuge")
                .HasColumnName("Conyuge_Telefono_2");
            entity.Property(e => e.ConyugeTelefono3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Tercer telefono del conyuge")
                .HasColumnName("Conyuge_Telefono_3");
            entity.Property(e => e.EmpresaDireccion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Direccion de ubicacion de la empresa")
                .HasColumnName("Empresa_Direccion");
            entity.Property(e => e.EmpresaMunicipioNumero)
                .HasComment("Municipio de ubicacion de la empresa")
                .HasColumnName("Empresa_Municipio_Numero");
            entity.Property(e => e.EmpresaNombre)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasComment("Nombre de la empresa donde laboro el pensionado")
                .HasColumnName("Empresa_Nombre");
            entity.Property(e => e.EmpresaSectorReside)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Sector de ubicacion de la empresa")
                .HasColumnName("Empresa_Sector_Reside");
            entity.Property(e => e.EstadoCivilCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("S=Soltero, C=Casado, U=Union libre")
                .HasColumnName("Estado_Civil_Codigo");
            entity.Property(e => e.FormularioNumero)
                .HasComment("Numero de reclamacion del formulario asignado por la SISALRIL")
                .HasColumnName("Formulario_Numero");
            entity.Property(e => e.MotivoBajaCodigo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasComment("Código del motivo de la baja")
                .HasColumnName("Motivo_Baja_Codigo");
            entity.Property(e => e.MunicipioNumero)
                .HasComment("Código de municipio donde reside el pensionado")
                .HasColumnName("Municipio_Numero");
            entity.Property(e => e.NacionalidadNumero)
                .HasComment("Código de nacionalidad del pensionado")
                .HasColumnName("Nacionalidad_Numero");
            entity.Property(e => e.NovedadDetalleTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("A= Afiliacion, B= Baja")
                .HasColumnName("Novedad_Detalle_Tipo_Codigo");
            entity.Property(e => e.PensionMotivoCodigo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("T=Tiempo en el puesto, E= Emfermedad S= Especial, O Otros")
                .HasColumnName("Pension_Motivo_Codigo");
            entity.Property(e => e.PensionadoCasaNumero)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasComment("Número de residencia del pensionado")
                .HasColumnName("Pensionado_Casa_Numero");
            entity.Property(e => e.PensionadoDireccion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Direccion de la residencia del pensionado")
                .HasColumnName("Pensionado_Direccion");
            entity.Property(e => e.PensionadoDocumentoNo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasComment("Cédula o Pasaporte del pensionado")
                .HasColumnName("Pensionado_Documento_NO");
            entity.Property(e => e.PensionadoDocumentoTipo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Tipo de documento del pensionado (Cédula o Pasaporte)")
                .HasColumnName("Pensionado_Documento_Tipo");
            entity.Property(e => e.PensionadoEmail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Correo electronico del pensionado")
                .HasColumnName("Pensionado_EMAIL");
            entity.Property(e => e.PensionadoFechaNacimiento)
                .HasComment("Fecha de nacimiento del pensionado (AAAAMMDD)")
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Fecha_Nacimiento");
            entity.Property(e => e.PensionadoHijo1FechaNacimiento)
                .HasComment("Fecha de nacimiento del primer hijo menor en formato (AAAAMMDD)")
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Hijo_1_Fecha_Nacimiento");
            entity.Property(e => e.PensionadoHijo2FechaNacimiento)
                .HasComment("Fecha de nacimiento del Segundo hijo menor en formato (AAAAMMDD)")
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Hijo_2_Fecha_Nacimiento");
            entity.Property(e => e.PensionadoHijo3FechaNacimiento)
                .HasComment("Fecha de nacimiento del Tercer hijo menor en formato (AAAAMMDD)")
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Hijo_3_Fecha_Nacimiento");
            entity.Property(e => e.PensionadoHijo4FechaNacimiento)
                .HasComment("Fecha de nacimiento del cuarto hijo menor en formato (AAAAMMDD)")
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Hijo_4_Fecha_Nacimiento");
            entity.Property(e => e.PensionadoHijo5FechaNacimiento)
                .HasComment("Fecha de nacimiento del quinto hijo menor en formato (AAAAMMDD)")
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Hijo_5_Fecha_Nacimiento");
            entity.Property(e => e.PensionadoHijosMenores)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("S=Si, N=No")
                .HasColumnName("Pensionado_Hijos_Menores");
            entity.Property(e => e.PensionadoInspcritoArs)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasComment("Si el pensionado esta inscrito en una ARS")
                .HasColumnName("Pensionado_Inspcrito_ARS");
            entity.Property(e => e.PensionadoNombres)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Nombre del pensionado")
                .HasColumnName("Pensionado_Nombres");
            entity.Property(e => e.PensionadoNumero)
                .HasComment("Codigo del pensionado")
                .HasColumnName("Pensionado_Numero");
            entity.Property(e => e.PensionadoPrimerApeliido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Primer apellido del pensionado")
                .HasColumnName("Pensionado_Primer_Apeliido");
            entity.Property(e => e.PensionadoSectorReside)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasComment("Sector donde reside el pensionado")
                .HasColumnName("Pensionado_Sector_Reside");
            entity.Property(e => e.PensionadoSegundoApeliido)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasComment("Segundo apellido del pensionado")
                .HasColumnName("Pensionado_Segundo_Apeliido");
            entity.Property(e => e.PensionadoSexo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("M=Masculino, F= Femenino")
                .HasColumnName("Pensionado_Sexo");
            entity.Property(e => e.PensionadoTelefono1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Primer número de telefono del pensionado")
                .HasColumnName("Pensionado_Telefono_1");
            entity.Property(e => e.PensionadoTelefono2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Segundor número de telefono del pensionado")
                .HasColumnName("Pensionado_Telefono_2");
            entity.Property(e => e.PensionadoTelefono3)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasComment("Tercer número de telefono del pensionado")
                .HasColumnName("Pensionado_Telefono_3");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Fecha de registro")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.StatusCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("PE= Pendiente de recibir documentacion electronica, OK= Proceso completado")
                .HasColumnName("Status_Codigo");

            entity.HasOne(d => d.MotivoBajaCodigoNavigation).WithMany(p => p.TssPensionadosNovedadesDetallesTrans)
                .HasForeignKey(d => d.MotivoBajaCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSS_Pensionados_Novedades_Detalles_Trans_TSS_Pensionados_Motivo_Baja_Cata");

            entity.HasOne(d => d.NovedadDetalleTipoCodigoNavigation).WithMany(p => p.TssPensionadosNovedadesDetallesTrans)
                .HasForeignKey(d => d.NovedadDetalleTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSS_Pensionados_Novedades_Detalles_Trans_TSS_Pensionados_Novedades_Detalles_Tipo_Cata");

            entity.HasOne(d => d.NovedadNumeroNavigation).WithMany(p => p.TssPensionadosNovedadesDetallesTrans)
                .HasForeignKey(d => d.NovedadNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSS_Pensionados_Novedades_Detalles_Trans_TSS_Pensionados_Novedades_Trans");

            entity.HasOne(d => d.PensionadoNumeroNavigation).WithMany(p => p.TssPensionadosNovedadesDetallesTrans)
                .HasForeignKey(d => d.PensionadoNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSS_Pensionados_Novedades_Detalles_Trans_TSS_Pensionados_Master");

            entity.HasOne(d => d.StatusCodigoNavigation).WithMany(p => p.TssPensionadosNovedadesDetallesTrans)
                .HasForeignKey(d => d.StatusCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSS_Pensionados_Novedades_Detalles_Trans_TSS_Pensionados_Status_Cata");
        });

        modelBuilder.Entity<TssPensionadosNovedadesTipoCatum>(entity =>
        {
            entity.HasKey(e => e.NovedadTipoCodigo);

            entity.ToTable("TSS_Pensionados_Novedades_Tipo_Cata");

            entity.Property(e => e.NovedadTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Código del tipo de novedad")
                .HasColumnName("Novedad_Tipo_Codigo");
            entity.Property(e => e.NovedadTipoDescripcion)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasComment("Descripcion del tipo de novedad")
                .HasColumnName("Novedad_Tipo_Descripcion");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Estado del registro A= Activo, I= Inactivo")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("fecha del registro")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Usuario del registro")
                .HasColumnName("Registro_Usuario");
        });

        modelBuilder.Entity<TssPensionadosNovedadesTran>(entity =>
        {
            entity.HasKey(e => e.NovedadNumero);

            entity.ToTable("TSS_Pensionados_Novedades_Trans");

            entity.Property(e => e.NovedadNumero)
                .ValueGeneratedNever()
                .HasComment("ID de Novedad")
                .HasColumnName("Novedad_Numero");
            entity.Property(e => e.ArsNumero)
                .HasComment("Codigo de la ARS que reporto la novedad")
                .HasColumnName("Ars_Numero");
            entity.Property(e => e.NovedadFechaCarga)
                .HasComment("Fecha en que se cargo el movimiento")
                .HasColumnType("datetime")
                .HasColumnName("Novedad_Fecha_Carga");
            entity.Property(e => e.NovedadFechaTermino)
                .HasComment("Fecha en la que termino de procesar el movimiento")
                .HasColumnType("datetime")
                .HasColumnName("Novedad_Fecha_Termino");
            entity.Property(e => e.NovedadRecepcionNumero)
                .HasComment("ID Recepcion ")
                .HasColumnName("Novedad_Recepcion_Numero");
            entity.Property(e => e.NovedadTipoCodigo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("A= Carga por la ARS, S= Cargada por la SEH, T= Dado de baja pot TSS")
                .HasColumnName("Novedad_Tipo_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("A= Activo, I Inactivo")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Fecha de registro")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Usuario del registro")
                .HasColumnName("Registro_Usuario");

            entity.HasOne(d => d.NovedadTipoCodigoNavigation).WithMany(p => p.TssPensionadosNovedadesTrans)
                .HasForeignKey(d => d.NovedadTipoCodigo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSS_Pensionados_Novedades_Trans_TSS_Pensionados_Novedades_Tipo_Cata");
        });

        modelBuilder.Entity<TssPensionadosStatusCatum>(entity =>
        {
            entity.HasKey(e => e.StatusCodigo);

            entity.ToTable("TSS_Pensionados_Status_Cata");

            entity.Property(e => e.StatusCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Codigo del estatus del registro")
                .HasColumnName("Status_Codigo");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Estado actual del registro A= Activo, I= Inactivo")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Fecha del registro")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Usuario que registro el registro")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.StatusDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Descripcion del codigo ")
                .HasColumnName("Status_Descripcion");
            entity.Property(e => e.StatusExplicacion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasComment("Descripcion de la explicacion del estatus")
                .HasColumnName("Status_Explicacion");
        });

        modelBuilder.Entity<TssPensionadosVistum>(entity =>
        {
            entity.HasKey(e => e.PensionadoNumero);

            entity.ToTable("TSS_Pensionados_Vista");

            entity.HasIndex(e => e.PensionadoDocumentoNo, "IDX_TSS_Pensionados_Vista_Documento");

            entity.HasIndex(e => e.CiudadanoNss, "IDX_TSS_Pensionados_Vista_NSS");

            entity.HasIndex(e => e.PensionadoNombre, "IDX_TSS_Pensionados_Vista_Nombre");

            entity.HasIndex(e => e.PensionadoTelefono, "IDX_TSS_Pensionados_Vista_Telefono");

            entity.Property(e => e.PensionadoNumero)
                .ValueGeneratedNever()
                .HasColumnName("Pensionado_Numero");
            entity.Property(e => e.ArsNombre)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("ARS_Nombre");
            entity.Property(e => e.ArsNumero).HasColumnName("ARS_Numero");
            entity.Property(e => e.CiudadanoNss).HasColumnName("Ciudadano_NSS");
            entity.Property(e => e.PensionadoDireccion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Pensionado_Direccion");
            entity.Property(e => e.PensionadoDocumentoNo)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("Pensionado_Documento_NO");
            entity.Property(e => e.PensionadoFechaAfiliacion)
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Fecha_Afiliacion");
            entity.Property(e => e.PensionadoFechaBajaSeh)
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Fecha_Baja_SEH");
            entity.Property(e => e.PensionadoFechaDesafiliacion)
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Fecha_Desafiliacion");
            entity.Property(e => e.PensionadoFechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Fecha_Nacimiento");
            entity.Property(e => e.PensionadoFechaRegistroTss)
                .HasColumnType("datetime")
                .HasColumnName("Pensionado_Fecha_Registro_TSS");
            entity.Property(e => e.PensionadoMontoPension)
                .HasColumnType("decimal(8, 2)")
                .HasColumnName("Pensionado_Monto_Pension");
            entity.Property(e => e.PensionadoNombre)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Pensionado_Nombre");
            entity.Property(e => e.PensionadoTelefono)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Pensionado_Telefono");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.StatusCodigo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Status_Codigo");
            entity.Property(e => e.StatusDescripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Status_Descripcion");
        });

        modelBuilder.Entity<TssSangreTipoCatum>(entity =>
        {
            entity.HasKey(e => e.SangreTipoNumero);

            entity.ToTable("TSS_Sangre_Tipo_Cata", tb => tb.HasComment("Es un catálogo con los detalles de los tipos de sangres,  según codificación de la JCE, su fuente de datos son las vista que nos publica la TSS."));

            entity.Property(e => e.SangreTipoNumero)
                .HasComment("Es el código único que representa el tipo de sangre de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Sangre_Tipo_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SangreTipoDescripcion)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("Es la descripción del tipo de sangre de la persona  registrada en el padrón de ciudadanos de la TSS.")
                .HasColumnName("Sangre_Tipo_Descripcion");
        });

        modelBuilder.Entity<TssSectoresEconomicosCatum>(entity =>
        {
            entity.HasKey(e => e.SectorEconomicoNumero);

            entity.ToTable("TSS_Sectores_Economicos_Cata", tb => tb.HasComment("Es un catálogo con los sectores económicos de los empleadores, su fuente de datos la vista de publicadas por TSS."));

            entity.Property(e => e.SectorEconomicoNumero)
                .HasComment("Número único del sector económico según clasificación de la TSS para los empleadores (Gobierno, Salud, ONG, Zona Franca, etc.).")
                .HasColumnName("Sector_Economico_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SectorEconomicoDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción del sector económico según clasificación de la TSS para los empleadores (Gobierno, Salud, ONG, Zona Franca, etc.).")
                .HasColumnName("Sector_Economico_Descripcion");
        });

        modelBuilder.Entity<TssSectoresSalarialesCatum>(entity =>
        {
            entity.HasKey(e => e.SectorSalarialNumero);

            entity.ToTable("TSS_Sectores_Salariales_Cata", tb => tb.HasComment("Es un catálogo con los sectores salariales que establecen el salario mínimo para los empleadores, su fuente de datos la vista de publicadas por TSS."));

            entity.Property(e => e.SectorSalarialNumero)
                .HasComment("Número único que identifica un sector salarial para los empleadores registrados en la TSS.")
                .HasColumnName("Sector_Salarial_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SectorSalarialDescripcion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasComment("Descripción del sector salarial para los empleadores registrados en la TSS, para establecer el salario mínimo sectorial.")
                .HasColumnName("Sector_Salarial_Descripcion");
        });

        modelBuilder.Entity<TssSectoresSalarialesEscalaTran>(entity =>
        {
            entity.HasKey(e => new { e.SectorSalarialNumero, e.SectorSalarialEscalaFechaInicio });

            entity.ToTable("TSS_Sectores_Salariales_Escala_Trans", tb => tb.HasComment("Es una tabla transaccional con los detalles de los salario mínimos por sectores salariales según  periodo de vigencia, su fuente de datos las vistas  publicadas por TSS."));

            entity.Property(e => e.SectorSalarialNumero)
                .HasComment("Número único que identifica un sector salarial para los empleadores registrados en la TSS.")
                .HasColumnName("Sector_Salarial_Numero");
            entity.Property(e => e.SectorSalarialEscalaFechaInicio)
                .HasComment("Es la fecha de inicio de vigencia de un salario mínimo de un sector salarial para un periodo de aplicación en el sistema dominicano de seguridad social SDSS.")
                .HasColumnName("Sector_Salarial_Escala_Fecha_Inicio");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.SectorSalarialEscalaFechaFin)
                .HasComment("Es la fecha de finalización de la vigencia de un salario mínimo de un sector salarial para un periodo de aplicación en el sistema dominicano de seguridad social SDSS.")
                .HasColumnName("Sector_Salarial_Escala_Fecha_Fin");
            entity.Property(e => e.SectorSalarialEscalaSalarioMinimo)
                .HasComment("Es el salario mínimo de un sector salarial para un periodo de aplicación en el sistema dominicano de seguridad social SDSS.")
                .HasColumnType("decimal(13, 2)")
                .HasColumnName("Sector_Salarial_Escala_Salario_Minimo");

            entity.HasOne(d => d.SectorSalarialNumeroNavigation).WithMany(p => p.TssSectoresSalarialesEscalaTrans)
                .HasForeignKey(d => d.SectorSalarialNumero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSS_Sectores_Salariales_Escala_Trans_TSS_Sectores_Salariales_Cata");
        });

        modelBuilder.Entity<TssTrabajadoresActivosHistorico>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TSS_Trabajadores_Activos_Historico");

            entity.Property(e => e.EmpleadorId).HasColumnName("Empleador_ID");
            entity.Property(e => e.PeriodoFactura).HasColumnName("Periodo_Factura");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.TrabajadorFechaActualizacionTss).HasColumnName("Trabajador_Fecha_Actualizacion_TSS");
            entity.Property(e => e.TrabajadorFechaNacimiento).HasColumnName("Trabajador_Fecha_Nacimiento");
            entity.Property(e => e.TrabajadorFechaRegistroTss).HasColumnName("Trabajador_Fecha_Registro_TSS");
            entity.Property(e => e.TrabajadorId).HasColumnName("Trabajador_ID");
            entity.Property(e => e.TrabajadorSalarioSs)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Trabajador_Salario_SS");
            entity.Property(e => e.TrabajadorSexo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Trabajador_Sexo");
        });

        modelBuilder.Entity<TssTrabajadoresHistorico>(entity =>
        {
            entity.HasKey(e => new { e.PeriodoFactura, e.EmpleadorRegistroPatronal, e.TrabajadorNss });

            entity.ToTable("TSS_Trabajadores_Historico");

            entity.Property(e => e.PeriodoFactura).HasColumnName("Periodo_Factura");
            entity.Property(e => e.EmpleadorRegistroPatronal).HasColumnName("Empleador_Registro_Patronal");
            entity.Property(e => e.TrabajadorNss).HasColumnName("Trabajador_NSS");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TrabajadorEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Trabajador_Estatus");
            entity.Property(e => e.TrabajadorFechaCtualizacionTss)
                .HasColumnType("datetime")
                .HasColumnName("Trabajador_Fecha_ctualizacion_TSS");
            entity.Property(e => e.TrabajadorFechaRegistroTss)
                .HasColumnType("datetime")
                .HasColumnName("Trabajador_Fecha_Registro_TSS");
        });

        modelBuilder.Entity<TssTrabajadoresTotalVistum>(entity =>
        {
            entity.HasKey(e => new { e.EmpleadorRegistroPatronal, e.TrabajadorNss }).HasName("PK_Tss_Trabajadores_Total_Vista");

            entity.ToTable("TSS_Trabajadores_Total_Vista");

            entity.Property(e => e.EmpleadorRegistroPatronal).HasColumnName("Empleador_Registro_Patronal");
            entity.Property(e => e.TrabajadorNss).HasColumnName("Trabajador_Nss");
            entity.Property(e => e.TrabajadorEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Trabajador_Estatus");
            entity.Property(e => e.TrabajadorFechaActualizacionTss)
                .HasColumnType("datetime")
                .HasColumnName("Trabajador_Fecha_Actualizacion_TSS");
            entity.Property(e => e.TrabajadorFechaRegistroTss)
                .HasColumnType("datetime")
                .HasColumnName("Trabajador_Fecha_Registro_TSS");
        });

        modelBuilder.Entity<TssTrabajadoresTran>(entity =>
        {
            entity.HasKey(e => new { e.EmpleadorRegistroPatronal, e.TrabajadorNss });

            entity.ToTable("TSS_Trabajadores_Trans", tb => tb.HasComment("Es una tabla transaccional donde se registran los datos de los trabajadores de los empleadores empadronados en el  SDSS por la TSS, su fuente de datos la vista de publicadas por TSS diariamente."));

            entity.Property(e => e.EmpleadorRegistroPatronal)
                .HasComment("Es el número único que le asigna la Tesorería de la Seguridad Social a cada uno de los empleadores que se registran en dicha institución.    ")
                .HasColumnName("Empleador_Registro_Patronal");
            entity.Property(e => e.TrabajadorNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Trabajador_NSS");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TrabajadorEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("Indica si el trabajador esta de Alta o de Baja en la TSS para un empleador específico.")
                .HasColumnName("Trabajador_Estatus");
            entity.Property(e => e.TrabajadorFechaActualizacionTss)
                .HasComment("Fecha ultima en que la TSS actualizo el registro.")
                .HasColumnType("datetime")
                .HasColumnName("Trabajador_Fecha_Actualizacion_TSS");
            entity.Property(e => e.TrabajadorFechaRegistroTss)
                .HasComment("Fecha en que la TSS realizo el registro.")
                .HasColumnType("datetime")
                .HasColumnName("Trabajador_Fecha_Registro_TSS");

            entity.HasOne(d => d.TrabajadorNssNavigation).WithMany(p => p.TssTrabajadoresTrans)
                .HasForeignKey(d => d.TrabajadorNss)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TSS_Trabajadores_Trans_TSS_Ciudadanos_Master");
        });

        modelBuilder.Entity<TssTrabajadoresTrans20072023>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("_TSS_Trabajadores_Trans_20072023");

            entity.Property(e => e.EmpleadorRegistroPatronal).HasColumnName("Empleador_Registro_Patronal");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasColumnType("smalldatetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.TrabajadorEstatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Trabajador_Estatus");
            entity.Property(e => e.TrabajadorFechaActualizacionTss)
                .HasColumnType("smalldatetime")
                .HasColumnName("Trabajador_Fecha_Actualizacion_TSS");
            entity.Property(e => e.TrabajadorFechaRegistroTss)
                .HasColumnType("smalldatetime")
                .HasColumnName("Trabajador_Fecha_Registro_TSS");
            entity.Property(e => e.TrabajadorNss).HasColumnName("Trabajador_NSS");
        });

        modelBuilder.Entity<TssTrabajadoresVistum>(entity =>
        {
            entity.HasKey(e => new { e.EmpleadorRegistroPatronal, e.TrabajadorNss });

            entity.ToTable("TSS_Trabajadores_Vista");

            entity.Property(e => e.EmpleadorRegistroPatronal)
                .HasComment("Es el número único que le asigna la Tesorería de la Seguridad Social a cada uno de los empleadores que se registran en dicha institución.    ")
                .HasColumnName("Empleador_Registro_Patronal");
            entity.Property(e => e.TrabajadorNss)
                .HasComment("Número único que identifica a una persona dentro del SDSS, sobre la cual se nos reporta o registramos un hecho o situación.")
                .HasColumnName("Trabajador_NSS");
        });

        modelBuilder.Entity<UnipagoAfiliacionWebServiceResultadosTran>(entity =>
        {
            entity.HasKey(e => e.WebServiceResultadoNumero);

            entity.ToTable("Unipago_Afiliacion_WebService_Resultados_Trans");

            entity.Property(e => e.WebServiceResultadoNumero).HasColumnName("WebService_Resultado_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .IsFixedLength()
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroIpPc)
                .HasMaxLength(18)
                .IsUnicode(false)
                .HasColumnName("Registro_IP_PC");
            entity.Property(e => e.RegistroUsuario)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.WebServiceResultadoCodigoXml)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("WebService_Resultado_Codigo_XML");
            entity.Property(e => e.WebServiceResultadoIdUnipago).HasColumnName("WebService_Resultado_ID_UNIPAGO");
            entity.Property(e => e.WebServiceResultadoParametros)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("WebService_Resultado_Parametros");
            entity.Property(e => e.WebServiceResultadoUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WebService_Resultado_Usuario");
        });

        modelBuilder.Entity<UnisigmaImpedimentosSolicitudTraspaso>(entity =>
        {
            entity.HasKey(e => e.NotificacionSecuencia);

            entity.ToTable("Unisigma_Impedimentos_Solicitud_Traspaso");

            entity.Property(e => e.NotificacionSecuencia).HasColumnName("Notificacion_Secuencia");
            entity.Property(e => e.Cedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasColumnName("cedula");
            entity.Property(e => e.CodigoAccionEventoTraspaso).HasColumnName("codigoAccionEventoTraspaso");
            entity.Property(e => e.CodigoImpedimentoTraspaso).HasColumnName("codigoImpedimentoTraspaso");
            entity.Property(e => e.CodigosImpedimentoTraspaso)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("codigosImpedimentoTraspaso");
            entity.Property(e => e.Estado)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("estado");
            entity.Property(e => e.FechaNacimiento)
                .HasColumnType("datetime")
                .HasColumnName("fechaNacimiento");
            entity.Property(e => e.FechaRecepcion)
                .HasColumnType("datetime")
                .HasColumnName("fechaRecepcion");
            entity.Property(e => e.Genero)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("genero");
            entity.Property(e => e.MotivoEstado)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("motivoEstado");
            entity.Property(e => e.NotificacionImpedimentoTraspasoId).HasColumnName("notificacionImpedimentoTraspasoId");
            entity.Property(e => e.Nss).HasColumnName("nss");
            entity.Property(e => e.NumeroSolicitudTraspaso).HasColumnName("numeroSolicitudTraspaso");
            entity.Property(e => e.ParentescoId).HasColumnName("parentescoId");
            entity.Property(e => e.TipoAfiliado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipoAfiliado");
            entity.Property(e => e.TipoFormularioTraspaso)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipoFormularioTraspaso");
            entity.Property(e => e.TipoParticipacion).HasColumnName("tipoParticipacion");
            entity.Property(e => e.TipoTraspasoId).HasColumnName("tipoTraspasoId");
        });

        modelBuilder.Entity<UsuariosBitacoraRecepcionTran>(entity =>
        {
            entity.HasKey(e => e.BitacoraSecuencia);

            entity.ToTable("Usuarios_Bitacora_Recepcion_Trans");

            entity.Property(e => e.BitacoraSecuencia).HasColumnName("Bitacora_Secuencia");
            entity.Property(e => e.BitacoraHora)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Bitacora_Hora");
            entity.Property(e => e.ConsultaNumero).HasColumnName("Consulta_Numero");
            entity.Property(e => e.RegistroEstado)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('A')")
                .HasComment("Representa el estado en que se encuentra un registro en una tabla (A=Activo, I=Inactivo).")
                .HasColumnName("Registro_Estado");
            entity.Property(e => e.RegistroFecha)
                .HasDefaultValueSql("(getdate())")
                .HasComment("Indica la fecha de cuando se insertó o se actualizó un registro en una tabla.")
                .HasColumnType("datetime")
                .HasColumnName("Registro_Fecha");
            entity.Property(e => e.RegistroUsuario)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasDefaultValueSql("(suser_sname())")
                .HasComment("Indica el usuario que ejecutó la operación de insertar o actualizar un registro en una tabla.")
                .HasColumnName("Registro_Usuario");
            entity.Property(e => e.UsuarioCedula)
                .HasMaxLength(11)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("Usuario_Cedula");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
